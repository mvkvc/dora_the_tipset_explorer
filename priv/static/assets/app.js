(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id2 = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id2;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id2) {
              clearTimeout(id2);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style2 = canvas.style;
          style2.position = "fixed";
          style2.top = style2.left = style2.right = style2.margin = style2.padding = 0;
          style2.zIndex = 100001;
          style2.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key2 in opts)
              if (options.hasOwnProperty(key2))
                options[key2] = opts[key2];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop() {
                  progressTimerId = window2.requestAnimationFrame(loop);
                  topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name2, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name2;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global2 = globalSelf || phxWindow || global2;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind = eventBindings[i];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global2.XDomainRequest) {
        let req = new global2.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global2.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key2 in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key2)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key2}]` : key2;
        let paramVal = obj[key2];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data2 };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data2 };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data2 = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data2 };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global2.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data2) {
      this.logger(kind, msg, data2);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());
    }
    off(refs) {
      for (let key2 in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key2] = this.stateChangeCallbacks[key2].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data2) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data2;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data2, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data2, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel = this.channels[i];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_DISCONNECTED_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      clearTimeout(this.chunkTimer);
      this.uploadChannel.leave();
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      });
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage, namespace, subkey) {
      return localStorage.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage, namespace, subkey);
      let key2 = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage.setItem(key2, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage, namespace, subkey) {
      return JSON.parse(localStorage.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name2, value) {
      document.cookie = `${name2}=${value}`;
    },
    getCookie(name2) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name2}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id2) {
      return document.getElementById(id2) || logError(`no id found for ${id2}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      return wantsNewTab || e.target.getAttribute("target") === "_blank";
    },
    isUnloadableFormSubmit(e) {
      return !e.defaultPrevented && !this.wantsNewTab(e);
    },
    isNewPageHref(href, currentLocation) {
      let url;
      try {
        url = new URL(href);
      } catch (e) {
        try {
          url = new URL(href, currentLocation);
        } catch (e2) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return true;
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key2) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key2];
    },
    deletePrivate(el, key2) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key2];
    },
    putPrivate(el, key2, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key2] = value;
    },
    updatePrivate(el, key2, defaultVal, updateFunc) {
      let existing = this.private(el, key2);
      if (existing === void 0) {
        this.putPrivate(el, key2, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key2, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name2]) => {
                let input = form.querySelector(`[name="${name2}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key2, currentCycle) {
      let [cycle, trigger] = this.private(el, key2);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key2);
        trigger();
      }
    },
    once(el, key2) {
      if (this.private(el, key2) === true) {
        return false;
      }
      this.putPrivate(el, key2, true);
      return true;
    },
    incCycle(el, key2, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key2) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key2, [currentCycle, trigger]);
      return currentCycle;
    },
    discardError(container, el, phxFeedbackFor) {
      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
      let input = field && container.querySelector(`[id="${field}"], [name="${field}"], [name="${field}[]"]`);
      if (!input) {
        return;
      }
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
        el.classList.add(PHX_NO_FEEDBACK_CLASS);
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name2, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name2 === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name2, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name2 = sourceAttrs[i].name;
        if (exclude.indexOf(name2) < 0) {
          target.setAttribute(name2, source.getAttribute(name2));
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name2 = targetAttrs[i].name;
        if (isIgnored) {
          if (name2.startsWith("data-") && !source.hasAttribute(name2)) {
            target.removeAttribute(name2);
          }
        } else {
          if (!source.hasAttribute(name2)) {
            target.removeAttribute(name2);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name2) => !retainedAttrs.has(name2.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name2, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name2 === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name2) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name2);
      });
    },
    putSticky(el, name2, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name2 === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name2, op, stashedResult];
        } else {
          ops.push([name2, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name2, op, _stashed]) => this.putSticky(el, name2, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name: name2, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name2] = acc[name2] || { callback, entries: [] };
        acc[name2].entries.push(entry);
        return acc;
      }, {});
      for (let name2 in groupedEntries) {
        let { callback, entries } = groupedEntries[name2];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name2) => instance instanceof name2);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.tabIndex === 0 && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id2) => !idsBefore.has(id2));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name2, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name2) : doc.createElementNS(namespaceURI, name2);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name2) {
    if (fromEl[name2] !== toEl[name2]) {
      fromEl[name2] = toEl[name2];
      if (fromEl[name2]) {
        fromEl.setAttribute(name2, "");
      } else {
        fromEl.removeAttribute(name2);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key2) {
        keyedRemovalList.push(key2);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key2 = void 0;
            if (skipKeyedNodes && (key2 = getNodeKey(curChild))) {
              addKeyedRemoval(key2);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key2 = getNodeKey(curChild);
            if (key2) {
              fromNodesLookup[key2] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key2 = getNodeKey(curChild);
          if (key2) {
            var unmatchedFromEl = fromNodesLookup[key2];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id2, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id2;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([inserts, deleteIds]) => {
          this.streamInserts = Object.assign(this.streamInserts, inserts);
          deleteIds.forEach((id2) => {
            let child = container.querySelector(`[id="${id2}"]`);
            if (child) {
              if (!this.maybePendingRemove(child)) {
                child.remove();
                this.onNodeDiscarded(child);
              }
            }
          });
        });
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let streamAt = child.id ? this.streamInserts[child.id] : void 0;
            if (streamAt === void 0) {
              return parent.appendChild(child);
            }
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            dom_default.discardError(targetContainer, el, phxFeedbackFor);
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update5) => update5.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        externalFormTriggered.submit();
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    maybeReOrderStream(el) {
      let streamAt = el.id ? this.streamInserts[el.id] : void 0;
      if (streamAt === void 0) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key2 in source) {
        let val = source[key2];
        let targetVal = target[key2];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key2] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key2 in merged) {
        let val = source[key2];
        let targetVal = target[key2];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key2] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
      return [str, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output);
        output.buffer += statics[i];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_inserts, deleteIds] = stream || [{}, []];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0)) {
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      let [html, streams] = this.recursiveToString(component, components, onlyCids);
      template.innerHTML = html;
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return [this.createSpan("", cid).outerHTML, streams];
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return [template.innerHTML, streams];
      } else {
        return [template.innerHTML, streams];
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key2 in this.__callbacks) {
        this[key2] = this.__callbacks[key2];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name2, files) {
      return this.__view.dispatchUploads(name2, files);
    }
    uploadTo(phxTarget, name2, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name2, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, {}];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_exec(eventType, phxEvent, view, sourceEl, el, [attr, to]) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr);
        if (!encodedJS) {
          throw new Error(`expected ${attr} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data: data2, target, page_loading, loading, value, dispatcher } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target, callback } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data2, pushOpts);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names: names2, transition, time }) {
      this.addOrRemoveClasses(el, names2, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names: names2, transition, time }) {
      this.addOrRemoveClasses(el, [], names2, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transition_run, transition_start, transition_end] = transition || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name2) => prevAdds.indexOf(name2) < 0 && !el.classList.contains(name2));
        let keepRemoves = removes.filter((name2) => prevRemoves.indexOf(name2) < 0 && el.classList.contains(name2));
        let newAdds = prevAdds.filter((name2) => removes.indexOf(name2) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name2) => adds.indexOf(name2) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name2) => el.classList.contains(name2));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, metadata, onlyNames = []) => {
    let _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let formData = new FormData(form);
    if (submitter && submitter.hasAttribute("name") && submitter.form && submitter.form === form) {
      formData.append(submitter.name, submitter.value);
    }
    let toRemove = [];
    formData.forEach((val, key2, _index) => {
      if (val instanceof File) {
        toRemove.push(key2);
      }
    });
    toRemove.forEach((key2) => formData.delete(key2));
    let params = new URLSearchParams();
    for (let [key2, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key2) >= 0) {
        params.append(key2, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id2 in this.viewHooks) {
          this.destroyHook(this.viewHooks[id2]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id2 in this.viewHooks) {
          this.viewHooks[id2].__disconnected();
        }
        this.setContainerClasses(PHX_DISCONNECTED_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id2 in this.viewHooks) {
        this.viewHooks[id2].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id2) {
      return this.root.children[this.id][id2];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id2) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id2) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id2 in children) {
        callback(this.getChildById(id2));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data2) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data2));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        return this.onRedirect({ to: this.href });
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        this.displayError();
      }
    }
    displayError() {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            if (ref !== null) {
              this.undoRefs(ref);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name2 = el.attributes[i].name;
        if (name2.startsWith(prefix)) {
          meta[name2.replace(prefix, "")] = el.getAttribute(name2);
        }
      }
      if (el.value !== void 0) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key2 in value) {
          meta[key2] = value[key2];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      });
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, { _target: opts._target });
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, submitter, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let formData = serializeForm(formEl, { submitter });
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else {
        let formData = serializeForm(formEl, { submitter });
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name2, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name2);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name2}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name2}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let input = Array.from(form.elements).find((el) => {
          return dom_default.isFormInput(el) && el.type !== "hidden" && !el.hasAttribute(this.binding("change"));
        });
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, null, null];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name2, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name2);
      let result = func();
      console.timeEnd(name2);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data2) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data2);
        } else {
          setTimeout(() => cb(data2), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name2) {
      return name2 && name2.startsWith("Phoenix.") ? hooks_default[name2.split(".")[1]] : this.hooks[name2];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(callback);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        if (document.body.contains(el)) {
          this.execJS(el, el.getAttribute(removeAttr), "remove");
        }
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id2) {
      return this.roots[id2];
    }
    destroyAllViews() {
      for (let id2 in this.roots) {
        this.roots[id2].destroy();
        delete this.roots[id2];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1001) {
          return this.unload();
        }
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data2 = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("click", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
          if (!capture && href !== null && !dom_default.wantsNewTab(e) && dom_default.isNewPageHref(href, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id: id2, root, scroll } = event.state || {};
        let href = window.location.href;
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id2 === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, () => {
          browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
          this.registerNewLocation(window.location);
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer2) => {
        clearTimeout(timer2);
        this.transitions.delete(timer2);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer2 = setTimeout(() => {
        this.transitions.delete(timer2);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer2);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // vendor/ethers.js
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn, basedir, module) {
    return module = { path: basedir, exports: {}, require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    } }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var bn = createCommonjsModule(function(module) {
    (function(module2, exports) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base2, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = null.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN2.prototype._init = function init3(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [number & 67108863, number / 67108864 & 67108863];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [number & 67108863, number / 67108864 & 67108863, 1];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index2) {
        var c = string.charCodeAt(index2);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index2) {
        var r2 = parseHex4Bits(string, index2);
        if (index2 - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index2 - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN2.prototype.clone = function clone2() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN2.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      BN2.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN2.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t = new Array(N2);
        var l = BN2.prototype._countBits(N2) - 1;
        for (var i = 0; i < N2; i++) {
          t[i] = this.revBin(i, l, N2);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N2) {
        if (x === 0 || x === N2 - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i = 0; i < N2; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N2; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s2; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s2];
              var io = itws[p + j + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s2] = re - ro;
              itws[p + j + s2] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N2 = Math.max(m, n) | 1;
        var odd = N2 & 1;
        var i = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1)
          return;
        for (var i = 0; i < N2 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N2 - i - 1];
          rws[N2 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N2 - i - 1];
          iws[N2 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i = 0; i < N2 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N2) * 8192 + Math.round(ws[2 * i] / N2) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N2) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N2; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i = 0; i < N2; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N2 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N2);
        var _ = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x.words, x.length, rws, N2);
        this.convert13b(y.words, y.length, nrws, N2);
        this.transform(rws, _, rwst, iwst, N2, rbt);
        this.transform(nrws, _, nrwst, niwst, N2, rbt);
        for (var i = 0; i < N2; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _, N2, rbt);
        this.conjugate(rmws, _, N2);
        this.normalize13b(rmws, N2);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN2.prototype.mul = function mul3(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s2] = this.words[i];
          }
          for (i = 0; i < s2; i++) {
            this.words[i] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s2; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) {
        } else if (this.length > s2) {
          this.length -= s2;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2)
          return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return { div: q || null, mod: a };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return { div: new BN2(0), mod: new BN2(0) };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return { div, mod };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return { div, mod: res.mod };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return { div: res.div, mod };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return { div: new BN2(0), mod: this };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return { div: this.divn(num.words[0]), mod: null };
          }
          if (mode === "mod") {
            return { div: null, mod: new BN2(this.modn(num.words[0])) };
          }
          return { div: this.divn(num.words[0]), mod: new BN2(this.modn(num.words[0])) };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN2.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return { a: C, b: D, gcd: y.iushln(g) };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i = s2; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = { k256: null, p224: null, p192: null, p25519: null };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s2;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  });
  var version = "logger/5.1.0";
  var _permanentCensorErrors = false;
  var _censorErrors = false;
  var LogLevels = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
  var _logLevel = LogLevels["default"];
  var _globalLogger = null;
  function _checkNormalize() {
    try {
      const missing = [];
      ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
        try {
          if ("test".normalize(form) !== "test") {
            throw new Error("bad normalize");
          }
        } catch (error) {
          missing.push(form);
        }
      });
      if (missing.length) {
        throw new Error("missing " + missing.join(", "));
      }
      if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
        throw new Error("broken implementation");
      }
    } catch (error) {
      return error.message;
    }
    return null;
  }
  var _normalizeError = _checkNormalize();
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2["DEBUG"] = "DEBUG";
    LogLevel2["INFO"] = "INFO";
    LogLevel2["WARNING"] = "WARNING";
    LogLevel2["ERROR"] = "ERROR";
    LogLevel2["OFF"] = "OFF";
  })(LogLevel || (LogLevel = {}));
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
    ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode2["TIMEOUT"] = "TIMEOUT";
    ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
    ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  })(ErrorCode || (ErrorCode = {}));
  var Logger = class {
    constructor(version2) {
      Object.defineProperty(this, "version", { enumerable: true, value: version2, writable: false });
    }
    _log(logLevel, args) {
      const level = logLevel.toLowerCase();
      if (LogLevels[level] == null) {
        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
      }
      if (_logLevel > LogLevels[level]) {
        return;
      }
      console.log.apply(console, args);
    }
    debug(...args) {
      this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
      this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
      this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code, params) {
      if (_censorErrors) {
        return this.makeError("censored error", code, {});
      }
      if (!code) {
        code = Logger.errors.UNKNOWN_ERROR;
      }
      if (!params) {
        params = {};
      }
      const messageDetails = [];
      Object.keys(params).forEach((key2) => {
        try {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2]));
        } catch (error2) {
          messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
        }
      });
      messageDetails.push(`code=${code}`);
      messageDetails.push(`version=${this.version}`);
      const reason = message;
      if (messageDetails.length) {
        message += " (" + messageDetails.join(", ") + ")";
      }
      const error = new Error(message);
      error.reason = reason;
      error.code = code;
      Object.keys(params).forEach(function(key2) {
        error[key2] = params[key2];
      });
      return error;
    }
    throwError(message, code, params) {
      throw this.makeError(message, code, params);
    }
    throwArgumentError(message, name2, value) {
      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, { argument: name2, value });
    }
    assert(condition, message, code, params) {
      if (!!condition) {
        return;
      }
      this.throwError(message, code, params);
    }
    assertArgument(condition, message, name2, value) {
      if (!!condition) {
        return;
      }
      this.throwArgumentError(message, name2, value);
    }
    checkNormalize(message) {
      if (message == null) {
        message = "platform missing String.prototype.normalize";
      }
      if (_normalizeError) {
        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, { operation: "String.prototype.normalize", form: _normalizeError });
      }
    }
    checkSafeUint53(value, message) {
      if (typeof value !== "number") {
        return;
      }
      if (message == null) {
        message = "value not safe";
      }
      if (value < 0 || value >= 9007199254740991) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "out-of-safe-range", value });
      }
      if (value % 1) {
        this.throwError(message, Logger.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "non-integer", value });
      }
    }
    checkArgumentCount(count, expectedCount, message) {
      if (message) {
        message = ": " + message;
      } else {
        message = "";
      }
      if (count < expectedCount) {
        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, { count, expectedCount });
      }
      if (count > expectedCount) {
        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, { count, expectedCount });
      }
    }
    checkNew(target, kind) {
      if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    checkAbstract(target, kind) {
      if (target === kind) {
        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
      } else if (target === Object || target == null) {
        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
      }
    }
    static globalLogger() {
      if (!_globalLogger) {
        _globalLogger = new Logger(version);
      }
      return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
      if (!censorship && permanent) {
        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
      }
      if (_permanentCensorErrors) {
        if (!censorship) {
          return;
        }
        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
      }
      _censorErrors = !!censorship;
      _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
      const level = LogLevels[logLevel.toLowerCase()];
      if (level == null) {
        Logger.globalLogger().warn("invalid log level - " + logLevel);
        return;
      }
      _logLevel = level;
    }
    static from(version2) {
      return new Logger(version2);
    }
  };
  Logger.errors = ErrorCode;
  Logger.levels = LogLevel;
  var version$1 = "bytes/5.1.0";
  var logger = new Logger(version$1);
  function isHexable(value) {
    return !!value.toHexString;
  }
  function addSlice(array) {
    if (array.slice) {
      return array;
    }
    array.slice = function() {
      const args = Array.prototype.slice.call(arguments);
      return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
  }
  function isBytesLike(value) {
    return isHexString(value) && !(value.length % 2) || isBytes(value);
  }
  function isBytes(value) {
    if (value == null) {
      return false;
    }
    if (value.constructor === Uint8Array) {
      return true;
    }
    if (typeof value === "string") {
      return false;
    }
    if (value.length == null) {
      return false;
    }
    for (let i = 0; i < value.length; i++) {
      const v = value[i];
      if (typeof v !== "number" || v < 0 || v >= 256 || v % 1) {
        return false;
      }
    }
    return true;
  }
  function arrayify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid arrayify value");
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value = parseInt(String(value / 256));
      }
      if (result.length === 0) {
        result.push(0);
      }
      return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      value = value.toHexString();
    }
    if (isHexString(value)) {
      let hex2 = value.substring(2);
      if (hex2.length % 2) {
        if (options.hexPad === "left") {
          hex2 = "0x0" + hex2.substring(2);
        } else if (options.hexPad === "right") {
          hex2 += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      const result = [];
      for (let i = 0; i < hex2.length; i += 2) {
        result.push(parseInt(hex2.substring(i, i + 2), 16));
      }
      return addSlice(new Uint8Array(result));
    }
    if (isBytes(value)) {
      return addSlice(new Uint8Array(value));
    }
    return logger.throwArgumentError("invalid arrayify value", "value", value);
  }
  function concat(items) {
    const objects = items.map((item) => arrayify(item));
    const length = objects.reduce((accum, item) => accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object) => {
      result.set(object, offset);
      return offset + object.length;
    }, 0);
    return addSlice(result);
  }
  function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) {
      return result;
    }
    let start = 0;
    while (start < result.length && result[start] === 0) {
      start++;
    }
    if (start) {
      result = result.slice(start);
    }
    return result;
  }
  function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) {
      logger.throwArgumentError("value out of range", "value", arguments[0]);
    }
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
  }
  function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (length && value.length !== 2 + 2 * length) {
      return false;
    }
    return true;
  }
  var HexCharacters = "0123456789abcdef";
  function hexlify(value, options) {
    if (!options) {
      options = {};
    }
    if (typeof value === "number") {
      logger.checkSafeUint53(value, "invalid hexlify value");
      let hex2 = "";
      while (value) {
        hex2 = HexCharacters[value & 15] + hex2;
        value = Math.floor(value / 16);
      }
      if (hex2.length) {
        if (hex2.length % 2) {
          hex2 = "0" + hex2;
        }
        return "0x" + hex2;
      }
      return "0x00";
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (isHexable(value)) {
      return value.toHexString();
    }
    if (isHexString(value)) {
      if (value.length % 2) {
        if (options.hexPad === "left") {
          value = "0x0" + value.substring(2);
        } else if (options.hexPad === "right") {
          value += "0";
        } else {
          logger.throwArgumentError("hex data is odd-length", "value", value);
        }
      }
      return value.toLowerCase();
    }
    if (isBytes(value)) {
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        let v = value[i];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    return logger.throwArgumentError("invalid hexlify value", "value", value);
  }
  function hexDataLength(data2) {
    if (typeof data2 !== "string") {
      data2 = hexlify(data2);
    } else if (!isHexString(data2) || data2.length % 2) {
      return null;
    }
    return (data2.length - 2) / 2;
  }
  function hexDataSlice(data2, offset, endOffset) {
    if (typeof data2 !== "string") {
      data2 = hexlify(data2);
    } else if (!isHexString(data2) || data2.length % 2) {
      logger.throwArgumentError("invalid hexData", "value", data2);
    }
    offset = 2 + 2 * offset;
    if (endOffset != null) {
      return "0x" + data2.substring(offset, 2 + 2 * endOffset);
    }
    return "0x" + data2.substring(offset);
  }
  function hexConcat(items) {
    let result = "0x";
    items.forEach((item) => {
      result += hexlify(item).substring(2);
    });
    return result;
  }
  function hexValue(value) {
    const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
    if (trimmed === "0x") {
      return "0x0";
    }
    return trimmed;
  }
  function hexStripZeros(value) {
    if (typeof value !== "string") {
      value = hexlify(value);
    }
    if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }
    value = value.substring(2);
    let offset = 0;
    while (offset < value.length && value[offset] === "0") {
      offset++;
    }
    return "0x" + value.substring(offset);
  }
  function hexZeroPad(value, length) {
    if (typeof value !== "string") {
      value = hexlify(value);
    } else if (!isHexString(value)) {
      logger.throwArgumentError("invalid hex string", "value", value);
    }
    if (value.length > 2 * length + 2) {
      logger.throwArgumentError("value out of range", "value", arguments[1]);
    }
    while (value.length < 2 * length + 2) {
      value = "0x0" + value.substring(2);
    }
    return value;
  }
  function splitSignature(signature2) {
    const result = { r: "0x", s: "0x", _vs: "0x", recoveryParam: 0, v: 0 };
    if (isBytesLike(signature2)) {
      const bytes = arrayify(signature2);
      if (bytes.length !== 65) {
        logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature2);
      }
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
      if (result.v < 27) {
        if (result.v === 0 || result.v === 1) {
          result.v += 27;
        } else {
          logger.throwArgumentError("signature invalid v byte", "signature", signature2);
        }
      }
      result.recoveryParam = 1 - result.v % 2;
      if (result.recoveryParam) {
        bytes[32] |= 128;
      }
      result._vs = hexlify(bytes.slice(32, 64));
    } else {
      result.r = signature2.r;
      result.s = signature2.s;
      result.v = signature2.v;
      result.recoveryParam = signature2.recoveryParam;
      result._vs = signature2._vs;
      if (result._vs != null) {
        const vs2 = zeroPad(arrayify(result._vs), 32);
        result._vs = hexlify(vs2);
        const recoveryParam = vs2[0] >= 128 ? 1 : 0;
        if (result.recoveryParam == null) {
          result.recoveryParam = recoveryParam;
        } else if (result.recoveryParam !== recoveryParam) {
          logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
        }
        vs2[0] &= 127;
        const s2 = hexlify(vs2);
        if (result.s == null) {
          result.s = s2;
        } else if (result.s !== s2) {
          logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
        }
      }
      if (result.recoveryParam == null) {
        if (result.v == null) {
          logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
        } else if (result.v === 0 || result.v === 1) {
          result.recoveryParam = result.v;
        } else {
          result.recoveryParam = 1 - result.v % 2;
        }
      } else {
        if (result.v == null) {
          result.v = 27 + result.recoveryParam;
        } else if (result.recoveryParam !== 1 - result.v % 2) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
      if (result.r == null || !isHexString(result.r)) {
        logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
      } else {
        result.r = hexZeroPad(result.r, 32);
      }
      if (result.s == null || !isHexString(result.s)) {
        logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
      } else {
        result.s = hexZeroPad(result.s, 32);
      }
      const vs = arrayify(result.s);
      if (vs[0] >= 128) {
        logger.throwArgumentError("signature s out of range", "signature", signature2);
      }
      if (result.recoveryParam) {
        vs[0] |= 128;
      }
      const _vs = hexlify(vs);
      if (result._vs) {
        if (!isHexString(result._vs)) {
          logger.throwArgumentError("signature invalid _vs", "signature", signature2);
        }
        result._vs = hexZeroPad(result._vs, 32);
      }
      if (result._vs == null) {
        result._vs = _vs;
      } else if (result._vs !== _vs) {
        logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
      }
    }
    return result;
  }
  function joinSignature(signature2) {
    signature2 = splitSignature(signature2);
    return hexlify(concat([signature2.r, signature2.s, signature2.recoveryParam ? "0x1c" : "0x1b"]));
  }
  var version$2 = "bignumber/5.1.1";
  var BN = bn.BN;
  var logger$1 = new Logger(version$2);
  var _constructorGuard = {};
  var MAX_SAFE = 9007199254740991;
  function isBigNumberish(value) {
    return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
  }
  var _warnedToStringRadix = false;
  var BigNumber = class {
    constructor(constructorGuard, hex2) {
      logger$1.checkNew(new.target, BigNumber);
      if (constructorGuard !== _constructorGuard) {
        logger$1.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new (BigNumber)" });
      }
      this._hex = hex2;
      this._isBigNumber = true;
      Object.freeze(this);
    }
    fromTwos(value) {
      return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
      return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
      if (this._hex[0] === "-") {
        return BigNumber.from(this._hex.substring(1));
      }
      return this;
    }
    add(other) {
      return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
      return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
      const o = BigNumber.from(other);
      if (o.isZero()) {
        throwFault("division by zero", "div");
      }
      return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
      return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("cannot modulo negative values", "mod");
      }
      return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
      const value = toBN(other);
      if (value.isNeg()) {
        throwFault("cannot raise to negative values", "pow");
      }
      return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'and' negative values", "and");
      }
      return toBigNumber(toBN(this).and(value));
    }
    or(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'or' negative values", "or");
      }
      return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
      const value = toBN(other);
      if (this.isNegative() || value.isNeg()) {
        throwFault("cannot 'xor' negative values", "xor");
      }
      return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot mask negative values", "mask");
      }
      return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shl");
      }
      return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
      if (this.isNegative() || value < 0) {
        throwFault("cannot shift negative values", "shr");
      }
      return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
      return toBN(this).eq(toBN(other));
    }
    lt(other) {
      return toBN(this).lt(toBN(other));
    }
    lte(other) {
      return toBN(this).lte(toBN(other));
    }
    gt(other) {
      return toBN(this).gt(toBN(other));
    }
    gte(other) {
      return toBN(this).gte(toBN(other));
    }
    isNegative() {
      return this._hex[0] === "-";
    }
    isZero() {
      return toBN(this).isZero();
    }
    toNumber() {
      try {
        return toBN(this).toNumber();
      } catch (error) {
        throwFault("overflow", "toNumber", this.toString());
      }
      return null;
    }
    toBigInt() {
      try {
        return BigInt(this.toString());
      } catch (e) {
      }
      return logger$1.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, { value: this.toString() });
    }
    toString() {
      if (arguments.length > 0) {
        if (arguments[0] === 10) {
          if (!_warnedToStringRadix) {
            _warnedToStringRadix = true;
            logger$1.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
          }
        } else if (arguments[0] === 16) {
          logger$1.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
        } else {
          logger$1.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
        }
      }
      return toBN(this).toString(10);
    }
    toHexString() {
      return this._hex;
    }
    toJSON(key2) {
      return { type: "BigNumber", hex: this.toHexString() };
    }
    static from(value) {
      if (value instanceof BigNumber) {
        return value;
      }
      if (typeof value === "string") {
        if (value.match(/^-?0x[0-9a-f]+$/i)) {
          return new BigNumber(_constructorGuard, toHex(value));
        }
        if (value.match(/^-?[0-9]+$/)) {
          return new BigNumber(_constructorGuard, toHex(new BN(value)));
        }
        return logger$1.throwArgumentError("invalid BigNumber string", "value", value);
      }
      if (typeof value === "number") {
        if (value % 1) {
          throwFault("underflow", "BigNumber.from", value);
        }
        if (value >= MAX_SAFE || value <= -MAX_SAFE) {
          throwFault("overflow", "BigNumber.from", value);
        }
        return BigNumber.from(String(value));
      }
      const anyValue = value;
      if (typeof anyValue === "bigint") {
        return BigNumber.from(anyValue.toString());
      }
      if (isBytes(anyValue)) {
        return BigNumber.from(hexlify(anyValue));
      }
      if (anyValue) {
        if (anyValue.toHexString) {
          const hex2 = anyValue.toHexString();
          if (typeof hex2 === "string") {
            return BigNumber.from(hex2);
          }
        } else {
          let hex2 = anyValue._hex;
          if (hex2 == null && anyValue.type === "BigNumber") {
            hex2 = anyValue.hex;
          }
          if (typeof hex2 === "string") {
            if (isHexString(hex2) || hex2[0] === "-" && isHexString(hex2.substring(1))) {
              return BigNumber.from(hex2);
            }
          }
        }
      }
      return logger$1.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
      return !!(value && value._isBigNumber);
    }
  };
  function toHex(value) {
    if (typeof value !== "string") {
      return toHex(value.toString(16));
    }
    if (value[0] === "-") {
      value = value.substring(1);
      if (value[0] === "-") {
        logger$1.throwArgumentError("invalid hex", "value", value);
      }
      value = toHex(value);
      if (value === "0x00") {
        return value;
      }
      return "-" + value;
    }
    if (value.substring(0, 2) !== "0x") {
      value = "0x" + value;
    }
    if (value === "0x") {
      return "0x00";
    }
    if (value.length % 2) {
      value = "0x0" + value.substring(2);
    }
    while (value.length > 4 && value.substring(0, 4) === "0x00") {
      value = "0x" + value.substring(4);
    }
    return value;
  }
  function toBigNumber(value) {
    return BigNumber.from(toHex(value));
  }
  function toBN(value) {
    const hex2 = BigNumber.from(value).toHexString();
    if (hex2[0] === "-") {
      return new BN("-" + hex2.substring(3), 16);
    }
    return new BN(hex2.substring(2), 16);
  }
  function throwFault(fault, operation, value) {
    const params = { fault, operation };
    if (value != null) {
      params.value = value;
    }
    return logger$1.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
  }
  function _base36To16(value) {
    return new BN(value, 36).toString(16);
  }
  function _base16To36(value) {
    return new BN(value, 16).toString(36);
  }
  var logger$2 = new Logger(version$2);
  var _constructorGuard$1 = {};
  var Zero = BigNumber.from(0);
  var NegativeOne = BigNumber.from(-1);
  function throwFault$1(message, fault, operation, value) {
    const params = { fault, operation };
    if (value !== void 0) {
      params.value = value;
    }
    return logger$2.throwError(message, Logger.errors.NUMERIC_FAULT, params);
  }
  var zeros = "0";
  while (zeros.length < 256) {
    zeros += zeros;
  }
  function getMultiplier(decimals) {
    if (typeof decimals !== "number") {
      try {
        decimals = BigNumber.from(decimals).toNumber();
      } catch (e) {
      }
    }
    if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
      return "1" + zeros.substring(0, decimals);
    }
    return logger$2.throwArgumentError("invalid decimal size", "decimals", decimals);
  }
  function formatFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    value = BigNumber.from(value);
    const negative = value.lt(Zero);
    if (negative) {
      value = value.mul(NegativeOne);
    }
    let fraction = value.mod(multiplier).toString();
    while (fraction.length < multiplier.length - 1) {
      fraction = "0" + fraction;
    }
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const whole = value.div(multiplier).toString();
    value = whole + "." + fraction;
    if (negative) {
      value = "-" + value;
    }
    return value;
  }
  function parseFixed(value, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const multiplier = getMultiplier(decimals);
    if (typeof value !== "string" || !value.match(/^-?[0-9.,]+$/)) {
      logger$2.throwArgumentError("invalid decimal value", "value", value);
    }
    if (multiplier.length - 1 === 0) {
      return BigNumber.from(value);
    }
    const negative = value.substring(0, 1) === "-";
    if (negative) {
      value = value.substring(1);
    }
    if (value === ".") {
      logger$2.throwArgumentError("missing value", "value", value);
    }
    const comps = value.split(".");
    if (comps.length > 2) {
      logger$2.throwArgumentError("too many decimal points", "value", value);
    }
    let whole = comps[0], fraction = comps[1];
    if (!whole) {
      whole = "0";
    }
    if (!fraction) {
      fraction = "0";
    }
    if (fraction.length > multiplier.length - 1) {
      throwFault$1("fractional component exceeds decimals", "underflow", "parseFixed");
    }
    while (fraction.length < multiplier.length - 1) {
      fraction += "0";
    }
    const wholeValue = BigNumber.from(whole);
    const fractionValue = BigNumber.from(fraction);
    let wei = wholeValue.mul(multiplier).add(fractionValue);
    if (negative) {
      wei = wei.mul(NegativeOne);
    }
    return wei;
  }
  var FixedFormat = class {
    constructor(constructorGuard, signed, width, decimals) {
      if (constructorGuard !== _constructorGuard$1) {
        logger$2.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" });
      }
      this.signed = signed;
      this.width = width;
      this.decimals = decimals;
      this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      this._multiplier = getMultiplier(decimals);
      Object.freeze(this);
    }
    static from(value) {
      if (value instanceof FixedFormat) {
        return value;
      }
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed = false;
        } else if (value != null) {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          if (!match) {
            logger$2.throwArgumentError("invalid fixed format", "format", value);
          }
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const check = (key2, type, defaultValue) => {
          if (value[key2] == null) {
            return defaultValue;
          }
          if (typeof value[key2] !== type) {
            logger$2.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
          }
          return value[key2];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      if (width % 8) {
        logger$2.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
      }
      if (decimals > 80) {
        logger$2.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
      }
      return new FixedFormat(_constructorGuard$1, signed, width, decimals);
    }
  };
  var FixedNumber = class {
    constructor(constructorGuard, hex2, value, format) {
      logger$2.checkNew(new.target, FixedNumber);
      if (constructorGuard !== _constructorGuard$1) {
        logger$2.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" });
      }
      this.format = format;
      this._hex = hex2;
      this._value = value;
      this._isFixedNumber = true;
      Object.freeze(this);
    }
    _checkFormat(other) {
      if (this.format.name !== other.format.name) {
        logger$2.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
      }
    }
    addUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    }
    subUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    }
    mulUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    }
    divUnsafe(other) {
      this._checkFormat(other);
      const a = parseFixed(this._value, this.format.decimals);
      const b = parseFixed(other._value, other.format.decimals);
      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    }
    floor() {
      let comps = this.toString().split(".");
      let result = FixedNumber.from(comps[0], this.format);
      const hasFraction = !comps[1].match(/^(0*)$/);
      if (this.isNegative() && hasFraction) {
        result = result.subUnsafe(ONE);
      }
      return result;
    }
    ceiling() {
      let comps = this.toString().split(".");
      let result = FixedNumber.from(comps[0], this.format);
      const hasFraction = !comps[1].match(/^(0*)$/);
      if (!this.isNegative() && hasFraction) {
        result = result.addUnsafe(ONE);
      }
      return result;
    }
    round(decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      let comps = this.toString().split(".");
      if (decimals < 0 || decimals > 80 || decimals % 1) {
        logger$2.throwArgumentError("invalid decimal count", "decimals", decimals);
      }
      if (comps[1].length <= decimals) {
        return this;
      }
      const factor = FixedNumber.from("1" + zeros.substring(0, decimals));
      return this.mulUnsafe(factor).addUnsafe(BUMP).floor().divUnsafe(factor);
    }
    isZero() {
      return this._value === "0.0";
    }
    isNegative() {
      return this._value[0] === "-";
    }
    toString() {
      return this._value;
    }
    toHexString(width) {
      if (width == null) {
        return this._hex;
      }
      if (width % 8) {
        logger$2.throwArgumentError("invalid byte width", "width", width);
      }
      const hex2 = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
      return hexZeroPad(hex2, width / 8);
    }
    toUnsafeFloat() {
      return parseFloat(this.toString());
    }
    toFormat(format) {
      return FixedNumber.fromString(this._value, format);
    }
    static fromValue(value, decimals, format) {
      if (format == null && decimals != null && !isBigNumberish(decimals)) {
        format = decimals;
        decimals = null;
      }
      if (decimals == null) {
        decimals = 0;
      }
      if (format == null) {
        format = "fixed";
      }
      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    }
    static fromString(value, format) {
      if (format == null) {
        format = "fixed";
      }
      const fixedFormat = FixedFormat.from(format);
      const numeric = parseFixed(value, fixedFormat.decimals);
      if (!fixedFormat.signed && numeric.lt(Zero)) {
        throwFault$1("unsigned value cannot be negative", "overflow", "value", value);
      }
      let hex2 = null;
      if (fixedFormat.signed) {
        hex2 = numeric.toTwos(fixedFormat.width).toHexString();
      } else {
        hex2 = numeric.toHexString();
        hex2 = hexZeroPad(hex2, fixedFormat.width / 8);
      }
      const decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$1, hex2, decimal, fixedFormat);
    }
    static fromBytes(value, format) {
      if (format == null) {
        format = "fixed";
      }
      const fixedFormat = FixedFormat.from(format);
      if (arrayify(value).length > fixedFormat.width / 8) {
        throw new Error("overflow");
      }
      let numeric = BigNumber.from(value);
      if (fixedFormat.signed) {
        numeric = numeric.fromTwos(fixedFormat.width);
      }
      const hex2 = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
      const decimal = formatFixed(numeric, fixedFormat.decimals);
      return new FixedNumber(_constructorGuard$1, hex2, decimal, fixedFormat);
    }
    static from(value, format) {
      if (typeof value === "string") {
        return FixedNumber.fromString(value, format);
      }
      if (isBytes(value)) {
        return FixedNumber.fromBytes(value, format);
      }
      try {
        return FixedNumber.fromValue(value, 0, format);
      } catch (error) {
        if (error.code !== Logger.errors.INVALID_ARGUMENT) {
          throw error;
        }
      }
      return logger$2.throwArgumentError("invalid FixedNumber value", "value", value);
    }
    static isFixedNumber(value) {
      return !!(value && value._isFixedNumber);
    }
  };
  var ONE = FixedNumber.from(1);
  var BUMP = FixedNumber.from("0.5");
  var version$3 = "properties/5.1.0";
  var __awaiter = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$3 = new Logger(version$3);
  function defineReadOnly(object, name2, value) {
    Object.defineProperty(object, name2, { enumerable: true, value, writable: false });
  }
  function getStatic(ctor, key2) {
    for (let i = 0; i < 32; i++) {
      if (ctor[key2]) {
        return ctor[key2];
      }
      if (!ctor.prototype || typeof ctor.prototype !== "object") {
        break;
      }
      ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
  }
  function resolveProperties(object) {
    return __awaiter(this, void 0, void 0, function* () {
      const promises = Object.keys(object).map((key2) => {
        const value = object[key2];
        return Promise.resolve(value).then((v) => ({ key: key2, value: v }));
      });
      const results = yield Promise.all(promises);
      return results.reduce((accum, result) => {
        accum[result.key] = result.value;
        return accum;
      }, {});
    });
  }
  function checkProperties(object, properties) {
    if (!object || typeof object !== "object") {
      logger$3.throwArgumentError("invalid object", "object", object);
    }
    Object.keys(object).forEach((key2) => {
      if (!properties[key2]) {
        logger$3.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
      }
    });
  }
  function shallowCopy(object) {
    const result = {};
    for (const key2 in object) {
      result[key2] = object[key2];
    }
    return result;
  }
  var opaque = { bigint: true, boolean: true, function: true, number: true, string: true };
  function _isFrozen(object) {
    if (object === void 0 || object === null || opaque[typeof object]) {
      return true;
    }
    if (Array.isArray(object) || typeof object === "object") {
      if (!Object.isFrozen(object)) {
        return false;
      }
      const keys = Object.keys(object);
      for (let i = 0; i < keys.length; i++) {
        if (!_isFrozen(object[keys[i]])) {
          return false;
        }
      }
      return true;
    }
    return logger$3.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function _deepCopy(object) {
    if (_isFrozen(object)) {
      return object;
    }
    if (Array.isArray(object)) {
      return Object.freeze(object.map((item) => deepCopy(item)));
    }
    if (typeof object === "object") {
      const result = {};
      for (const key2 in object) {
        const value = object[key2];
        if (value === void 0) {
          continue;
        }
        defineReadOnly(result, key2, deepCopy(value));
      }
      return result;
    }
    return logger$3.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
  }
  function deepCopy(object) {
    return _deepCopy(object);
  }
  var Description = class {
    constructor(info) {
      for (const key2 in info) {
        this[key2] = deepCopy(info[key2]);
      }
    }
  };
  var version$4 = "abi/5.1.2";
  var logger$4 = new Logger(version$4);
  var _constructorGuard$2 = {};
  var ModifiersBytes = { calldata: true, memory: true, storage: true };
  var ModifiersNest = { calldata: true, memory: true };
  function checkModifier(type, name2) {
    if (type === "bytes" || type === "string") {
      if (ModifiersBytes[name2]) {
        return true;
      }
    } else if (type === "address") {
      if (name2 === "payable") {
        return true;
      }
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
      if (ModifiersNest[name2]) {
        return true;
      }
    }
    if (ModifiersBytes[name2] || name2 === "payable") {
      logger$4.throwArgumentError("invalid modifier", "name", name2);
    }
    return false;
  }
  function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
      logger$4.throwArgumentError(`unexpected character at position ${i}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent2) {
      let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
      if (allowIndexed) {
        node2.indexed = false;
      }
      return node2;
    }
    let parent = { type: "", name: "", state: { allowType: true } };
    let node = parent;
    for (let i = 0; i < param.length; i++) {
      let c = param[i];
      switch (c) {
        case "(":
          if (node.state.allowType && node.type === "") {
            node.type = "tuple";
          } else if (!node.state.allowParams) {
            throwError(i);
          }
          node.state.allowType = false;
          node.type = verifyType(node.type);
          node.components = [newNode(node)];
          node = node.components[0];
          break;
        case ")":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let child = node;
          node = node.parent;
          if (!node) {
            throwError(i);
          }
          delete child.parent;
          node.state.allowParams = false;
          node.state.allowName = true;
          node.state.allowArray = true;
          break;
        case ",":
          delete node.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(i);
            }
            node.indexed = true;
            node.name = "";
          }
          if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          node.type = verifyType(node.type);
          let sibling = newNode(node.parent);
          node.parent.components.push(sibling);
          delete node.parent;
          node = sibling;
          break;
        case " ":
          if (node.state.allowType) {
            if (node.type !== "") {
              node.type = verifyType(node.type);
              delete node.state.allowType;
              node.state.allowName = true;
              node.state.allowParams = true;
            }
          }
          if (node.state.allowName) {
            if (node.name !== "") {
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }
                if (node.indexed) {
                  throwError(i);
                }
                node.indexed = true;
                node.name = "";
              } else if (checkModifier(node.type, node.name)) {
                node.name = "";
              } else {
                node.state.allowName = false;
              }
            }
          }
          break;
        case "[":
          if (!node.state.allowArray) {
            throwError(i);
          }
          node.type += c;
          node.state.allowArray = false;
          node.state.allowName = false;
          node.state.readArray = true;
          break;
        case "]":
          if (!node.state.readArray) {
            throwError(i);
          }
          node.type += c;
          node.state.readArray = false;
          node.state.allowArray = true;
          node.state.allowName = true;
          break;
        default:
          if (node.state.allowType) {
            node.type += c;
            node.state.allowParams = true;
            node.state.allowArray = true;
          } else if (node.state.allowName) {
            node.name += c;
            delete node.state.allowArray;
          } else if (node.state.readArray) {
            node.type += c;
          } else {
            throwError(i);
          }
      }
    }
    if (node.parent) {
      logger$4.throwArgumentError("unexpected eof", "param", param);
    }
    delete parent.state;
    if (node.name === "indexed") {
      if (!allowIndexed) {
        throwError(originalParam.length - 7);
      }
      if (node.indexed) {
        throwError(originalParam.length - 7);
      }
      node.indexed = true;
      node.name = "";
    } else if (checkModifier(node.type, node.name)) {
      node.name = "";
    }
    parent.type = verifyType(parent.type);
    return parent;
  }
  function populate(object, params) {
    for (let key2 in params) {
      defineReadOnly(object, key2, params[key2]);
    }
  }
  var FormatTypes = Object.freeze({ sighash: "sighash", minimal: "minimal", full: "full", json: "json" });
  var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
  var ParamType = class {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard$2) {
        logger$4.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new ParamType()" });
      }
      populate(this, params);
      let match = this.type.match(paramTypeArray);
      if (match) {
        populate(this, { arrayLength: parseInt(match[2] || "-1"), arrayChildren: ParamType.fromObject({ type: match[1], components: this.components }), baseType: "array" });
      } else {
        populate(this, { arrayLength: null, arrayChildren: null, baseType: this.components != null ? "tuple" : this.type });
      }
      this._isParamType = true;
      Object.freeze(this);
    }
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        let result2 = { type: this.baseType === "tuple" ? "tuple" : this.type, name: this.name || void 0 };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.components) {
          result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.baseType === "array") {
        result += this.arrayChildren.format(format);
        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
      } else {
        if (this.baseType === "tuple") {
          if (format !== FormatTypes.sighash) {
            result += this.type;
          }
          result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format !== FormatTypes.sighash) {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format === FormatTypes.full && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    static from(value, allowIndexed) {
      if (typeof value === "string") {
        return ParamType.fromString(value, allowIndexed);
      }
      return ParamType.fromObject(value);
    }
    static fromObject(value) {
      if (ParamType.isParamType(value)) {
        return value;
      }
      return new ParamType(_constructorGuard$2, { name: value.name || null, type: verifyType(value.type), indexed: value.indexed == null ? null : !!value.indexed, components: value.components ? value.components.map(ParamType.fromObject) : null });
    }
    static fromString(value, allowIndexed) {
      function ParamTypify(node) {
        return ParamType.fromObject({ name: node.name, type: node.type, indexed: node.indexed, components: node.components });
      }
      return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
      return !!(value != null && value._isParamType);
    }
  };
  function parseParams(value, allowIndex) {
    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
  }
  var Fragment = class {
    constructor(constructorGuard, params) {
      if (constructorGuard !== _constructorGuard$2) {
        logger$4.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new Fragment()" });
      }
      populate(this, params);
      this._isFragment = true;
      Object.freeze(this);
    }
    static from(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      if (typeof value === "string") {
        return Fragment.fromString(value);
      }
      return Fragment.fromObject(value);
    }
    static fromObject(value) {
      if (Fragment.isFragment(value)) {
        return value;
      }
      switch (value.type) {
        case "function":
          return FunctionFragment.fromObject(value);
        case "event":
          return EventFragment.fromObject(value);
        case "constructor":
          return ConstructorFragment.fromObject(value);
        case "error":
        case "fallback":
        case "receive":
          return null;
      }
      return logger$4.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
      value = value.replace(/\s/g, " ");
      value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
      value = value.trim();
      if (value.split(" ")[0] === "event") {
        return EventFragment.fromString(value.substring(5).trim());
      } else if (value.split(" ")[0] === "function") {
        return FunctionFragment.fromString(value.substring(8).trim());
      } else if (value.split("(")[0].trim() === "constructor") {
        return ConstructorFragment.fromString(value.trim());
      }
      return logger$4.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
      return !!(value && value._isFragment);
    }
  };
  var EventFragment = class extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "event", anonymous: this.anonymous, name: this.name, inputs: this.inputs.map((input) => JSON.parse(input.format(format))) });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "event ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.anonymous) {
          result += "anonymous ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return EventFragment.fromString(value);
      }
      return EventFragment.fromObject(value);
    }
    static fromObject(value) {
      if (EventFragment.isEventFragment(value)) {
        return value;
      }
      if (value.type !== "event") {
        logger$4.throwArgumentError("invalid event object", "value", value);
      }
      const params = { name: verifyIdentifier(value.name), anonymous: value.anonymous, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], type: "event" };
      return new EventFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let match = value.match(regexParen);
      if (!match) {
        logger$4.throwArgumentError("invalid event string", "value", value);
      }
      let anonymous = false;
      match[3].split(" ").forEach((modifier) => {
        switch (modifier.trim()) {
          case "anonymous":
            anonymous = true;
            break;
          case "":
            break;
          default:
            logger$4.warn("unknown modifier: " + modifier);
        }
      });
      return EventFragment.fromObject({ name: match[1].trim(), anonymous, inputs: parseParams(match[2], true), type: "event" });
    }
    static isEventFragment(value) {
      return value && value._isFragment && value.type === "event";
    }
  };
  function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid human-readable ABI signature", "value", value);
      }
      if (!comps[1].match(/^[0-9]+$/)) {
        logger$4.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
      }
      params.gas = BigNumber.from(comps[1]);
      return comps[0];
    }
    return value;
  }
  function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "constant":
          params.constant = true;
          break;
        case "payable":
          params.payable = true;
          params.stateMutability = "payable";
          break;
        case "nonpayable":
          params.payable = false;
          params.stateMutability = "nonpayable";
          break;
        case "pure":
          params.constant = true;
          params.stateMutability = "pure";
          break;
        case "view":
          params.constant = true;
          params.stateMutability = "view";
          break;
        case "external":
        case "public":
        case "":
          break;
        default:
          console.log("unknown modifier: " + modifier);
      }
    });
  }
  function verifyState(value) {
    let result = { constant: false, payable: true, stateMutability: "payable" };
    if (value.stateMutability != null) {
      result.stateMutability = value.stateMutability;
      result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
      if (value.constant != null) {
        if (!!value.constant !== result.constant) {
          logger$4.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
      }
      result.payable = result.stateMutability === "payable";
      if (value.payable != null) {
        if (!!value.payable !== result.payable) {
          logger$4.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
      }
    } else if (value.payable != null) {
      result.payable = !!value.payable;
      if (value.constant == null && !result.payable && value.type !== "constructor") {
        logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
      }
      result.constant = !!value.constant;
      if (result.constant) {
        result.stateMutability = "view";
      } else {
        result.stateMutability = result.payable ? "payable" : "nonpayable";
      }
      if (result.payable && result.constant) {
        logger$4.throwArgumentError("cannot have constant payable function", "value", value);
      }
    } else if (value.constant != null) {
      result.constant = !!value.constant;
      result.payable = !result.constant;
      result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") {
      logger$4.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    return result;
  }
  var ConstructorFragment = class extends Fragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "constructor", stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map((input) => JSON.parse(input.format(format))) });
      }
      if (format === FormatTypes.sighash) {
        logger$4.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, { operation: "format(sighash)" });
      }
      let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (this.stateMutability && this.stateMutability !== "nonpayable") {
        result += this.stateMutability + " ";
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return ConstructorFragment.fromString(value);
      }
      return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
      if (ConstructorFragment.isConstructorFragment(value)) {
        return value;
      }
      if (value.type !== "constructor") {
        logger$4.throwArgumentError("invalid constructor object", "value", value);
      }
      let state = verifyState(value);
      if (state.constant) {
        logger$4.throwArgumentError("constructor cannot be constant", "value", value);
      }
      const params = { name: null, type: value.type, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], payable: state.payable, stateMutability: state.stateMutability, gas: value.gas ? BigNumber.from(value.gas) : null };
      return new ConstructorFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let params = { type: "constructor" };
      value = parseGas(value, params);
      let parens = value.match(regexParen);
      if (!parens || parens[1].trim() !== "constructor") {
        logger$4.throwArgumentError("invalid constructor string", "value", value);
      }
      params.inputs = parseParams(parens[2].trim(), false);
      parseModifiers(parens[3].trim(), params);
      return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
      return value && value._isFragment && value.type === "constructor";
    }
  };
  var FunctionFragment = class extends ConstructorFragment {
    format(format) {
      if (!format) {
        format = FormatTypes.sighash;
      }
      if (!FormatTypes[format]) {
        logger$4.throwArgumentError("invalid format type", "format", format);
      }
      if (format === FormatTypes.json) {
        return JSON.stringify({ type: "function", name: this.name, constant: this.constant, stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map((input) => JSON.parse(input.format(format))), outputs: this.outputs.map((output) => JSON.parse(output.format(format))) });
      }
      let result = "";
      if (format !== FormatTypes.sighash) {
        result += "function ";
      }
      result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
      if (format !== FormatTypes.sighash) {
        if (this.stateMutability) {
          if (this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
        } else if (this.constant) {
          result += "view ";
        }
        if (this.outputs && this.outputs.length) {
          result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
        }
        if (this.gas != null) {
          result += "@" + this.gas.toString() + " ";
        }
      }
      return result.trim();
    }
    static from(value) {
      if (typeof value === "string") {
        return FunctionFragment.fromString(value);
      }
      return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
      if (FunctionFragment.isFunctionFragment(value)) {
        return value;
      }
      if (value.type !== "function") {
        logger$4.throwArgumentError("invalid function object", "value", value);
      }
      let state = verifyState(value);
      const params = { type: value.type, name: verifyIdentifier(value.name), constant: state.constant, inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [], outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [], payable: state.payable, stateMutability: state.stateMutability, gas: value.gas ? BigNumber.from(value.gas) : null };
      return new FunctionFragment(_constructorGuard$2, params);
    }
    static fromString(value) {
      let params = { type: "function" };
      value = parseGas(value, params);
      let comps = value.split(" returns ");
      if (comps.length > 2) {
        logger$4.throwArgumentError("invalid function string", "value", value);
      }
      let parens = comps[0].match(regexParen);
      if (!parens) {
        logger$4.throwArgumentError("invalid function signature", "value", value);
      }
      params.name = parens[1].trim();
      if (params.name) {
        verifyIdentifier(params.name);
      }
      params.inputs = parseParams(parens[2], false);
      parseModifiers(parens[3].trim(), params);
      if (comps.length > 1) {
        let returns = comps[1].match(regexParen);
        if (returns[1].trim() != "" || returns[3].trim() != "") {
          logger$4.throwArgumentError("unexpected tokens", "value", value);
        }
        params.outputs = parseParams(returns[2], false);
      } else {
        params.outputs = [];
      }
      return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
      return value && value._isFragment && value.type === "function";
    }
  };
  function verifyType(type) {
    if (type.match(/^uint($|[^1-9])/)) {
      type = "uint256" + type.substring(4);
    } else if (type.match(/^int($|[^1-9])/)) {
      type = "int256" + type.substring(3);
    }
    return type;
  }
  var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
  function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) {
      logger$4.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    }
    return value;
  }
  var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for (let offset = 0; offset < value.length; offset++) {
      let c = value[offset];
      if (c === "," && depth === 0) {
        result.push(accum);
        accum = "";
      } else {
        accum += c;
        if (c === "(") {
          depth++;
        } else if (c === ")") {
          depth--;
          if (depth === -1) {
            logger$4.throwArgumentError("unbalanced parenthesis", "value", value);
          }
        }
      }
    }
    if (accum) {
      result.push(accum);
    }
    return result;
  }
  var logger$5 = new Logger(version$4);
  function checkResultErrors(result) {
    const errors = [];
    const checkErrors = function(path, object) {
      if (!Array.isArray(object)) {
        return;
      }
      for (let key2 in object) {
        const childPath = path.slice();
        childPath.push(key2);
        try {
          checkErrors(childPath, object[key2]);
        } catch (error) {
          errors.push({ path: childPath, error });
        }
      }
    };
    checkErrors([], result);
    return errors;
  }
  var Coder = class {
    constructor(name2, type, localName, dynamic) {
      this.name = name2;
      this.type = type;
      this.localName = localName;
      this.dynamic = dynamic;
    }
    _throwError(message, value) {
      logger$5.throwArgumentError(message, this.localName, value);
    }
  };
  var Writer = class {
    constructor(wordSize) {
      defineReadOnly(this, "wordSize", wordSize || 32);
      this._data = [];
      this._dataLength = 0;
      this._padding = new Uint8Array(wordSize);
    }
    get data() {
      return hexConcat(this._data);
    }
    get length() {
      return this._dataLength;
    }
    _writeData(data2) {
      this._data.push(data2);
      this._dataLength += data2.length;
      return data2.length;
    }
    appendWriter(writer) {
      return this._writeData(concat(writer._data));
    }
    writeBytes(value) {
      let bytes = arrayify(value);
      const paddingOffset = bytes.length % this.wordSize;
      if (paddingOffset) {
        bytes = concat([bytes, this._padding.slice(paddingOffset)]);
      }
      return this._writeData(bytes);
    }
    _getValue(value) {
      let bytes = arrayify(BigNumber.from(value));
      if (bytes.length > this.wordSize) {
        logger$5.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, { length: this.wordSize, offset: bytes.length });
      }
      if (bytes.length % this.wordSize) {
        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
      }
      return bytes;
    }
    writeValue(value) {
      return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
      const offset = this._data.length;
      this._data.push(this._padding);
      this._dataLength += this.wordSize;
      return (value) => {
        this._data[offset] = this._getValue(value);
      };
    }
  };
  var Reader = class {
    constructor(data2, wordSize, coerceFunc, allowLoose) {
      defineReadOnly(this, "_data", arrayify(data2));
      defineReadOnly(this, "wordSize", wordSize || 32);
      defineReadOnly(this, "_coerceFunc", coerceFunc);
      defineReadOnly(this, "allowLoose", allowLoose);
      this._offset = 0;
    }
    get data() {
      return hexlify(this._data);
    }
    get consumed() {
      return this._offset;
    }
    static coerce(name2, value) {
      let match = name2.match("^u?int([0-9]+)$");
      if (match && parseInt(match[1]) <= 48) {
        value = value.toNumber();
      }
      return value;
    }
    coerce(name2, value) {
      if (this._coerceFunc) {
        return this._coerceFunc(name2, value);
      }
      return Reader.coerce(name2, value);
    }
    _peekBytes(offset, length, loose) {
      let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
      if (this._offset + alignedLength > this._data.length) {
        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
          alignedLength = length;
        } else {
          logger$5.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, { length: this._data.length, offset: this._offset + alignedLength });
        }
      }
      return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
      let bytes = this._peekBytes(0, length, !!loose);
      this._offset += bytes.length;
      return bytes.slice(0, length);
    }
    readValue() {
      return BigNumber.from(this.readBytes(this.wordSize));
    }
  };
  var sha3 = createCommonjsModule(function(module) {
    (function() {
      "use strict";
      var root = typeof window === "object" ? window : {};
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createOutputMethod(bits2, padding2, type);
        }
        return method;
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createShakeOutputMethod(bits2, padding2, type);
        }
        return method;
      };
      var algorithms = [{ name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod }, { name: "sha3", padding: PADDING, bits: BITS, createMethod }, { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        var notString = typeof message !== "string";
        if (notString && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
        var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index2 = 0, s2 = this.s, i2, code;
        while (index2 < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index2 < length && i2 < byteCount; ++index2) {
              blocks[i2 >> 2] |= message[index2] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index2 < length && i2 < byteCount; ++index2) {
              code = message.charCodeAt(index2);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index2) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s2[i2] ^= blocks[i2];
            }
            f2(s2);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.finalize = function() {
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s2[i2] ^= blocks[i2];
        }
        f2(s2);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex2 = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s2[i2];
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s2[i2];
          if (extraBytes > 0) {
            hex2 += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          }
          if (extraBytes > 1) {
            hex2 += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex2 += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex2;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s2[i2];
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          array[i2] = s2[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s2[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f2(s2);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s2[i2];
          if (extraBytes > 0) {
            array[offset] = block & 255;
          }
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      var f2 = function(s2) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
          c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
          c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
          c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
          c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
          c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
          c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
          c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
          c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
          c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s2[0] ^= h;
          s2[1] ^= l;
          s2[10] ^= h;
          s2[11] ^= l;
          s2[20] ^= h;
          s2[21] ^= l;
          s2[30] ^= h;
          s2[31] ^= l;
          s2[40] ^= h;
          s2[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s2[2] ^= h;
          s2[3] ^= l;
          s2[12] ^= h;
          s2[13] ^= l;
          s2[22] ^= h;
          s2[23] ^= l;
          s2[32] ^= h;
          s2[33] ^= l;
          s2[42] ^= h;
          s2[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s2[4] ^= h;
          s2[5] ^= l;
          s2[14] ^= h;
          s2[15] ^= l;
          s2[24] ^= h;
          s2[25] ^= l;
          s2[34] ^= h;
          s2[35] ^= l;
          s2[44] ^= h;
          s2[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s2[6] ^= h;
          s2[7] ^= l;
          s2[16] ^= h;
          s2[17] ^= l;
          s2[26] ^= h;
          s2[27] ^= l;
          s2[36] ^= h;
          s2[37] ^= l;
          s2[46] ^= h;
          s2[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s2[8] ^= h;
          s2[9] ^= l;
          s2[18] ^= h;
          s2[19] ^= l;
          s2[28] ^= h;
          s2[29] ^= l;
          s2[38] ^= h;
          s2[39] ^= l;
          s2[48] ^= h;
          s2[49] ^= l;
          b0 = s2[0];
          b1 = s2[1];
          b32 = s2[11] << 4 | s2[10] >>> 28;
          b33 = s2[10] << 4 | s2[11] >>> 28;
          b14 = s2[20] << 3 | s2[21] >>> 29;
          b15 = s2[21] << 3 | s2[20] >>> 29;
          b46 = s2[31] << 9 | s2[30] >>> 23;
          b47 = s2[30] << 9 | s2[31] >>> 23;
          b28 = s2[40] << 18 | s2[41] >>> 14;
          b29 = s2[41] << 18 | s2[40] >>> 14;
          b20 = s2[2] << 1 | s2[3] >>> 31;
          b21 = s2[3] << 1 | s2[2] >>> 31;
          b2 = s2[13] << 12 | s2[12] >>> 20;
          b3 = s2[12] << 12 | s2[13] >>> 20;
          b34 = s2[22] << 10 | s2[23] >>> 22;
          b35 = s2[23] << 10 | s2[22] >>> 22;
          b16 = s2[33] << 13 | s2[32] >>> 19;
          b17 = s2[32] << 13 | s2[33] >>> 19;
          b48 = s2[42] << 2 | s2[43] >>> 30;
          b49 = s2[43] << 2 | s2[42] >>> 30;
          b40 = s2[5] << 30 | s2[4] >>> 2;
          b41 = s2[4] << 30 | s2[5] >>> 2;
          b22 = s2[14] << 6 | s2[15] >>> 26;
          b23 = s2[15] << 6 | s2[14] >>> 26;
          b4 = s2[25] << 11 | s2[24] >>> 21;
          b5 = s2[24] << 11 | s2[25] >>> 21;
          b36 = s2[34] << 15 | s2[35] >>> 17;
          b37 = s2[35] << 15 | s2[34] >>> 17;
          b18 = s2[45] << 29 | s2[44] >>> 3;
          b19 = s2[44] << 29 | s2[45] >>> 3;
          b10 = s2[6] << 28 | s2[7] >>> 4;
          b11 = s2[7] << 28 | s2[6] >>> 4;
          b42 = s2[17] << 23 | s2[16] >>> 9;
          b43 = s2[16] << 23 | s2[17] >>> 9;
          b24 = s2[26] << 25 | s2[27] >>> 7;
          b25 = s2[27] << 25 | s2[26] >>> 7;
          b6 = s2[36] << 21 | s2[37] >>> 11;
          b7 = s2[37] << 21 | s2[36] >>> 11;
          b38 = s2[47] << 24 | s2[46] >>> 8;
          b39 = s2[46] << 24 | s2[47] >>> 8;
          b30 = s2[8] << 27 | s2[9] >>> 5;
          b31 = s2[9] << 27 | s2[8] >>> 5;
          b12 = s2[18] << 20 | s2[19] >>> 12;
          b13 = s2[19] << 20 | s2[18] >>> 12;
          b44 = s2[29] << 7 | s2[28] >>> 25;
          b45 = s2[28] << 7 | s2[29] >>> 25;
          b26 = s2[38] << 8 | s2[39] >>> 24;
          b27 = s2[39] << 8 | s2[38] >>> 24;
          b8 = s2[48] << 14 | s2[49] >>> 18;
          b9 = s2[49] << 14 | s2[48] >>> 18;
          s2[0] = b0 ^ ~b2 & b4;
          s2[1] = b1 ^ ~b3 & b5;
          s2[10] = b10 ^ ~b12 & b14;
          s2[11] = b11 ^ ~b13 & b15;
          s2[20] = b20 ^ ~b22 & b24;
          s2[21] = b21 ^ ~b23 & b25;
          s2[30] = b30 ^ ~b32 & b34;
          s2[31] = b31 ^ ~b33 & b35;
          s2[40] = b40 ^ ~b42 & b44;
          s2[41] = b41 ^ ~b43 & b45;
          s2[2] = b2 ^ ~b4 & b6;
          s2[3] = b3 ^ ~b5 & b7;
          s2[12] = b12 ^ ~b14 & b16;
          s2[13] = b13 ^ ~b15 & b17;
          s2[22] = b22 ^ ~b24 & b26;
          s2[23] = b23 ^ ~b25 & b27;
          s2[32] = b32 ^ ~b34 & b36;
          s2[33] = b33 ^ ~b35 & b37;
          s2[42] = b42 ^ ~b44 & b46;
          s2[43] = b43 ^ ~b45 & b47;
          s2[4] = b4 ^ ~b6 & b8;
          s2[5] = b5 ^ ~b7 & b9;
          s2[14] = b14 ^ ~b16 & b18;
          s2[15] = b15 ^ ~b17 & b19;
          s2[24] = b24 ^ ~b26 & b28;
          s2[25] = b25 ^ ~b27 & b29;
          s2[34] = b34 ^ ~b36 & b38;
          s2[35] = b35 ^ ~b37 & b39;
          s2[44] = b44 ^ ~b46 & b48;
          s2[45] = b45 ^ ~b47 & b49;
          s2[6] = b6 ^ ~b8 & b0;
          s2[7] = b7 ^ ~b9 & b1;
          s2[16] = b16 ^ ~b18 & b10;
          s2[17] = b17 ^ ~b19 & b11;
          s2[26] = b26 ^ ~b28 & b20;
          s2[27] = b27 ^ ~b29 & b21;
          s2[36] = b36 ^ ~b38 & b30;
          s2[37] = b37 ^ ~b39 & b31;
          s2[46] = b46 ^ ~b48 & b40;
          s2[47] = b47 ^ ~b49 & b41;
          s2[8] = b8 ^ ~b0 & b2;
          s2[9] = b9 ^ ~b1 & b3;
          s2[18] = b18 ^ ~b10 & b12;
          s2[19] = b19 ^ ~b11 & b13;
          s2[28] = b28 ^ ~b20 & b22;
          s2[29] = b29 ^ ~b21 & b23;
          s2[38] = b38 ^ ~b30 & b32;
          s2[39] = b39 ^ ~b31 & b33;
          s2[48] = b48 ^ ~b40 & b42;
          s2[49] = b49 ^ ~b41 & b43;
          s2[0] ^= RC[n];
          s2[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (var i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
  });
  function keccak256(data2) {
    return "0x" + sha3.keccak_256(arrayify(data2));
  }
  var version$5 = "rlp/5.1.0";
  var logger$6 = new Logger(version$5);
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function unarrayifyInteger(data2, offset, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
      result = result * 256 + data2[offset + i];
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    if (!isBytesLike(object)) {
      logger$6.throwArgumentError("RLP object must be BytesLike", "object", object);
    }
    const data2 = Array.prototype.slice.call(arrayify(object));
    if (data2.length === 1 && data2[0] <= 127) {
      return data2;
    } else if (data2.length <= 55) {
      data2.unshift(128 + data2.length);
      return data2;
    }
    const length = arrayifyInteger(data2.length);
    length.unshift(183 + length.length);
    return length.concat(data2);
  }
  function encode(object) {
    return hexlify(_encode(object));
  }
  function _decodeChildren(data2, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode(data2, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      if (childOffset > offset + 1 + length) {
        logger$6.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data2, offset) {
    if (data2.length === 0) {
      logger$6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    if (data2[offset] >= 248) {
      const lengthLength = data2[offset] - 247;
      if (offset + 1 + lengthLength > data2.length) {
        logger$6.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data2.length) {
        logger$6.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data2, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data2[offset] >= 192) {
      const length = data2[offset] - 192;
      if (offset + 1 + length > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      return _decodeChildren(data2, offset, offset + 1, length);
    } else if (data2[offset] >= 184) {
      const lengthLength = data2[offset] - 183;
      if (offset + 1 + lengthLength > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      if (offset + 1 + lengthLength + length > data2.length) {
        logger$6.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data2.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data2[offset] >= 128) {
      const length = data2[offset] - 128;
      if (offset + 1 + length > data2.length) {
        logger$6.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
      }
      const result = hexlify(data2.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlify(data2[offset]) };
  }
  function decode(data2) {
    const bytes = arrayify(data2);
    const decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) {
      logger$6.throwArgumentError("invalid rlp data", "data", data2);
    }
    return decoded.result;
  }
  var index = Object.freeze({ __proto__: null, encode, decode });
  var version$6 = "address/5.1.0";
  var logger$7 = new Logger(version$6);
  function getChecksumAddress(address) {
    if (!isHexString(address, 20)) {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = arrayify(keccak256(expanded));
    for (let i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }
      if ((hashed[i >> 1] & 15) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  var MAX_SAFE_INTEGER = 9007199254740991;
  function log10(x) {
    if (Math.log10) {
      return Math.log10(x);
    }
    return Math.log(x) / Math.LN10;
  }
  var ibanLookup = {};
  for (let i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
  }
  for (let i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while (checksum.length < 2) {
      checksum = "0" + checksum;
    }
    return checksum;
  }
  function getAddress(address) {
    let result = null;
    if (typeof address !== "string") {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (address.substring(0, 2) !== "0x") {
        address = "0x" + address;
      }
      result = getChecksumAddress(address);
      if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
        logger$7.throwArgumentError("bad address checksum", "address", address);
      }
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      if (address.substring(2, 4) !== ibanChecksum(address)) {
        logger$7.throwArgumentError("bad icap checksum", "address", address);
      }
      result = _base36To16(address.substring(4));
      while (result.length < 40) {
        result = "0" + result;
      }
      result = getChecksumAddress("0x" + result);
    } else {
      logger$7.throwArgumentError("invalid address", "address", address);
    }
    return result;
  }
  function isAddress(address) {
    try {
      getAddress(address);
      return true;
    } catch (error) {
    }
    return false;
  }
  function getIcapAddress(address) {
    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    while (base36.length < 30) {
      base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  function getContractAddress(transaction) {
    let from = null;
    try {
      from = getAddress(transaction.from);
    } catch (error) {
      logger$7.throwArgumentError("missing from address", "transaction", transaction);
    }
    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
  }
  function getCreate2Address(from, salt, initCodeHash) {
    if (hexDataLength(salt) !== 32) {
      logger$7.throwArgumentError("salt must be 32 bytes", "salt", salt);
    }
    if (hexDataLength(initCodeHash) !== 32) {
      logger$7.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    }
    return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
  }
  var AddressCoder = class extends Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
      try {
        getAddress(value);
      } catch (error) {
        this._throwError(error.message, value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
    }
  };
  var AnonymousCoder = class extends Coder {
    constructor(coder) {
      super(coder.name, coder.type, void 0, coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  };
  var logger$8 = new Logger(version$4);
  function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name2 = coder.localName;
        if (!name2) {
          logger$8.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, { argument: "values", coder, value: values });
        }
        if (unique[name2]) {
          logger$8.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, { argument: "values", coder, value: values });
        }
        unique[name2] = true;
        return values[name2];
      });
    } else {
      logger$8.throwArgumentError("invalid tuple value", "tuple", values);
    }
    if (coders.length !== arrayValues.length) {
      logger$8.throwArgumentError("types/value length mismatch", "tuple", values);
    }
    let staticWriter = new Writer(writer.wordSize);
    let dynamicWriter = new Writer(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index2) => {
      let value = arrayValues[index2];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  function unpack(reader, coders) {
    let values = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readValue();
        let offsetReader = baseReader.subReader(offset.toNumber());
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if (error.code === Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if (error.code === Logger.errors.BUFFER_OVERRUN) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value != void 0) {
        values.push(value);
      }
    });
    const uniqueNames = coders.reduce((accum, coder) => {
      const name2 = coder.localName;
      if (name2) {
        if (!accum[name2]) {
          accum[name2] = 0;
        }
        accum[name2]++;
      }
      return accum;
    }, {});
    coders.forEach((coder, index2) => {
      let name2 = coder.localName;
      if (!name2 || uniqueNames[name2] !== 1) {
        return;
      }
      if (name2 === "length") {
        name2 = "_length";
      }
      if (values[name2] != null) {
        return;
      }
      const value = values[index2];
      if (value instanceof Error) {
        Object.defineProperty(values, name2, { get: () => {
          throw value;
        } });
      } else {
        values[name2] = value;
      }
    });
    for (let i = 0; i < values.length; i++) {
      const value = values[i];
      if (value instanceof Error) {
        Object.defineProperty(values, i, { get: () => {
          throw value;
        } });
      }
    }
    return Object.freeze(values);
  }
  var ArrayCoder = class extends Coder {
    constructor(coder, length, localName) {
      const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type, localName, dynamic);
      this.coder = coder;
      this.length = length;
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i = 0; i < this.length; i++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, value) {
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      logger$8.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i = 0; i < value.length; i++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readValue().toNumber();
        if (count * 32 > reader._data.length) {
          logger$8.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, { length: reader._data.length, count });
        }
      }
      let coders = [];
      for (let i = 0; i < count; i++) {
        coders.push(new AnonymousCoder(this.coder));
      }
      return reader.coerce(this.name, unpack(reader, coders));
    }
  };
  var BooleanCoder = class extends Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, value) {
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return reader.coerce(this.type, !reader.readValue().isZero());
    }
  };
  var DynamicBytesCoder = class extends Coder {
    constructor(type, localName) {
      super(type, type, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = arrayify(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readValue().toNumber(), true);
    }
  };
  var BytesCoder = class extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(super.decode(reader)));
    }
  };
  var FixedBytesCoder = class extends Coder {
    constructor(size, localName) {
      let name2 = "bytes" + String(size);
      super(name2, name2, localName, false);
      this.size = size;
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
      let data2 = arrayify(value);
      if (data2.length !== this.size) {
        this._throwError("incorrect data length", value);
      }
      return writer.writeBytes(data2);
    }
    decode(reader) {
      return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
    }
  };
  var NullCoder = class extends Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes([]);
    }
    decode(reader) {
      reader.readBytes(0);
      return reader.coerce(this.name, null);
    }
  };
  var AddressZero = "0x0000000000000000000000000000000000000000";
  var NegativeOne$1 = BigNumber.from(-1);
  var Zero$1 = BigNumber.from(0);
  var One = BigNumber.from(1);
  var Two = BigNumber.from(2);
  var WeiPerEther = BigNumber.from("1000000000000000000");
  var MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  var HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
  var EtherSymbol = "\u039E";
  var index$1 = Object.freeze({ __proto__: null, AddressZero, NegativeOne: NegativeOne$1, Zero: Zero$1, One, Two, WeiPerEther, MaxUint256, HashZero, EtherSymbol });
  var NumberCoder = class extends Coder {
    constructor(size, signed, localName) {
      const name2 = (signed ? "int" : "uint") + size * 8;
      super(name2, name2, localName, false);
      this.size = size;
      this.signed = signed;
    }
    defaultValue() {
      return 0;
    }
    encode(writer, value) {
      let v = BigNumber.from(value);
      let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
      if (this.signed) {
        let bounds = maxUintValue.mask(this.size * 8 - 1);
        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne$1))) {
          this._throwError("value out-of-bounds", value);
        }
      } else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
        this._throwError("value out-of-bounds", value);
      }
      v = v.toTwos(this.size * 8).mask(this.size * 8);
      if (this.signed) {
        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
      }
      return writer.writeValue(v);
    }
    decode(reader) {
      let value = reader.readValue().mask(this.size * 8);
      if (this.signed) {
        value = value.fromTwos(this.size * 8);
      }
      return reader.coerce(this.name, value);
    }
  };
  var version$7 = "strings/5.1.0";
  var logger$9 = new Logger(version$7);
  var UnicodeNormalizationForm;
  (function(UnicodeNormalizationForm2) {
    UnicodeNormalizationForm2["current"] = "";
    UnicodeNormalizationForm2["NFC"] = "NFC";
    UnicodeNormalizationForm2["NFD"] = "NFD";
    UnicodeNormalizationForm2["NFKC"] = "NFKC";
    UnicodeNormalizationForm2["NFKD"] = "NFKD";
  })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
  var Utf8ErrorReason;
  (function(Utf8ErrorReason2) {
    Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
    Utf8ErrorReason2["OVERRUN"] = "string overrun";
    Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
    Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
    Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
    Utf8ErrorReason2["OVERLONG"] = "overlong representation";
  })(Utf8ErrorReason || (Utf8ErrorReason = {}));
  function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return logger$9.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
  }
  function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
      let i = 0;
      for (let o = offset + 1; o < bytes.length; o++) {
        if (bytes[o] >> 6 !== 2) {
          break;
        }
        i++;
      }
      return i;
    }
    if (reason === Utf8ErrorReason.OVERRUN) {
      return bytes.length - offset - 1;
    }
    return 0;
  }
  function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    if (reason === Utf8ErrorReason.OVERLONG) {
      output.push(badCodepoint);
      return 0;
    }
    output.push(65533);
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
  }
  var Utf8ErrorFuncs = Object.freeze({ error: errorFunc, ignore: ignoreFunc, replace: replaceFunc });
  function getUtf8CodePoints(bytes, onError) {
    if (onError == null) {
      onError = Utf8ErrorFuncs.error;
    }
    bytes = arrayify(bytes);
    const result = [];
    let i = 0;
    while (i < bytes.length) {
      const c = bytes[i++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
        } else {
          i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
        }
        continue;
      }
      if (i - 1 + extraLength >= bytes.length) {
        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        let nextChar = bytes[i];
        if ((nextChar & 192) != 128) {
          i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
      logger$9.checkNormalize();
      str = str.normalize(form);
    }
    let result = [];
    for (let i = 0; i < str.length; i++) {
      const c = str.charCodeAt(i);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) == 55296) {
        i++;
        const c2 = str.charCodeAt(i);
        if (i >= str.length || (c2 & 64512) !== 56320) {
          throw new Error("invalid utf-8 string");
        }
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return arrayify(result);
  }
  function escapeChar(value) {
    const hex2 = "0000" + value.toString(16);
    return "\\u" + hex2.substring(hex2.length - 4);
  }
  function _toEscapedUtf8String(bytes, onError) {
    return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
      if (codePoint < 256) {
        switch (codePoint) {
          case 8:
            return "\\b";
          case 9:
            return "\\t";
          case 10:
            return "\\n";
          case 13:
            return "\\r";
          case 34:
            return '\\"';
          case 92:
            return "\\\\";
        }
        if (codePoint >= 32 && codePoint < 127) {
          return String.fromCharCode(codePoint);
        }
      }
      if (codePoint <= 65535) {
        return escapeChar(codePoint);
      }
      codePoint -= 65536;
      return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
    }).join("") + '"';
  }
  function _toUtf8String(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
    }).join("");
  }
  function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
  }
  function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
  }
  function formatBytes32String(text) {
    const bytes = toUtf8Bytes(text);
    if (bytes.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }
    return hexlify(concat([bytes, HashZero]).slice(0, 32));
  }
  function parseBytes32String(bytes) {
    const data2 = arrayify(bytes);
    if (data2.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data2[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while (data2[length - 1] === 0) {
      length--;
    }
    return toUtf8String(data2.slice(0, length));
  }
  function bytes2(data2) {
    if (data2.length % 4 !== 0) {
      throw new Error("bad data");
    }
    let result = [];
    for (let i = 0; i < data2.length; i += 4) {
      result.push(parseInt(data2.substring(i, i + 4), 16));
    }
    return result;
  }
  function createTable(data2, func) {
    if (!func) {
      func = function(value) {
        return [parseInt(value, 16)];
      };
    }
    let lo = 0;
    let result = {};
    data2.split(",").forEach((pair) => {
      let comps = pair.split(":");
      lo += parseInt(comps[0], 16);
      result[lo] = func(comps[1]);
    });
    return result;
  }
  function createRangeTable(data2) {
    let hi = 0;
    return data2.split(",").map((v) => {
      let comps = v.split("-");
      if (comps.length === 1) {
        comps[1] = "0";
      } else if (comps[1] === "") {
        comps[1] = "1";
      }
      let lo = hi + parseInt(comps[0], 16);
      hi = parseInt(comps[1], 16);
      return { l: lo, h: hi };
    });
  }
  function matchMap(value, ranges) {
    let lo = 0;
    for (let i = 0; i < ranges.length; i++) {
      let range2 = ranges[i];
      lo += range2.l;
      if (value >= lo && value <= lo + range2.h && (value - lo) % (range2.d || 1) === 0) {
        if (range2.e && range2.e.indexOf(value - lo) !== -1) {
          continue;
        }
        return range2;
      }
    }
    return null;
  }
  var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
  var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
  var Table_B_2_ranges = [{ h: 25, s: 32, l: 65 }, { h: 30, s: 32, e: [23], l: 127 }, { h: 54, s: 1, e: [48], l: 64, d: 2 }, { h: 14, s: 1, l: 57, d: 2 }, { h: 44, s: 1, l: 17, d: 2 }, { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 }, { h: 16, s: 1, l: 68, d: 2 }, { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 }, { h: 26, s: 32, e: [17], l: 435 }, { h: 22, s: 1, l: 71, d: 2 }, { h: 15, s: 80, l: 40 }, { h: 31, s: 32, l: 16 }, { h: 32, s: 1, l: 80, d: 2 }, { h: 52, s: 1, l: 42, d: 2 }, { h: 12, s: 1, l: 55, d: 2 }, { h: 40, s: 1, e: [38], l: 15, d: 2 }, { h: 14, s: 1, l: 48, d: 2 }, { h: 37, s: 48, l: 49 }, { h: 148, s: 1, l: 6351, d: 2 }, { h: 88, s: 1, l: 160, d: 2 }, { h: 15, s: 16, l: 704 }, { h: 25, s: 26, l: 854 }, { h: 25, s: 32, l: 55915 }, { h: 37, s: 40, l: 1247 }, { h: 25, s: -119711, l: 53248 }, { h: 25, s: -119763, l: 52 }, { h: 25, s: -119815, l: 52 }, { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 }, { h: 25, s: -119919, l: 52 }, { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 }, { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 }, { h: 25, s: -120075, l: 52 }, { h: 25, s: -120127, l: 52 }, { h: 25, s: -120179, l: 52 }, { h: 25, s: -120231, l: 52 }, { h: 25, s: -120283, l: 52 }, { h: 25, s: -120335, l: 52 }, { h: 24, s: -119543, e: [17], l: 56 }, { h: 24, s: -119601, e: [17], l: 58 }, { h: 24, s: -119659, e: [17], l: 58 }, { h: 24, s: -119717, e: [17], l: 58 }, { h: 24, s: -119775, e: [17], l: 58 }];
  var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
  var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
  var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
  var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  function flatten(values) {
    return values.reduce((accum, value) => {
      value.forEach((value2) => {
        accum.push(value2);
      });
      return accum;
    }, []);
  }
  function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
  }
  function _nameprepTableB2(codepoint) {
    let range2 = matchMap(codepoint, Table_B_2_ranges);
    if (range2) {
      return [codepoint + range2.s];
    }
    let codes2 = Table_B_2_lut_abs[codepoint];
    if (codes2) {
      return codes2;
    }
    let shift = Table_B_2_lut_rel[codepoint];
    if (shift) {
      return [codepoint + shift[0]];
    }
    let complex = Table_B_2_complex[codepoint];
    if (complex) {
      return complex;
    }
    return null;
  }
  function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
  }
  function nameprep(value) {
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
      return value.toLowerCase();
    }
    let codes2 = toUtf8CodePoints(value);
    codes2 = flatten(codes2.map((code) => {
      if (Table_B_1_flags.indexOf(code) >= 0) {
        return [];
      }
      if (code >= 65024 && code <= 65039) {
        return [];
      }
      let codesTableB2 = _nameprepTableB2(code);
      if (codesTableB2) {
        return codesTableB2;
      }
      return [code];
    }));
    codes2 = toUtf8CodePoints(_toUtf8String(codes2), UnicodeNormalizationForm.NFKC);
    codes2.forEach((code) => {
      if (_nameprepTableC(code)) {
        throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
      }
    });
    codes2.forEach((code) => {
      if (_nameprepTableA1(code)) {
        throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
      }
    });
    let name2 = _toUtf8String(codes2);
    if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
      throw new Error("invalid hyphen");
    }
    if (name2.length > 63) {
      throw new Error("too long");
    }
    return name2;
  }
  var StringCoder = class extends DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, value) {
      return super.encode(writer, toUtf8Bytes(value));
    }
    decode(reader) {
      return toUtf8String(super.decode(reader));
    }
  };
  var TupleCoder = class extends Coder {
    constructor(coders, localName) {
      let dynamic = false;
      const types = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types.push(coder.type);
      });
      const type = "tuple(" + types.join(",") + ")";
      super("tuple", type, localName, dynamic);
      this.coders = coders;
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name2 = coder.localName;
        if (name2) {
          if (!accum[name2]) {
            accum[name2] = 0;
          }
          accum[name2]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index2) => {
        let name2 = coder.localName;
        if (!name2 || uniqueNames[name2] !== 1) {
          return;
        }
        if (name2 === "length") {
          name2 = "_length";
        }
        if (values[name2] != null) {
          return;
        }
        values[name2] = values[index2];
      });
      return Object.freeze(values);
    }
    encode(writer, value) {
      return pack(writer, this.coders, value);
    }
    decode(reader) {
      return reader.coerce(this.name, unpack(reader, this.coders));
    }
  };
  var logger$a = new Logger(version$4);
  var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  var AbiCoder = class {
    constructor(coerceFunc) {
      logger$a.checkNew(new.target, AbiCoder);
      defineReadOnly(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
      switch (param.baseType) {
        case "address":
          return new AddressCoder(param.name);
        case "bool":
          return new BooleanCoder(param.name);
        case "string":
          return new StringCoder(param.name);
        case "bytes":
          return new BytesCoder(param.name);
        case "array":
          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
        case "tuple":
          return new TupleCoder((param.components || []).map((component) => {
            return this._getCoder(component);
          }), param.name);
        case "":
          return new NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size = parseInt(match[2] || "256");
        if (size === 0 || size > 256 || size % 8 !== 0) {
          logger$a.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
        }
        return new NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size = parseInt(match[1]);
        if (size === 0 || size > 32) {
          logger$a.throwArgumentError("invalid bytes length", "param", param);
        }
        return new FixedBytesCoder(size, param.name);
      }
      return logger$a.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
      return 32;
    }
    _getReader(data2, allowLoose) {
      return new Reader(data2, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
      return new Writer(this._getWordSize());
    }
    getDefaultValue(types) {
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    encode(types, values) {
      if (types.length !== values.length) {
        logger$a.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, { count: { types: types.length, values: values.length }, value: { types, values } });
      }
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      const writer = this._getWriter();
      coder.encode(writer, values);
      return writer.data;
    }
    decode(types, data2, loose) {
      const coders = types.map((type) => this._getCoder(ParamType.from(type)));
      const coder = new TupleCoder(coders, "_");
      return coder.decode(this._getReader(arrayify(data2), loose));
    }
  };
  var defaultAbiCoder = new AbiCoder();
  function id(text) {
    return keccak256(toUtf8Bytes(text));
  }
  var version$8 = "hash/5.1.0";
  var logger$b = new Logger(version$8);
  var Zeros = new Uint8Array(32);
  Zeros.fill(0);
  var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
  function isValidName(name2) {
    try {
      const comps = name2.split(".");
      for (let i = 0; i < comps.length; i++) {
        if (nameprep(comps[i]).length === 0) {
          throw new Error("empty");
        }
      }
      return true;
    } catch (error) {
    }
    return false;
  }
  function namehash(name2) {
    if (typeof name2 !== "string") {
      logger$b.throwArgumentError("invalid address - " + String(name2), "name", name2);
    }
    let result = Zeros;
    while (name2.length) {
      const partition = name2.match(Partition);
      const label = toUtf8Bytes(nameprep(partition[3]));
      result = keccak256(concat([result, keccak256(label)]));
      name2 = partition[2] || "";
    }
    return hexlify(result);
  }
  var messagePrefix = "Ethereum Signed Message:\n";
  function hashMessage(message) {
    if (typeof message === "string") {
      message = toUtf8Bytes(message);
    }
    return keccak256(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));
  }
  var __awaiter$1 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$c = new Logger(version$8);
  var padding = new Uint8Array(32);
  padding.fill(0);
  var NegativeOne$2 = BigNumber.from(-1);
  var Zero$2 = BigNumber.from(0);
  var One$1 = BigNumber.from(1);
  var MaxUint256$1 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
    const bytes = arrayify(value);
    const padOffset = bytes.length % 32;
    if (padOffset) {
      return hexConcat([bytes, padding.slice(padOffset)]);
    }
    return hexlify(bytes);
  }
  var hexTrue = hexZeroPad(One$1.toHexString(), 32);
  var hexFalse = hexZeroPad(Zero$2.toHexString(), 32);
  var domainFieldTypes = { name: "string", version: "string", chainId: "uint256", verifyingContract: "address", salt: "bytes32" };
  var domainFieldNames = ["name", "version", "chainId", "verifyingContract", "salt"];
  function checkString(key2) {
    return function(value) {
      if (typeof value !== "string") {
        logger$c.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
      }
      return value;
    };
  }
  var domainChecks = { name: checkString("name"), version: checkString("version"), chainId: function(value) {
    try {
      return BigNumber.from(value).toString();
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  }, verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  }, salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger$c.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  } };
  function getBaseEncoder(type) {
    {
      const match = type.match(/^(u?)int(\d*)$/);
      if (match) {
        const signed = match[1] === "";
        const width = parseInt(match[2] || "256");
        if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
          logger$c.throwArgumentError("invalid numeric width", "type", type);
        }
        const boundsUpper = MaxUint256$1.mask(signed ? width - 1 : width);
        const boundsLower = signed ? boundsUpper.add(One$1).mul(NegativeOne$2) : Zero$2;
        return function(value) {
          const v = BigNumber.from(value);
          if (v.lt(boundsLower) || v.gt(boundsUpper)) {
            logger$c.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
          }
          return hexZeroPad(v.toTwos(256).toHexString(), 32);
        };
      }
    }
    {
      const match = type.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        if (width === 0 || width > 32 || match[1] !== String(width)) {
          logger$c.throwArgumentError("invalid bytes width", "type", type);
        }
        return function(value) {
          const bytes = arrayify(value);
          if (bytes.length !== width) {
            logger$c.throwArgumentError(`invalid length for ${type}`, "value", value);
          }
          return hexPadRight(value);
        };
      }
    }
    switch (type) {
      case "address":
        return function(value) {
          return hexZeroPad(getAddress(value), 32);
        };
      case "bool":
        return function(value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function(value) {
          return keccak256(value);
        };
      case "string":
        return function(value) {
          return id(value);
        };
    }
    return null;
  }
  function encodeType(name2, fields) {
    return `${name2}(${fields.map(({ name: name3, type }) => type + " " + name3).join(",")})`;
  }
  var TypedDataEncoder = class {
    constructor(types) {
      defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
      defineReadOnly(this, "_encoderCache", {});
      defineReadOnly(this, "_types", {});
      const links = {};
      const parents = {};
      const subtypes = {};
      Object.keys(types).forEach((type) => {
        links[type] = {};
        parents[type] = [];
        subtypes[type] = {};
      });
      for (const name2 in types) {
        const uniqueNames = {};
        types[name2].forEach((field) => {
          if (uniqueNames[field.name]) {
            logger$c.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name2)}`, "types", types);
          }
          uniqueNames[field.name] = true;
          const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
          if (baseType === name2) {
            logger$c.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
          }
          const encoder = getBaseEncoder(baseType);
          if (encoder) {
            return;
          }
          if (!parents[baseType]) {
            logger$c.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
          }
          parents[baseType].push(name2);
          links[name2][baseType] = true;
        });
      }
      const primaryTypes = Object.keys(parents).filter((n) => parents[n].length === 0);
      if (primaryTypes.length === 0) {
        logger$c.throwArgumentError("missing primary type", "types", types);
      } else if (primaryTypes.length > 1) {
        logger$c.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", types);
      }
      defineReadOnly(this, "primaryType", primaryTypes[0]);
      function checkCircular(type, found) {
        if (found[type]) {
          logger$c.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
        }
        found[type] = true;
        Object.keys(links[type]).forEach((child) => {
          if (!parents[child]) {
            return;
          }
          checkCircular(child, found);
          Object.keys(found).forEach((subtype) => {
            subtypes[subtype][child] = true;
          });
        });
        delete found[type];
      }
      checkCircular(this.primaryType, {});
      for (const name2 in subtypes) {
        const st = Object.keys(subtypes[name2]);
        st.sort();
        this._types[name2] = encodeType(name2, types[name2]) + st.map((t) => encodeType(t, types[t])).join("");
      }
    }
    getEncoder(type) {
      let encoder = this._encoderCache[type];
      if (!encoder) {
        encoder = this._encoderCache[type] = this._getEncoder(type);
      }
      return encoder;
    }
    _getEncoder(type) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return encoder;
        }
      }
      const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        const subtype = match[1];
        const subEncoder = this.getEncoder(subtype);
        const length = parseInt(match[3]);
        return (value) => {
          if (length >= 0 && value.length !== length) {
            logger$c.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
          }
          let result = value.map(subEncoder);
          if (this._types[subtype]) {
            result = result.map(keccak256);
          }
          return keccak256(hexConcat(result));
        };
      }
      const fields = this.types[type];
      if (fields) {
        const encodedType = id(this._types[type]);
        return (value) => {
          const values = fields.map(({ name: name2, type: type2 }) => {
            const result = this.getEncoder(type2)(value[name2]);
            if (this._types[type2]) {
              return keccak256(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return hexConcat(values);
        };
      }
      return logger$c.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    encodeType(name2) {
      const result = this._types[name2];
      if (!result) {
        logger$c.throwArgumentError(`unknown type: ${JSON.stringify(name2)}`, "name", name2);
      }
      return result;
    }
    encodeData(type, value) {
      return this.getEncoder(type)(value);
    }
    hashStruct(name2, value) {
      return keccak256(this.encodeData(name2, value));
    }
    encode(value) {
      return this.encodeData(this.primaryType, value);
    }
    hash(value) {
      return this.hashStruct(this.primaryType, value);
    }
    _visit(type, value, callback) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return callback(type, value);
        }
      }
      const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
      if (match) {
        const subtype = match[1];
        const length = parseInt(match[3]);
        if (length >= 0 && value.length !== length) {
          logger$c.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }
        return value.map((v) => this._visit(subtype, v, callback));
      }
      const fields = this.types[type];
      if (fields) {
        return fields.reduce((accum, { name: name2, type: type2 }) => {
          accum[name2] = this._visit(type2, value[name2], callback);
          return accum;
        }, {});
      }
      return logger$c.throwArgumentError(`unknown type: ${type}`, "type", type);
    }
    visit(value, callback) {
      return this._visit(this.primaryType, value, callback);
    }
    static from(types) {
      return new TypedDataEncoder(types);
    }
    static getPrimaryType(types) {
      return TypedDataEncoder.from(types).primaryType;
    }
    static hashStruct(name2, types, value) {
      return TypedDataEncoder.from(types).hashStruct(name2, value);
    }
    static hashDomain(domain) {
      const domainFields = [];
      for (const name2 in domain) {
        const type = domainFieldTypes[name2];
        if (!type) {
          logger$c.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name2)}`, "domain", domain);
        }
        domainFields.push({ name: name2, type });
      }
      domainFields.sort((a, b) => {
        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
      });
      return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
    }
    static encode(domain, types, value) {
      return hexConcat(["0x1901", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);
    }
    static hash(domain, types, value) {
      return keccak256(TypedDataEncoder.encode(domain, types, value));
    }
    static resolveNames(domain, types, value, resolveName2) {
      return __awaiter$1(this, void 0, void 0, function* () {
        domain = shallowCopy(domain);
        const ensCache = {};
        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = TypedDataEncoder.from(types);
        encoder.visit(value, (type, value2) => {
          if (type === "address" && !isHexString(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name2 in ensCache) {
          ensCache[name2] = yield resolveName2(name2);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type, value2) => {
          if (type === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      });
    }
    static getPayload(domain, types, value) {
      TypedDataEncoder.hashDomain(domain);
      const domainValues = {};
      const domainTypes = [];
      domainFieldNames.forEach((name2) => {
        const value2 = domain[name2];
        if (value2 == null) {
          return;
        }
        domainValues[name2] = domainChecks[name2](value2);
        domainTypes.push({ name: name2, type: domainFieldTypes[name2] });
      });
      const encoder = TypedDataEncoder.from(types);
      const typesWithDomain = shallowCopy(types);
      if (typesWithDomain.EIP712Domain) {
        logger$c.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
      } else {
        typesWithDomain.EIP712Domain = domainTypes;
      }
      encoder.encode(value);
      return { types: typesWithDomain, domain: domainValues, primaryType: encoder.primaryType, message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(arrayify(value2));
        }
        if (type.match(/^u?int/)) {
          return BigNumber.from(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            if (typeof value2 !== "string") {
              logger$c.throwArgumentError(`invalid string`, "value", value2);
            }
            return value2;
        }
        return logger$c.throwArgumentError("unsupported type", "type", type);
      }) };
    }
  };
  var logger$d = new Logger(version$4);
  var LogDescription = class extends Description {
  };
  var TransactionDescription = class extends Description {
  };
  var Indexed = class extends Description {
    static isIndexed(value) {
      return !!(value && value._isIndexed);
    }
  };
  function wrapAccessError(property, error) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error;
    return wrap;
  }
  var Interface = class {
    constructor(fragments) {
      logger$d.checkNew(new.target, Interface);
      let abi = [];
      if (typeof fragments === "string") {
        abi = JSON.parse(fragments);
      } else {
        abi = fragments;
      }
      defineReadOnly(this, "fragments", abi.map((fragment) => {
        return Fragment.from(fragment);
      }).filter((fragment) => fragment != null));
      defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "errors", {});
      defineReadOnly(this, "events", {});
      defineReadOnly(this, "structs", {});
      this.fragments.forEach((fragment) => {
        let bucket = null;
        switch (fragment.type) {
          case "constructor":
            if (this.deploy) {
              logger$d.warn("duplicate definition - constructor");
              return;
            }
            defineReadOnly(this, "deploy", fragment);
            return;
          case "function":
            bucket = this.functions;
            break;
          case "event":
            bucket = this.events;
            break;
          default:
            return;
        }
        let signature2 = fragment.format();
        if (bucket[signature2]) {
          logger$d.warn("duplicate definition - " + signature2);
          return;
        }
        bucket[signature2] = fragment;
      });
      if (!this.deploy) {
        defineReadOnly(this, "deploy", ConstructorFragment.from({ payable: false, type: "constructor" }));
      }
      defineReadOnly(this, "_isInterface", true);
    }
    format(format) {
      if (!format) {
        format = FormatTypes.full;
      }
      if (format === FormatTypes.sighash) {
        logger$d.throwArgumentError("interface does not support formatting sighash", "format", format);
      }
      const abi = this.fragments.map((fragment) => fragment.format(format));
      if (format === FormatTypes.json) {
        return JSON.stringify(abi.map((j) => JSON.parse(j)));
      }
      return abi;
    }
    static getAbiCoder() {
      return defaultAbiCoder;
    }
    static getAddress(address) {
      return getAddress(address);
    }
    static getSighash(functionFragment) {
      return hexDataSlice(id(functionFragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
      return id(eventFragment.format());
    }
    getFunction(nameOrSignatureOrSighash) {
      if (isHexString(nameOrSignatureOrSighash)) {
        for (const name2 in this.functions) {
          if (nameOrSignatureOrSighash === this.getSighash(name2)) {
            return this.functions[name2];
          }
        }
        logger$d.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
      }
      if (nameOrSignatureOrSighash.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrSighash.trim();
        const matching = Object.keys(this.functions).filter((f2) => f2.split("(")[0] === name2);
        if (matching.length === 0) {
          logger$d.throwArgumentError("no matching function", "name", name2);
        } else if (matching.length > 1) {
          logger$d.throwArgumentError("multiple matching functions", "name", name2);
        }
        return this.functions[matching[0]];
      }
      const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
      if (!result) {
        logger$d.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
      }
      return result;
    }
    getEvent(nameOrSignatureOrTopic) {
      if (isHexString(nameOrSignatureOrTopic)) {
        const topichash = nameOrSignatureOrTopic.toLowerCase();
        for (const name2 in this.events) {
          if (topichash === this.getEventTopic(name2)) {
            return this.events[name2];
          }
        }
        logger$d.throwArgumentError("no matching event", "topichash", topichash);
      }
      if (nameOrSignatureOrTopic.indexOf("(") === -1) {
        const name2 = nameOrSignatureOrTopic.trim();
        const matching = Object.keys(this.events).filter((f2) => f2.split("(")[0] === name2);
        if (matching.length === 0) {
          logger$d.throwArgumentError("no matching event", "name", name2);
        } else if (matching.length > 1) {
          logger$d.throwArgumentError("multiple matching events", "name", name2);
        }
        return this.events[matching[0]];
      }
      const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
      if (!result) {
        logger$d.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
      }
      return result;
    }
    getSighash(functionFragment) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return getStatic(this.constructor, "getSighash")(functionFragment);
    }
    getEventTopic(eventFragment) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      return getStatic(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data2) {
      return this._abiCoder.decode(params, data2);
    }
    _encodeParams(params, values) {
      return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
      return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeFunctionData(functionFragment, data2) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      const bytes = arrayify(data2);
      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
        logger$d.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
      }
      return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    }
    encodeFunctionData(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));
    }
    decodeFunctionResult(functionFragment, data2) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      let bytes = arrayify(data2);
      let reason = null;
      let errorSignature = null;
      switch (bytes.length % this._abiCoder._getWordSize()) {
        case 0:
          try {
            return this._abiCoder.decode(functionFragment.outputs, bytes);
          } catch (error) {
          }
          break;
        case 4:
          if (hexlify(bytes.slice(0, 4)) === "0x08c379a0") {
            errorSignature = "Error(string)";
            reason = this._abiCoder.decode(["string"], bytes.slice(4))[0];
          }
          break;
      }
      return logger$d.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, { method: functionFragment.format(), errorSignature, errorArgs: [reason], reason });
    }
    encodeFunctionResult(functionFragment, values) {
      if (typeof functionFragment === "string") {
        functionFragment = this.getFunction(functionFragment);
      }
      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    encodeFilterTopics(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (values.length > eventFragment.inputs.length) {
        logger$d.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, { argument: "values", value: values });
      }
      let topics = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      const encodeTopic = (param, value) => {
        if (param.type === "string") {
          return id(value);
        } else if (param.type === "bytes") {
          return keccak256(hexlify(value));
        }
        if (param.type === "address") {
          this._abiCoder.encode(["address"], [value]);
        }
        return hexZeroPad(hexlify(value), 32);
      };
      values.forEach((value, index2) => {
        let param = eventFragment.inputs[index2];
        if (!param.indexed) {
          if (value != null) {
            logger$d.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
          }
          return;
        }
        if (value == null) {
          topics.push(null);
        } else if (param.baseType === "array" || param.baseType === "tuple") {
          logger$d.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
        } else if (Array.isArray(value)) {
          topics.push(value.map((value2) => encodeTopic(param, value2)));
        } else {
          topics.push(encodeTopic(param, value));
        }
      });
      while (topics.length && topics[topics.length - 1] === null) {
        topics.pop();
      }
      return topics;
    }
    encodeEventLog(eventFragment, values) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      const topics = [];
      const dataTypes = [];
      const dataValues = [];
      if (!eventFragment.anonymous) {
        topics.push(this.getEventTopic(eventFragment));
      }
      if (values.length !== eventFragment.inputs.length) {
        logger$d.throwArgumentError("event arguments/values mismatch", "values", values);
      }
      eventFragment.inputs.forEach((param, index2) => {
        const value = values[index2];
        if (param.indexed) {
          if (param.type === "string") {
            topics.push(id(value));
          } else if (param.type === "bytes") {
            topics.push(keccak256(value));
          } else if (param.baseType === "tuple" || param.baseType === "array") {
            throw new Error("not implemented");
          } else {
            topics.push(this._abiCoder.encode([param.type], [value]));
          }
        } else {
          dataTypes.push(param);
          dataValues.push(value);
        }
      });
      return { data: this._abiCoder.encode(dataTypes, dataValues), topics };
    }
    decodeEventLog(eventFragment, data2, topics) {
      if (typeof eventFragment === "string") {
        eventFragment = this.getEvent(eventFragment);
      }
      if (topics != null && !eventFragment.anonymous) {
        let topicHash = this.getEventTopic(eventFragment);
        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
          logger$d.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
        }
        topics = topics.slice(1);
      }
      let indexed = [];
      let nonIndexed = [];
      let dynamic = [];
      eventFragment.inputs.forEach((param, index2) => {
        if (param.indexed) {
          if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
            indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
            dynamic.push(true);
          } else {
            indexed.push(param);
            dynamic.push(false);
          }
        } else {
          nonIndexed.push(param);
          dynamic.push(false);
        }
      });
      let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
      let resultNonIndexed = this._abiCoder.decode(nonIndexed, data2, true);
      let result = [];
      let nonIndexedIndex = 0, indexedIndex = 0;
      eventFragment.inputs.forEach((param, index2) => {
        if (param.indexed) {
          if (resultIndexed == null) {
            result[index2] = new Indexed({ _isIndexed: true, hash: null });
          } else if (dynamic[index2]) {
            result[index2] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
          } else {
            try {
              result[index2] = resultIndexed[indexedIndex++];
            } catch (error) {
              result[index2] = error;
            }
          }
        } else {
          try {
            result[index2] = resultNonIndexed[nonIndexedIndex++];
          } catch (error) {
            result[index2] = error;
          }
        }
        if (param.name && result[param.name] == null) {
          const value = result[index2];
          if (value instanceof Error) {
            Object.defineProperty(result, param.name, { get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            } });
          } else {
            result[param.name] = value;
          }
        }
      });
      for (let i = 0; i < result.length; i++) {
        const value = result[i];
        if (value instanceof Error) {
          Object.defineProperty(result, i, { get: () => {
            throw wrapAccessError(`index ${i}`, value);
          } });
        }
      }
      return Object.freeze(result);
    }
    parseTransaction(tx) {
      let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
      if (!fragment) {
        return null;
      }
      return new TransactionDescription({ args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)), functionFragment: fragment, name: fragment.name, signature: fragment.format(), sighash: this.getSighash(fragment), value: BigNumber.from(tx.value || "0") });
    }
    parseLog(log) {
      let fragment = this.getEvent(log.topics[0]);
      if (!fragment || fragment.anonymous) {
        return null;
      }
      return new LogDescription({ eventFragment: fragment, name: fragment.name, signature: fragment.format(), topic: this.getEventTopic(fragment), args: this.decodeEventLog(fragment, log.data, log.topics) });
    }
    static isInterface(value) {
      return !!(value && value._isInterface);
    }
  };
  var version$9 = "abstract-provider/5.1.0";
  var logger$e = new Logger(version$9);
  var ForkEvent = class extends Description {
    static isForkEvent(value) {
      return !!(value && value._isForkEvent);
    }
  };
  var Provider = class {
    constructor() {
      logger$e.checkAbstract(new.target, Provider);
      defineReadOnly(this, "_isProvider", true);
    }
    addListener(eventName, listener) {
      return this.on(eventName, listener);
    }
    removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
    static isProvider(value) {
      return !!(value && value._isProvider);
    }
  };
  var version$a = "abstract-signer/5.1.0";
  var __awaiter$2 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$f = new Logger(version$a);
  var allowedTransactionKeys = ["accessList", "chainId", "data", "from", "gasLimit", "gasPrice", "nonce", "to", "type", "value"];
  var forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];
  var Signer = class {
    constructor() {
      logger$f.checkAbstract(new.target, Signer);
      defineReadOnly(this, "_isSigner", true);
    }
    getBalance(blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getBalance");
        return yield this.provider.getBalance(this.getAddress(), blockTag);
      });
    }
    getTransactionCount(blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getTransactionCount");
        return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
      });
    }
    estimateGas(transaction) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("estimateGas");
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        return yield this.provider.estimateGas(tx);
      });
    }
    call(transaction, blockTag) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("call");
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        return yield this.provider.call(tx, blockTag);
      });
    }
    sendTransaction(transaction) {
      this._checkProvider("sendTransaction");
      return this.populateTransaction(transaction).then((tx) => {
        return this.signTransaction(tx).then((signedTx) => {
          return this.provider.sendTransaction(signedTx);
        });
      });
    }
    getChainId() {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getChainId");
        const network = yield this.provider.getNetwork();
        return network.chainId;
      });
    }
    getGasPrice() {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("getGasPrice");
        return yield this.provider.getGasPrice();
      });
    }
    resolveName(name2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkProvider("resolveName");
        return yield this.provider.resolveName(name2);
      });
    }
    checkTransaction(transaction) {
      for (const key2 in transaction) {
        if (allowedTransactionKeys.indexOf(key2) === -1) {
          logger$f.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
        }
      }
      const tx = shallowCopy(transaction);
      if (tx.from == null) {
        tx.from = this.getAddress();
      } else {
        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then((result) => {
          if (result[0].toLowerCase() !== result[1].toLowerCase()) {
            logger$f.throwArgumentError("from address mismatch", "transaction", transaction);
          }
          return result[0];
        });
      }
      return tx;
    }
    populateTransaction(transaction) {
      return __awaiter$2(this, void 0, void 0, function* () {
        const tx = yield resolveProperties(this.checkTransaction(transaction));
        if (tx.to != null) {
          tx.to = Promise.resolve(tx.to).then((to) => __awaiter$2(this, void 0, void 0, function* () {
            if (to == null) {
              return null;
            }
            const address = yield this.resolveName(to);
            if (address == null) {
              logger$f.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
            }
            return address;
          }));
        }
        if (tx.gasPrice == null) {
          tx.gasPrice = this.getGasPrice();
        }
        if (tx.nonce == null) {
          tx.nonce = this.getTransactionCount("pending");
        }
        if (tx.gasLimit == null) {
          tx.gasLimit = this.estimateGas(tx).catch((error) => {
            if (forwardErrors.indexOf(error.code) >= 0) {
              throw error;
            }
            return logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, tx });
          });
        }
        if (tx.chainId == null) {
          tx.chainId = this.getChainId();
        } else {
          tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then((results) => {
            if (results[1] !== 0 && results[0] !== results[1]) {
              logger$f.throwArgumentError("chainId address mismatch", "transaction", transaction);
            }
            return results[0];
          });
        }
        return yield resolveProperties(tx);
      });
    }
    _checkProvider(operation) {
      if (!this.provider) {
        logger$f.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: operation || "_checkProvider" });
      }
    }
    static isSigner(value) {
      return !!(value && value._isSigner);
    }
  };
  var VoidSigner = class extends Signer {
    constructor(address, provider) {
      logger$f.checkNew(new.target, VoidSigner);
      super();
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "provider", provider || null);
    }
    getAddress() {
      return Promise.resolve(this.address);
    }
    _fail(message, operation) {
      return Promise.resolve().then(() => {
        logger$f.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation });
      });
    }
    signMessage(message) {
      return this._fail("VoidSigner cannot sign messages", "signMessage");
    }
    signTransaction(transaction) {
      return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    }
    _signTypedData(domain, types, value) {
      return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    }
    connect(provider) {
      return new VoidSigner(this.address, provider);
    }
  };
  var minimalisticAssert = assert;
  function assert(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, { constructor: { value: ctor, enumerable: false, writable: true, configurable: true } });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var inherits = createCommonjsModule(function(module) {
    try {
      var util = null;
      if (typeof util.inherits !== "function")
        throw "";
      module.exports = util.inherits;
    } catch (e) {
      module.exports = inherits_browser;
    }
  });
  var inherits_1 = inherits;
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/gi, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  var toArray_1 = toArray;
  function toHex$1(msg) {
    var res = "";
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  var toHex_1 = toHex$1;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  var htonl_1 = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  var toHex32_1 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  var zero2_1 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  var zero8_1 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  var join32_1 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  var split32_1 = split32;
  function rotr32(w, b) {
    return w >>> b | w << 32 - b;
  }
  var rotr32_1 = rotr32;
  function rotl32(w, b) {
    return w << b | w >>> 32 - b;
  }
  var rotl32_1 = rotl32;
  function sum32(a, b) {
    return a + b >>> 0;
  }
  var sum32_1 = sum32;
  function sum32_3(a, b, c) {
    return a + b + c >>> 0;
  }
  var sum32_3_1 = sum32_3;
  function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  var sum32_4_1 = sum32_4;
  function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  var sum32_5_1 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  var sum64_1 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  var sum64_hi_1 = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  var sum64_lo_1 = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  var sum64_4_hi_1 = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  var sum64_4_lo_1 = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  var sum64_5_hi_1 = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  var sum64_5_lo_1 = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  var rotr64_hi_1 = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  var rotr64_lo_1 = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  var shr64_hi_1 = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  var shr64_lo_1 = shr64_lo;
  var utils = { inherits: inherits_1, toArray: toArray_1, toHex: toHex_1, htonl: htonl_1, toHex32: toHex32_1, zero2: zero2_1, zero8: zero8_1, join32: join32_1, split32: split32_1, rotr32: rotr32_1, rotl32: rotl32_1, sum32: sum32_1, sum32_3: sum32_3_1, sum32_4: sum32_4_1, sum32_5: sum32_5_1, sum64: sum64_1, sum64_hi: sum64_hi_1, sum64_lo: sum64_lo_1, sum64_4_hi: sum64_4_hi_1, sum64_4_lo: sum64_4_lo_1, sum64_5_hi: sum64_5_hi_1, sum64_5_lo: sum64_5_lo_1, rotr64_hi: rotr64_hi_1, rotr64_lo: rotr64_lo_1, shr64_hi: shr64_hi_1, shr64_lo: shr64_lo_1 };
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  var BlockHash_1 = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r2, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i = 1; i < k; i++)
      res[i] = 0;
    len <<= 3;
    if (this.endian === "big") {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = len >>> 24 & 255;
      res[i++] = len >>> 16 & 255;
      res[i++] = len >>> 8 & 255;
      res[i++] = len & 255;
    } else {
      res[i++] = len & 255;
      res[i++] = len >>> 8 & 255;
      res[i++] = len >>> 16 & 255;
      res[i++] = len >>> 24 & 255;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }
    return res;
  };
  var common = { BlockHash: BlockHash_1 };
  var rotr32$1 = utils.rotr32;
  function ft_1(s2, x, y, z) {
    if (s2 === 0)
      return ch32(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32(x, y, z);
    if (s2 === 2)
      return maj32(x, y, z);
  }
  var ft_1_1 = ft_1;
  function ch32(x, y, z) {
    return x & y ^ ~x & z;
  }
  var ch32_1 = ch32;
  function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  var maj32_1 = maj32;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  var p32_1 = p32;
  function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
  }
  var s0_256_1 = s0_256;
  function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
  }
  var s1_256_1 = s1_256;
  function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;
  }
  var g0_256_1 = g0_256;
  function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;
  }
  var g1_256_1 = g1_256;
  var common$1 = { ft_1: ft_1_1, ch32: ch32_1, maj32: maj32_1, p32: p32_1, s0_256: s0_256_1, s1_256: s1_256_1, g0_256: g0_256_1, g1_256: g1_256_1 };
  var rotl32$1 = utils.rotl32;
  var sum32$1 = utils.sum32;
  var sum32_5$1 = utils.sum32_5;
  var ft_1$1 = common$1.ft_1;
  var BlockHash$1 = common.BlockHash;
  var sha1_K = [1518500249, 1859775393, 2400959708, 3395469782];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$1.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.W = new Array(80);
  }
  utils.inherits(SHA1, BlockHash$1);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i = 0; i < W.length; i++) {
      var s2 = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s2, b, c, d), e, W[i], sha1_K[s2]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
  };
  SHA1.prototype._digest = function digest2(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  var sum32$2 = utils.sum32;
  var sum32_4$1 = utils.sum32_4;
  var sum32_5$2 = utils.sum32_5;
  var ch32$1 = common$1.ch32;
  var maj32$1 = common$1.maj32;
  var s0_256$1 = common$1.s0_256;
  var s1_256$1 = common$1.s1_256;
  var g0_256$1 = common$1.g0_256;
  var g1_256$1 = common$1.g1_256;
  var BlockHash$2 = common.BlockHash;
  var sha256_K = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();
    BlockHash$2.call(this);
    this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils.inherits(SHA256, BlockHash$2);
  var _256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;
  SHA256.prototype._update = function _update2(msg, start) {
    var W = this.W;
    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    minimalisticAssert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f2, g), this.k[i], W[i]);
      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$2(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$2(T1, T2);
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
    this.h[5] = sum32$2(this.h[5], f2);
    this.h[6] = sum32$2(this.h[6], g);
    this.h[7] = sum32$2(this.h[7], h);
  };
  SHA256.prototype._digest = function digest3(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    _256.call(this);
    this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
  }
  utils.inherits(SHA224, _256);
  var _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest4(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h.slice(0, 7), "big");
    else
      return utils.split32(this.h.slice(0, 7), "big");
  };
  var rotr64_hi$1 = utils.rotr64_hi;
  var rotr64_lo$1 = utils.rotr64_lo;
  var shr64_hi$1 = utils.shr64_hi;
  var shr64_lo$1 = utils.shr64_lo;
  var sum64$1 = utils.sum64;
  var sum64_hi$1 = utils.sum64_hi;
  var sum64_lo$1 = utils.sum64_lo;
  var sum64_4_hi$1 = utils.sum64_4_hi;
  var sum64_4_lo$1 = utils.sum64_4_lo;
  var sum64_5_hi$1 = utils.sum64_5_hi;
  var sum64_5_lo$1 = utils.sum64_5_lo;
  var BlockHash$3 = common.BlockHash;
  var sha512_K = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();
    BlockHash$3.call(this);
    this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils.inherits(SHA512, BlockHash$3);
  var _512 = SHA512;
  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;
  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
  };
  SHA512.prototype._update = function _update3(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    minimalisticAssert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64$1(this.h, 0, ah, al);
    sum64$1(this.h, 2, bh, bl);
    sum64$1(this.h, 4, ch, cl);
    sum64$1(this.h, 6, dh, dl);
    sum64$1(this.h, 8, eh, el);
    sum64$1(this.h, 10, fh, fl);
    sum64$1(this.h, 12, gh, gl);
    sum64$1(this.h, 14, hh, hl);
  };
  SHA512.prototype._digest = function digest5(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "big");
    else
      return utils.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 28);
    var c1_hi = rotr64_hi$1(xl, xh, 2);
    var c2_hi = rotr64_hi$1(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 28);
    var c1_lo = rotr64_lo$1(xl, xh, 2);
    var c2_lo = rotr64_lo$1(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 14);
    var c1_hi = rotr64_hi$1(xh, xl, 18);
    var c2_hi = rotr64_hi$1(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 14);
    var c1_lo = rotr64_lo$1(xh, xl, 18);
    var c2_lo = rotr64_lo$1(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 1);
    var c1_hi = rotr64_hi$1(xh, xl, 8);
    var c2_hi = shr64_hi$1(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 1);
    var c1_lo = rotr64_lo$1(xh, xl, 8);
    var c2_lo = shr64_lo$1(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 19);
    var c1_hi = rotr64_hi$1(xl, xh, 29);
    var c2_hi = shr64_hi$1(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 19);
    var c1_lo = rotr64_lo$1(xl, xh, 29);
    var c2_lo = shr64_lo$1(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    _512.call(this);
    this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
  }
  utils.inherits(SHA384, _512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest6(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h.slice(0, 12), "big");
    else
      return utils.split32(this.h.slice(0, 12), "big");
  };
  var sha1 = _1;
  var sha224 = _224;
  var sha256 = _256;
  var sha384 = _384;
  var sha512 = _512;
  var sha = { sha1, sha224, sha256, sha384, sha512 };
  var rotl32$2 = utils.rotl32;
  var sum32$3 = utils.sum32;
  var sum32_3$1 = utils.sum32_3;
  var sum32_4$2 = utils.sum32_4;
  var BlockHash$4 = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash$4.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils.inherits(RIPEMD160, BlockHash$4);
  var ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update2(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32$3(rotl32$2(sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
      A = E;
      E = D;
      D = rotl32$2(C, 10);
      C = B;
      B = T;
      T = sum32$3(rotl32$2(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32$2(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3$1(this.h[1], C, Dh);
    this.h[1] = sum32_3$1(this.h[2], D, Eh);
    this.h[2] = sum32_3$1(this.h[3], E, Ah);
    this.h[3] = sum32_3$1(this.h[4], A, Bh);
    this.h[4] = sum32_3$1(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest7(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "little");
    else
      return utils.split32(this.h, "little");
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return x & y | ~x & z;
    else if (j <= 47)
      return (x | ~y) ^ z;
    else if (j <= 63)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  function K(j) {
    if (j <= 15)
      return 0;
    else if (j <= 31)
      return 1518500249;
    else if (j <= 47)
      return 1859775393;
    else if (j <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j) {
    if (j <= 15)
      return 1352829926;
    else if (j <= 31)
      return 1548603684;
    else if (j <= 47)
      return 1836072691;
    else if (j <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  var ripemd = { ripemd160 };
  function Hmac(hash, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key2, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key2, enc));
  }
  var hmac = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    minimalisticAssert(key2.length <= this.blockSize);
    for (var i = key2.length; i < this.blockSize; i++)
      key2.push(0);
    for (i = 0; i < key2.length; i++)
      key2[i] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i = 0; i < key2.length; i++)
      key2[i] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update3(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest8(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  var hash_1 = createCommonjsModule(function(module, exports) {
    var hash = exports;
    hash.utils = utils;
    hash.common = common;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  });
  function createCommonjsModule$1(fn, basedir, module) {
    return module = { path: basedir, exports: {}, require: function(path, base2) {
      return commonjsRequire$1(path, base2 === void 0 || base2 === null ? module.path : base2);
    } }, fn(module, module.exports), module.exports;
  }
  function commonjsRequire$1() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var minimalisticAssert$1 = assert$1;
  function assert$1(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$1.equal = function assertEqual2(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var utils_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var utils2 = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/gi, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero22(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero22;
    function toHex2(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero22(msg[i].toString(16));
      return res;
    }
    utils2.toHex = toHex2;
    utils2.encode = function encode3(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  });
  var utils_1$1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var utils2 = exports;
    utils2.assert = minimalisticAssert$1;
    utils2.toArray = utils_1.toArray;
    utils2.zero2 = utils_1.zero2;
    utils2.toHex = utils_1.toHex;
    utils2.encode = utils_1.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [[], []];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF2;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new bn(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  });
  var getNAF = utils_1$1.getNAF;
  var getJSF = utils_1$1.getJSF;
  var assert$1$1 = utils_1$1.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      for (var l = 0; i >= 0 && naf[i] === 0; i--)
        l++;
      if (i >= 0)
        l++;
      acc = acc.dblp(l);
      if (i < 0)
        break;
      var z = naf[i];
      assert$1$1(z !== 0);
      if (p.type === "affine") {
        if (z > 0)
          acc = acc.mixedAdd(wnd[z - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[z - 1 >> 1]);
        else
          acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }
    return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i;
    var j;
    var p;
    for (i = 0; i < len; i++) {
      p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }
    for (i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [points[a], null, null, points[b]];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index2 = [-3, -1, -5, -7, 0, 7, 5, 1, 3];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index2[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i = max; i >= 0; i--) {
      var k = 0;
      while (i >= 0) {
        var zero = true;
        for (j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;
      for (j = 0; j < len; j++) {
        var z = tmp[j];
        p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][z - 1 >> 1];
        else if (z < 0)
          p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === "affine")
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i = 0; i < len; i++)
      wnd[i] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate2() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils_1$1.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 6)
        assert$1$1(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert$1$1(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode2(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x);
    return [4].concat(x, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode2(enc, compact) {
    return utils_1$1.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = { doubles: null, naf: null, beta: null };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return { step, points: doubles };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl3 = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl3);
    return { wnd, points: res };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r2 = this;
    for (var i = 0; i < k; i++)
      r2 = r2.dbl();
    return r2;
  };
  var inherits_browser$1 = createCommonjsModule$1(function(module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, { constructor: { value: ctor, enumerable: false, writable: true, configurable: true } });
        }
      };
    } else {
      module.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });
  var assert$2 = utils_1$1.assert;
  function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser$1(ShortCurve, base);
  var short_1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return { a: new bn(vec.a, 16), b: new bn(vec.b, 16) };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return { beta, lambda, basis };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r2;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r2 = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r2;
      v = u;
      u = r2;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r2.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate3(point3) {
    if (point3.inf)
      return true;
    var x = point3.x;
    var y = point3.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point(curve, x, y, isRed) {
    base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser$1(Point, base.BasePoint);
  ShortCurve.prototype.point = function point2(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta2() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = { beta: null, naf: pre.naf && { wnd: pre.naf.wnd, points: pre.naf.points.map(endoMul) }, doubles: pre.doubles && { step: pre.doubles.step, points: pre.doubles.points.map(endoMul) } };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = { beta: null, doubles: pre.doubles && { step: pre.doubles.step, points: [res].concat(pre.doubles.points.map(obj2point)) }, naf: pre.naf && { wnd: pre.naf.wnd, points: [res].concat(pre.naf.points.map(obj2point)) } };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq2(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = { naf: pre.naf && { wnd: pre.naf.wnd, points: pre.naf.points.map(negate) }, doubles: pre.doubles && { step: pre.doubles.step, points: pre.doubles.points.map(negate) } };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x, y, z) {
    base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits_browser$1(JPoint, base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg2() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add2(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp2(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i = 0; i < pow; i++)
        r2 = r2.dbl();
      return r2;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl2() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t = m.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t;
      ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t = m.redSqr().redISub(s2).redISub(s2);
      nx = t;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul2(k, kbase) {
    k = new bn(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq3(p) {
    if (p.type === "affine")
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect2() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity2() {
    return this.z.cmpn(0) === 0;
  };
  var curve_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var curve = exports;
    curve.base = base;
    curve.short = short_1;
    curve.mont = null;
    curve.edwards = null;
  });
  var curves_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var curves = exports;
    var assert2 = utils_1$1.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve_1.short(options);
      else if (options.type === "edwards")
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves, name2, { configurable: true, enumerable: true, get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name2, { configurable: true, enumerable: true, value: curve });
        return curve;
      } });
    }
    defineCurve("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: hash_1.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] });
    defineCurve("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: hash_1.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] });
    defineCurve("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: hash_1.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] });
    defineCurve("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: hash_1.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] });
    defineCurve("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: hash_1.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] });
    defineCurve("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: hash_1.sha256, gRed: false, g: ["9"] });
    defineCurve("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: hash_1.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    var pre;
    try {
      pre = null.crash();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: hash_1.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre] });
  });
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert$1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0;
      this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash_1.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update4(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add3;
      add3 = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils_1.toArray(entropy, entropyEnc);
    add3 = utils_1.toArray(add3, addEnc);
    minimalisticAssert$1(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add3 || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add3;
      add3 = enc;
      enc = null;
    }
    if (add3) {
      add3 = utils_1.toArray(add3, addEnc || "hex");
      this._update(add3);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add3);
    this._reseed++;
    return utils_1.encode(res, enc);
  };
  var assert$3 = utils_1$1.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, { pub, pubEnc: enc });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, { priv, privEnc: enc });
  };
  KeyPair.prototype.validate = function validate4() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new bn(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert$3(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert$3(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert$3(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair.prototype.inspect = function inspect3() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  var assert$4 = utils_1$1.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }
  Signature.prototype._importDER = function _importDER(data2, enc) {
    data2 = utils_1$1.toArray(data2, enc);
    var p = new Position();
    if (data2[p.place++] !== 48) {
      return false;
    }
    var len = getLength(data2, p);
    if (len === false) {
      return false;
    }
    if (len + p.place !== data2.length) {
      return false;
    }
    if (data2[p.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data2, p);
    if (rlen === false) {
      return false;
    }
    var r2 = data2.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data2[p.place++] !== 2) {
      return false;
    }
    var slen = getLength(data2, p);
    if (slen === false) {
      return false;
    }
    if (data2.length !== slen + p.place) {
      return false;
    }
    var s2 = data2.slice(p.place, slen + p.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new bn(r2);
    this.s = new bn(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1.encode(res, enc);
  };
  var rand = function() {
    throw new Error("unsupported");
  };
  var assert$5 = utils_1$1.assert;
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
      options = curves_1[options];
    }
    if (options instanceof curves_1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new hmacDrbg({ hash: this.hash, pers: options.pers, persEnc: options.persEnc || "utf8", entropy: options.entropy || rand(this.hash.hmacStrength), entropyEnc: options.entropy && options.entropyEnc || "utf8", nonce: this.n.toArray() });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    for (; ; ) {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new bn(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    var drbg = new hmacDrbg({ hash: this.hash, entropy: bkey, nonce, pers: options.pers, persEnc: options.persEnc || "utf8" });
    var ns1 = this.n.sub(new bn(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new signature({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature$1 = new signature(signature$1, "hex");
    var r2 = signature$1.r;
    var s2 = signature$1.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r2) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
    assert$5((3 & j) === j, "The recovery param is more than two bits");
    signature$1 = new signature(signature$1, enc);
    var n = this.n;
    var e = new bn(msg);
    var r2 = signature$1.r;
    var s2 = signature$1.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s22 = s2.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
    signature$1 = new signature(signature$1, enc);
    if (signature$1.recoveryParam !== null)
      return signature$1.recoveryParam;
    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$1, i);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q))
        return i;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  var elliptic_1 = createCommonjsModule$1(function(module, exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = { version: "6.5.4" }.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = function() {
      throw new Error("unsupported");
    };
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;
    elliptic.ec = ec;
    elliptic.eddsa = null;
  });
  var EC$1 = elliptic_1.ec;
  var version$b = "signing-key/5.1.0";
  var logger$g = new Logger(version$b);
  var _curve = null;
  function getCurve() {
    if (!_curve) {
      _curve = new EC$1("secp256k1");
    }
    return _curve;
  }
  var SigningKey = class {
    constructor(privateKey) {
      defineReadOnly(this, "curve", "secp256k1");
      defineReadOnly(this, "privateKey", hexlify(privateKey));
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
      defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
      defineReadOnly(this, "_isSigningKey", true);
    }
    _addPoint(other) {
      const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
      const p1 = getCurve().keyFromPublic(arrayify(other));
      return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest9) {
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const digestBytes = arrayify(digest9);
      if (digestBytes.length !== 32) {
        logger$g.throwArgumentError("bad digest length", "digest", digest9);
      }
      const signature2 = keyPair2.sign(digestBytes, { canonical: true });
      return splitSignature({ recoveryParam: signature2.recoveryParam, r: hexZeroPad("0x" + signature2.r.toString(16), 32), s: hexZeroPad("0x" + signature2.s.toString(16), 32) });
    }
    computeSharedSecret(otherKey) {
      const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
      const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
      return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
      return !!(value && value._isSigningKey);
    }
  };
  function recoverPublicKey(digest9, signature2) {
    const sig = splitSignature(signature2);
    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
    return "0x" + getCurve().recoverPubKey(arrayify(digest9), rs, sig.recoveryParam).encode("hex", false);
  }
  function computePublicKey(key2, compressed) {
    const bytes = arrayify(key2);
    if (bytes.length === 32) {
      const signingKey = new SigningKey(bytes);
      if (compressed) {
        return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
      }
      return signingKey.publicKey;
    } else if (bytes.length === 33) {
      if (compressed) {
        return hexlify(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    } else if (bytes.length === 65) {
      if (!compressed) {
        return hexlify(bytes);
      }
      return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }
    return logger$g.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
  }
  var version$c = "transactions/5.1.1";
  var logger$h = new Logger(version$c);
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return getAddress(value);
  }
  function handleNumber(value) {
    if (value === "0x") {
      return Zero$1;
    }
    return BigNumber.from(value);
  }
  var transactionFields = [{ name: "nonce", maxLength: 32, numeric: true }, { name: "gasPrice", maxLength: 32, numeric: true }, { name: "gasLimit", maxLength: 32, numeric: true }, { name: "to", length: 20 }, { name: "value", maxLength: 32, numeric: true }, { name: "data" }];
  var allowedTransactionKeys$1 = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true };
  function computeAddress(key2) {
    const publicKey = computePublicKey(key2);
    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
  }
  function recoverAddress(digest9, signature2) {
    return computeAddress(recoverPublicKey(arrayify(digest9), signature2));
  }
  function formatNumber(value, name2) {
    const result = stripZeros(BigNumber.from(value).toHexString());
    if (result.length > 32) {
      logger$h.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
    }
    return result;
  }
  function accessSetify(addr, storageKeys) {
    return { address: getAddress(addr), storageKeys: (storageKeys || []).map((storageKey, index2) => {
      if (hexDataLength(storageKey) !== 32) {
        logger$h.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index2}]`, storageKey);
      }
      return storageKey.toLowerCase();
    }) };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index2) => {
        if (Array.isArray(set)) {
          if (set.length > 2) {
            logger$h.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index2}]`, set);
          }
          return accessSetify(set[0], set[1]);
        }
        return accessSetify(set.address, set.storageKeys);
      });
    }
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => a.address.localeCompare(b.address));
    return result;
  }
  function formatAccessList(value) {
    return accessListify(value).map((set) => [set.address, set.storageKeys]);
  }
  function _serializeEip2930(transaction, signature2) {
    const fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.gasPrice || 0, "gasPrice"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? getAddress(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];
    if (signature2) {
      const sig = splitSignature(signature2);
      fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
      fields.push(stripZeros(sig.r));
      fields.push(stripZeros(sig.s));
    }
    return hexConcat(["0x01", encode(fields)]);
  }
  function _serialize(transaction, signature2) {
    checkProperties(transaction, allowedTransactionKeys$1);
    const raw = [];
    transactionFields.forEach(function(fieldInfo) {
      let value = transaction[fieldInfo.name] || [];
      const options = {};
      if (fieldInfo.numeric) {
        options.hexPad = "left";
      }
      value = arrayify(hexlify(value, options));
      if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
        logger$h.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
      if (fieldInfo.maxLength) {
        value = stripZeros(value);
        if (value.length > fieldInfo.maxLength) {
          logger$h.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
      }
      raw.push(hexlify(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
      chainId = transaction.chainId;
      if (typeof chainId !== "number") {
        logger$h.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
      }
    } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
      chainId = Math.floor((signature2.v - 35) / 2);
    }
    if (chainId !== 0) {
      raw.push(hexlify(chainId));
      raw.push("0x");
      raw.push("0x");
    }
    if (!signature2) {
      return encode(raw);
    }
    const sig = splitSignature(signature2);
    let v = 27 + sig.recoveryParam;
    if (chainId !== 0) {
      raw.pop();
      raw.pop();
      raw.pop();
      v += chainId * 2 + 8;
      if (sig.v > 28 && sig.v !== v) {
        logger$h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
      }
    } else if (sig.v !== v) {
      logger$h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
    raw.push(hexlify(v));
    raw.push(stripZeros(arrayify(sig.r)));
    raw.push(stripZeros(arrayify(sig.s)));
    return encode(raw);
  }
  function serialize(transaction, signature2) {
    if (transaction.type == null) {
      if (transaction.accessList != null) {
        logger$h.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
      }
      return _serialize(transaction, signature2);
    }
    switch (transaction.type) {
      case 1:
        return _serializeEip2930(transaction, signature2);
      default:
        break;
    }
    return logger$h.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "serializeTransaction", transactionType: transaction.type });
  }
  function _parseEip2930(payload) {
    const transaction = decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) {
      logger$h.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
    }
    const tx = { type: 1, chainId: handleNumber(transaction[0]).toNumber(), nonce: handleNumber(transaction[1]).toNumber(), gasPrice: handleNumber(transaction[2]), gasLimit: handleNumber(transaction[3]), to: handleAddress(transaction[4]), value: handleNumber(transaction[5]), data: transaction[6], accessList: accessListify(transaction[7]) };
    if (transaction.length === 8) {
      return tx;
    }
    try {
      const recid = handleNumber(transaction[8]).toNumber();
      if (recid !== 0 && recid !== 1) {
        throw new Error("bad recid");
      }
      tx.v = recid;
    } catch (error) {
      logger$h.throwArgumentError("invalid v for transaction type: 1", "v", transaction[8]);
    }
    tx.r = hexZeroPad(transaction[9], 32);
    tx.s = hexZeroPad(transaction[10], 32);
    try {
      const digest9 = keccak256(_serializeEip2930(tx));
      tx.from = recoverAddress(digest9, { r: tx.r, s: tx.s, recoveryParam: tx.v });
    } catch (error) {
      console.log(error);
    }
    tx.hash = keccak256(payload);
    return tx;
  }
  function _parse(rawTransaction) {
    const transaction = decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) {
      logger$h.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    }
    const tx = { nonce: handleNumber(transaction[0]).toNumber(), gasPrice: handleNumber(transaction[1]), gasLimit: handleNumber(transaction[2]), to: handleAddress(transaction[3]), value: handleNumber(transaction[4]), data: transaction[5], chainId: 0 };
    if (transaction.length === 6) {
      return tx;
    }
    try {
      tx.v = BigNumber.from(transaction[6]).toNumber();
    } catch (error) {
      console.log(error);
      return tx;
    }
    tx.r = hexZeroPad(transaction[7], 32);
    tx.s = hexZeroPad(transaction[8], 32);
    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
      tx.chainId = tx.v;
      tx.v = 0;
    } else {
      tx.chainId = Math.floor((tx.v - 35) / 2);
      if (tx.chainId < 0) {
        tx.chainId = 0;
      }
      let recoveryParam = tx.v - 27;
      const raw = transaction.slice(0, 6);
      if (tx.chainId !== 0) {
        raw.push(hexlify(tx.chainId));
        raw.push("0x");
        raw.push("0x");
        recoveryParam -= tx.chainId * 2 + 8;
      }
      const digest9 = keccak256(encode(raw));
      try {
        tx.from = recoverAddress(digest9, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
      } catch (error) {
        console.log(error);
      }
      tx.hash = keccak256(rawTransaction);
    }
    tx.type = null;
    return tx;
  }
  function parse(rawTransaction) {
    const payload = arrayify(rawTransaction);
    if (payload[0] > 127) {
      return _parse(payload);
    }
    switch (payload[0]) {
      case 1:
        return _parseEip2930(payload);
      default:
        break;
    }
    return logger$h.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "parseTransaction", transactionType: payload[0] });
  }
  var version$d = "contracts/5.1.1";
  var __awaiter$3 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$i = new Logger(version$d);
  var allowedTransactionKeys$2 = { chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true, type: true, accessList: true };
  function resolveName(resolver, nameOrPromise) {
    return __awaiter$3(this, void 0, void 0, function* () {
      const name2 = yield nameOrPromise;
      try {
        return getAddress(name2);
      } catch (error) {
      }
      if (!resolver) {
        logger$i.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resolveName" });
      }
      const address = yield resolver.resolveName(name2);
      if (address == null) {
        logger$i.throwArgumentError("resolver or addr is not configured for ENS name", "name", name2);
      }
      return address;
    });
  }
  function resolveAddresses(resolver, value, paramType) {
    return __awaiter$3(this, void 0, void 0, function* () {
      if (Array.isArray(paramType)) {
        return yield Promise.all(paramType.map((paramType2, index2) => {
          return resolveAddresses(resolver, Array.isArray(value) ? value[index2] : value[paramType2.name], paramType2);
        }));
      }
      if (paramType.type === "address") {
        return yield resolveName(resolver, value);
      }
      if (paramType.type === "tuple") {
        return yield resolveAddresses(resolver, value, paramType.components);
      }
      if (paramType.baseType === "array") {
        if (!Array.isArray(value)) {
          return Promise.reject(new Error("invalid value for array"));
        }
        return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
      }
      return value;
    });
  }
  function populateTransaction(contract, fragment, args) {
    return __awaiter$3(this, void 0, void 0, function* () {
      let overrides = {};
      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        overrides = shallowCopy(args.pop());
      }
      logger$i.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
      if (contract.signer) {
        if (overrides.from) {
          overrides.from = resolveProperties({ override: resolveName(contract.signer, overrides.from), signer: contract.signer.getAddress() }).then((check) => __awaiter$3(this, void 0, void 0, function* () {
            if (getAddress(check.signer) !== check.override) {
              logger$i.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides.from" });
            }
            return check.override;
          }));
        } else {
          overrides.from = contract.signer.getAddress();
        }
      } else if (overrides.from) {
        overrides.from = resolveName(contract.provider, overrides.from);
      }
      const resolved = yield resolveProperties({ args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs), address: contract.resolvedAddress, overrides: resolveProperties(overrides) || {} });
      const data2 = contract.interface.encodeFunctionData(fragment, resolved.args);
      const tx = { data: data2, to: resolved.address };
      const ro = resolved.overrides;
      if (ro.nonce != null) {
        tx.nonce = BigNumber.from(ro.nonce).toNumber();
      }
      if (ro.gasLimit != null) {
        tx.gasLimit = BigNumber.from(ro.gasLimit);
      }
      if (ro.gasPrice != null) {
        tx.gasPrice = BigNumber.from(ro.gasPrice);
      }
      if (ro.from != null) {
        tx.from = ro.from;
      }
      if (ro.type != null) {
        tx.type = ro.type;
      }
      if (ro.accessList != null) {
        tx.accessList = accessListify(ro.accessList);
      }
      if (tx.gasLimit == null && fragment.gas != null) {
        let intrinsic = 21e3;
        const bytes = arrayify(data2);
        for (let i = 0; i < bytes.length; i++) {
          intrinsic += 4;
          if (bytes[i]) {
            intrinsic += 64;
          }
        }
        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
      }
      if (ro.value) {
        const roValue = BigNumber.from(ro.value);
        if (!roValue.isZero() && !fragment.payable) {
          logger$i.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides.value", value: overrides.value });
        }
        tx.value = roValue;
      }
      delete overrides.nonce;
      delete overrides.gasLimit;
      delete overrides.gasPrice;
      delete overrides.from;
      delete overrides.value;
      delete overrides.type;
      delete overrides.accessList;
      const leftovers = Object.keys(overrides).filter((key2) => overrides[key2] != null);
      if (leftovers.length) {
        logger$i.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "overrides", overrides: leftovers });
      }
      return tx;
    });
  }
  function buildPopulate(contract, fragment) {
    return function(...args) {
      return populateTransaction(contract, fragment, args);
    };
  }
  function buildEstimate(contract, fragment) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        if (!signerOrProvider) {
          logger$i.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "estimateGas" });
        }
        const tx = yield populateTransaction(contract, fragment, args);
        return yield signerOrProvider.estimateGas(tx);
      });
    };
  }
  function buildCall(contract, fragment, collapseSimple) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        let blockTag = void 0;
        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
          const overrides = shallowCopy(args.pop());
          if (overrides.blockTag != null) {
            blockTag = yield overrides.blockTag;
          }
          delete overrides.blockTag;
          args.push(overrides);
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed(blockTag);
        }
        const tx = yield populateTransaction(contract, fragment, args);
        const result = yield signerOrProvider.call(tx, blockTag);
        try {
          let value = contract.interface.decodeFunctionResult(fragment, result);
          if (collapseSimple && fragment.outputs.length === 1) {
            value = value[0];
          }
          return value;
        } catch (error) {
          if (error.code === Logger.errors.CALL_EXCEPTION) {
            error.address = contract.address;
            error.args = args;
            error.transaction = tx;
          }
          throw error;
        }
      });
    };
  }
  function buildSend(contract, fragment) {
    return function(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        if (!contract.signer) {
          logger$i.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction" });
        }
        if (contract.deployTransaction != null) {
          yield contract._deployed();
        }
        const txRequest = yield populateTransaction(contract, fragment, args);
        const tx = yield contract.signer.sendTransaction(txRequest);
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
          return wait(confirmations).then((receipt) => {
            receipt.events = receipt.logs.map((log) => {
              let event = deepCopy(log);
              let parsed = null;
              try {
                parsed = contract.interface.parseLog(log);
              } catch (e) {
              }
              if (parsed) {
                event.args = parsed.args;
                event.decode = (data2, topics) => {
                  return contract.interface.decodeEventLog(parsed.eventFragment, data2, topics);
                };
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
              }
              event.removeListener = () => {
                return contract.provider;
              };
              event.getBlock = () => {
                return contract.provider.getBlock(receipt.blockHash);
              };
              event.getTransaction = () => {
                return contract.provider.getTransaction(receipt.transactionHash);
              };
              event.getTransactionReceipt = () => {
                return Promise.resolve(receipt);
              };
              return event;
            });
            return receipt;
          });
        };
        return tx;
      });
    };
  }
  function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) {
      return buildCall(contract, fragment, collapseSimple);
    }
    return buildSend(contract, fragment);
  }
  function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
      return "*";
    }
    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
      if (Array.isArray(topic)) {
        return topic.join("|");
      }
      return topic;
    }).join(":") : "");
  }
  var RunningEvent = class {
    constructor(tag, filter) {
      defineReadOnly(this, "tag", tag);
      defineReadOnly(this, "filter", filter);
      this._listeners = [];
    }
    addListener(listener, once) {
      this._listeners.push({ listener, once });
    }
    removeListener(listener) {
      let done = false;
      this._listeners = this._listeners.filter((item) => {
        if (done || item.listener !== listener) {
          return true;
        }
        done = true;
        return false;
      });
    }
    removeAllListeners() {
      this._listeners = [];
    }
    listeners() {
      return this._listeners.map((i) => i.listener);
    }
    listenerCount() {
      return this._listeners.length;
    }
    run(args) {
      const listenerCount = this.listenerCount();
      this._listeners = this._listeners.filter((item) => {
        const argsCopy = args.slice();
        setTimeout(() => {
          item.listener.apply(this, argsCopy);
        }, 0);
        return !item.once;
      });
      return listenerCount;
    }
    prepareEvent(event) {
    }
    getEmit(event) {
      return [event];
    }
  };
  var ErrorRunningEvent = class extends RunningEvent {
    constructor() {
      super("error", null);
    }
  };
  var FragmentRunningEvent = class extends RunningEvent {
    constructor(address, contractInterface, fragment, topics) {
      const filter = { address };
      let topic = contractInterface.getEventTopic(fragment);
      if (topics) {
        if (topic !== topics[0]) {
          logger$i.throwArgumentError("topic mismatch", "topics", topics);
        }
        filter.topics = topics.slice();
      } else {
        filter.topics = [topic];
      }
      super(getEventTag(filter), filter);
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "interface", contractInterface);
      defineReadOnly(this, "fragment", fragment);
    }
    prepareEvent(event) {
      super.prepareEvent(event);
      event.event = this.fragment.name;
      event.eventSignature = this.fragment.format();
      event.decode = (data2, topics) => {
        return this.interface.decodeEventLog(this.fragment, data2, topics);
      };
      try {
        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
      } catch (error) {
        event.args = null;
        event.decodeError = error;
      }
    }
    getEmit(event) {
      const errors = checkResultErrors(event.args);
      if (errors.length) {
        throw errors[0].error;
      }
      const args = (event.args || []).slice();
      args.push(event);
      return args;
    }
  };
  var WildcardRunningEvent = class extends RunningEvent {
    constructor(address, contractInterface) {
      super("*", { address });
      defineReadOnly(this, "address", address);
      defineReadOnly(this, "interface", contractInterface);
    }
    prepareEvent(event) {
      super.prepareEvent(event);
      try {
        const parsed = this.interface.parseLog(event);
        event.event = parsed.name;
        event.eventSignature = parsed.signature;
        event.decode = (data2, topics) => {
          return this.interface.decodeEventLog(parsed.eventFragment, data2, topics);
        };
        event.args = parsed.args;
      } catch (error) {
      }
    }
  };
  var BaseContract = class {
    constructor(addressOrName, contractInterface, signerOrProvider) {
      logger$i.checkNew(new.target, Contract);
      defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
      if (signerOrProvider == null) {
        defineReadOnly(this, "provider", null);
        defineReadOnly(this, "signer", null);
      } else if (Signer.isSigner(signerOrProvider)) {
        defineReadOnly(this, "provider", signerOrProvider.provider || null);
        defineReadOnly(this, "signer", signerOrProvider);
      } else if (Provider.isProvider(signerOrProvider)) {
        defineReadOnly(this, "provider", signerOrProvider);
        defineReadOnly(this, "signer", null);
      } else {
        logger$i.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
      }
      defineReadOnly(this, "callStatic", {});
      defineReadOnly(this, "estimateGas", {});
      defineReadOnly(this, "functions", {});
      defineReadOnly(this, "populateTransaction", {});
      defineReadOnly(this, "filters", {});
      {
        const uniqueFilters = {};
        Object.keys(this.interface.events).forEach((eventSignature) => {
          const event = this.interface.events[eventSignature];
          defineReadOnly(this.filters, eventSignature, (...args) => {
            return { address: this.address, topics: this.interface.encodeFilterTopics(event, args) };
          });
          if (!uniqueFilters[event.name]) {
            uniqueFilters[event.name] = [];
          }
          uniqueFilters[event.name].push(eventSignature);
        });
        Object.keys(uniqueFilters).forEach((name2) => {
          const filters = uniqueFilters[name2];
          if (filters.length === 1) {
            defineReadOnly(this.filters, name2, this.filters[filters[0]]);
          } else {
            logger$i.warn(`Duplicate definition of ${name2} (${filters.join(", ")})`);
          }
        });
      }
      defineReadOnly(this, "_runningEvents", {});
      defineReadOnly(this, "_wrappedEmits", {});
      if (addressOrName == null) {
        logger$i.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
      }
      defineReadOnly(this, "address", addressOrName);
      if (this.provider) {
        defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
      } else {
        try {
          defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
        } catch (error) {
          logger$i.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new Contract" });
        }
      }
      const uniqueNames = {};
      const uniqueSignatures = {};
      Object.keys(this.interface.functions).forEach((signature2) => {
        const fragment = this.interface.functions[signature2];
        if (uniqueSignatures[signature2]) {
          logger$i.warn(`Duplicate ABI entry for ${JSON.stringify(name)}`);
          return;
        }
        uniqueSignatures[signature2] = true;
        {
          const name2 = fragment.name;
          if (!uniqueNames[name2]) {
            uniqueNames[name2] = [];
          }
          uniqueNames[name2].push(signature2);
        }
        if (this[signature2] == null) {
          defineReadOnly(this, signature2, buildDefault(this, fragment, true));
        }
        if (this.functions[signature2] == null) {
          defineReadOnly(this.functions, signature2, buildDefault(this, fragment, false));
        }
        if (this.callStatic[signature2] == null) {
          defineReadOnly(this.callStatic, signature2, buildCall(this, fragment, true));
        }
        if (this.populateTransaction[signature2] == null) {
          defineReadOnly(this.populateTransaction, signature2, buildPopulate(this, fragment));
        }
        if (this.estimateGas[signature2] == null) {
          defineReadOnly(this.estimateGas, signature2, buildEstimate(this, fragment));
        }
      });
      Object.keys(uniqueNames).forEach((name2) => {
        const signatures = uniqueNames[name2];
        if (signatures.length > 1) {
          return;
        }
        const signature2 = signatures[0];
        try {
          if (this[name2] == null) {
            defineReadOnly(this, name2, this[signature2]);
          }
        } catch (e) {
        }
        if (this.functions[name2] == null) {
          defineReadOnly(this.functions, name2, this.functions[signature2]);
        }
        if (this.callStatic[name2] == null) {
          defineReadOnly(this.callStatic, name2, this.callStatic[signature2]);
        }
        if (this.populateTransaction[name2] == null) {
          defineReadOnly(this.populateTransaction, name2, this.populateTransaction[signature2]);
        }
        if (this.estimateGas[name2] == null) {
          defineReadOnly(this.estimateGas, name2, this.estimateGas[signature2]);
        }
      });
    }
    static getContractAddress(transaction) {
      return getContractAddress(transaction);
    }
    static getInterface(contractInterface) {
      if (Interface.isInterface(contractInterface)) {
        return contractInterface;
      }
      return new Interface(contractInterface);
    }
    deployed() {
      return this._deployed();
    }
    _deployed(blockTag) {
      if (!this._deployedPromise) {
        if (this.deployTransaction) {
          this._deployedPromise = this.deployTransaction.wait().then(() => {
            return this;
          });
        } else {
          this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
            if (code === "0x") {
              logger$i.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, { contractAddress: this.address, operation: "getDeployed" });
            }
            return this;
          });
        }
      }
      return this._deployedPromise;
    }
    fallback(overrides) {
      if (!this.signer) {
        logger$i.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
      }
      const tx = shallowCopy(overrides || {});
      ["from", "to"].forEach(function(key2) {
        if (tx[key2] == null) {
          return;
        }
        logger$i.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
      });
      tx.to = this.resolvedAddress;
      return this.deployed().then(() => {
        return this.signer.sendTransaction(tx);
      });
    }
    connect(signerOrProvider) {
      if (typeof signerOrProvider === "string") {
        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
      }
      const contract = new this.constructor(this.address, this.interface, signerOrProvider);
      if (this.deployTransaction) {
        defineReadOnly(contract, "deployTransaction", this.deployTransaction);
      }
      return contract;
    }
    attach(addressOrName) {
      return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
    }
    static isIndexed(value) {
      return Indexed.isIndexed(value);
    }
    _normalizeRunningEvent(runningEvent) {
      if (this._runningEvents[runningEvent.tag]) {
        return this._runningEvents[runningEvent.tag];
      }
      return runningEvent;
    }
    _getRunningEvent(eventName) {
      if (typeof eventName === "string") {
        if (eventName === "error") {
          return this._normalizeRunningEvent(new ErrorRunningEvent());
        }
        if (eventName === "event") {
          return this._normalizeRunningEvent(new RunningEvent("event", null));
        }
        if (eventName === "*") {
          return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        const fragment = this.interface.getEvent(eventName);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
      }
      if (eventName.topics && eventName.topics.length > 0) {
        try {
          const topic = eventName.topics[0];
          if (typeof topic !== "string") {
            throw new Error("invalid topic");
          }
          const fragment = this.interface.getEvent(topic);
          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
        } catch (error) {
        }
        const filter = { address: this.address, topics: eventName.topics };
        return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
      }
      return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
    }
    _checkRunningEvents(runningEvent) {
      if (runningEvent.listenerCount() === 0) {
        delete this._runningEvents[runningEvent.tag];
        const emit = this._wrappedEmits[runningEvent.tag];
        if (emit && runningEvent.filter) {
          this.provider.off(runningEvent.filter, emit);
          delete this._wrappedEmits[runningEvent.tag];
        }
      }
    }
    _wrapEvent(runningEvent, log, listener) {
      const event = deepCopy(log);
      event.removeListener = () => {
        if (!listener) {
          return;
        }
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
      };
      event.getBlock = () => {
        return this.provider.getBlock(log.blockHash);
      };
      event.getTransaction = () => {
        return this.provider.getTransaction(log.transactionHash);
      };
      event.getTransactionReceipt = () => {
        return this.provider.getTransactionReceipt(log.transactionHash);
      };
      runningEvent.prepareEvent(event);
      return event;
    }
    _addEventListener(runningEvent, listener, once) {
      if (!this.provider) {
        logger$i.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
      }
      runningEvent.addListener(listener, once);
      this._runningEvents[runningEvent.tag] = runningEvent;
      if (!this._wrappedEmits[runningEvent.tag]) {
        const wrappedEmit = (log) => {
          let event = this._wrapEvent(runningEvent, log, listener);
          if (event.decodeError == null) {
            try {
              const args = runningEvent.getEmit(event);
              this.emit(runningEvent.filter, ...args);
            } catch (error) {
              event.decodeError = error.error;
            }
          }
          if (runningEvent.filter != null) {
            this.emit("event", event);
          }
          if (event.decodeError != null) {
            this.emit("error", event.decodeError, event);
          }
        };
        this._wrappedEmits[runningEvent.tag] = wrappedEmit;
        if (runningEvent.filter != null) {
          this.provider.on(runningEvent.filter, wrappedEmit);
        }
      }
    }
    queryFilter(event, fromBlockOrBlockhash, toBlock) {
      const runningEvent = this._getRunningEvent(event);
      const filter = shallowCopy(runningEvent.filter);
      if (typeof fromBlockOrBlockhash === "string" && isHexString(fromBlockOrBlockhash, 32)) {
        if (toBlock != null) {
          logger$i.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
        }
        filter.blockHash = fromBlockOrBlockhash;
      } else {
        filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
        filter.toBlock = toBlock != null ? toBlock : "latest";
      }
      return this.provider.getLogs(filter).then((logs) => {
        return logs.map((log) => this._wrapEvent(runningEvent, log, null));
      });
    }
    on(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, false);
      return this;
    }
    once(event, listener) {
      this._addEventListener(this._getRunningEvent(event), listener, true);
      return this;
    }
    emit(eventName, ...args) {
      if (!this.provider) {
        return false;
      }
      const runningEvent = this._getRunningEvent(eventName);
      const result = runningEvent.run(args) > 0;
      this._checkRunningEvents(runningEvent);
      return result;
    }
    listenerCount(eventName) {
      if (!this.provider) {
        return 0;
      }
      if (eventName == null) {
        return Object.keys(this._runningEvents).reduce((accum, key2) => {
          return accum + this._runningEvents[key2].listenerCount();
        }, 0);
      }
      return this._getRunningEvent(eventName).listenerCount();
    }
    listeners(eventName) {
      if (!this.provider) {
        return [];
      }
      if (eventName == null) {
        const result = [];
        for (let tag in this._runningEvents) {
          this._runningEvents[tag].listeners().forEach((listener) => {
            result.push(listener);
          });
        }
        return result;
      }
      return this._getRunningEvent(eventName).listeners();
    }
    removeAllListeners(eventName) {
      if (!this.provider) {
        return this;
      }
      if (eventName == null) {
        for (const tag in this._runningEvents) {
          const runningEvent2 = this._runningEvents[tag];
          runningEvent2.removeAllListeners();
          this._checkRunningEvents(runningEvent2);
        }
        return this;
      }
      const runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeAllListeners();
      this._checkRunningEvents(runningEvent);
      return this;
    }
    off(eventName, listener) {
      if (!this.provider) {
        return this;
      }
      const runningEvent = this._getRunningEvent(eventName);
      runningEvent.removeListener(listener);
      this._checkRunningEvents(runningEvent);
      return this;
    }
    removeListener(eventName, listener) {
      return this.off(eventName, listener);
    }
  };
  var Contract = class extends BaseContract {
  };
  var ContractFactory = class {
    constructor(contractInterface, bytecode, signer) {
      let bytecodeHex = null;
      if (typeof bytecode === "string") {
        bytecodeHex = bytecode;
      } else if (isBytes(bytecode)) {
        bytecodeHex = hexlify(bytecode);
      } else if (bytecode && typeof bytecode.object === "string") {
        bytecodeHex = bytecode.object;
      } else {
        bytecodeHex = "!";
      }
      if (bytecodeHex.substring(0, 2) !== "0x") {
        bytecodeHex = "0x" + bytecodeHex;
      }
      if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {
        logger$i.throwArgumentError("invalid bytecode", "bytecode", bytecode);
      }
      if (signer && !Signer.isSigner(signer)) {
        logger$i.throwArgumentError("invalid signer", "signer", signer);
      }
      defineReadOnly(this, "bytecode", bytecodeHex);
      defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
      defineReadOnly(this, "signer", signer || null);
    }
    getDeployTransaction(...args) {
      let tx = {};
      if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        tx = shallowCopy(args.pop());
        for (const key2 in tx) {
          if (!allowedTransactionKeys$2[key2]) {
            throw new Error("unknown transaction override " + key2);
          }
        }
      }
      ["data", "from", "to"].forEach((key2) => {
        if (tx[key2] == null) {
          return;
        }
        logger$i.throwError("cannot override " + key2, Logger.errors.UNSUPPORTED_OPERATION, { operation: key2 });
      });
      logger$i.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
      tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));
      return tx;
    }
    deploy(...args) {
      return __awaiter$3(this, void 0, void 0, function* () {
        let overrides = {};
        if (args.length === this.interface.deploy.inputs.length + 1) {
          overrides = args.pop();
        }
        logger$i.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
        params.push(overrides);
        const unsignedTx = this.getDeployTransaction(...params);
        const tx = yield this.signer.sendTransaction(unsignedTx);
        const address = getStatic(this.constructor, "getContractAddress")(tx);
        const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
        defineReadOnly(contract, "deployTransaction", tx);
        return contract;
      });
    }
    attach(address) {
      return this.constructor.getContract(address, this.interface, this.signer);
    }
    connect(signer) {
      return new this.constructor(this.interface, this.bytecode, signer);
    }
    static fromSolidity(compilerOutput, signer) {
      if (compilerOutput == null) {
        logger$i.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
      }
      if (typeof compilerOutput === "string") {
        compilerOutput = JSON.parse(compilerOutput);
      }
      const abi = compilerOutput.abi;
      let bytecode = null;
      if (compilerOutput.bytecode) {
        bytecode = compilerOutput.bytecode;
      } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
        bytecode = compilerOutput.evm.bytecode;
      }
      return new this(abi, bytecode, signer);
    }
    static getInterface(contractInterface) {
      return Contract.getInterface(contractInterface);
    }
    static getContractAddress(tx) {
      return getContractAddress(tx);
    }
    static getContract(address, contractInterface, signer) {
      return new Contract(address, contractInterface, signer);
    }
  };
  var BaseX = class {
    constructor(alphabet) {
      defineReadOnly(this, "alphabet", alphabet);
      defineReadOnly(this, "base", alphabet.length);
      defineReadOnly(this, "_alphabetMap", {});
      defineReadOnly(this, "_leader", alphabet.charAt(0));
      for (let i = 0; i < alphabet.length; i++) {
        this._alphabetMap[alphabet.charAt(i)] = i;
      }
    }
    encode(value) {
      let source = arrayify(value);
      if (source.length === 0) {
        return "";
      }
      let digits = [0];
      for (let i = 0; i < source.length; ++i) {
        let carry = source[i];
        for (let j = 0; j < digits.length; ++j) {
          carry += digits[j] << 8;
          digits[j] = carry % this.base;
          carry = carry / this.base | 0;
        }
        while (carry > 0) {
          digits.push(carry % this.base);
          carry = carry / this.base | 0;
        }
      }
      let string = "";
      for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
        string += this._leader;
      }
      for (let q = digits.length - 1; q >= 0; --q) {
        string += this.alphabet[digits[q]];
      }
      return string;
    }
    decode(value) {
      if (typeof value !== "string") {
        throw new TypeError("Expected String");
      }
      let bytes = [];
      if (value.length === 0) {
        return new Uint8Array(bytes);
      }
      bytes.push(0);
      for (let i = 0; i < value.length; i++) {
        let byte = this._alphabetMap[value[i]];
        if (byte === void 0) {
          throw new Error("Non-base" + this.base + " character");
        }
        let carry = byte;
        for (let j = 0; j < bytes.length; ++j) {
          carry += bytes[j] * this.base;
          bytes[j] = carry & 255;
          carry >>= 8;
        }
        while (carry > 0) {
          bytes.push(carry & 255);
          carry >>= 8;
        }
      }
      for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
        bytes.push(0);
      }
      return arrayify(new Uint8Array(bytes.reverse()));
    }
  };
  var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
  var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  var SupportedAlgorithm;
  (function(SupportedAlgorithm2) {
    SupportedAlgorithm2["sha256"] = "sha256";
    SupportedAlgorithm2["sha512"] = "sha512";
  })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  var version$e = "sha2/5.1.0";
  var logger$j = new Logger(version$e);
  function ripemd160$1(data2) {
    return "0x" + hash_1.ripemd160().update(arrayify(data2)).digest("hex");
  }
  function sha256$1(data2) {
    return "0x" + hash_1.sha256().update(arrayify(data2)).digest("hex");
  }
  function sha512$1(data2) {
    return "0x" + hash_1.sha512().update(arrayify(data2)).digest("hex");
  }
  function computeHmac(algorithm, key2, data2) {
    if (!SupportedAlgorithm[algorithm]) {
      logger$j.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, { operation: "hmac", algorithm });
    }
    return "0x" + hash_1.hmac(hash_1[algorithm], arrayify(key2)).update(arrayify(data2)).digest("hex");
  }
  function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    password = arrayify(password);
    salt = arrayify(salt);
    let hLen;
    let l = 1;
    const DK = new Uint8Array(keylen);
    const block1 = new Uint8Array(salt.length + 4);
    block1.set(salt);
    let r2;
    let T;
    for (let i = 1; i <= l; i++) {
      block1[salt.length] = i >> 24 & 255;
      block1[salt.length + 1] = i >> 16 & 255;
      block1[salt.length + 2] = i >> 8 & 255;
      block1[salt.length + 3] = i & 255;
      let U = arrayify(computeHmac(hashAlgorithm, password, block1));
      if (!hLen) {
        hLen = U.length;
        T = new Uint8Array(hLen);
        l = Math.ceil(keylen / hLen);
        r2 = keylen - (l - 1) * hLen;
      }
      T.set(U);
      for (let j = 1; j < iterations; j++) {
        U = arrayify(computeHmac(hashAlgorithm, password, U));
        for (let k = 0; k < hLen; k++)
          T[k] ^= U[k];
      }
      const destPos = (i - 1) * hLen;
      const len = i === l ? r2 : hLen;
      DK.set(arrayify(T).slice(0, len), destPos);
    }
    return hexlify(DK);
  }
  var version$f = "wordlists/5.1.0";
  var exportWordlist = false;
  var logger$k = new Logger(version$f);
  var Wordlist = class {
    constructor(locale) {
      logger$k.checkAbstract(new.target, Wordlist);
      defineReadOnly(this, "locale", locale);
    }
    split(mnemonic) {
      return mnemonic.toLowerCase().split(/ +/g);
    }
    join(words2) {
      return words2.join(" ");
    }
    static check(wordlist2) {
      const words2 = [];
      for (let i = 0; i < 2048; i++) {
        const word = wordlist2.getWord(i);
        if (i !== wordlist2.getWordIndex(word)) {
          return "0x";
        }
        words2.push(word);
      }
      return id(words2.join("\n") + "\n");
    }
    static register(lang, name2) {
      if (!name2) {
        name2 = lang.locale;
      }
      if (exportWordlist) {
        try {
          const anyGlobal2 = window;
          if (anyGlobal2._ethers && anyGlobal2._ethers.wordlists) {
            if (!anyGlobal2._ethers.wordlists[name2]) {
              defineReadOnly(anyGlobal2._ethers.wordlists, name2, lang);
            }
          }
        } catch (error) {
        }
      }
    }
  };
  var words = "AbdikaceAbecedaAdresaAgreseAkceAktovkaAlejAlkoholAmputaceAnanasAndulkaAnekdotaAnketaAntikaAnulovatArchaAroganceAsfaltAsistentAspiraceAstmaAstronomAtlasAtletikaAtolAutobusAzylBabkaBachorBacilBaculkaBadatelBagetaBagrBahnoBakterieBaladaBaletkaBalkonBalonekBalvanBalzaBambusBankomatBarbarBaretBarmanBarokoBarvaBaterkaBatohBavlnaBazalkaBazilikaBazukaBednaBeranBesedaBestieBetonBezinkaBezmocBeztakBicyklBidloBiftekBikinyBilanceBiografBiologBitvaBizonBlahobytBlatouchBlechaBleduleBleskBlikatBliznaBlokovatBlouditBludBobekBobrBodlinaBodnoutBohatostBojkotBojovatBokorysBolestBorecBoroviceBotaBoubelBouchatBoudaBouleBouratBoxerBradavkaBramboraBrankaBratrBreptaBriketaBrkoBrlohBronzBroskevBrunetkaBrusinkaBrzdaBrzyBublinaBubnovatBuchtaBuditelBudkaBudovaBufetBujarostBukviceBuldokBulvaBundaBunkrBurzaButikBuvolBuzolaBydletBylinaBytovkaBzukotCapartCarevnaCedrCeduleCejchCejnCelaCelerCelkemCelniceCeninaCennostCenovkaCentrumCenzorCestopisCetkaChalupaChapadloCharitaChataChechtatChemieChichotChirurgChladChlebaChlubitChmelChmuraChobotChocholChodbaCholeraChomoutChopitChorobaChovChrapotChrlitChrtChrupChtivostChudinaChutnatChvatChvilkaChvostChybaChystatChytitCibuleCigaretaCihelnaCihlaCinkotCirkusCisternaCitaceCitrusCizinecCizostClonaCokolivCouvatCtitelCtnostCudnostCuketaCukrCupotCvaknoutCvalCvikCvrkotCyklistaDalekoDarebaDatelDatumDceraDebataDechovkaDecibelDeficitDeflaceDeklDekretDemokratDepreseDerbyDeskaDetektivDikobrazDiktovatDiodaDiplomDiskDisplejDivadloDivochDlahaDlouhoDluhopisDnesDobroDobytekDocentDochutitDodnesDohledDohodaDohraDojemDojniceDokladDokolaDoktorDokumentDolarDolevaDolinaDomaDominantDomluvitDomovDonutitDopadDopisDoplnitDoposudDoprovodDopustitDorazitDorostDortDosahDoslovDostatekDosudDosytaDotazDotekDotknoutDoufatDoutnatDovozceDozaduDoznatDozorceDrahotaDrakDramatikDravecDrazeDrdolDrobnostDrogerieDrozdDrsnostDrtitDrzostDubenDuchovnoDudekDuhaDuhovkaDusitDusnoDutostDvojiceDvorecDynamitEkologEkonomieElektronElipsaEmailEmiseEmoceEmpatieEpizodaEpochaEpopejEposEsejEsenceEskortaEskymoEtiketaEuforieEvoluceExekuceExkurzeExpediceExplozeExportExtraktFackaFajfkaFakultaFanatikFantazieFarmacieFavoritFazoleFederaceFejetonFenkaFialkaFigurantFilozofFiltrFinanceFintaFixaceFjordFlanelFlirtFlotilaFondFosforFotbalFotkaFotonFrakceFreskaFrontaFukarFunkceFyzikaGalejeGarantGenetikaGeologGilotinaGlazuraGlejtGolemGolfistaGotikaGrafGramofonGranuleGrepGrilGrogGroteskaGumaHadiceHadrHalaHalenkaHanbaHanopisHarfaHarpunaHavranHebkostHejkalHejnoHejtmanHektarHelmaHematomHerecHernaHesloHezkyHistorikHladovkaHlasivkyHlavaHledatHlenHlodavecHlohHloupostHltatHlubinaHluchotaHmatHmotaHmyzHnisHnojivoHnoutHoblinaHobojHochHodinyHodlatHodnotaHodovatHojnostHokejHolinkaHolkaHolubHomoleHonitbaHonoraceHoralHordaHorizontHorkoHorlivecHormonHorninaHoroskopHorstvoHospodaHostinaHotovostHoubaHoufHoupatHouskaHovorHradbaHraniceHravostHrazdaHrbolekHrdinaHrdloHrdostHrnekHrobkaHromadaHrotHroudaHrozenHrstkaHrubostHryzatHubenostHubnoutHudbaHukotHumrHusitaHustotaHvozdHybnostHydrantHygienaHymnaHysterikIdylkaIhnedIkonaIluzeImunitaInfekceInflaceInkasoInovaceInspekceInternetInvalidaInvestorInzerceIronieJablkoJachtaJahodaJakmileJakostJalovecJantarJarmarkJaroJasanJasnoJatkaJavorJazykJedinecJedleJednatelJehlanJekotJelenJelitoJemnostJenomJepiceJeseterJevitJezdecJezeroJinakJindyJinochJiskraJistotaJitrniceJizvaJmenovatJogurtJurtaKabaretKabelKabinetKachnaKadetKadidloKahanKajakKajutaKakaoKaktusKalamitaKalhotyKalibrKalnostKameraKamkolivKamnaKanibalKanoeKantorKapalinaKapelaKapitolaKapkaKapleKapotaKaprKapustaKapybaraKaramelKarotkaKartonKasaKatalogKatedraKauceKauzaKavalecKazajkaKazetaKazivostKdekolivKdesiKedlubenKempKeramikaKinoKlacekKladivoKlamKlapotKlasikaKlaunKlecKlenbaKlepatKlesnoutKlidKlimaKlisnaKloboukKlokanKlopaKloubKlubovnaKlusatKluzkostKmenKmitatKmotrKnihaKnotKoaliceKoberecKobkaKoblihaKobylaKocourKohoutKojenecKokosKoktejlKolapsKoledaKolizeKoloKomandoKometaKomikKomnataKomoraKompasKomunitaKonatKonceptKondiceKonecKonfeseKongresKoninaKonkursKontaktKonzervaKopanecKopieKopnoutKoprovkaKorbelKorektorKormidloKoroptevKorpusKorunaKorytoKorzetKosatecKostkaKotelKotletaKotoulKoukatKoupelnaKousekKouzloKovbojKozaKozorohKrabiceKrachKrajinaKralovatKrasopisKravataKreditKrejcarKresbaKrevetaKriketKritikKrizeKrkavecKrmelecKrmivoKrocanKrokKronikaKropitKroupaKrovkaKrtekKruhadloKrupiceKrutostKrvinkaKrychleKryptaKrystalKrytKudlankaKufrKujnostKuklaKulajdaKulichKulkaKulometKulturaKunaKupodivuKurtKurzorKutilKvalitaKvasinkaKvestorKynologKyselinaKytaraKyticeKytkaKytovecKyvadloLabradorLachtanLadnostLaikLakomecLamelaLampaLanovkaLasiceLasoLasturaLatinkaLavinaLebkaLeckdyLedenLedniceLedovkaLedvinaLegendaLegieLegraceLehceLehkostLehnoutLektvarLenochodLentilkaLepenkaLepidloLetadloLetecLetmoLetokruhLevhartLevitaceLevobokLibraLichotkaLidojedLidskostLihovinaLijavecLilekLimetkaLinieLinkaLinoleumListopadLitinaLitovatLobistaLodivodLogikaLogopedLokalitaLoketLomcovatLopataLopuchLordLososLotrLoudalLouhLoukaLouskatLovecLstivostLucernaLuciferLumpLuskLustraceLviceLyraLyrikaLysinaMadamMadloMagistrMahagonMajetekMajitelMajoritaMakakMakoviceMakrelaMalbaMalinaMalovatMalviceMaminkaMandleMankoMarnostMasakrMaskotMasopustMaticeMatrikaMaturitaMazanecMazivoMazlitMazurkaMdlobaMechanikMeditaceMedovinaMelasaMelounMentolkaMetlaMetodaMetrMezeraMigraceMihnoutMihuleMikinaMikrofonMilenecMilimetrMilostMimikaMincovnaMinibarMinometMinulostMiskaMistrMixovatMladostMlhaMlhovinaMlokMlsatMluvitMnichMnohemMobilMocnostModelkaModlitbaMohylaMokroMolekulaMomentkaMonarchaMonoklMonstrumMontovatMonzunMosazMoskytMostMotivaceMotorkaMotykaMouchaMoudrostMozaikaMozekMozolMramorMravenecMrkevMrtvolaMrzetMrzutostMstitelMudrcMuflonMulatMumieMuniceMusetMutaceMuzeumMuzikantMyslivecMzdaNabouratNachytatNadaceNadbytekNadhozNadobroNadpisNahlasNahnatNahodileNahraditNaivitaNajednouNajistoNajmoutNaklonitNakonecNakrmitNalevoNamazatNamluvitNanometrNaokoNaopakNaostroNapadatNapevnoNaplnitNapnoutNaposledNaprostoNaroditNarubyNarychloNasaditNasekatNaslepoNastatNatolikNavenekNavrchNavzdoryNazvatNebeNechatNeckyNedalekoNedbatNeduhNegaceNehetNehodaNejenNejprveNeklidNelibostNemilostNemocNeochotaNeonkaNepokojNerostNervNesmyslNesouladNetvorNeuronNevinaNezvykleNicotaNijakNikamNikdyNiklNikterakNitroNoclehNohaviceNominaceNoraNorekNositelNosnostNouzeNovinyNovotaNozdraNudaNudleNugetNutitNutnostNutrieNymfaObalObarvitObavaObdivObecObehnatObejmoutObezitaObhajobaObilniceObjasnitObjektObklopitOblastOblekOblibaOblohaObludaObnosObohatitObojekOboutObrazecObrnaObrubaObrysObsahObsluhaObstaratObuvObvazObvinitObvodObvykleObyvatelObzorOcasOcelOcenitOchladitOchotaOchranaOcitnoutOdbojOdbytOdchodOdcizitOdebratOdeslatOdevzdatOdezvaOdhadceOdhoditOdjetOdjinudOdkazOdkoupitOdlivOdlukaOdmlkaOdolnostOdpadOdpisOdploutOdporOdpustitOdpykatOdrazkaOdsouditOdstupOdsunOdtokOdtudOdvahaOdvetaOdvolatOdvracetOdznakOfinaOfsajdOhlasOhniskoOhradaOhrozitOhryzekOkapOkeniceOklikaOknoOkouzlitOkovyOkrasaOkresOkrsekOkruhOkupantOkurkaOkusitOlejninaOlizovatOmakOmeletaOmezitOmladinaOmlouvatOmluvaOmylOnehdyOpakovatOpasekOperaceOpiceOpilostOpisovatOporaOpoziceOpravduOprotiOrbitalOrchestrOrgieOrliceOrlojOrtelOsadaOschnoutOsikaOsivoOslavaOslepitOslnitOslovitOsnovaOsobaOsolitOspalecOstenOstrahaOstudaOstychOsvojitOteplitOtiskOtopOtrhatOtrlostOtrokOtrubyOtvorOvanoutOvarOvesOvlivnitOvoceOxidOzdobaPachatelPacientPadouchPahorekPaktPalandaPalecPalivoPalubaPamfletPamlsekPanenkaPanikaPannaPanovatPanstvoPantoflePaprikaParketaParodiePartaParukaParybaPasekaPasivitaPastelkaPatentPatronaPavoukPaznehtPazourekPeckaPedagogPejsekPekloPelotonPenaltaPendrekPenzePeriskopPeroPestrostPetardaPeticePetrolejPevninaPexesoPianistaPihaPijavicePiklePiknikPilinaPilnostPilulkaPinzetaPipetaPisatelPistolePitevnaPivnicePivovarPlacentaPlakatPlamenPlanetaPlastikaPlatitPlavidloPlazPlechPlemenoPlentaPlesPletivoPlevelPlivatPlnitPlnoPlochaPlodinaPlombaPloutPlukPlynPobavitPobytPochodPocitPoctivecPodatPodcenitPodepsatPodhledPodivitPodkladPodmanitPodnikPodobaPodporaPodrazPodstataPodvodPodzimPoeziePohankaPohnutkaPohovorPohromaPohybPointaPojistkaPojmoutPokazitPoklesPokojPokrokPokutaPokynPolednePolibekPolknoutPolohaPolynomPomaluPominoutPomlkaPomocPomstaPomysletPonechatPonorkaPonurostPopadatPopelPopisekPoplachPoprositPopsatPopudPoradcePorcePorodPoruchaPoryvPosaditPosedPosilaPoskokPoslanecPosouditPospoluPostavaPosudekPosypPotahPotkanPotleskPotomekPotravaPotupaPotvoraPoukazPoutoPouzdroPovahaPovidlaPovlakPovozPovrchPovstatPovykPovzdechPozdravPozemekPoznatekPozorPozvatPracovatPrahoryPraktikaPralesPraotecPraporekPrasePravdaPrincipPrknoProbuditProcentoProdejProfeseProhraProjektProlomitPromilePronikatPropadProrokProsbaProtonProutekProvazPrskavkaPrstenPrudkostPrutPrvekPrvohoryPsanecPsovodPstruhPtactvoPubertaPuchPudlPukavecPuklinaPukrlePultPumpaPuncPupenPusaPusinkaPustinaPutovatPutykaPyramidaPyskPytelRacekRachotRadiaceRadniceRadonRaftRagbyRaketaRakovinaRamenoRampouchRandeRarachRaritaRasovnaRastrRatolestRazanceRazidloReagovatReakceReceptRedaktorReferentReflexRejnokReklamaRekordRekrutRektorReputaceRevizeRevmaRevolverRezervaRiskovatRizikoRobotikaRodokmenRohovkaRokleRokokoRomanetoRopovodRopuchaRorejsRosolRostlinaRotmistrRotopedRotundaRoubenkaRouchoRoupRouraRovinaRovniceRozborRozchodRozdatRozeznatRozhodceRozinkaRozjezdRozkazRozlohaRozmarRozpadRozruchRozsahRoztokRozumRozvodRubrikaRuchadloRukaviceRukopisRybaRybolovRychlostRydloRypadloRytinaRyzostSadistaSahatSakoSamecSamizdatSamotaSanitkaSardinkaSasankaSatelitSazbaSazeniceSborSchovatSebrankaSeceseSedadloSedimentSedloSehnatSejmoutSekeraSektaSekundaSekvojeSemenoSenoServisSesaditSeshoraSeskokSeslatSestraSesuvSesypatSetbaSetinaSetkatSetnoutSetrvatSeverSeznamShodaShrnoutSifonSilniceSirkaSirotekSirupSituaceSkafandrSkaliskoSkanzenSkautSkeptikSkicaSkladbaSkleniceSkloSkluzSkobaSkokanSkoroSkriptaSkrzSkupinaSkvostSkvrnaSlabikaSladidloSlaninaSlastSlavnostSledovatSlepecSlevaSlezinaSlibSlinaSlizniceSlonSloupekSlovoSluchSluhaSlunceSlupkaSlzaSmaragdSmetanaSmilstvoSmlouvaSmogSmradSmrkSmrtkaSmutekSmyslSnadSnahaSnobSobotaSochaSodovkaSokolSopkaSotvaSoubojSoucitSoudceSouhlasSouladSoumrakSoupravaSousedSoutokSouvisetSpalovnaSpasitelSpisSplavSpodekSpojenecSpoluSponzorSpornostSpoustaSprchaSpustitSrandaSrazSrdceSrnaSrnecSrovnatSrpenSrstSrubStaniceStarostaStatikaStavbaStehnoStezkaStodolaStolekStopaStornoStoupatStrachStresStrhnoutStromStrunaStudnaStupniceStvolStykSubjektSubtropySucharSudostSuknoSundatSunoutSurikataSurovinaSvahSvalstvoSvetrSvatbaSvazekSvisleSvitekSvobodaSvodidloSvorkaSvrabSykavkaSykotSynekSynovecSypatSypkostSyrovostSyselSytostTabletkaTabuleTahounTajemnoTajfunTajgaTajitTajnostTaktikaTamhleTamponTancovatTanecTankerTapetaTaveninaTazatelTechnikaTehdyTekutinaTelefonTemnotaTendenceTenistaTenorTeplotaTepnaTeprveTerapieTermoskaTextilTichoTiskopisTitulekTkadlecTkaninaTlapkaTleskatTlukotTlupaTmelToaletaTopinkaTopolTorzoTouhaToulecTradiceTraktorTrampTrasaTraverzaTrefitTrestTrezorTrhavinaTrhlinaTrochuTrojiceTroskaTroubaTrpceTrpitelTrpkostTrubecTruchlitTruhliceTrusTrvatTudyTuhnoutTuhostTundraTuristaTurnajTuzemskoTvarohTvorbaTvrdostTvrzTygrTykevUbohostUbozeUbratUbrousekUbrusUbytovnaUchoUctivostUdivitUhraditUjednatUjistitUjmoutUkazatelUklidnitUklonitUkotvitUkrojitUliceUlitaUlovitUmyvadloUnavitUniformaUniknoutUpadnoutUplatnitUplynoutUpoutatUpravitUranUrazitUsednoutUsilovatUsmrtitUsnadnitUsnoutUsouditUstlatUstrnoutUtahovatUtkatUtlumitUtonoutUtopenecUtrousitUvalitUvolnitUvozovkaUzdravitUzelUzeninaUzlinaUznatVagonValchaValounVanaVandalVanilkaVaranVarhanyVarovatVcelkuVchodVdovaVedroVegetaceVejceVelbloudVeletrhVelitelVelmocVelrybaVenkovVerandaVerzeVeselkaVeskrzeVesniceVespoduVestaVeterinaVeverkaVibraceVichrVideohraVidinaVidleVilaViniceVisetVitalitaVizeVizitkaVjezdVkladVkusVlajkaVlakVlasecVlevoVlhkostVlivVlnovkaVloupatVnucovatVnukVodaVodivostVodoznakVodstvoVojenskyVojnaVojskoVolantVolbaVolitVolnoVoskovkaVozidloVozovnaVpravoVrabecVracetVrahVrataVrbaVrcholekVrhatVrstvaVrtuleVsaditVstoupitVstupVtipVybavitVybratVychovatVydatVydraVyfotitVyhledatVyhnoutVyhoditVyhraditVyhubitVyjasnitVyjetVyjmoutVyklopitVykonatVylekatVymazatVymezitVymizetVymysletVynechatVynikatVynutitVypadatVyplatitVypravitVypustitVyrazitVyrovnatVyrvatVyslovitVysokoVystavitVysunoutVysypatVytasitVytesatVytratitVyvinoutVyvolatVyvrhelVyzdobitVyznatVzaduVzbuditVzchopitVzdorVzduchVzdychatVzestupVzhledemVzkazVzlykatVznikVzorekVzpouraVztahVztekXylofonZabratZabydletZachovatZadarmoZadusitZafoukatZahltitZahoditZahradaZahynoutZajatecZajetZajistitZaklepatZakoupitZalepitZamezitZamotatZamysletZanechatZanikatZaplatitZapojitZapsatZarazitZastavitZasunoutZatajitZatemnitZatknoutZaujmoutZavalitZaveletZavinitZavolatZavrtatZazvonitZbavitZbrusuZbudovatZbytekZdalekaZdarmaZdatnostZdivoZdobitZdrojZdvihZdymadloZeleninaZemanZeminaZeptatZezaduZezdolaZhatitZhltnoutZhlubokaZhotovitZhrubaZimaZimniceZjemnitZklamatZkoumatZkratkaZkumavkaZlatoZlehkaZlobaZlomZlostZlozvykZmapovatZmarZmatekZmijeZmizetZmocnitZmodratZmrzlinaZmutovatZnakZnalostZnamenatZnovuZobrazitZotavitZoubekZoufaleZploditZpomalitZpravaZprostitZprudkaZprvuZradaZranitZrcadloZrnitostZrnoZrovnaZrychlitZrzavostZtichaZtratitZubovinaZubrZvednoutZvenkuZveselaZvonZvratZvukovodZvyk";
  var wordlist = null;
  function loadWords(lang) {
    if (wordlist != null) {
      return;
    }
    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a") {
      wordlist = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }
  var LangCz = class extends Wordlist {
    constructor() {
      super("cz");
    }
    getWord(index2) {
      loadWords(this);
      return wordlist[index2];
    }
    getWordIndex(word) {
      loadWords(this);
      return wordlist.indexOf(word);
    }
  };
  var langCz = new LangCz();
  Wordlist.register(langCz);
  var words$1 = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
  var wordlist$1 = null;
  function loadWords$1(lang) {
    if (wordlist$1 != null) {
      return;
    }
    wordlist$1 = words$1.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
      wordlist$1 = null;
      throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
  }
  var LangEn = class extends Wordlist {
    constructor() {
      super("en");
    }
    getWord(index2) {
      loadWords$1(this);
      return wordlist$1[index2];
    }
    getWordIndex(word) {
      loadWords$1(this);
      return wordlist$1.indexOf(word);
    }
  };
  var langEn = new LangEn();
  Wordlist.register(langEn);
  var words$2 = "A/bacoAbdomenAbejaAbiertoAbogadoAbonoAbortoAbrazoAbrirAbueloAbusoAcabarAcademiaAccesoAccio/nAceiteAcelgaAcentoAceptarA/cidoAclararAcne/AcogerAcosoActivoActoActrizActuarAcudirAcuerdoAcusarAdictoAdmitirAdoptarAdornoAduanaAdultoAe/reoAfectarAficio/nAfinarAfirmarA/gilAgitarAgoni/aAgostoAgotarAgregarAgrioAguaAgudoA/guilaAgujaAhogoAhorroAireAislarAjedrezAjenoAjusteAlacra/nAlambreAlarmaAlbaA/lbumAlcaldeAldeaAlegreAlejarAlertaAletaAlfilerAlgaAlgodo/nAliadoAlientoAlivioAlmaAlmejaAlmi/barAltarAltezaAltivoAltoAlturaAlumnoAlzarAmableAmanteAmapolaAmargoAmasarA/mbarA/mbitoAmenoAmigoAmistadAmorAmparoAmplioAnchoAncianoAnclaAndarAnde/nAnemiaA/nguloAnilloA/nimoAni/sAnotarAntenaAntiguoAntojoAnualAnularAnuncioA~adirA~ejoA~oApagarAparatoApetitoApioAplicarApodoAporteApoyoAprenderAprobarApuestaApuroAradoAra~aArarA/rbitroA/rbolArbustoArchivoArcoArderArdillaArduoA/reaA/ridoAriesArmoni/aArne/sAromaArpaArpo/nArregloArrozArrugaArteArtistaAsaAsadoAsaltoAscensoAsegurarAseoAsesorAsientoAsiloAsistirAsnoAsombroA/speroAstillaAstroAstutoAsumirAsuntoAtajoAtaqueAtarAtentoAteoA/ticoAtletaA/tomoAtraerAtrozAtu/nAudazAudioAugeAulaAumentoAusenteAutorAvalAvanceAvaroAveAvellanaAvenaAvestruzAvio/nAvisoAyerAyudaAyunoAzafra/nAzarAzoteAzu/carAzufreAzulBabaBaborBacheBahi/aBaileBajarBalanzaBalco/nBaldeBambu/BancoBandaBa~oBarbaBarcoBarnizBarroBa/sculaBasto/nBasuraBatallaBateri/aBatirBatutaBau/lBazarBebe/BebidaBelloBesarBesoBestiaBichoBienBingoBlancoBloqueBlusaBoaBobinaBoboBocaBocinaBodaBodegaBoinaBolaBoleroBolsaBombaBondadBonitoBonoBonsa/iBordeBorrarBosqueBoteBoti/nBo/vedaBozalBravoBrazoBrechaBreveBrilloBrincoBrisaBrocaBromaBronceBroteBrujaBruscoBrutoBuceoBucleBuenoBueyBufandaBufo/nBu/hoBuitreBultoBurbujaBurlaBurroBuscarButacaBuzo/nCaballoCabezaCabinaCabraCacaoCada/verCadenaCaerCafe/Cai/daCaima/nCajaCajo/nCalCalamarCalcioCaldoCalidadCalleCalmaCalorCalvoCamaCambioCamelloCaminoCampoCa/ncerCandilCanelaCanguroCanicaCantoCa~aCa~o/nCaobaCaosCapazCapita/nCapoteCaptarCapuchaCaraCarbo/nCa/rcelCaretaCargaCari~oCarneCarpetaCarroCartaCasaCascoCaseroCaspaCastorCatorceCatreCaudalCausaCazoCebollaCederCedroCeldaCe/lebreCelosoCe/lulaCementoCenizaCentroCercaCerdoCerezaCeroCerrarCertezaCe/spedCetroChacalChalecoChampu/ChanclaChapaCharlaChicoChisteChivoChoqueChozaChuletaChuparCiclo/nCiegoCieloCienCiertoCifraCigarroCimaCincoCineCintaCipre/sCircoCiruelaCisneCitaCiudadClamorClanClaroClaseClaveClienteClimaCli/nicaCobreCoccio/nCochinoCocinaCocoCo/digoCodoCofreCogerCoheteCoji/nCojoColaColchaColegioColgarColinaCollarColmoColumnaCombateComerComidaCo/modoCompraCondeConejoCongaConocerConsejoContarCopaCopiaCorazo/nCorbataCorchoCordo/nCoronaCorrerCoserCosmosCostaCra/neoCra/terCrearCrecerCrei/doCremaCri/aCrimenCriptaCrisisCromoCro/nicaCroquetaCrudoCruzCuadroCuartoCuatroCuboCubrirCucharaCuelloCuentoCuerdaCuestaCuevaCuidarCulebraCulpaCultoCumbreCumplirCunaCunetaCuotaCupo/nCu/pulaCurarCuriosoCursoCurvaCutisDamaDanzaDarDardoDa/tilDeberDe/bilDe/cadaDecirDedoDefensaDefinirDejarDelfi/nDelgadoDelitoDemoraDensoDentalDeporteDerechoDerrotaDesayunoDeseoDesfileDesnudoDestinoDesvi/oDetalleDetenerDeudaDi/aDiabloDiademaDiamanteDianaDiarioDibujoDictarDienteDietaDiezDifi/cilDignoDilemaDiluirDineroDirectoDirigirDiscoDise~oDisfrazDivaDivinoDobleDoceDolorDomingoDonDonarDoradoDormirDorsoDosDosisDrago/nDrogaDuchaDudaDueloDue~oDulceDu/oDuqueDurarDurezaDuroE/banoEbrioEcharEcoEcuadorEdadEdicio/nEdificioEditorEducarEfectoEficazEjeEjemploElefanteElegirElementoElevarElipseE/liteElixirElogioEludirEmbudoEmitirEmocio/nEmpateEmpe~oEmpleoEmpresaEnanoEncargoEnchufeEnci/aEnemigoEneroEnfadoEnfermoEnga~oEnigmaEnlaceEnormeEnredoEnsayoEnse~arEnteroEntrarEnvaseEnvi/oE/pocaEquipoErizoEscalaEscenaEscolarEscribirEscudoEsenciaEsferaEsfuerzoEspadaEspejoEspi/aEsposaEspumaEsqui/EstarEsteEstiloEstufaEtapaEternoE/ticaEtniaEvadirEvaluarEventoEvitarExactoExamenExcesoExcusaExentoExigirExilioExistirE/xitoExpertoExplicarExponerExtremoFa/bricaFa/bulaFachadaFa/cilFactorFaenaFajaFaldaFalloFalsoFaltarFamaFamiliaFamosoFarao/nFarmaciaFarolFarsaFaseFatigaFaunaFavorFaxFebreroFechaFelizFeoFeriaFerozFe/rtilFervorFesti/nFiableFianzaFiarFibraFiccio/nFichaFideoFiebreFielFieraFiestaFiguraFijarFijoFilaFileteFilialFiltroFinFincaFingirFinitoFirmaFlacoFlautaFlechaFlorFlotaFluirFlujoFlu/orFobiaFocaFogataFogo/nFolioFolletoFondoFormaForroFortunaForzarFosaFotoFracasoFra/gilFranjaFraseFraudeFrei/rFrenoFresaFri/oFritoFrutaFuegoFuenteFuerzaFugaFumarFuncio/nFundaFurgo/nFuriaFusilFu/tbolFuturoGacelaGafasGaitaGajoGalaGaleri/aGalloGambaGanarGanchoGangaGansoGarajeGarzaGasolinaGastarGatoGavila/nGemeloGemirGenGe/neroGenioGenteGeranioGerenteGermenGestoGiganteGimnasioGirarGiroGlaciarGloboGloriaGolGolfoGolosoGolpeGomaGordoGorilaGorraGotaGoteoGozarGradaGra/ficoGranoGrasaGratisGraveGrietaGrilloGripeGrisGritoGrosorGru/aGruesoGrumoGrupoGuanteGuapoGuardiaGuerraGui/aGui~oGuionGuisoGuitarraGusanoGustarHaberHa/bilHablarHacerHachaHadaHallarHamacaHarinaHazHaza~aHebillaHebraHechoHeladoHelioHembraHerirHermanoHe/roeHervirHieloHierroHi/gadoHigieneHijoHimnoHistoriaHocicoHogarHogueraHojaHombreHongoHonorHonraHoraHormigaHornoHostilHoyoHuecoHuelgaHuertaHuesoHuevoHuidaHuirHumanoHu/medoHumildeHumoHundirHuraca/nHurtoIconoIdealIdiomaI/doloIglesiaIglu/IgualIlegalIlusio/nImagenIma/nImitarImparImperioImponerImpulsoIncapazI/ndiceInerteInfielInformeIngenioInicioInmensoInmuneInnatoInsectoInstanteIntere/sI/ntimoIntuirInu/tilInviernoIraIrisIroni/aIslaIsloteJabali/Jabo/nJamo/nJarabeJardi/nJarraJaulaJazmi/nJefeJeringaJineteJornadaJorobaJovenJoyaJuergaJuevesJuezJugadorJugoJugueteJuicioJuncoJunglaJunioJuntarJu/piterJurarJustoJuvenilJuzgarKiloKoalaLabioLacioLacraLadoLadro/nLagartoLa/grimaLagunaLaicoLamerLa/minaLa/mparaLanaLanchaLangostaLanzaLa/pizLargoLarvaLa/stimaLataLa/texLatirLaurelLavarLazoLealLeccio/nLecheLectorLeerLegio/nLegumbreLejanoLenguaLentoLe~aLeo/nLeopardoLesio/nLetalLetraLeveLeyendaLibertadLibroLicorLi/derLidiarLienzoLigaLigeroLimaLi/miteLimo/nLimpioLinceLindoLi/neaLingoteLinoLinternaLi/quidoLisoListaLiteraLitioLitroLlagaLlamaLlantoLlaveLlegarLlenarLlevarLlorarLloverLluviaLoboLocio/nLocoLocuraLo/gicaLogroLombrizLomoLonjaLoteLuchaLucirLugarLujoLunaLunesLupaLustroLutoLuzMacetaMachoMaderaMadreMaduroMaestroMafiaMagiaMagoMai/zMaldadMaletaMallaMaloMama/MamboMamutMancoMandoManejarMangaManiqui/ManjarManoMansoMantaMa~anaMapaMa/quinaMarMarcoMareaMarfilMargenMaridoMa/rmolMarro/nMartesMarzoMasaMa/scaraMasivoMatarMateriaMatizMatrizMa/ximoMayorMazorcaMechaMedallaMedioMe/dulaMejillaMejorMelenaMelo/nMemoriaMenorMensajeMenteMenu/MercadoMerengueMe/ritoMesMeso/nMetaMeterMe/todoMetroMezclaMiedoMielMiembroMigaMilMilagroMilitarMillo/nMimoMinaMineroMi/nimoMinutoMiopeMirarMisaMiseriaMisilMismoMitadMitoMochilaMocio/nModaModeloMohoMojarMoldeMolerMolinoMomentoMomiaMonarcaMonedaMonjaMontoMo~oMoradaMorderMorenoMorirMorroMorsaMortalMoscaMostrarMotivoMoverMo/vilMozoMuchoMudarMuebleMuelaMuerteMuestraMugreMujerMulaMuletaMultaMundoMu~ecaMuralMuroMu/sculoMuseoMusgoMu/sicaMusloNa/carNacio/nNadarNaipeNaranjaNarizNarrarNasalNatalNativoNaturalNa/useaNavalNaveNavidadNecioNe/ctarNegarNegocioNegroNeo/nNervioNetoNeutroNevarNeveraNichoNidoNieblaNietoNi~ezNi~oNi/tidoNivelNoblezaNocheNo/minaNoriaNormaNorteNotaNoticiaNovatoNovelaNovioNubeNucaNu/cleoNudilloNudoNueraNueveNuezNuloNu/meroNutriaOasisObesoObispoObjetoObraObreroObservarObtenerObvioOcaOcasoOce/anoOchentaOchoOcioOcreOctavoOctubreOcultoOcuparOcurrirOdiarOdioOdiseaOesteOfensaOfertaOficioOfrecerOgroOi/doOi/rOjoOlaOleadaOlfatoOlivoOllaOlmoOlorOlvidoOmbligoOndaOnzaOpacoOpcio/nO/peraOpinarOponerOptarO/pticaOpuestoOracio/nOradorOralO/rbitaOrcaOrdenOrejaO/rganoOrgi/aOrgulloOrienteOrigenOrillaOroOrquestaOrugaOsadi/aOscuroOseznoOsoOstraOto~oOtroOvejaO/vuloO/xidoOxi/genoOyenteOzonoPactoPadrePaellaPa/ginaPagoPai/sPa/jaroPalabraPalcoPaletaPa/lidoPalmaPalomaPalparPanPanalPa/nicoPanteraPa~ueloPapa/PapelPapillaPaquetePararParcelaParedParirParoPa/rpadoParquePa/rrafoPartePasarPaseoPasio/nPasoPastaPataPatioPatriaPausaPautaPavoPayasoPeato/nPecadoPeceraPechoPedalPedirPegarPeinePelarPelda~oPeleaPeligroPellejoPeloPelucaPenaPensarPe~o/nPeo/nPeorPepinoPeque~oPeraPerchaPerderPerezaPerfilPericoPerlaPermisoPerroPersonaPesaPescaPe/simoPesta~aPe/taloPetro/leoPezPezu~aPicarPicho/nPiePiedraPiernaPiezaPijamaPilarPilotoPimientaPinoPintorPinzaPi~aPiojoPipaPirataPisarPiscinaPisoPistaPito/nPizcaPlacaPlanPlataPlayaPlazaPleitoPlenoPlomoPlumaPluralPobrePocoPoderPodioPoemaPoesi/aPoetaPolenPolici/aPolloPolvoPomadaPomeloPomoPompaPonerPorcio/nPortalPosadaPoseerPosiblePostePotenciaPotroPozoPradoPrecozPreguntaPremioPrensaPresoPrevioPrimoPri/ncipePrisio/nPrivarProaProbarProcesoProductoProezaProfesorProgramaProlePromesaProntoPropioPro/ximoPruebaPu/blicoPucheroPudorPuebloPuertaPuestoPulgaPulirPulmo/nPulpoPulsoPumaPuntoPu~alPu~oPupaPupilaPure/QuedarQuejaQuemarQuererQuesoQuietoQui/micaQuinceQuitarRa/banoRabiaRaboRacio/nRadicalRai/zRamaRampaRanchoRangoRapazRa/pidoRaptoRasgoRaspaRatoRayoRazaRazo/nReaccio/nRealidadReba~oReboteRecaerRecetaRechazoRecogerRecreoRectoRecursoRedRedondoReducirReflejoReformaRefra/nRefugioRegaloRegirReglaRegresoRehe/nReinoRei/rRejaRelatoRelevoRelieveRellenoRelojRemarRemedioRemoRencorRendirRentaRepartoRepetirReposoReptilResRescateResinaRespetoRestoResumenRetiroRetornoRetratoReunirReve/sRevistaReyRezarRicoRiegoRiendaRiesgoRifaRi/gidoRigorRinco/nRi~o/nRi/oRiquezaRisaRitmoRitoRizoRobleRoceRociarRodarRodeoRodillaRoerRojizoRojoRomeroRomperRonRoncoRondaRopaRoperoRosaRoscaRostroRotarRubi/RuborRudoRuedaRugirRuidoRuinaRuletaRuloRumboRumorRupturaRutaRutinaSa/badoSaberSabioSableSacarSagazSagradoSalaSaldoSaleroSalirSalmo/nSalo/nSalsaSaltoSaludSalvarSambaSancio/nSandi/aSanearSangreSanidadSanoSantoSapoSaqueSardinaSarte/nSastreSata/nSaunaSaxofo/nSeccio/nSecoSecretoSectaSedSeguirSeisSelloSelvaSemanaSemillaSendaSensorSe~alSe~orSepararSepiaSequi/aSerSerieSermo/nServirSesentaSesio/nSetaSetentaSeveroSexoSextoSidraSiestaSieteSigloSignoSi/labaSilbarSilencioSillaSi/mboloSimioSirenaSistemaSitioSituarSobreSocioSodioSolSolapaSoldadoSoledadSo/lidoSoltarSolucio/nSombraSondeoSonidoSonoroSonrisaSopaSoplarSoporteSordoSorpresaSorteoSoste/nSo/tanoSuaveSubirSucesoSudorSuegraSueloSue~oSuerteSufrirSujetoSulta/nSumarSuperarSuplirSuponerSupremoSurSurcoSure~oSurgirSustoSutilTabacoTabiqueTablaTabu/TacoTactoTajoTalarTalcoTalentoTallaTalo/nTama~oTamborTangoTanqueTapaTapeteTapiaTapo/nTaquillaTardeTareaTarifaTarjetaTarotTarroTartaTatuajeTauroTazaTazo/nTeatroTechoTeclaTe/cnicaTejadoTejerTejidoTelaTele/fonoTemaTemorTemploTenazTenderTenerTenisTensoTeori/aTerapiaTercoTe/rminoTernuraTerrorTesisTesoroTestigoTeteraTextoTezTibioTiburo/nTiempoTiendaTierraTiesoTigreTijeraTildeTimbreTi/midoTimoTintaTi/oTi/picoTipoTiraTiro/nTita/nTi/tereTi/tuloTizaToallaTobilloTocarTocinoTodoTogaToldoTomarTonoTontoToparTopeToqueTo/raxToreroTormentaTorneoToroTorpedoTorreTorsoTortugaTosToscoToserTo/xicoTrabajoTractorTraerTra/ficoTragoTrajeTramoTranceTratoTraumaTrazarTre/bolTreguaTreintaTrenTreparTresTribuTrigoTripaTristeTriunfoTrofeoTrompaTroncoTropaTroteTrozoTrucoTruenoTrufaTuberi/aTuboTuertoTumbaTumorTu/nelTu/nicaTurbinaTurismoTurnoTutorUbicarU/lceraUmbralUnidadUnirUniversoUnoUntarU~aUrbanoUrbeUrgenteUrnaUsarUsuarioU/tilUtopi/aUvaVacaVaci/oVacunaVagarVagoVainaVajillaValeVa/lidoValleValorVa/lvulaVampiroVaraVariarVaro/nVasoVecinoVectorVehi/culoVeinteVejezVelaVeleroVelozVenaVencerVendaVenenoVengarVenirVentaVenusVerVeranoVerboVerdeVeredaVerjaVersoVerterVi/aViajeVibrarVicioVi/ctimaVidaVi/deoVidrioViejoViernesVigorVilVillaVinagreVinoVi~edoVioli/nViralVirgoVirtudVisorVi/speraVistaVitaminaViudoVivazViveroVivirVivoVolca/nVolumenVolverVorazVotarVotoVozVueloVulgarYacerYateYeguaYemaYernoYesoYodoYogaYogurZafiroZanjaZapatoZarzaZonaZorroZumoZurdo";
  var lookup = {};
  var wordlist$2 = null;
  function dropDiacritic(word) {
    logger$k.checkNormalize();
    return toUtf8String(Array.prototype.filter.call(toUtf8Bytes(word.normalize("NFD").toLowerCase()), (c) => {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }
  function expand(word) {
    const output = [];
    Array.prototype.forEach.call(toUtf8Bytes(word), (c) => {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 126) {
        output.push(110);
        output.push(204);
        output.push(131);
      } else {
        output.push(c);
      }
    });
    return toUtf8String(output);
  }
  function loadWords$2(lang) {
    if (wordlist$2 != null) {
      return;
    }
    wordlist$2 = words$2.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map((w) => expand(w));
    wordlist$2.forEach((word, index2) => {
      lookup[dropDiacritic(word)] = index2;
    });
    if (Wordlist.check(lang) !== "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300") {
      wordlist$2 = null;
      throw new Error("BIP39 Wordlist for es (Spanish) FAILED");
    }
  }
  var LangEs = class extends Wordlist {
    constructor() {
      super("es");
    }
    getWord(index2) {
      loadWords$2(this);
      return wordlist$2[index2];
    }
    getWordIndex(word) {
      loadWords$2(this);
      return lookup[dropDiacritic(word)];
    }
  };
  var langEs = new LangEs();
  Wordlist.register(langEs);
  var words$3 = "";
  var wordlist$3 = null;
  var lookup$1 = {};
  function dropDiacritic$1(word) {
    logger$k.checkNormalize();
    return toUtf8String(Array.prototype.filter.call(toUtf8Bytes(word.normalize("NFD").toLowerCase()), (c) => {
      return c >= 65 && c <= 90 || c >= 97 && c <= 123;
    }));
  }
  function expand$1(word) {
    const output = [];
    Array.prototype.forEach.call(toUtf8Bytes(word), (c) => {
      if (c === 47) {
        output.push(204);
        output.push(129);
      } else if (c === 45) {
        output.push(204);
        output.push(128);
      } else {
        output.push(c);
      }
    });
    return toUtf8String(output);
  }
  function loadWords$3(lang) {
    if (wordlist$3 != null) {
      return;
    }
    wordlist$3 = words$3.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ").map((w) => expand$1(w));
    wordlist$3.forEach((word, index2) => {
      lookup$1[dropDiacritic$1(word)] = index2;
    });
    if (Wordlist.check(lang) !== "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045") {
      wordlist$3 = null;
      throw new Error("BIP39 Wordlist for fr (French) FAILED");
    }
  }
  var LangFr = class extends Wordlist {
    constructor() {
      super("fr");
    }
    getWord(index2) {
      loadWords$3(this);
      return wordlist$3[index2];
    }
    getWordIndex(word) {
      loadWords$3(this);
      return lookup$1[dropDiacritic$1(word)];
    }
  };
  var langFr = new LangFr();
  Wordlist.register(langFr);
  var data = ["AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR", "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR", "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm", "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC", "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD", "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD", "IJBEJqXZJ"];
  var mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
  var wordlist$4 = null;
  function hex(word) {
    return hexlify(toUtf8Bytes(word));
  }
  var KiYoKu = "0xe3818de38284e3818f";
  var KyoKu = "0xe3818de38283e3818f";
  function loadWords$4(lang) {
    if (wordlist$4 !== null) {
      return;
    }
    wordlist$4 = [];
    const transform = {};
    transform[toUtf8String([227, 130, 154])] = false;
    transform[toUtf8String([227, 130, 153])] = false;
    transform[toUtf8String([227, 130, 133])] = toUtf8String([227, 130, 134]);
    transform[toUtf8String([227, 129, 163])] = toUtf8String([227, 129, 164]);
    transform[toUtf8String([227, 130, 131])] = toUtf8String([227, 130, 132]);
    transform[toUtf8String([227, 130, 135])] = toUtf8String([227, 130, 136]);
    function normalize(word) {
      let result = "";
      for (let i = 0; i < word.length; i++) {
        let kana = word[i];
        const target = transform[kana];
        if (target === false) {
          continue;
        }
        if (target) {
          kana = target;
        }
        result += kana;
      }
      return result;
    }
    function sortJapanese(a, b) {
      a = normalize(a);
      b = normalize(b);
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    for (let length = 3; length <= 9; length++) {
      const d = data[length - 3];
      for (let offset = 0; offset < d.length; offset += length) {
        const word = [];
        for (let i = 0; i < length; i++) {
          const k = mapping.indexOf(d[offset + i]);
          word.push(227);
          word.push(k & 64 ? 130 : 129);
          word.push((k & 63) + 128);
        }
        wordlist$4.push(toUtf8String(word));
      }
    }
    wordlist$4.sort(sortJapanese);
    if (hex(wordlist$4[442]) === KiYoKu && hex(wordlist$4[443]) === KyoKu) {
      const tmp = wordlist$4[442];
      wordlist$4[442] = wordlist$4[443];
      wordlist$4[443] = tmp;
    }
    if (Wordlist.check(lang) !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
      wordlist$4 = null;
      throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
    }
  }
  var LangJa = class extends Wordlist {
    constructor() {
      super("ja");
    }
    getWord(index2) {
      loadWords$4(this);
      return wordlist$4[index2];
    }
    getWordIndex(word) {
      loadWords$4(this);
      return wordlist$4.indexOf(word);
    }
    split(mnemonic) {
      logger$k.checkNormalize();
      return mnemonic.split(/(?:\u3000| )+/g);
    }
    join(words2) {
      return words2.join("\u3000");
    }
  };
  var langJa = new LangJa();
  Wordlist.register(langJa);
  var data$1 = ["OYAa", "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@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!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6", "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv", "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo", "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg", "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb", "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"];
  var codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
  function getHangul(code) {
    if (code >= 40) {
      code = code + 168 - 40;
    } else if (code >= 19) {
      code = code + 97 - 19;
    }
    return toUtf8String([225, (code >> 6) + 132, (code & 63) + 128]);
  }
  var wordlist$5 = null;
  function loadWords$5(lang) {
    if (wordlist$5 != null) {
      return;
    }
    wordlist$5 = [];
    data$1.forEach((data2, length) => {
      length += 4;
      for (let i = 0; i < data2.length; i += length) {
        let word = "";
        for (let j = 0; j < length; j++) {
          word += getHangul(codes.indexOf(data2[i + j]));
        }
        wordlist$5.push(word);
      }
    });
    wordlist$5.sort();
    if (Wordlist.check(lang) !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
      wordlist$5 = null;
      throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
    }
  }
  var LangKo = class extends Wordlist {
    constructor() {
      super("ko");
    }
    getWord(index2) {
      loadWords$5(this);
      return wordlist$5[index2];
    }
    getWordIndex(word) {
      loadWords$5(this);
      return wordlist$5.indexOf(word);
    }
  };
  var langKo = new LangKo();
  Wordlist.register(langKo);
  var words$4 = "AbacoAbbaglioAbbinatoAbeteAbissoAbolireAbrasivoAbrogatoAccadereAccennoAccusatoAcetoneAchilleAcidoAcquaAcreAcrilicoAcrobataAcutoAdagioAddebitoAddomeAdeguatoAderireAdipeAdottareAdulareAffabileAffettoAffissoAffrantoAforismaAfosoAfricanoAgaveAgenteAgevoleAggancioAgireAgitareAgonismoAgricoloAgrumetoAguzzoAlabardaAlatoAlbatroAlberatoAlboAlbumeAlceAlcolicoAlettoneAlfaAlgebraAlianteAlibiAlimentoAllagatoAllegroAllievoAllodolaAllusivoAlmenoAlogenoAlpacaAlpestreAltalenaAlternoAlticcioAltroveAlunnoAlveoloAlzareAmalgamaAmanitaAmarenaAmbitoAmbratoAmebaAmericaAmetistaAmicoAmmassoAmmendaAmmirareAmmonitoAmoreAmpioAmpliareAmuletoAnacardoAnagrafeAnalistaAnarchiaAnatraAncaAncellaAncoraAndareAndreaAnelloAngeloAngolareAngustoAnimaAnnegareAnnidatoAnnoAnnuncioAnonimoAnticipoAnziApaticoAperturaApodeApparireAppetitoAppoggioApprodoAppuntoAprileArabicaArachideAragostaAraldicaArancioAraturaArazzoArbitroArchivioArditoArenileArgentoArgineArgutoAriaArmoniaArneseArredatoArringaArrostoArsenicoArsoArteficeArzilloAsciuttoAscoltoAsepsiAsetticoAsfaltoAsinoAsolaAspiratoAsproAssaggioAsseAssolutoAssurdoAstaAstenutoAsticeAstrattoAtavicoAteismoAtomicoAtonoAttesaAttivareAttornoAttritoAttualeAusilioAustriaAutistaAutonomoAutunnoAvanzatoAvereAvvenireAvvisoAvvolgereAzioneAzotoAzzimoAzzurroBabeleBaccanoBacinoBacoBadessaBadilataBagnatoBaitaBalconeBaldoBalenaBallataBalzanoBambinoBandireBaraondaBarbaroBarcaBaritonoBarlumeBaroccoBasilicoBassoBatostaBattutoBauleBavaBavosaBeccoBeffaBelgioBelvaBendaBenevoleBenignoBenzinaBereBerlinaBetaBibitaBiciBidoneBifidoBigaBilanciaBimboBinocoloBiologoBipedeBipolareBirbanteBirraBiscottoBisestoBisnonnoBisonteBisturiBizzarroBlandoBlattaBollitoBonificoBordoBoscoBotanicoBottinoBozzoloBraccioBradipoBramaBrancaBravuraBretellaBrevettoBrezzaBrigliaBrillanteBrindareBroccoloBrodoBronzinaBrulloBrunoBubboneBucaBudinoBuffoneBuioBulboBuonoBurloneBurrascaBussolaBustaCadettoCaducoCalamaroCalcoloCalesseCalibroCalmoCaloriaCambusaCamerataCamiciaCamminoCamolaCampaleCanapaCandelaCaneCaninoCanottoCantinaCapaceCapelloCapitoloCapogiroCapperoCapraCapsulaCarapaceCarcassaCardoCarismaCarovanaCarrettoCartolinaCasaccioCascataCasermaCasoCassoneCastelloCasualeCatastaCatenaCatrameCautoCavilloCedibileCedrataCefaloCelebreCellulareCenaCenoneCentesimoCeramicaCercareCertoCerumeCervelloCesoiaCespoCetoChelaChiaroChiccaChiedereChimeraChinaChirurgoChitarraCiaoCiclismoCifrareCignoCilindroCiottoloCircaCirrosiCitricoCittadinoCiuffoCivettaCivileClassicoClinicaCloroCoccoCodardoCodiceCoerenteCognomeCollareColmatoColoreColposoColtivatoColzaComaCometaCommandoComodoComputerComuneConcisoCondurreConfermaCongelareConiugeConnessoConoscereConsumoContinuoConvegnoCopertoCopioneCoppiaCopricapoCorazzaCordataCoricatoCorniceCorollaCorpoCorredoCorsiaCorteseCosmicoCostanteCotturaCovatoCratereCravattaCreatoCredereCremosoCrescitaCretaCricetoCrinaleCrisiCriticoCroceCronacaCrostataCrucialeCruscaCucireCuculoCuginoCullatoCupolaCuratoreCursoreCurvoCuscinoCustodeDadoDainoDalmataDamerinoDanielaDannosoDanzareDatatoDavantiDavveroDebuttoDecennioDecisoDeclinoDecolloDecretoDedicatoDefinitoDeformeDegnoDelegareDelfinoDelirioDeltaDemenzaDenotatoDentroDepositoDerapataDerivareDerogaDescrittoDesertoDesiderioDesumereDetersivoDevotoDiametroDicembreDiedroDifesoDiffusoDigerireDigitaleDiluvioDinamicoDinnanziDipintoDiplomaDipoloDiradareDireDirottoDirupoDisagioDiscretoDisfareDisgeloDispostoDistanzaDisumanoDitoDivanoDiveltoDividereDivoratoDobloneDocenteDoganaleDogmaDolceDomatoDomenicaDominareDondoloDonoDormireDoteDottoreDovutoDozzinaDragoDruidoDubbioDubitareDucaleDunaDuomoDupliceDuraturoEbanoEccessoEccoEclissiEconomiaEderaEdicolaEdileEditoriaEducareEgemoniaEgliEgoismoEgregioElaboratoElargireEleganteElencatoElettoElevareElficoElicaElmoElsaElusoEmanatoEmblemaEmessoEmiroEmotivoEmozioneEmpiricoEmuloEndemicoEnduroEnergiaEnfasiEnotecaEntrareEnzimaEpatiteEpilogoEpisodioEpocaleEppureEquatoreErarioErbaErbosoEredeEremitaErigereErmeticoEroeErosivoErranteEsagonoEsameEsanimeEsaudireEscaEsempioEsercitoEsibitoEsigenteEsistereEsitoEsofagoEsortatoEsosoEspansoEspressoEssenzaEssoEstesoEstimareEstoniaEstrosoEsultareEtilicoEtnicoEtruscoEttoEuclideoEuropaEvasoEvidenzaEvitatoEvolutoEvvivaFabbricaFaccendaFachiroFalcoFamigliaFanaleFanfaraFangoFantasmaFareFarfallaFarinosoFarmacoFasciaFastosoFasulloFaticareFatoFavolosoFebbreFecolaFedeFegatoFelpaFeltroFemminaFendereFenomenoFermentoFerroFertileFessuraFestivoFettaFeudoFiabaFiduciaFifaFiguratoFiloFinanzaFinestraFinireFioreFiscaleFisicoFiumeFlaconeFlamencoFleboFlemmaFloridoFluenteFluoroFobicoFocacciaFocosoFoderatoFoglioFolataFolcloreFolgoreFondenteFoneticoFoniaFontanaForbitoForchettaForestaFormicaFornaioForoFortezzaForzareFosfatoFossoFracassoFranaFrassinoFratelloFreccettaFrenataFrescoFrigoFrollinoFrondeFrugaleFruttaFucilataFucsiaFuggenteFulmineFulvoFumanteFumettoFumosoFuneFunzioneFuocoFurboFurgoneFuroreFusoFutileGabbianoGaffeGalateoGallinaGaloppoGamberoGammaGaranziaGarboGarofanoGarzoneGasdottoGasolioGastricoGattoGaudioGazeboGazzellaGecoGelatinaGelsoGemelloGemmatoGeneGenitoreGennaioGenotipoGergoGhepardoGhiaccioGhisaGialloGildaGineproGiocareGioielloGiornoGioveGiratoGironeGittataGiudizioGiuratoGiustoGlobuloGlutineGnomoGobbaGolfGomitoGommoneGonfioGonnaGovernoGracileGradoGraficoGrammoGrandeGrattareGravosoGraziaGrecaGreggeGrifoneGrigioGrinzaGrottaGruppoGuadagnoGuaioGuantoGuardareGufoGuidareIbernatoIconaIdenticoIdillioIdoloIdraIdricoIdrogenoIgieneIgnaroIgnoratoIlareIllesoIllogicoIlludereImballoImbevutoImboccoImbutoImmaneImmersoImmolatoImpaccoImpetoImpiegoImportoImprontaInalareInarcareInattivoIncantoIncendioInchinoIncisivoInclusoIncontroIncrocioIncuboIndagineIndiaIndoleIneditoInfattiInfilareInflittoIngaggioIngegnoIngleseIngordoIngrossoInnescoInodoreInoltrareInondatoInsanoInsettoInsiemeInsonniaInsulinaIntasatoInteroIntonacoIntuitoInumidireInvalidoInveceInvitoIperboleIpnoticoIpotesiIppicaIrideIrlandaIronicoIrrigatoIrrorareIsolatoIsotopoIstericoIstitutoIstriceItaliaIterareLabbroLabirintoLaccaLaceratoLacrimaLacunaLaddoveLagoLampoLancettaLanternaLardosoLargaLaringeLastraLatenzaLatinoLattugaLavagnaLavoroLegaleLeggeroLemboLentezzaLenzaLeoneLepreLesivoLessatoLestoLetteraleLevaLevigatoLiberoLidoLievitoLillaLimaturaLimitareLimpidoLineareLinguaLiquidoLiraLiricaLiscaLiteLitigioLivreaLocandaLodeLogicaLombareLondraLongevoLoquaceLorenzoLotoLotteriaLuceLucidatoLumacaLuminosoLungoLupoLuppoloLusingaLussoLuttoMacabroMacchinaMaceroMacinatoMadamaMagicoMagliaMagneteMagroMaiolicaMalafedeMalgradoMalintesoMalsanoMaltoMalumoreManaManciaMandorlaMangiareManifestoMannaroManovraMansardaMantideManubrioMappaMaratonaMarcireMarettaMarmoMarsupioMascheraMassaiaMastinoMaterassoMatricolaMattoneMaturoMazurcaMeandroMeccanicoMecenateMedesimoMeditareMegaMelassaMelisMelodiaMeningeMenoMensolaMercurioMerendaMerloMeschinoMeseMessereMestoloMetalloMetodoMettereMiagolareMicaMicelioMicheleMicroboMidolloMieleMiglioreMilanoMiliteMimosaMineraleMiniMinoreMirinoMirtilloMiscelaMissivaMistoMisurareMitezzaMitigareMitraMittenteMnemonicoModelloModificaModuloMoganoMogioMoleMolossoMonasteroMoncoMondinaMonetarioMonileMonotonoMonsoneMontatoMonvisoMoraMordereMorsicatoMostroMotivatoMotosegaMottoMovenzaMovimentoMozzoMuccaMucosaMuffaMughettoMugnaioMulattoMulinelloMultiploMummiaMuntoMuovereMuraleMusaMuscoloMusicaMutevoleMutoNababboNaftaNanometroNarcisoNariceNarratoNascereNastrareNaturaleNauticaNaviglioNebulosaNecrosiNegativoNegozioNemmenoNeofitaNerettoNervoNessunoNettunoNeutraleNeveNevroticoNicchiaNinfaNitidoNobileNocivoNodoNomeNominaNordicoNormaleNorvegeseNostranoNotareNotiziaNotturnoNovellaNucleoNullaNumeroNuovoNutrireNuvolaNuzialeOasiObbedireObbligoObeliscoOblioOboloObsoletoOccasioneOcchioOccidenteOccorrereOccultareOcraOculatoOdiernoOdorareOffertaOffrireOffuscatoOggettoOggiOgnunoOlandeseOlfattoOliatoOlivaOlogrammaOltreOmaggioOmbelicoOmbraOmegaOmissioneOndosoOnereOniceOnnivoroOnorevoleOntaOperatoOpinioneOppostoOracoloOrafoOrdineOrecchinoOreficeOrfanoOrganicoOrigineOrizzonteOrmaOrmeggioOrnativoOrologioOrrendoOrribileOrtensiaOrticaOrzataOrzoOsareOscurareOsmosiOspedaleOspiteOssaOssidareOstacoloOsteOtiteOtreOttagonoOttimoOttobreOvaleOvestOvinoOviparoOvocitoOvunqueOvviareOzioPacchettoPacePacificoPadellaPadronePaesePagaPaginaPalazzinaPalesarePallidoPaloPaludePandoroPannelloPaoloPaonazzoPapricaParabolaParcellaParerePargoloPariParlatoParolaPartireParvenzaParzialePassivoPasticcaPataccaPatologiaPattumePavonePeccatoPedalarePedonalePeggioPelosoPenarePendicePenisolaPennutoPenombraPensarePentolaPepePepitaPerbenePercorsoPerdonatoPerforarePergamenaPeriodoPermessoPernoPerplessoPersuasoPertugioPervasoPesatorePesistaPesoPestiferoPetaloPettinePetulantePezzoPiacerePiantaPiattinoPiccinoPicozzaPiegaPietraPifferoPigiamaPigolioPigroPilaPiliferoPillolaPilotaPimpantePinetaPinnaPinoloPioggiaPiomboPiramidePireticoPiritePirolisiPitonePizzicoPlaceboPlanarePlasmaPlatanoPlenarioPochezzaPoderosoPodismoPoesiaPoggiarePolentaPoligonoPollicePolmonitePolpettaPolsoPoltronaPolverePomicePomodoroPontePopolosoPorfidoPorosoPorporaPorrePortataPosaPositivoPossessoPostulatoPotassioPoterePranzoPrassiPraticaPreclusoPredicaPrefissoPregiatoPrelievoPremerePrenotarePreparatoPresenzaPretestoPrevalsoPrimaPrincipePrivatoProblemaProcuraProdurreProfumoProgettoProlungaPromessaPronomePropostaProrogaProtesoProvaPrudentePrugnaPruritoPsichePubblicoPudicaPugilatoPugnoPulcePulitoPulsantePuntarePupazzoPupillaPuroQuadroQualcosaQuasiQuerelaQuotaRaccoltoRaddoppioRadicaleRadunatoRafficaRagazzoRagioneRagnoRamarroRamingoRamoRandagioRantolareRapatoRapinaRappresoRasaturaRaschiatoRasenteRassegnaRastrelloRataRavvedutoRealeRecepireRecintoReclutaReconditoRecuperoRedditoRedimereRegalatoRegistroRegolaRegressoRelazioneRemareRemotoRennaReplicaReprimereReputareResaResidenteResponsoRestauroReteRetinaRetoricaRettificaRevocatoRiassuntoRibadireRibelleRibrezzoRicaricaRiccoRicevereRiciclatoRicordoRicredutoRidicoloRidurreRifasareRiflessoRiformaRifugioRigareRigettatoRighelloRilassatoRilevatoRimanereRimbalzoRimedioRimorchioRinascitaRincaroRinforzoRinnovoRinomatoRinsavitoRintoccoRinunciaRinvenireRiparatoRipetutoRipienoRiportareRipresaRipulireRisataRischioRiservaRisibileRisoRispettoRistoroRisultatoRisvoltoRitardoRitegnoRitmicoRitrovoRiunioneRivaRiversoRivincitaRivoltoRizomaRobaRoboticoRobustoRocciaRocoRodaggioRodereRoditoreRogitoRollioRomanticoRompereRonzioRosolareRospoRotanteRotondoRotulaRovescioRubizzoRubricaRugaRullinoRumineRumorosoRuoloRupeRussareRusticoSabatoSabbiareSabotatoSagomaSalassoSaldaturaSalgemmaSalivareSalmoneSaloneSaltareSalutoSalvoSapereSapidoSaporitoSaracenoSarcasmoSartoSassosoSatelliteSatiraSatolloSaturnoSavanaSavioSaziatoSbadiglioSbalzoSbancatoSbarraSbattereSbavareSbendareSbirciareSbloccatoSbocciatoSbrinareSbruffoneSbuffareScabrosoScadenzaScalaScambiareScandaloScapolaScarsoScatenareScavatoSceltoScenicoScettroSchedaSchienaSciarpaScienzaScindereScippoSciroppoScivoloSclerareScodellaScolpitoScompartoSconfortoScoprireScortaScossoneScozzeseScribaScrollareScrutinioScuderiaScultoreScuolaScuroScusareSdebitareSdoganareSeccaturaSecondoSedanoSeggiolaSegnalatoSegregatoSeguitoSelciatoSelettivoSellaSelvaggioSemaforoSembrareSemeSeminatoSempreSensoSentireSepoltoSequenzaSerataSerbatoSerenoSerioSerpenteSerraglioServireSestinaSetolaSettimanaSfaceloSfaldareSfamatoSfarzosoSfaticatoSferaSfidaSfilatoSfingeSfocatoSfoderareSfogoSfoltireSforzatoSfrattoSfruttatoSfuggitoSfumareSfusoSgabelloSgarbatoSgonfiareSgorbioSgrassatoSguardoSibiloSiccomeSierraSiglaSignoreSilenzioSillabaSimboloSimpaticoSimulatoSinfoniaSingoloSinistroSinoSintesiSinusoideSiparioSismaSistoleSituatoSlittaSlogaturaSlovenoSmarritoSmemoratoSmentitoSmeraldoSmilzoSmontareSmottatoSmussatoSnellireSnervatoSnodoSobbalzoSobrioSoccorsoSocialeSodaleSoffittoSognoSoldatoSolenneSolidoSollazzoSoloSolubileSolventeSomaticoSommaSondaSonettoSonniferoSopireSoppesoSopraSorgereSorpassoSorrisoSorsoSorteggioSorvolatoSospiroSostaSottileSpadaSpallaSpargereSpatolaSpaventoSpazzolaSpecieSpedireSpegnereSpelaturaSperanzaSpessoreSpettraleSpezzatoSpiaSpigolosoSpillatoSpinosoSpiraleSplendidoSportivoSposoSprangaSprecareSpronatoSpruzzoSpuntinoSquilloSradicareSrotolatoStabileStaccoStaffaStagnareStampatoStantioStarnutoStaseraStatutoSteloSteppaSterzoStilettoStimaStirpeStivaleStizzosoStonatoStoricoStrappoStregatoStriduloStrozzareStruttoStuccareStufoStupendoSubentroSuccosoSudoreSuggeritoSugoSultanoSuonareSuperboSupportoSurgelatoSurrogatoSussurroSuturaSvagareSvedeseSveglioSvelareSvenutoSveziaSviluppoSvistaSvizzeraSvoltaSvuotareTabaccoTabulatoTacciareTaciturnoTaleTalismanoTamponeTanninoTaraTardivoTargatoTariffaTarpareTartarugaTastoTatticoTavernaTavolataTazzaTecaTecnicoTelefonoTemerarioTempoTemutoTendoneTeneroTensioneTentacoloTeoremaTermeTerrazzoTerzettoTesiTesseratoTestatoTetroTettoiaTifareTigellaTimbroTintoTipicoTipografoTiraggioTiroTitanioTitoloTitubanteTizioTizzoneToccareTollerareToltoTombolaTomoTonfoTonsillaTopazioTopologiaToppaTorbaTornareTorroneTortoraToscanoTossireTostaturaTotanoTraboccoTracheaTrafilaTragediaTralcioTramontoTransitoTrapanoTrarreTraslocoTrattatoTraveTrecciaTremolioTrespoloTributoTrichecoTrifoglioTrilloTrinceaTrioTristezzaTrituratoTrivellaTrombaTronoTroppoTrottolaTrovareTruccatoTubaturaTuffatoTulipanoTumultoTunisiaTurbareTurchinoTutaTutelaUbicatoUccelloUccisoreUdireUditivoUffaUfficioUgualeUlisseUltimatoUmanoUmileUmorismoUncinettoUngereUnghereseUnicornoUnificatoUnisonoUnitarioUnteUovoUpupaUraganoUrgenzaUrloUsanzaUsatoUscitoUsignoloUsuraioUtensileUtilizzoUtopiaVacanteVaccinatoVagabondoVagliatoValangaValgoValicoVallettaValorosoValutareValvolaVampataVangareVanitosoVanoVantaggioVanveraVaporeVaranoVarcatoVarianteVascaVedettaVedovaVedutoVegetaleVeicoloVelcroVelinaVellutoVeloceVenatoVendemmiaVentoVeraceVerbaleVergognaVerificaVeroVerrucaVerticaleVescicaVessilloVestaleVeteranoVetrinaVetustoViandanteVibranteVicendaVichingoVicinanzaVidimareVigiliaVignetoVigoreVileVillanoViminiVincitoreViolaViperaVirgolaVirologoVirulentoViscosoVisioneVispoVissutoVisuraVitaVitelloVittimaVivandaVividoViziareVoceVogaVolatileVolereVolpeVoragineVulcanoZampognaZannaZappatoZatteraZavorraZefiroZelanteZeloZenzeroZerbinoZibettoZincoZirconeZittoZollaZoticoZuccheroZufoloZuluZuppa";
  var wordlist$6 = null;
  function loadWords$6(lang) {
    if (wordlist$6 != null) {
      return;
    }
    wordlist$6 = words$4.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    if (Wordlist.check(lang) !== "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620") {
      wordlist$6 = null;
      throw new Error("BIP39 Wordlist for it (Italian) FAILED");
    }
  }
  var LangIt = class extends Wordlist {
    constructor() {
      super("it");
    }
    getWord(index2) {
      loadWords$6(this);
      return wordlist$6[index2];
    }
    getWordIndex(word) {
      loadWords$6(this);
      return wordlist$6.indexOf(word);
    }
  };
  var langIt = new LangIt();
  Wordlist.register(langIt);
  var data$2 = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
  var deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
  var wordlist$7 = { zh_cn: null, zh_tw: null };
  var Checks = { zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1", zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d" };
  var codes$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
  function loadWords$7(lang) {
    if (wordlist$7[lang.locale] !== null) {
      return;
    }
    wordlist$7[lang.locale] = [];
    let deltaOffset = 0;
    for (let i = 0; i < 2048; i++) {
      const s2 = style.indexOf(data$2[i * 3]);
      const bytes = [228 + (s2 >> 2), 128 + codes$1.indexOf(data$2[i * 3 + 1]), 128 + codes$1.indexOf(data$2[i * 3 + 2])];
      if (lang.locale === "zh_tw") {
        const common2 = s2 % 4;
        for (let i2 = common2; i2 < 3; i2++) {
          bytes[i2] = codes$1.indexOf(deltaData[deltaOffset++]) + (i2 == 0 ? 228 : 128);
        }
      }
      wordlist$7[lang.locale].push(toUtf8String(bytes));
    }
    if (Wordlist.check(lang) !== Checks[lang.locale]) {
      wordlist$7[lang.locale] = null;
      throw new Error("BIP39 Wordlist for " + lang.locale + " (Chinese) FAILED");
    }
  }
  var LangZh = class extends Wordlist {
    constructor(country) {
      super("zh_" + country);
    }
    getWord(index2) {
      loadWords$7(this);
      return wordlist$7[this.locale][index2];
    }
    getWordIndex(word) {
      loadWords$7(this);
      return wordlist$7[this.locale].indexOf(word);
    }
    split(mnemonic) {
      mnemonic = mnemonic.replace(/(?:\u3000| )+/g, "");
      return mnemonic.split("");
    }
  };
  var langZhCn = new LangZh("cn");
  Wordlist.register(langZhCn);
  Wordlist.register(langZhCn, "zh");
  var langZhTw = new LangZh("tw");
  Wordlist.register(langZhTw);
  var wordlists = { cz: langCz, en: langEn, es: langEs, fr: langFr, it: langIt, ja: langJa, ko: langKo, zh: langZhCn, zh_cn: langZhCn, zh_tw: langZhTw };
  var version$g = "hdnode/5.1.0";
  var logger$l = new Logger(version$g);
  var N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  var MasterSecret = toUtf8Bytes("Bitcoin seed");
  var HardenedBit = 2147483648;
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1;
  }
  function bytes32(value) {
    return hexZeroPad(hexlify(value), 32);
  }
  function base58check(data2) {
    return Base58.encode(concat([data2, hexDataSlice(sha256$1(sha256$1(data2)), 0, 4)]));
  }
  function getWordlist(wordlist2) {
    if (wordlist2 == null) {
      return wordlists["en"];
    }
    if (typeof wordlist2 === "string") {
      const words2 = wordlists[wordlist2];
      if (words2 == null) {
        logger$l.throwArgumentError("unknown locale", "wordlist", wordlist2);
      }
      return words2;
    }
    return wordlist2;
  }
  var _constructorGuard$3 = {};
  var defaultPath = "m/44'/60'/0'/0/0";
  var HDNode = class {
    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index2, depth, mnemonicOrPath) {
      logger$l.checkNew(new.target, HDNode);
      if (constructorGuard !== _constructorGuard$3) {
        throw new Error("HDNode constructor cannot be called directly");
      }
      if (privateKey) {
        const signingKey = new SigningKey(privateKey);
        defineReadOnly(this, "privateKey", signingKey.privateKey);
        defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
      } else {
        defineReadOnly(this, "privateKey", null);
        defineReadOnly(this, "publicKey", hexlify(publicKey));
      }
      defineReadOnly(this, "parentFingerprint", parentFingerprint);
      defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160$1(sha256$1(this.publicKey)), 0, 4));
      defineReadOnly(this, "address", computeAddress(this.publicKey));
      defineReadOnly(this, "chainCode", chainCode);
      defineReadOnly(this, "index", index2);
      defineReadOnly(this, "depth", depth);
      if (mnemonicOrPath == null) {
        defineReadOnly(this, "mnemonic", null);
        defineReadOnly(this, "path", null);
      } else if (typeof mnemonicOrPath === "string") {
        defineReadOnly(this, "mnemonic", null);
        defineReadOnly(this, "path", mnemonicOrPath);
      } else {
        defineReadOnly(this, "mnemonic", mnemonicOrPath);
        defineReadOnly(this, "path", mnemonicOrPath.path);
      }
    }
    get extendedKey() {
      if (this.depth >= 256) {
        throw new Error("Depth too large!");
      }
      return base58check(concat([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat(["0x00", this.privateKey]) : this.publicKey]));
    }
    neuter() {
      return new HDNode(_constructorGuard$3, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    }
    _derive(index2) {
      if (index2 > 4294967295) {
        throw new Error("invalid index - " + String(index2));
      }
      let path = this.path;
      if (path) {
        path += "/" + (index2 & ~HardenedBit);
      }
      const data2 = new Uint8Array(37);
      if (index2 & HardenedBit) {
        if (!this.privateKey) {
          throw new Error("cannot derive child of neutered node");
        }
        data2.set(arrayify(this.privateKey), 1);
        if (path) {
          path += "'";
        }
      } else {
        data2.set(arrayify(this.publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data2[33 + (i >> 3)] = index2 >> 24 - i & 255;
      }
      const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data2));
      const IL = I.slice(0, 32);
      const IR = I.slice(32);
      let ki = null;
      let Ki = null;
      if (this.privateKey) {
        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
      } else {
        const ek = new SigningKey(hexlify(IL));
        Ki = ek._addPoint(this.publicKey);
      }
      let mnemonicOrPath = path;
      const srcMnemonic = this.mnemonic;
      if (srcMnemonic) {
        mnemonicOrPath = Object.freeze({ phrase: srcMnemonic.phrase, path, locale: srcMnemonic.locale || "en" });
      }
      return new HDNode(_constructorGuard$3, ki, Ki, this.fingerprint, bytes32(IR), index2, this.depth + 1, mnemonicOrPath);
    }
    derivePath(path) {
      const components = path.split("/");
      if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
        throw new Error("invalid path - " + path);
      }
      if (components[0] === "m") {
        components.shift();
      }
      let result = this;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index2 = parseInt(component.substring(0, component.length - 1));
          if (index2 >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(HardenedBit + index2);
        } else if (component.match(/^[0-9]+$/)) {
          const index2 = parseInt(component);
          if (index2 >= HardenedBit) {
            throw new Error("invalid path index - " + component);
          }
          result = result._derive(index2);
        } else {
          throw new Error("invalid path component - " + component);
        }
      }
      return result;
    }
    static _fromSeed(seed, mnemonic) {
      const seedArray = arrayify(seed);
      if (seedArray.length < 16 || seedArray.length > 64) {
        throw new Error("invalid seed");
      }
      const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
      return new HDNode(_constructorGuard$3, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    }
    static fromMnemonic(mnemonic, password, wordlist2) {
      wordlist2 = getWordlist(wordlist2);
      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), { phrase: mnemonic, path: "m", locale: wordlist2.locale });
    }
    static fromSeed(seed) {
      return HDNode._fromSeed(seed, null);
    }
    static fromExtendedKey(extendedKey) {
      const bytes = Base58.decode(extendedKey);
      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
        logger$l.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
      }
      const depth = bytes[4];
      const parentFingerprint = hexlify(bytes.slice(5, 9));
      const index2 = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
      const chainCode = hexlify(bytes.slice(13, 45));
      const key2 = bytes.slice(45, 78);
      switch (hexlify(bytes.slice(0, 4))) {
        case "0x0488b21e":
        case "0x043587cf":
          return new HDNode(_constructorGuard$3, null, hexlify(key2), parentFingerprint, chainCode, index2, depth, null);
        case "0x0488ade4":
        case "0x04358394 ":
          if (key2[0] !== 0) {
            break;
          }
          return new HDNode(_constructorGuard$3, hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index2, depth, null);
      }
      return logger$l.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
  };
  function mnemonicToSeed(mnemonic, password) {
    if (!password) {
      password = "";
    }
    const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
  }
  function mnemonicToEntropy(mnemonic, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    logger$l.checkNormalize();
    const words2 = wordlist2.split(mnemonic);
    if (words2.length % 3 !== 0) {
      throw new Error("invalid mnemonic");
    }
    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words2.length / 8)));
    let offset = 0;
    for (let i = 0; i < words2.length; i++) {
      let index2 = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
      if (index2 === -1) {
        throw new Error("invalid mnemonic");
      }
      for (let bit = 0; bit < 11; bit++) {
        if (index2 & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }
        offset++;
      }
    }
    const entropyBits = 32 * words2.length / 3;
    const checksumBits = words2.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
      throw new Error("invalid checksum");
    }
    return hexlify(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    wordlist2 = getWordlist(wordlist2);
    entropy = arrayify(entropy);
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
      throw new Error("invalid entropy");
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist2.join(indices.map((index2) => wordlist2.getWord(index2)));
  }
  function isValidMnemonic(mnemonic, wordlist2) {
    try {
      mnemonicToEntropy(mnemonic, wordlist2);
      return true;
    } catch (error) {
    }
    return false;
  }
  var version$h = "random/5.1.0";
  var logger$m = new Logger(version$h);
  var anyGlobal = null;
  try {
    anyGlobal = window;
    if (anyGlobal == null) {
      throw new Error("try next");
    }
  } catch (error) {
    try {
      anyGlobal = global;
      if (anyGlobal == null) {
        throw new Error("try next");
      }
    } catch (error2) {
      anyGlobal = {};
    }
  }
  var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
  if (!crypto || !crypto.getRandomValues) {
    logger$m.warn("WARNING: Missing strong random number source");
    crypto = { getRandomValues: function(buffer) {
      return logger$m.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, { operation: "crypto.getRandomValues" });
    } };
  }
  function randomBytes(length) {
    if (length <= 0 || length > 1024 || length % 1) {
      logger$m.throwArgumentError("invalid length", "length", length);
    }
    const result = new Uint8Array(length);
    crypto.getRandomValues(result);
    return arrayify(result);
  }
  function shuffled(array) {
    array = array.slice();
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const tmp = array[i];
      array[i] = array[j];
      array[j] = tmp;
    }
    return array;
  }
  var aesJs = createCommonjsModule(function(module, exports) {
    "use strict";
    (function(root) {
      function checkInt(value) {
        return parseInt(value) === value;
      }
      function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) {
          return false;
        }
        for (var i = 0; i < arrayish.length; i++) {
          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
            return false;
          }
        }
        return true;
      }
      function coerceArray(arg, copy) {
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
          if (copy) {
            if (arg.slice) {
              arg = arg.slice();
            } else {
              arg = Array.prototype.slice.call(arg);
            }
          }
          return arg;
        }
        if (Array.isArray(arg)) {
          if (!checkInts(arg)) {
            throw new Error("Array contains invalid value: " + arg);
          }
          return new Uint8Array(arg);
        }
        if (checkInt(arg.length) && checkInts(arg)) {
          return new Uint8Array(arg);
        }
        throw new Error("unsupported array-like object");
      }
      function createArray(length) {
        return new Uint8Array(length);
      }
      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
          if (sourceArray.slice) {
            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
          } else {
            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
          }
        }
        targetArray.set(sourceArray, targetStart);
      }
      var convertUtf8 = function() {
        function toBytes(text) {
          var result = [], i = 0;
          text = encodeURI(text);
          while (i < text.length) {
            var c = text.charCodeAt(i++);
            if (c === 37) {
              result.push(parseInt(text.substr(i, 2), 16));
              i += 2;
            } else {
              result.push(c);
            }
          }
          return coerceArray(result);
        }
        function fromBytes(bytes) {
          var result = [], i = 0;
          while (i < bytes.length) {
            var c = bytes[i];
            if (c < 128) {
              result.push(String.fromCharCode(c));
              i++;
            } else if (c > 191 && c < 224) {
              result.push(String.fromCharCode((c & 31) << 6 | bytes[i + 1] & 63));
              i += 2;
            } else {
              result.push(String.fromCharCode((c & 15) << 12 | (bytes[i + 1] & 63) << 6 | bytes[i + 2] & 63));
              i += 3;
            }
          }
          return result.join("");
        }
        return { toBytes, fromBytes };
      }();
      var convertHex = function() {
        function toBytes(text) {
          var result = [];
          for (var i = 0; i < text.length; i += 2) {
            result.push(parseInt(text.substr(i, 2), 16));
          }
          return result;
        }
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
          var result = [];
          for (var i = 0; i < bytes.length; i++) {
            var v = bytes[i];
            result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
          }
          return result.join("");
        }
        return { toBytes, fromBytes };
      }();
      var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
      var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
      var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
      var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
      var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
      var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
      var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
      var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
      var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
      var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
      var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
      var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
      var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
      var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
      var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
      var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
      function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
          result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        }
        return result;
      }
      var AES = function(key2) {
        if (!(this instanceof AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        Object.defineProperty(this, "key", { value: coerceArray(key2, true) });
        this._prepare();
      };
      AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        }
        this._Ke = [];
        this._Kd = [];
        for (var i = 0; i <= rounds; i++) {
          this._Ke.push([0, 0, 0, 0]);
          this._Kd.push([0, 0, 0, 0]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        var tk = convertToInt32(this.key);
        var index2;
        for (var i = 0; i < KC; i++) {
          index2 = i >> 2;
          this._Ke[index2][i % 4] = tk[i];
          this._Kd[rounds - index2][i % 4] = tk[i];
        }
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (var i = 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          } else {
            for (var i = 1; i < KC / 2; i++) {
              tk[i] ^= tk[i - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (var i = KC / 2 + 1; i < KC; i++) {
              tk[i] ^= tk[i - 1];
            }
          }
          var i = 0, r2, c;
          while (i < KC && t < roundKeyCount) {
            r2 = t >> 2;
            c = t % 4;
            this._Ke[r2][c] = tk[i];
            this._Kd[rounds - r2][c] = tk[i++];
            t++;
          }
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var c = 0; c < 4; c++) {
            tt = this._Kd[r2][c];
            this._Kd[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      };
      AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
          throw new Error("invalid plaintext size (must be 16 bytes)");
        }
        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Ke[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ this._Ke[r2][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Ke[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
          throw new Error("invalid ciphertext size (must be 16 bytes)");
        }
        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
          t[i] ^= this._Kd[0][i];
        }
        for (var r2 = 1; r2 < rounds; r2++) {
          for (var i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ this._Kd[r2][i];
          }
          t = a.slice();
        }
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
          tt = this._Kd[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      };
      var ModeOfOperationECB = function(key2) {
        if (!(this instanceof ModeOfOperationECB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key2);
      };
      ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          block = this._aes.encrypt(block);
          copyArray(block, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          copyArray(block, plaintext, i);
        }
        return plaintext;
      };
      var ModeOfOperationCBC = function(key2, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) {
          throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        }
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for (var i = 0; i < plaintext.length; i += 16) {
          copyArray(plaintext, block, 0, i, i + 16);
          for (var j = 0; j < 16; j++) {
            block[j] ^= this._lastCipherblock[j];
          }
          this._lastCipherblock = this._aes.encrypt(block);
          copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
      };
      ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) {
          throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for (var i = 0; i < ciphertext.length; i += 16) {
          copyArray(ciphertext, block, 0, i, i + 16);
          block = this._aes.decrypt(block);
          for (var j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
          }
          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
      };
      var ModeOfOperationCFB = function(key2, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 size)");
        }
        if (!segmentSize) {
          segmentSize = 1;
        }
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key2);
      };
      ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) {
          throw new Error("invalid plaintext size (must be segmentSize bytes)");
        }
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            encrypted[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
      };
      ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) {
          throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        }
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
          xorSegment = this._aes.encrypt(this._shiftRegister);
          for (var j = 0; j < this.segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
      };
      var ModeOfOperationOFB = function(key2, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) {
          iv = createArray(16);
        } else if (iv.length != 16) {
          throw new Error("invalid initialation vector size (must be 16 bytes)");
        }
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._lastPrecipherIndex === 16) {
            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
            this._lastPrecipherIndex = 0;
          }
          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
      };
      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
      var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
          throw Error("Counter must be instanitated with `new`");
        }
        if (initialValue !== 0 && !initialValue) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this._counter = createArray(16);
          this.setValue(initialValue);
        } else {
          this.setBytes(initialValue);
        }
      };
      Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) {
          throw new Error("invalid counter value (must be an integer)");
        }
        for (var index2 = 15; index2 >= 0; --index2) {
          this._counter[index2] = value % 256;
          value = value >> 8;
        }
      };
      Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) {
          throw new Error("invalid counter bytes size (must be 16 bytes)");
        }
        this._counter = bytes;
      };
      Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
          if (this._counter[i] === 255) {
            this._counter[i] = 0;
          } else {
            this._counter[i]++;
            break;
          }
        }
      };
      var ModeOfOperationCTR = function(key2, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
          throw Error("AES must be instanitated with `new`");
        }
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) {
          counter = new Counter(counter);
        }
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key2);
      };
      ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for (var i = 0; i < encrypted.length; i++) {
          if (this._remainingCounterIndex === 16) {
            this._remainingCounter = this._aes.encrypt(this._counter._counter);
            this._remainingCounterIndex = 0;
            this._counter.increment();
          }
          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
      };
      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
      function pkcs7pad(data2) {
        data2 = coerceArray(data2, true);
        var padder = 16 - data2.length % 16;
        var result = createArray(data2.length + padder);
        copyArray(data2, result);
        for (var i = data2.length; i < result.length; i++) {
          result[i] = padder;
        }
        return result;
      }
      function pkcs7strip(data2) {
        data2 = coerceArray(data2, true);
        if (data2.length < 16) {
          throw new Error("PKCS#7 invalid length");
        }
        var padder = data2[data2.length - 1];
        if (padder > 16) {
          throw new Error("PKCS#7 padding byte out of range");
        }
        var length = data2.length - padder;
        for (var i = 0; i < padder; i++) {
          if (data2[length + i] !== padder) {
            throw new Error("PKCS#7 invalid padding byte");
          }
        }
        var result = createArray(length);
        copyArray(data2, result, 0, 0, length);
        return result;
      }
      var aesjs = { AES, Counter, ModeOfOperation: { ecb: ModeOfOperationECB, cbc: ModeOfOperationCBC, cfb: ModeOfOperationCFB, ofb: ModeOfOperationOFB, ctr: ModeOfOperationCTR }, utils: { hex: convertHex, utf8: convertUtf8 }, padding: { pkcs7: { pad: pkcs7pad, strip: pkcs7strip } }, _arrayTest: { coerceArray, createArray, copyArray } };
      if (true) {
        module.exports = aesjs;
      } else if (false) {
        (void 0)(aesjs);
      } else {
        if (root.aesjs) {
          aesjs._aesjs = root.aesjs;
        }
        root.aesjs = aesjs;
      }
    })(commonjsGlobal);
  });
  var version$i = "json-wallets/5.1.0";
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
      hexString = "0x" + hexString;
    }
    return arrayify(hexString);
  }
  function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  function getPassword(password) {
    if (typeof password === "string") {
      return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
    }
    return arrayify(password);
  }
  function searchPath(object, path) {
    let currentChild = object;
    const comps = path.toLowerCase().split("/");
    for (let i = 0; i < comps.length; i++) {
      let matchingChild = null;
      for (const key2 in currentChild) {
        if (key2.toLowerCase() === comps[i]) {
          matchingChild = currentChild[key2];
          break;
        }
      }
      if (matchingChild === null) {
        return null;
      }
      currentChild = matchingChild;
    }
    return currentChild;
  }
  function uuidV4(randomBytes2) {
    const bytes = arrayify(randomBytes2);
    bytes[6] = bytes[6] & 15 | 64;
    bytes[8] = bytes[8] & 63 | 128;
    const value = hexlify(bytes);
    return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join("-");
  }
  var logger$n = new Logger(version$i);
  var CrowdsaleAccount = class extends Description {
    isCrowdsaleAccount(value) {
      return !!(value && value._isCrowdsaleAccount);
    }
  };
  function decrypt(json, password) {
    const data2 = JSON.parse(json);
    password = getPassword(password);
    const ethaddr = getAddress(searchPath(data2, "ethaddr"));
    const encseed = looseArrayify(searchPath(data2, "encseed"));
    if (!encseed || encseed.length % 16 !== 0) {
      logger$n.throwArgumentError("invalid encseed", "json", json);
    }
    const key2 = arrayify(pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new aesJs.ModeOfOperation.cbc(key2, iv);
    const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }
    const seedHexBytes = toUtf8Bytes(seedHex);
    const privateKey = keccak256(seedHexBytes);
    return new CrowdsaleAccount({ _isCrowdsaleAccount: true, address: ethaddr, privateKey });
  }
  function isCrowdsaleWallet(json) {
    let data2 = null;
    try {
      data2 = JSON.parse(json);
    } catch (error) {
      return false;
    }
    return data2.encseed && data2.ethaddr;
  }
  function isKeystoreWallet(json) {
    let data2 = null;
    try {
      data2 = JSON.parse(json);
    } catch (error) {
      return false;
    }
    if (!data2.version || parseInt(data2.version) !== data2.version || parseInt(data2.version) !== 3) {
      return false;
    }
    return true;
  }
  function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) {
      try {
        return getAddress(JSON.parse(json).ethaddr);
      } catch (error) {
        return null;
      }
    }
    if (isKeystoreWallet(json)) {
      try {
        return getAddress(JSON.parse(json).address);
      } catch (error) {
        return null;
      }
    }
    return null;
  }
  var scrypt = createCommonjsModule(function(module, exports) {
    "use strict";
    (function(root) {
      const MAX_VALUE = 2147483647;
      function SHA2562(m) {
        const K2 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
        let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
        let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
        const w = new Uint32Array(64);
        function blocks(p2) {
          let off = 0, len = p2.length;
          while (len >= 64) {
            let a = h0, b = h1, c = h2, d = h3, e = h4, f2 = h5, g = h6, h = h7, u, i2, j, t1, t2;
            for (i2 = 0; i2 < 16; i2++) {
              j = off + i2 * 4;
              w[i2] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;
            }
            for (i2 = 16; i2 < 64; i2++) {
              u = w[i2 - 2];
              t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
              u = w[i2 - 15];
              t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
              w[i2] = (t1 + w[i2 - 7] | 0) + (t2 + w[i2 - 16] | 0) | 0;
            }
            for (i2 = 0; i2 < 64; i2++) {
              t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f2 ^ ~e & g) | 0) + (h + (K2[i2] + w[i2] | 0) | 0) | 0;
              t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
              h = g;
              g = f2;
              f2 = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            h0 = h0 + a | 0;
            h1 = h1 + b | 0;
            h2 = h2 + c | 0;
            h3 = h3 + d | 0;
            h4 = h4 + e | 0;
            h5 = h5 + f2 | 0;
            h6 = h6 + g | 0;
            h7 = h7 + h | 0;
            off += 64;
            len -= 64;
          }
        }
        blocks(m);
        let i, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);
        p.push(128);
        for (i = bytesLeft + 1; i < numZeros; i++) {
          p.push(0);
        }
        p.push(bitLenHi >>> 24 & 255);
        p.push(bitLenHi >>> 16 & 255);
        p.push(bitLenHi >>> 8 & 255);
        p.push(bitLenHi >>> 0 & 255);
        p.push(bitLenLo >>> 24 & 255);
        p.push(bitLenLo >>> 16 & 255);
        p.push(bitLenLo >>> 8 & 255);
        p.push(bitLenLo >>> 0 & 255);
        blocks(p);
        return [h0 >>> 24 & 255, h0 >>> 16 & 255, h0 >>> 8 & 255, h0 >>> 0 & 255, h1 >>> 24 & 255, h1 >>> 16 & 255, h1 >>> 8 & 255, h1 >>> 0 & 255, h2 >>> 24 & 255, h2 >>> 16 & 255, h2 >>> 8 & 255, h2 >>> 0 & 255, h3 >>> 24 & 255, h3 >>> 16 & 255, h3 >>> 8 & 255, h3 >>> 0 & 255, h4 >>> 24 & 255, h4 >>> 16 & 255, h4 >>> 8 & 255, h4 >>> 0 & 255, h5 >>> 24 & 255, h5 >>> 16 & 255, h5 >>> 8 & 255, h5 >>> 0 & 255, h6 >>> 24 & 255, h6 >>> 16 & 255, h6 >>> 8 & 255, h6 >>> 0 & 255, h7 >>> 24 & 255, h7 >>> 16 & 255, h7 >>> 8 & 255, h7 >>> 0 & 255];
      }
      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        password = password.length <= 64 ? password : SHA2562(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i;
        let dk = [];
        for (i = 0; i < 64; i++) {
          inner[i] = 54;
        }
        for (i = 0; i < password.length; i++) {
          inner[i] ^= password[i];
        }
        for (i = 0; i < salt.length; i++) {
          inner[64 + i] = salt[i];
        }
        for (i = innerLen - 4; i < innerLen; i++) {
          inner[i] = 0;
        }
        for (i = 0; i < 64; i++)
          outerKey[i] = 92;
        for (i = 0; i < password.length; i++)
          outerKey[i] ^= password[i];
        function incrementCounter() {
          for (let i2 = innerLen - 1; i2 >= innerLen - 4; i2--) {
            inner[i2]++;
            if (inner[i2] <= 255)
              return;
            inner[i2] = 0;
          }
        }
        while (dkLen >= 32) {
          incrementCounter();
          dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))));
          dkLen -= 32;
        }
        if (dkLen > 0) {
          incrementCounter();
          dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))).slice(0, dkLen));
        }
        return dk;
      }
      function blockmix_salsa8(BY, Yi, r2, x, _X) {
        let i;
        arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r2; i++) {
          blockxor(BY, i * 16, _X, 16);
          salsa20_8(_X, x);
          arraycopy(_X, 0, BY, Yi + i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
        }
        for (i = 0; i < r2; i++) {
          arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r2) * 16, 16);
        }
      }
      function R(a, b) {
        return a << b | a >>> 32 - b;
      }
      function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);
        for (let i = 8; i > 0; i -= 2) {
          x[4] ^= R(x[0] + x[12], 7);
          x[8] ^= R(x[4] + x[0], 9);
          x[12] ^= R(x[8] + x[4], 13);
          x[0] ^= R(x[12] + x[8], 18);
          x[9] ^= R(x[5] + x[1], 7);
          x[13] ^= R(x[9] + x[5], 9);
          x[1] ^= R(x[13] + x[9], 13);
          x[5] ^= R(x[1] + x[13], 18);
          x[14] ^= R(x[10] + x[6], 7);
          x[2] ^= R(x[14] + x[10], 9);
          x[6] ^= R(x[2] + x[14], 13);
          x[10] ^= R(x[6] + x[2], 18);
          x[3] ^= R(x[15] + x[11], 7);
          x[7] ^= R(x[3] + x[15], 9);
          x[11] ^= R(x[7] + x[3], 13);
          x[15] ^= R(x[11] + x[7], 18);
          x[1] ^= R(x[0] + x[3], 7);
          x[2] ^= R(x[1] + x[0], 9);
          x[3] ^= R(x[2] + x[1], 13);
          x[0] ^= R(x[3] + x[2], 18);
          x[6] ^= R(x[5] + x[4], 7);
          x[7] ^= R(x[6] + x[5], 9);
          x[4] ^= R(x[7] + x[6], 13);
          x[5] ^= R(x[4] + x[7], 18);
          x[11] ^= R(x[10] + x[9], 7);
          x[8] ^= R(x[11] + x[10], 9);
          x[9] ^= R(x[8] + x[11], 13);
          x[10] ^= R(x[9] + x[8], 18);
          x[12] ^= R(x[15] + x[14], 7);
          x[13] ^= R(x[12] + x[15], 9);
          x[14] ^= R(x[13] + x[12], 13);
          x[15] ^= R(x[14] + x[13], 18);
        }
        for (let i = 0; i < 16; ++i) {
          B[i] += x[i];
        }
      }
      function blockxor(S, Si, D, len) {
        for (let i = 0; i < len; i++) {
          D[i] ^= S[Si + i];
        }
      }
      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }
      function checkBufferish(o) {
        if (!o || typeof o.length !== "number") {
          return false;
        }
        for (let i = 0; i < o.length; i++) {
          const v = o[i];
          if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) {
            return false;
          }
        }
        return true;
      }
      function ensureInteger(value, name2) {
        if (typeof value !== "number" || value % 1) {
          throw new Error("invalid " + name2);
        }
        return value;
      }
      function _scrypt(password, salt, N2, r2, p, dkLen, callback) {
        N2 = ensureInteger(N2, "N");
        r2 = ensureInteger(r2, "r");
        p = ensureInteger(p, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N2 === 0 || (N2 & N2 - 1) !== 0) {
          throw new Error("N must be power of 2");
        }
        if (N2 > MAX_VALUE / 128 / r2) {
          throw new Error("N too large");
        }
        if (r2 > MAX_VALUE / 128 / p) {
          throw new Error("r too large");
        }
        if (!checkBufferish(password)) {
          throw new Error("password must be an array or buffer");
        }
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) {
          throw new Error("salt must be an array or buffer");
        }
        salt = Array.prototype.slice.call(salt);
        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r2);
        const B = new Uint32Array(p * 32 * r2);
        for (let i = 0; i < B.length; i++) {
          const j = i * 4;
          B[i] = (b[j + 3] & 255) << 24 | (b[j + 2] & 255) << 16 | (b[j + 1] & 255) << 8 | (b[j + 0] & 255) << 0;
        }
        const XY = new Uint32Array(64 * r2);
        const V = new Uint32Array(32 * r2 * N2);
        const Yi = 32 * r2;
        const x = new Uint32Array(16);
        const _X = new Uint32Array(16);
        const totalOps = p * N2 * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        let stop = false;
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        const limit = callback ? parseInt(1e3 / r2) : 4294967295;
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        const incrementalSMix = function() {
          if (stop) {
            return callback(new Error("cancelled"), currentOp / totalOps);
          }
          let steps;
          switch (state) {
            case 0:
              Bi = i0 * 32 * r2;
              arraycopy(B, Bi, XY, 0, Yi);
              state = 1;
              i1 = 0;
            case 1:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);
                blockmix_salsa8(XY, Yi, r2, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              i1 = 0;
              state = 2;
            case 2:
              steps = N2 - i1;
              if (steps > limit) {
                steps = limit;
              }
              for (let i = 0; i < steps; i++) {
                const offset = (2 * r2 - 1) * 16;
                const j = XY[offset] & N2 - 1;
                blockxor(V, j * Yi, XY, Yi);
                blockmix_salsa8(XY, Yi, r2, x, _X);
              }
              i1 += steps;
              currentOp += steps;
              if (callback) {
                const percent10 = parseInt(1e3 * currentOp / totalOps);
                if (percent10 !== lastPercent10) {
                  stop = callback(null, currentOp / totalOps);
                  if (stop) {
                    break;
                  }
                  lastPercent10 = percent10;
                }
              }
              if (i1 < N2) {
                break;
              }
              arraycopy(XY, 0, B, Bi, Yi);
              i0++;
              if (i0 < p) {
                state = 0;
                break;
              }
              b = [];
              for (let i = 0; i < B.length; i++) {
                b.push(B[i] >> 0 & 255);
                b.push(B[i] >> 8 & 255);
                b.push(B[i] >> 16 & 255);
                b.push(B[i] >> 24 & 255);
              }
              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
              if (callback) {
                callback(null, 1, derivedKey);
              }
              return derivedKey;
          }
          if (callback) {
            nextTick(incrementalSMix);
          }
        };
        if (!callback) {
          while (true) {
            const derivedKey = incrementalSMix();
            if (derivedKey != void 0) {
              return derivedKey;
            }
          }
        }
        incrementalSMix();
      }
      const lib = { scrypt: function(password, salt, N2, r2, p, dkLen, progressCallback) {
        return new Promise(function(resolve, reject) {
          let lastProgress = 0;
          if (progressCallback) {
            progressCallback(0);
          }
          _scrypt(password, salt, N2, r2, p, dkLen, function(error, progress, key2) {
            if (error) {
              reject(error);
            } else if (key2) {
              if (progressCallback && lastProgress !== 1) {
                progressCallback(1);
              }
              resolve(new Uint8Array(key2));
            } else if (progressCallback && progress !== lastProgress) {
              lastProgress = progress;
              return progressCallback(progress);
            }
          });
        });
      }, syncScrypt: function(password, salt, N2, r2, p, dkLen) {
        return new Uint8Array(_scrypt(password, salt, N2, r2, p, dkLen));
      } };
      if (true) {
        module.exports = lib;
      } else if (false) {
        (void 0)(lib);
      } else if (root) {
        if (root.scrypt) {
          root._scrypt = root.scrypt;
        }
        root.scrypt = lib;
      }
    })(commonjsGlobal);
  });
  var __awaiter$4 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$o = new Logger(version$i);
  function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
  }
  var KeystoreAccount = class extends Description {
    isKeystoreAccount(value) {
      return !!(value && value._isKeystoreAccount);
    }
  };
  function _decrypt(data2, key2, ciphertext) {
    const cipher = searchPath(data2, "crypto/cipher");
    if (cipher === "aes-128-ctr") {
      const iv = looseArrayify(searchPath(data2, "crypto/cipherparams/iv"));
      const counter = new aesJs.Counter(iv);
      const aesCtr = new aesJs.ModeOfOperation.ctr(key2, counter);
      return arrayify(aesCtr.decrypt(ciphertext));
    }
    return null;
  }
  function _getAccount(data2, key2) {
    const ciphertext = looseArrayify(searchPath(data2, "crypto/ciphertext"));
    const computedMAC = hexlify(keccak256(concat([key2.slice(16, 32), ciphertext]))).substring(2);
    if (computedMAC !== searchPath(data2, "crypto/mac").toLowerCase()) {
      throw new Error("invalid password");
    }
    const privateKey = _decrypt(data2, key2.slice(0, 16), ciphertext);
    if (!privateKey) {
      logger$o.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, { operation: "decrypt" });
    }
    const mnemonicKey = key2.slice(32, 64);
    const address = computeAddress(privateKey);
    if (data2.address) {
      let check = data2.address.toLowerCase();
      if (check.substring(0, 2) !== "0x") {
        check = "0x" + check;
      }
      if (getAddress(check) !== address) {
        throw new Error("address mismatch");
      }
    }
    const account = { _isKeystoreAccount: true, address, privateKey: hexlify(privateKey) };
    if (searchPath(data2, "x-ethers/version") === "0.1") {
      const mnemonicCiphertext = looseArrayify(searchPath(data2, "x-ethers/mnemonicCiphertext"));
      const mnemonicIv = looseArrayify(searchPath(data2, "x-ethers/mnemonicCounter"));
      const mnemonicCounter = new aesJs.Counter(mnemonicIv);
      const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const path = searchPath(data2, "x-ethers/path") || defaultPath;
      const locale = searchPath(data2, "x-ethers/locale") || "en";
      const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
      try {
        const mnemonic = entropyToMnemonic(entropy, locale);
        const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
        account.mnemonic = node.mnemonic;
      } catch (error) {
        if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
          throw error;
        }
      }
    }
    return new KeystoreAccount(account);
  }
  function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return arrayify(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
  }
  function pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
  }
  function _computeKdfKey(data2, password, pbkdf2Func, scryptFunc, progressCallback) {
    const passwordBytes = getPassword(password);
    const kdf = searchPath(data2, "crypto/kdf");
    if (kdf && typeof kdf === "string") {
      const throwError = function(name2, value) {
        return logger$o.throwArgumentError("invalid key-derivation function parameters", name2, value);
      };
      if (kdf.toLowerCase() === "scrypt") {
        const salt = looseArrayify(searchPath(data2, "crypto/kdfparams/salt"));
        const N2 = parseInt(searchPath(data2, "crypto/kdfparams/n"));
        const r2 = parseInt(searchPath(data2, "crypto/kdfparams/r"));
        const p = parseInt(searchPath(data2, "crypto/kdfparams/p"));
        if (!N2 || !r2 || !p) {
          throwError("kdf", kdf);
        }
        if ((N2 & N2 - 1) !== 0) {
          throwError("N", N2);
        }
        const dkLen = parseInt(searchPath(data2, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return scryptFunc(passwordBytes, salt, N2, r2, p, 64, progressCallback);
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = looseArrayify(searchPath(data2, "crypto/kdfparams/salt"));
        let prfFunc = null;
        const prf = searchPath(data2, "crypto/kdfparams/prf");
        if (prf === "hmac-sha256") {
          prfFunc = "sha256";
        } else if (prf === "hmac-sha512") {
          prfFunc = "sha512";
        } else {
          throwError("prf", prf);
        }
        const count = parseInt(searchPath(data2, "crypto/kdfparams/c"));
        const dkLen = parseInt(searchPath(data2, "crypto/kdfparams/dklen"));
        if (dkLen !== 32) {
          throwError("dklen", dkLen);
        }
        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
      }
    }
    return logger$o.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
  }
  function decryptSync(json, password) {
    const data2 = JSON.parse(json);
    const key2 = _computeKdfKey(data2, password, pbkdf2Sync, scrypt.syncScrypt);
    return _getAccount(data2, key2);
  }
  function decrypt$1(json, password, progressCallback) {
    return __awaiter$4(this, void 0, void 0, function* () {
      const data2 = JSON.parse(json);
      const key2 = yield _computeKdfKey(data2, password, pbkdf2$1, scrypt.scrypt, progressCallback);
      return _getAccount(data2, key2);
    });
  }
  function encrypt(account, password, options, progressCallback) {
    try {
      if (getAddress(account.address) !== computeAddress(account.privateKey)) {
        throw new Error("address/privateKey mismatch");
      }
      if (hasMnemonic(account)) {
        const mnemonic = account.mnemonic;
        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
        if (node.privateKey != account.privateKey) {
          throw new Error("mnemonic mismatch");
        }
      }
    } catch (e) {
      return Promise.reject(e);
    }
    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }
    if (!options) {
      options = {};
    }
    const privateKey = arrayify(account.privateKey);
    const passwordBytes = getPassword(password);
    let entropy = null;
    let path = null;
    let locale = null;
    if (hasMnemonic(account)) {
      const srcMnemonic = account.mnemonic;
      entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
      path = srcMnemonic.path || defaultPath;
      locale = srcMnemonic.locale || "en";
    }
    let client = options.client;
    if (!client) {
      client = "ethers.js";
    }
    let salt = null;
    if (options.salt) {
      salt = arrayify(options.salt);
    } else {
      salt = randomBytes(32);
    }
    let iv = null;
    if (options.iv) {
      iv = arrayify(options.iv);
      if (iv.length !== 16) {
        throw new Error("invalid iv");
      }
    } else {
      iv = randomBytes(16);
    }
    let uuidRandom = null;
    if (options.uuid) {
      uuidRandom = arrayify(options.uuid);
      if (uuidRandom.length !== 16) {
        throw new Error("invalid uuid");
      }
    } else {
      uuidRandom = randomBytes(16);
    }
    let N2 = 1 << 17, r2 = 8, p = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N2 = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r2 = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p = options.scrypt.p;
      }
    }
    return scrypt.scrypt(passwordBytes, salt, N2, r2, p, 64, progressCallback).then((key2) => {
      key2 = arrayify(key2);
      const derivedKey = key2.slice(0, 16);
      const macPrefix = key2.slice(16, 32);
      const mnemonicKey = key2.slice(32, 64);
      const counter = new aesJs.Counter(iv);
      const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
      const ciphertext = arrayify(aesCtr.encrypt(privateKey));
      const mac = keccak256(concat([macPrefix, ciphertext]));
      const data2 = { address: account.address.substring(2).toLowerCase(), id: uuidV4(uuidRandom), version: 3, Crypto: { cipher: "aes-128-ctr", cipherparams: { iv: hexlify(iv).substring(2) }, ciphertext: hexlify(ciphertext).substring(2), kdf: "scrypt", kdfparams: { salt: hexlify(salt).substring(2), n: N2, dklen: 32, p, r: r2 }, mac: mac.substring(2) } };
      if (entropy) {
        const mnemonicIv = randomBytes(16);
        const mnemonicCounter = new aesJs.Counter(mnemonicIv);
        const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
        const now2 = new Date();
        const timestamp = now2.getUTCFullYear() + "-" + zpad(now2.getUTCMonth() + 1, 2) + "-" + zpad(now2.getUTCDate(), 2) + "T" + zpad(now2.getUTCHours(), 2) + "-" + zpad(now2.getUTCMinutes(), 2) + "-" + zpad(now2.getUTCSeconds(), 2) + ".0Z";
        data2["x-ethers"] = { client, gethFilename: "UTC--" + timestamp + "--" + data2.address, mnemonicCounter: hexlify(mnemonicIv).substring(2), mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2), path, locale, version: "0.1" };
      }
      return JSON.stringify(data2);
    });
  }
  function decryptJsonWallet(json, password, progressCallback) {
    if (isCrowdsaleWallet(json)) {
      if (progressCallback) {
        progressCallback(0);
      }
      const account = decrypt(json, password);
      if (progressCallback) {
        progressCallback(1);
      }
      return Promise.resolve(account);
    }
    if (isKeystoreWallet(json)) {
      return decrypt$1(json, password, progressCallback);
    }
    return Promise.reject(new Error("invalid JSON wallet"));
  }
  function decryptJsonWalletSync(json, password) {
    if (isCrowdsaleWallet(json)) {
      return decrypt(json, password);
    }
    if (isKeystoreWallet(json)) {
      return decryptSync(json, password);
    }
    throw new Error("invalid JSON wallet");
  }
  var version$j = "wallet/5.1.0";
  var __awaiter$5 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$p = new Logger(version$j);
  function isAccount(value) {
    return value != null && isHexString(value.privateKey, 32) && value.address != null;
  }
  function hasMnemonic$1(value) {
    const mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
  }
  var Wallet = class extends Signer {
    constructor(privateKey, provider) {
      logger$p.checkNew(new.target, Wallet);
      super();
      if (isAccount(privateKey)) {
        const signingKey = new SigningKey(privateKey.privateKey);
        defineReadOnly(this, "_signingKey", () => signingKey);
        defineReadOnly(this, "address", computeAddress(this.publicKey));
        if (this.address !== getAddress(privateKey.address)) {
          logger$p.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
        }
        if (hasMnemonic$1(privateKey)) {
          const srcMnemonic = privateKey.mnemonic;
          defineReadOnly(this, "_mnemonic", () => ({ phrase: srcMnemonic.phrase, path: srcMnemonic.path || defaultPath, locale: srcMnemonic.locale || "en" }));
          const mnemonic = this.mnemonic;
          const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
          if (computeAddress(node.privateKey) !== this.address) {
            logger$p.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
          }
        } else {
          defineReadOnly(this, "_mnemonic", () => null);
        }
      } else {
        if (SigningKey.isSigningKey(privateKey)) {
          if (privateKey.curve !== "secp256k1") {
            logger$p.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
          }
          defineReadOnly(this, "_signingKey", () => privateKey);
        } else {
          if (typeof privateKey === "string") {
            if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
              privateKey = "0x" + privateKey;
            }
          }
          const signingKey = new SigningKey(privateKey);
          defineReadOnly(this, "_signingKey", () => signingKey);
        }
        defineReadOnly(this, "_mnemonic", () => null);
        defineReadOnly(this, "address", computeAddress(this.publicKey));
      }
      if (provider && !Provider.isProvider(provider)) {
        logger$p.throwArgumentError("invalid provider", "provider", provider);
      }
      defineReadOnly(this, "provider", provider || null);
    }
    get mnemonic() {
      return this._mnemonic();
    }
    get privateKey() {
      return this._signingKey().privateKey;
    }
    get publicKey() {
      return this._signingKey().publicKey;
    }
    getAddress() {
      return Promise.resolve(this.address);
    }
    connect(provider) {
      return new Wallet(this, provider);
    }
    signTransaction(transaction) {
      return resolveProperties(transaction).then((tx) => {
        if (tx.from != null) {
          if (getAddress(tx.from) !== this.address) {
            logger$p.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
          }
          delete tx.from;
        }
        const signature2 = this._signingKey().signDigest(keccak256(serialize(tx)));
        return serialize(tx, signature2);
      });
    }
    signMessage(message) {
      return __awaiter$5(this, void 0, void 0, function* () {
        return joinSignature(this._signingKey().signDigest(hashMessage(message)));
      });
    }
    _signTypedData(domain, types, value) {
      return __awaiter$5(this, void 0, void 0, function* () {
        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
          if (this.provider == null) {
            logger$p.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resolveName", value: name2 });
          }
          return this.provider.resolveName(name2);
        });
        return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
      });
    }
    encrypt(password, options, progressCallback) {
      if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
      }
      if (progressCallback && typeof progressCallback !== "function") {
        throw new Error("invalid callback");
      }
      if (!options) {
        options = {};
      }
      return encrypt(this, password, options, progressCallback);
    }
    static createRandom(options) {
      let entropy = randomBytes(16);
      if (!options) {
        options = {};
      }
      if (options.extraEntropy) {
        entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
      }
      const mnemonic = entropyToMnemonic(entropy, options.locale);
      return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
    static fromEncryptedJson(json, password, progressCallback) {
      return decryptJsonWallet(json, password, progressCallback).then((account) => {
        return new Wallet(account);
      });
    }
    static fromEncryptedJsonSync(json, password) {
      return new Wallet(decryptJsonWalletSync(json, password));
    }
    static fromMnemonic(mnemonic, path, wordlist2) {
      if (!path) {
        path = defaultPath;
      }
      return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
    }
  };
  function verifyMessage(message, signature2) {
    return recoverAddress(hashMessage(message), signature2);
  }
  function verifyTypedData(domain, types, value, signature2) {
    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature2);
  }
  var version$k = "networks/5.1.0";
  var logger$q = new Logger(version$k);
  function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
  }
  function ethDefaultProvider(network) {
    const func = function(providers, options) {
      if (options == null) {
        options = {};
      }
      const providerList = [];
      if (providers.InfuraProvider) {
        try {
          providerList.push(new providers.InfuraProvider(network, options.infura));
        } catch (error) {
        }
      }
      if (providers.EtherscanProvider) {
        try {
          providerList.push(new providers.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (providers.AlchemyProvider) {
        const skip = ["goerli", "ropsten", "rinkeby"];
        try {
          const provider = new providers.AlchemyProvider(network, options.alchemy);
          if (provider.network && skip.indexOf(provider.network.name) === -1) {
            providerList.push(provider);
          }
        } catch (error) {
        }
      }
      if (providers.PocketProvider) {
        const skip = ["goerli", "ropsten", "rinkeby"];
        try {
          const provider = new providers.PocketProvider(network);
          if (provider.network && skip.indexOf(provider.network.name) === -1) {
            providerList.push(provider);
          }
        } catch (error) {
        }
      }
      if (providers.CloudflareProvider) {
        try {
          providerList.push(new providers.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (providerList.length === 0) {
        return null;
      }
      if (providers.FallbackProvider) {
        let quorum = 1;
        if (options.quorum != null) {
          quorum = options.quorum;
        } else if (network === "homestead") {
          quorum = 2;
        }
        return new providers.FallbackProvider(providerList, quorum);
      }
      return providerList[0];
    };
    func.renetwork = function(network2) {
      return ethDefaultProvider(network2);
    };
    return func;
  }
  function etcDefaultProvider(url, network) {
    const func = function(providers, options) {
      if (providers.JsonRpcProvider) {
        return new providers.JsonRpcProvider(url, network);
      }
      return null;
    };
    func.renetwork = function(network2) {
      return etcDefaultProvider(url, network2);
    };
    return func;
  }
  var homestead = { chainId: 1, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "homestead", _defaultProvider: ethDefaultProvider("homestead") };
  var ropsten = { chainId: 3, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "ropsten", _defaultProvider: ethDefaultProvider("ropsten") };
  var classicMordor = { chainId: 63, name: "classicMordor", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor") };
  var networks = { unspecified: { chainId: 0, name: "unspecified" }, homestead, mainnet: homestead, morden: { chainId: 2, name: "morden" }, ropsten, testnet: ropsten, rinkeby: { chainId: 4, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "rinkeby", _defaultProvider: ethDefaultProvider("rinkeby") }, kovan: { chainId: 42, name: "kovan", _defaultProvider: ethDefaultProvider("kovan") }, goerli: { chainId: 5, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "goerli", _defaultProvider: ethDefaultProvider("goerli") }, classic: { chainId: 61, name: "classic", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic") }, classicMorden: { chainId: 62, name: "classicMorden" }, classicMordor, classicTestnet: classicMordor, classicKotti: { chainId: 6, name: "classicKotti", _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti") } };
  function getNetwork(network) {
    if (network == null) {
      return null;
    }
    if (typeof network === "number") {
      for (const name2 in networks) {
        const standard2 = networks[name2];
        if (standard2.chainId === network) {
          return { name: standard2.name, chainId: standard2.chainId, ensAddress: standard2.ensAddress || null, _defaultProvider: standard2._defaultProvider || null };
        }
      }
      return { chainId: network, name: "unknown" };
    }
    if (typeof network === "string") {
      const standard2 = networks[network];
      if (standard2 == null) {
        return null;
      }
      return { name: standard2.name, chainId: standard2.chainId, ensAddress: standard2.ensAddress, _defaultProvider: standard2._defaultProvider || null };
    }
    const standard = networks[network.name];
    if (!standard) {
      if (typeof network.chainId !== "number") {
        logger$q.throwArgumentError("invalid network chainId", "network", network);
      }
      return network;
    }
    if (network.chainId !== 0 && network.chainId !== standard.chainId) {
      logger$q.throwArgumentError("network chainId mismatch", "network", network);
    }
    let defaultProvider = network._defaultProvider || null;
    if (defaultProvider == null && standard._defaultProvider) {
      if (isRenetworkable(standard._defaultProvider)) {
        defaultProvider = standard._defaultProvider.renetwork(network);
      } else {
        defaultProvider = standard._defaultProvider;
      }
    }
    return { name: network.name, chainId: standard.chainId, ensAddress: network.ensAddress || standard.ensAddress || null, _defaultProvider: defaultProvider };
  }
  function decode$1(textData) {
    textData = atob(textData);
    const data2 = [];
    for (let i = 0; i < textData.length; i++) {
      data2.push(textData.charCodeAt(i));
    }
    return arrayify(data2);
  }
  function encode$1(data2) {
    data2 = arrayify(data2);
    let textData = "";
    for (let i = 0; i < data2.length; i++) {
      textData += String.fromCharCode(data2[i]);
    }
    return btoa(textData);
  }
  var index$2 = Object.freeze({ __proto__: null, decode: decode$1, encode: encode$1 });
  var version$l = "web/5.1.0";
  var __awaiter$6 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function getUrl(href, options) {
    return __awaiter$6(this, void 0, void 0, function* () {
      if (options == null) {
        options = {};
      }
      const request = { method: options.method || "GET", headers: options.headers || {}, body: options.body || void 0, mode: "cors", cache: "no-cache", credentials: "same-origin", redirect: "follow", referrer: "client" };
      const response = yield fetch(href, request);
      const body = yield response.arrayBuffer();
      const headers = {};
      if (response.headers.forEach) {
        response.headers.forEach((value, key2) => {
          headers[key2.toLowerCase()] = value;
        });
      } else {
        response.headers.keys().forEach((key2) => {
          headers[key2.toLowerCase()] = response.headers.get(key2);
        });
      }
      return { headers, statusCode: response.status, statusMessage: response.statusText, body: arrayify(new Uint8Array(body)) };
    });
  }
  var __awaiter$7 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$r = new Logger(version$l);
  function staller(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function bodyify(value, type) {
    if (value == null) {
      return null;
    }
    if (typeof value === "string") {
      return value;
    }
    if (isBytesLike(value)) {
      if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
        try {
          return toUtf8String(value);
        } catch (error) {
        }
      }
      return hexlify(value);
    }
    return value;
  }
  function _fetchData(connection, body, processFunc) {
    const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
    logger$r.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
    const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
    const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
    logger$r.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
    const headers = {};
    let url = null;
    const options = { method: "GET" };
    let allow304 = false;
    let timeout = 2 * 60 * 1e3;
    if (typeof connection === "string") {
      url = connection;
    } else if (typeof connection === "object") {
      if (connection == null || connection.url == null) {
        logger$r.throwArgumentError("missing URL", "connection.url", connection);
      }
      url = connection.url;
      if (typeof connection.timeout === "number" && connection.timeout > 0) {
        timeout = connection.timeout;
      }
      if (connection.headers) {
        for (const key2 in connection.headers) {
          headers[key2.toLowerCase()] = { key: key2, value: String(connection.headers[key2]) };
          if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
            allow304 = true;
          }
        }
      }
      options.allowGzip = !!connection.allowGzip;
      if (connection.user != null && connection.password != null) {
        if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
          logger$r.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url, user: connection.user, password: "[REDACTED]" });
        }
        const authorization = connection.user + ":" + connection.password;
        headers["authorization"] = { key: "Authorization", value: "Basic " + encode$1(toUtf8Bytes(authorization)) };
      }
    }
    if (body) {
      options.method = "POST";
      options.body = body;
      if (headers["content-type"] == null) {
        headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
      }
      if (headers["content-length"] == null) {
        headers["content-length"] = { key: "Content-Length", value: String(body.length) };
      }
    }
    const flatHeaders = {};
    Object.keys(headers).forEach((key2) => {
      const header = headers[key2];
      flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;
    const runningTimeout = function() {
      let timer2 = null;
      const promise = new Promise(function(resolve, reject) {
        if (timeout) {
          timer2 = setTimeout(() => {
            if (timer2 == null) {
              return;
            }
            timer2 = null;
            reject(logger$r.makeError("timeout", Logger.errors.TIMEOUT, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, timeout, url }));
          }, timeout);
        }
      });
      const cancel = function() {
        if (timer2 == null) {
          return;
        }
        clearTimeout(timer2);
        timer2 = null;
      };
      return { promise, cancel };
    }();
    const runningFetch = function() {
      return __awaiter$7(this, void 0, void 0, function* () {
        for (let attempt = 0; attempt < attemptLimit; attempt++) {
          let response = null;
          try {
            response = yield getUrl(url, options);
            if (response.statusCode === 429 && attempt < attemptLimit) {
              let tryAgain = true;
              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }
              if (tryAgain) {
                let stall2 = 0;
                const retryAfter = response.headers["retry-after"];
                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall2 = parseInt(retryAfter) * 1e3;
                } else {
                  stall2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                }
                yield staller(stall2);
                continue;
              }
            }
          } catch (error) {
            response = error.response;
            if (response == null) {
              runningTimeout.cancel();
              logger$r.throwError("missing response", Logger.errors.SERVER_ERROR, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, serverError: error, url });
            }
          }
          let body2 = response.body;
          if (allow304 && response.statusCode === 304) {
            body2 = null;
          } else if (response.statusCode < 200 || response.statusCode >= 300) {
            runningTimeout.cancel();
            logger$r.throwError("bad response", Logger.errors.SERVER_ERROR, { status: response.statusCode, headers: response.headers, body: bodyify(body2, response.headers ? response.headers["content-type"] : null), requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
          }
          if (processFunc) {
            try {
              const result = yield processFunc(body2, response);
              runningTimeout.cancel();
              return result;
            } catch (error) {
              if (error.throttleRetry && attempt < attemptLimit) {
                let tryAgain = true;
                if (throttleCallback) {
                  tryAgain = yield throttleCallback(attempt, url);
                }
                if (tryAgain) {
                  const timeout2 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  yield staller(timeout2);
                  continue;
                }
              }
              runningTimeout.cancel();
              logger$r.throwError("processing response error", Logger.errors.SERVER_ERROR, { body: bodyify(body2, response.headers ? response.headers["content-type"] : null), error, requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
            }
          }
          runningTimeout.cancel();
          return body2;
        }
        return logger$r.throwError("failed response", Logger.errors.SERVER_ERROR, { requestBody: bodyify(options.body, flatHeaders["content-type"]), requestMethod: options.method, url });
      });
    }();
    return Promise.race([runningTimeout.promise, runningFetch]);
  }
  function fetchJson(connection, json, processFunc) {
    let processJsonFunc = (value, response) => {
      let result = null;
      if (value != null) {
        try {
          result = JSON.parse(toUtf8String(value));
        } catch (error) {
          logger$r.throwError("invalid JSON", Logger.errors.SERVER_ERROR, { body: value, error });
        }
      }
      if (processFunc) {
        result = processFunc(result, response);
      }
      return result;
    };
    let body = null;
    if (json != null) {
      body = toUtf8Bytes(json);
      const updated = typeof connection === "string" ? { url: connection } : shallowCopy(connection);
      if (updated.headers) {
        const hasContentType = Object.keys(updated.headers).filter((k) => k.toLowerCase() === "content-type").length !== 0;
        if (!hasContentType) {
          updated.headers = shallowCopy(updated.headers);
          updated.headers["content-type"] = "application/json";
        }
      } else {
        updated.headers = { "content-type": "application/json" };
      }
      connection = updated;
    }
    return _fetchData(connection, body, processJsonFunc);
  }
  function poll(func, options) {
    if (!options) {
      options = {};
    }
    options = shallowCopy(options);
    if (options.floor == null) {
      options.floor = 0;
    }
    if (options.ceiling == null) {
      options.ceiling = 1e4;
    }
    if (options.interval == null) {
      options.interval = 250;
    }
    return new Promise(function(resolve, reject) {
      let timer2 = null;
      let done = false;
      const cancel = () => {
        if (done) {
          return false;
        }
        done = true;
        if (timer2) {
          clearTimeout(timer2);
        }
        return true;
      };
      if (options.timeout) {
        timer2 = setTimeout(() => {
          if (cancel()) {
            reject(new Error("timeout"));
          }
        }, options.timeout);
      }
      const retryLimit = options.retryLimit;
      let attempt = 0;
      function check() {
        return func().then(function(result) {
          if (result !== void 0) {
            if (cancel()) {
              resolve(result);
            }
          } else if (options.oncePoll) {
            options.oncePoll.once("poll", check);
          } else if (options.onceBlock) {
            options.onceBlock.once("block", check);
          } else if (!done) {
            attempt++;
            if (attempt > retryLimit) {
              if (cancel()) {
                reject(new Error("retry limit reached"));
              }
              return;
            }
            let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
            if (timeout < options.floor) {
              timeout = options.floor;
            }
            if (timeout > options.ceiling) {
              timeout = options.ceiling;
            }
            setTimeout(check, timeout);
          }
          return null;
        }, function(error) {
          if (cancel()) {
            reject(error);
          }
        });
      }
      check();
    });
  }
  var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
  var ALPHABET_MAP = {};
  for (z = 0; z < ALPHABET.length; z++) {
    x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== void 0)
      throw new TypeError(x + " is ambiguous");
    ALPHABET_MAP[x] = z;
  }
  var x;
  var z;
  function polymodStep(pre) {
    var b = pre >> 25;
    return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
  }
  function prefixChk(prefix) {
    var chk = 1;
    for (var i = 0; i < prefix.length; ++i) {
      var c = prefix.charCodeAt(i);
      if (c < 33 || c > 126)
        return "Invalid prefix (" + prefix + ")";
      chk = polymodStep(chk) ^ c >> 5;
    }
    chk = polymodStep(chk);
    for (i = 0; i < prefix.length; ++i) {
      var v = prefix.charCodeAt(i);
      chk = polymodStep(chk) ^ v & 31;
    }
    return chk;
  }
  function encode$2(prefix, words2, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words2.length > LIMIT)
      throw new TypeError("Exceeds length limit");
    prefix = prefix.toLowerCase();
    var chk = prefixChk(prefix);
    if (typeof chk === "string")
      throw new Error(chk);
    var result = prefix + "1";
    for (var i = 0; i < words2.length; ++i) {
      var x = words2[i];
      if (x >> 5 !== 0)
        throw new Error("Non 5-bit word");
      chk = polymodStep(chk) ^ x;
      result += ALPHABET.charAt(x);
    }
    for (i = 0; i < 6; ++i) {
      chk = polymodStep(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
      var v = chk >> (5 - i) * 5 & 31;
      result += ALPHABET.charAt(v);
    }
    return result;
  }
  function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8)
      return str + " too short";
    if (str.length > LIMIT)
      return "Exceeds length limit";
    var lowered = str.toLowerCase();
    var uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered)
      return "Mixed-case string " + str;
    str = lowered;
    var split = str.lastIndexOf("1");
    if (split === -1)
      return "No separator character for " + str;
    if (split === 0)
      return "Missing prefix for " + str;
    var prefix = str.slice(0, split);
    var wordChars = str.slice(split + 1);
    if (wordChars.length < 6)
      return "Data too short";
    var chk = prefixChk(prefix);
    if (typeof chk === "string")
      return chk;
    var words2 = [];
    for (var i = 0; i < wordChars.length; ++i) {
      var c = wordChars.charAt(i);
      var v = ALPHABET_MAP[c];
      if (v === void 0)
        return "Unknown character " + c;
      chk = polymodStep(chk) ^ v;
      if (i + 6 >= wordChars.length)
        continue;
      words2.push(v);
    }
    if (chk !== 1)
      return "Invalid checksum for " + str;
    return { prefix, words: words2 };
  }
  function decodeUnsafe() {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object")
      return res;
  }
  function decode$2(str) {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object")
      return res;
    throw new Error(res);
  }
  function convert(data2, inBits, outBits, pad2) {
    var value = 0;
    var bits = 0;
    var maxV = (1 << outBits) - 1;
    var result = [];
    for (var i = 0; i < data2.length; ++i) {
      value = value << inBits | data2[i];
      bits += inBits;
      while (bits >= outBits) {
        bits -= outBits;
        result.push(value >> bits & maxV);
      }
    }
    if (pad2) {
      if (bits > 0) {
        result.push(value << outBits - bits & maxV);
      }
    } else {
      if (bits >= inBits)
        return "Excess padding";
      if (value << outBits - bits & maxV)
        return "Non-zero padding";
    }
    return result;
  }
  function toWordsUnsafe(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res))
      return res;
  }
  function toWords(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res))
      return res;
    throw new Error(res);
  }
  function fromWordsUnsafe(words2) {
    var res = convert(words2, 5, 8, false);
    if (Array.isArray(res))
      return res;
  }
  function fromWords(words2) {
    var res = convert(words2, 5, 8, false);
    if (Array.isArray(res))
      return res;
    throw new Error(res);
  }
  var bech32 = { decodeUnsafe, decode: decode$2, encode: encode$2, toWordsUnsafe, toWords, fromWordsUnsafe, fromWords };
  var version$m = "providers/5.1.2";
  var logger$s = new Logger(version$m);
  var Formatter = class {
    constructor() {
      logger$s.checkNew(new.target, Formatter);
      this.formats = this.getDefaultFormats();
    }
    getDefaultFormats() {
      const formats = {};
      const address = this.address.bind(this);
      const bigNumber = this.bigNumber.bind(this);
      const blockTag = this.blockTag.bind(this);
      const data2 = this.data.bind(this);
      const hash = this.hash.bind(this);
      const hex2 = this.hex.bind(this);
      const number = this.number.bind(this);
      const strictData = (v) => {
        return this.data(v, true);
      };
      formats.transaction = { hash, type: Formatter.allowNull(number, null), accessList: Formatter.allowNull(this.accessList.bind(this), null), blockHash: Formatter.allowNull(hash, null), blockNumber: Formatter.allowNull(number, null), transactionIndex: Formatter.allowNull(number, null), confirmations: Formatter.allowNull(number, null), from: address, gasPrice: bigNumber, gasLimit: bigNumber, to: Formatter.allowNull(address, null), value: bigNumber, nonce: number, data: data2, r: Formatter.allowNull(this.uint256), s: Formatter.allowNull(this.uint256), v: Formatter.allowNull(number), creates: Formatter.allowNull(address, null), raw: Formatter.allowNull(data2) };
      formats.transactionRequest = { from: Formatter.allowNull(address), nonce: Formatter.allowNull(number), gasLimit: Formatter.allowNull(bigNumber), gasPrice: Formatter.allowNull(bigNumber), to: Formatter.allowNull(address), value: Formatter.allowNull(bigNumber), data: Formatter.allowNull(strictData), type: Formatter.allowNull(number), accessList: Formatter.allowNull(this.accessList.bind(this), null) };
      formats.receiptLog = { transactionIndex: number, blockNumber: number, transactionHash: hash, address, topics: Formatter.arrayOf(hash), data: data2, logIndex: number, blockHash: hash };
      formats.receipt = { to: Formatter.allowNull(this.address, null), from: Formatter.allowNull(this.address, null), contractAddress: Formatter.allowNull(address, null), transactionIndex: number, root: Formatter.allowNull(hex2), gasUsed: bigNumber, logsBloom: Formatter.allowNull(data2), blockHash: hash, transactionHash: hash, logs: Formatter.arrayOf(this.receiptLog.bind(this)), blockNumber: number, confirmations: Formatter.allowNull(number, null), cumulativeGasUsed: bigNumber, status: Formatter.allowNull(number) };
      formats.block = { hash, parentHash: hash, number, timestamp: number, nonce: Formatter.allowNull(hex2), difficulty: this.difficulty.bind(this), gasLimit: bigNumber, gasUsed: bigNumber, miner: address, extraData: data2, transactions: Formatter.allowNull(Formatter.arrayOf(hash)) };
      formats.blockWithTransactions = shallowCopy(formats.block);
      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
      formats.filter = { fromBlock: Formatter.allowNull(blockTag, void 0), toBlock: Formatter.allowNull(blockTag, void 0), blockHash: Formatter.allowNull(hash, void 0), address: Formatter.allowNull(address, void 0), topics: Formatter.allowNull(this.topics.bind(this), void 0) };
      formats.filterLog = { blockNumber: Formatter.allowNull(number), blockHash: Formatter.allowNull(hash), transactionIndex: number, removed: Formatter.allowNull(this.boolean.bind(this)), address, data: Formatter.allowFalsish(data2, "0x"), topics: Formatter.arrayOf(hash), transactionHash: hash, logIndex: number };
      return formats;
    }
    accessList(accessList) {
      return accessListify(accessList || []);
    }
    number(number) {
      if (number === "0x") {
        return 0;
      }
      return BigNumber.from(number).toNumber();
    }
    bigNumber(value) {
      return BigNumber.from(value);
    }
    boolean(value) {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "string") {
        value = value.toLowerCase();
        if (value === "true") {
          return true;
        }
        if (value === "false") {
          return false;
        }
      }
      throw new Error("invalid boolean - " + value);
    }
    hex(value, strict) {
      if (typeof value === "string") {
        if (!strict && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexString(value)) {
          return value.toLowerCase();
        }
      }
      return logger$s.throwArgumentError("invalid hash", "value", value);
    }
    data(value, strict) {
      const result = this.hex(value, strict);
      if (result.length % 2 !== 0) {
        throw new Error("invalid data; odd-length - " + value);
      }
      return result;
    }
    address(value) {
      return getAddress(value);
    }
    callAddress(value) {
      if (!isHexString(value, 32)) {
        return null;
      }
      const address = getAddress(hexDataSlice(value, 12));
      return address === AddressZero ? null : address;
    }
    contractAddress(value) {
      return getContractAddress(value);
    }
    blockTag(blockTag) {
      if (blockTag == null) {
        return "latest";
      }
      if (blockTag === "earliest") {
        return "0x0";
      }
      if (blockTag === "latest" || blockTag === "pending") {
        return blockTag;
      }
      if (typeof blockTag === "number" || isHexString(blockTag)) {
        return hexValue(blockTag);
      }
      throw new Error("invalid blockTag");
    }
    hash(value, strict) {
      const result = this.hex(value, strict);
      if (hexDataLength(result) !== 32) {
        return logger$s.throwArgumentError("invalid hash", "value", value);
      }
      return result;
    }
    difficulty(value) {
      if (value == null) {
        return null;
      }
      const v = BigNumber.from(value);
      try {
        return v.toNumber();
      } catch (error) {
      }
      return null;
    }
    uint256(value) {
      if (!isHexString(value)) {
        throw new Error("invalid uint256");
      }
      return hexZeroPad(value, 32);
    }
    _block(value, format) {
      if (value.author != null && value.miner == null) {
        value.miner = value.author;
      }
      return Formatter.check(format, value);
    }
    block(value) {
      return this._block(value, this.formats.block);
    }
    blockWithTransactions(value) {
      return this._block(value, this.formats.blockWithTransactions);
    }
    transactionRequest(value) {
      return Formatter.check(this.formats.transactionRequest, value);
    }
    transactionResponse(transaction) {
      if (transaction.gas != null && transaction.gasLimit == null) {
        transaction.gasLimit = transaction.gas;
      }
      if (transaction.to && BigNumber.from(transaction.to).isZero()) {
        transaction.to = "0x0000000000000000000000000000000000000000";
      }
      if (transaction.input != null && transaction.data == null) {
        transaction.data = transaction.input;
      }
      if (transaction.to == null && transaction.creates == null) {
        transaction.creates = this.contractAddress(transaction);
      }
      if (transaction.type === 1 && transaction.accessList == null) {
        transaction.accessList = [];
      }
      const result = Formatter.check(this.formats.transaction, transaction);
      if (transaction.chainId != null) {
        let chainId = transaction.chainId;
        if (isHexString(chainId)) {
          chainId = BigNumber.from(chainId).toNumber();
        }
        result.chainId = chainId;
      } else {
        let chainId = transaction.networkId;
        if (chainId == null && result.v == null) {
          chainId = transaction.chainId;
        }
        if (isHexString(chainId)) {
          chainId = BigNumber.from(chainId).toNumber();
        }
        if (typeof chainId !== "number" && result.v != null) {
          chainId = (result.v - 35) / 2;
          if (chainId < 0) {
            chainId = 0;
          }
          chainId = parseInt(chainId);
        }
        if (typeof chainId !== "number") {
          chainId = 0;
        }
        result.chainId = chainId;
      }
      if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
        result.blockHash = null;
      }
      return result;
    }
    transaction(value) {
      return parse(value);
    }
    receiptLog(value) {
      return Formatter.check(this.formats.receiptLog, value);
    }
    receipt(value) {
      const result = Formatter.check(this.formats.receipt, value);
      if (result.root != null) {
        if (result.root.length <= 4) {
          const value2 = BigNumber.from(result.root).toNumber();
          if (value2 === 0 || value2 === 1) {
            if (result.status != null && result.status !== value2) {
              logger$s.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
            }
            result.status = value2;
            delete result.root;
          } else {
            logger$s.throwArgumentError("invalid alt-root-status", "value.root", result.root);
          }
        } else if (result.root.length !== 66) {
          logger$s.throwArgumentError("invalid root hash", "value.root", result.root);
        }
      }
      if (result.status != null) {
        result.byzantium = true;
      }
      return result;
    }
    topics(value) {
      if (Array.isArray(value)) {
        return value.map((v) => this.topics(v));
      } else if (value != null) {
        return this.hash(value, true);
      }
      return null;
    }
    filter(value) {
      return Formatter.check(this.formats.filter, value);
    }
    filterLog(value) {
      return Formatter.check(this.formats.filterLog, value);
    }
    static check(format, object) {
      const result = {};
      for (const key2 in format) {
        try {
          const value = format[key2](object[key2]);
          if (value !== void 0) {
            result[key2] = value;
          }
        } catch (error) {
          error.checkKey = key2;
          error.checkValue = object[key2];
          throw error;
        }
      }
      return result;
    }
    static allowNull(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    static allowFalsish(format, replaceValue) {
      return function(value) {
        if (!value) {
          return replaceValue;
        }
        return format(value);
      };
    }
    static arrayOf(format) {
      return function(array) {
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        const result = [];
        array.forEach(function(value) {
          result.push(format(value));
        });
        return result;
      };
    }
  };
  function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
  }
  function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
  }
  var throttleMessage = false;
  function showThrottleMessage() {
    if (throttleMessage) {
      return;
    }
    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.io/api-keys/");
    console.log("==========================");
  }
  var __awaiter$8 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$t = new Logger(version$m);
  function checkTopic(topic) {
    if (topic == null) {
      return "null";
    }
    if (hexDataLength(topic) !== 32) {
      logger$t.throwArgumentError("invalid topic", "topic", topic);
    }
    return topic.toLowerCase();
  }
  function serializeTopics(topics) {
    topics = topics.slice();
    while (topics.length > 0 && topics[topics.length - 1] == null) {
      topics.pop();
    }
    return topics.map((topic) => {
      if (Array.isArray(topic)) {
        const unique = {};
        topic.forEach((topic2) => {
          unique[checkTopic(topic2)] = true;
        });
        const sorted = Object.keys(unique);
        sorted.sort();
        return sorted.join("|");
      } else {
        return checkTopic(topic);
      }
    }).join("&");
  }
  function deserializeTopics(data2) {
    if (data2 === "") {
      return [];
    }
    return data2.split(/&/g).map((topic) => {
      if (topic === "") {
        return [];
      }
      const comps = topic.split("|").map((topic2) => {
        return topic2 === "null" ? null : topic2;
      });
      return comps.length === 1 ? comps[0] : comps;
    });
  }
  function getEventTag$1(eventName) {
    if (typeof eventName === "string") {
      eventName = eventName.toLowerCase();
      if (hexDataLength(eventName) === 32) {
        return "tx:" + eventName;
      }
      if (eventName.indexOf(":") === -1) {
        return eventName;
      }
    } else if (Array.isArray(eventName)) {
      return "filter:*:" + serializeTopics(eventName);
    } else if (ForkEvent.isForkEvent(eventName)) {
      logger$t.warn("not implemented");
      throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") {
      return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
    }
    throw new Error("invalid event - " + eventName);
  }
  function getTime() {
    return new Date().getTime();
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  var PollableEvents = ["block", "network", "pending", "poll"];
  var Event2 = class {
    constructor(tag, listener, once) {
      defineReadOnly(this, "tag", tag);
      defineReadOnly(this, "listener", listener);
      defineReadOnly(this, "once", once);
    }
    get event() {
      switch (this.type) {
        case "tx":
          return this.hash;
        case "filter":
          return this.filter;
      }
      return this.tag;
    }
    get type() {
      return this.tag.split(":")[0];
    }
    get hash() {
      const comps = this.tag.split(":");
      if (comps[0] !== "tx") {
        return null;
      }
      return comps[1];
    }
    get filter() {
      const comps = this.tag.split(":");
      if (comps[0] !== "filter") {
        return null;
      }
      const address = comps[1];
      const topics = deserializeTopics(comps[2]);
      const filter = {};
      if (topics.length > 0) {
        filter.topics = topics;
      }
      if (address && address !== "*") {
        filter.address = address;
      }
      return filter;
    }
    pollable() {
      return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    }
  };
  var coinInfos = { 0: { symbol: "btc", p2pkh: 0, p2sh: 5, prefix: "bc" }, 2: { symbol: "ltc", p2pkh: 48, p2sh: 50, prefix: "ltc" }, 3: { symbol: "doge", p2pkh: 30, p2sh: 22 }, 60: { symbol: "eth", ilk: "eth" }, 61: { symbol: "etc", ilk: "eth" }, 700: { symbol: "xdai", ilk: "eth" } };
  function bytes32ify(value) {
    return hexZeroPad(BigNumber.from(value).toHexString(), 32);
  }
  function base58Encode(data2) {
    return Base58.encode(concat([data2, hexDataSlice(sha256$1(sha256$1(data2)), 0, 4)]));
  }
  var Resolver = class {
    constructor(provider, address, name2) {
      defineReadOnly(this, "provider", provider);
      defineReadOnly(this, "name", name2);
      defineReadOnly(this, "address", provider.formatter.address(address));
    }
    _fetchBytes(selector, parameters) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const transaction = { to: this.address, data: hexConcat([selector, namehash(this.name), parameters || "0x"]) };
        const result = yield this.provider.call(transaction);
        if (result === "0x") {
          return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
      });
    }
    _getAddress(coinType, hexBytes) {
      const coinInfo = coinInfos[String(coinType)];
      if (coinInfo == null) {
        logger$t.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, { operation: `getAddress(${coinType})` });
      }
      if (coinInfo.ilk === "eth") {
        return this.provider.formatter.address(hexBytes);
      }
      const bytes = arrayify(hexBytes);
      if (coinInfo.p2pkh != null) {
        const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
        if (p2pkh) {
          const length = parseInt(p2pkh[1], 16);
          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
            return base58Encode(concat([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
          }
        }
      }
      if (coinInfo.p2sh != null) {
        const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
        if (p2sh) {
          const length = parseInt(p2sh[1], 16);
          if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
            return base58Encode(concat([[coinInfo.p2sh], "0x" + p2sh[2]]));
          }
        }
      }
      if (coinInfo.prefix != null) {
        const length = bytes[1];
        let version2 = bytes[0];
        if (version2 === 0) {
          if (length !== 20 && length !== 32) {
            version2 = -1;
          }
        } else {
          version2 = -1;
        }
        if (version2 >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
          const words2 = bech32.toWords(bytes.slice(2));
          words2.unshift(version2);
          return bech32.encode(coinInfo.prefix, words2);
        }
      }
      return null;
    }
    getAddress(coinType) {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          const transaction = { to: this.address, data: "0x3b3b57de" + namehash(this.name).substring(2) };
          const hexBytes2 = yield this.provider.call(transaction);
          if (hexBytes2 === "0x" || hexBytes2 === HashZero) {
            return null;
          }
          return this.provider.formatter.callAddress(hexBytes2);
        }
        const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        const address = this._getAddress(coinType, hexBytes);
        if (address == null) {
          logger$t.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, { operation: `getAddress(${coinType})`, coinType, data: hexBytes });
        }
        return address;
      });
    }
    getContentHash() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const hexBytes = yield this._fetchBytes("0xbc1c58d1");
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const length = parseInt(ipfs[3], 16);
          if (ipfs[4].length === length * 2) {
            return "ipfs://" + Base58.encode("0x" + ipfs[1]);
          }
        }
        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm) {
          if (swarm[1].length === 32 * 2) {
            return "bzz://" + swarm[1];
          }
        }
        return logger$t.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, { operation: "getContentHash()", data: hexBytes });
      });
    }
    getText(key2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        let keyBytes = toUtf8Bytes(key2);
        keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
        if (keyBytes.length % 32 !== 0) {
          keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - key2.length % 32)]);
        }
        const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
        if (hexBytes == null || hexBytes === "0x") {
          return null;
        }
        return toUtf8String(hexBytes);
      });
    }
  };
  var defaultFormatter = null;
  var nextPollId = 1;
  var BaseProvider = class extends Provider {
    constructor(network) {
      logger$t.checkNew(new.target, Provider);
      super();
      this._events = [];
      this._emitted = { block: -2 };
      this.formatter = new.target.getFormatter();
      defineReadOnly(this, "anyNetwork", network === "any");
      if (this.anyNetwork) {
        network = this.detectNetwork();
      }
      if (network instanceof Promise) {
        this._networkPromise = network;
        network.catch((error) => {
        });
        this._ready().catch((error) => {
        });
      } else {
        const knownNetwork = getStatic(new.target, "getNetwork")(network);
        if (knownNetwork) {
          defineReadOnly(this, "_network", knownNetwork);
          this.emit("network", knownNetwork, null);
        } else {
          logger$t.throwArgumentError("invalid network", "network", network);
        }
      }
      this._maxInternalBlockNumber = -1024;
      this._lastBlockNumber = -2;
      this._pollingInterval = 4e3;
      this._fastQueryDate = 0;
    }
    _ready() {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (this._network == null) {
          let network = null;
          if (this._networkPromise) {
            try {
              network = yield this._networkPromise;
            } catch (error) {
            }
          }
          if (network == null) {
            network = yield this.detectNetwork();
          }
          if (!network) {
            logger$t.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
          }
          if (this._network == null) {
            if (this.anyNetwork) {
              this._network = network;
            } else {
              defineReadOnly(this, "_network", network);
            }
            this.emit("network", network, null);
          }
        }
        return this._network;
      });
    }
    get ready() {
      return poll(() => {
        return this._ready().then((network) => {
          return network;
        }, (error) => {
          if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
            return void 0;
          }
          throw error;
        });
      });
    }
    static getFormatter() {
      if (defaultFormatter == null) {
        defaultFormatter = new Formatter();
      }
      return defaultFormatter;
    }
    static getNetwork(network) {
      return getNetwork(network == null ? "homestead" : network);
    }
    _getInternalBlockNumber(maxAge) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this._ready();
        if (maxAge > 0) {
          while (this._internalBlockNumber) {
            const internalBlockNumber = this._internalBlockNumber;
            try {
              const result = yield internalBlockNumber;
              if (getTime() - result.respTime <= maxAge) {
                return result.blockNumber;
              }
              break;
            } catch (error) {
              if (this._internalBlockNumber === internalBlockNumber) {
                break;
              }
            }
          }
        }
        const reqTime = getTime();
        const checkInternalBlockNumber = resolveProperties({ blockNumber: this.perform("getBlockNumber", {}), networkError: this.getNetwork().then((network) => null, (error) => error) }).then(({ blockNumber, networkError }) => {
          if (networkError) {
            if (this._internalBlockNumber === checkInternalBlockNumber) {
              this._internalBlockNumber = null;
            }
            throw networkError;
          }
          const respTime = getTime();
          blockNumber = BigNumber.from(blockNumber).toNumber();
          if (blockNumber < this._maxInternalBlockNumber) {
            blockNumber = this._maxInternalBlockNumber;
          }
          this._maxInternalBlockNumber = blockNumber;
          this._setFastBlockNumber(blockNumber);
          return { blockNumber, reqTime, respTime };
        });
        this._internalBlockNumber = checkInternalBlockNumber;
        checkInternalBlockNumber.catch((error) => {
          if (this._internalBlockNumber === checkInternalBlockNumber) {
            this._internalBlockNumber = null;
          }
        });
        return (yield checkInternalBlockNumber).blockNumber;
      });
    }
    poll() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const pollId = nextPollId++;
        const runners = [];
        let blockNumber = null;
        try {
          blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
        } catch (error) {
          this.emit("error", error);
          return;
        }
        this._setFastBlockNumber(blockNumber);
        this.emit("poll", pollId, blockNumber);
        if (blockNumber === this._lastBlockNumber) {
          this.emit("didPoll", pollId);
          return;
        }
        if (this._emitted.block === -2) {
          this._emitted.block = blockNumber - 1;
        }
        if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
          logger$t.warn("network block skew detected; skipping block events");
          this.emit("error", logger$t.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, { blockNumber, event: "blockSkew", previousBlockNumber: this._emitted.block }));
          this.emit("block", blockNumber);
        } else {
          for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
            this.emit("block", i);
          }
        }
        if (this._emitted.block !== blockNumber) {
          this._emitted.block = blockNumber;
          Object.keys(this._emitted).forEach((key2) => {
            if (key2 === "block") {
              return;
            }
            const eventBlockNumber = this._emitted[key2];
            if (eventBlockNumber === "pending") {
              return;
            }
            if (blockNumber - eventBlockNumber > 12) {
              delete this._emitted[key2];
            }
          });
        }
        if (this._lastBlockNumber === -2) {
          this._lastBlockNumber = blockNumber - 1;
        }
        this._events.forEach((event) => {
          switch (event.type) {
            case "tx": {
              const hash = event.hash;
              let runner = this.getTransactionReceipt(hash).then((receipt) => {
                if (!receipt || receipt.blockNumber == null) {
                  return null;
                }
                this._emitted["t:" + hash] = receipt.blockNumber;
                this.emit(hash, receipt);
                return null;
              }).catch((error) => {
                this.emit("error", error);
              });
              runners.push(runner);
              break;
            }
            case "filter": {
              const filter = event.filter;
              filter.fromBlock = this._lastBlockNumber + 1;
              filter.toBlock = blockNumber;
              const runner = this.getLogs(filter).then((logs) => {
                if (logs.length === 0) {
                  return;
                }
                logs.forEach((log) => {
                  this._emitted["b:" + log.blockHash] = log.blockNumber;
                  this._emitted["t:" + log.transactionHash] = log.blockNumber;
                  this.emit(filter, log);
                });
              }).catch((error) => {
                this.emit("error", error);
              });
              runners.push(runner);
              break;
            }
          }
        });
        this._lastBlockNumber = blockNumber;
        Promise.all(runners).then(() => {
          this.emit("didPoll", pollId);
        }).catch((error) => {
          this.emit("error", error);
        });
        return;
      });
    }
    resetEventsBlock(blockNumber) {
      this._lastBlockNumber = blockNumber - 1;
      if (this.polling) {
        this.poll();
      }
    }
    get network() {
      return this._network;
    }
    detectNetwork() {
      return __awaiter$8(this, void 0, void 0, function* () {
        return logger$t.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, { operation: "provider.detectNetwork" });
      });
    }
    getNetwork() {
      return __awaiter$8(this, void 0, void 0, function* () {
        const network = yield this._ready();
        const currentNetwork = yield this.detectNetwork();
        if (network.chainId !== currentNetwork.chainId) {
          if (this.anyNetwork) {
            this._network = currentNetwork;
            this._lastBlockNumber = -2;
            this._fastBlockNumber = null;
            this._fastBlockNumberPromise = null;
            this._fastQueryDate = 0;
            this._emitted.block = -2;
            this._maxInternalBlockNumber = -1024;
            this._internalBlockNumber = null;
            this.emit("network", currentNetwork, network);
            yield stall(0);
            return this._network;
          }
          const error = logger$t.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, { event: "changed", network, detectedNetwork: currentNetwork });
          this.emit("error", error);
          throw error;
        }
        return network;
      });
    }
    get blockNumber() {
      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
        this._setFastBlockNumber(blockNumber);
      }, (error) => {
      });
      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
    }
    get polling() {
      return this._poller != null;
    }
    set polling(value) {
      if (value && !this._poller) {
        this._poller = setInterval(() => {
          this.poll();
        }, this.pollingInterval);
        if (!this._bootstrapPoll) {
          this._bootstrapPoll = setTimeout(() => {
            this.poll();
            this._bootstrapPoll = setTimeout(() => {
              if (!this._poller) {
                this.poll();
              }
              this._bootstrapPoll = null;
            }, this.pollingInterval);
          }, 0);
        }
      } else if (!value && this._poller) {
        clearInterval(this._poller);
        this._poller = null;
      }
    }
    get pollingInterval() {
      return this._pollingInterval;
    }
    set pollingInterval(value) {
      if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
        throw new Error("invalid polling interval");
      }
      this._pollingInterval = value;
      if (this._poller) {
        clearInterval(this._poller);
        this._poller = setInterval(() => {
          this.poll();
        }, this._pollingInterval);
      }
    }
    _getFastBlockNumber() {
      const now2 = getTime();
      if (now2 - this._fastQueryDate > 2 * this._pollingInterval) {
        this._fastQueryDate = now2;
        this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
          }
          return this._fastBlockNumber;
        });
      }
      return this._fastBlockNumberPromise;
    }
    _setFastBlockNumber(blockNumber) {
      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
        return;
      }
      this._fastQueryDate = getTime();
      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
        this._fastBlockNumber = blockNumber;
        this._fastBlockNumberPromise = Promise.resolve(blockNumber);
      }
    }
    waitForTransaction(transactionHash, confirmations, timeout) {
      return __awaiter$8(this, void 0, void 0, function* () {
        if (confirmations == null) {
          confirmations = 1;
        }
        const receipt = yield this.getTransactionReceipt(transactionHash);
        if ((receipt ? receipt.confirmations : 0) >= confirmations) {
          return receipt;
        }
        return new Promise((resolve, reject) => {
          let timer2 = null;
          let done = false;
          const handler = (receipt2) => {
            if (receipt2.confirmations < confirmations) {
              return;
            }
            if (timer2) {
              clearTimeout(timer2);
            }
            if (done) {
              return;
            }
            done = true;
            this.removeListener(transactionHash, handler);
            resolve(receipt2);
          };
          this.on(transactionHash, handler);
          if (typeof timeout === "number" && timeout > 0) {
            timer2 = setTimeout(() => {
              if (done) {
                return;
              }
              timer2 = null;
              done = true;
              this.removeListener(transactionHash, handler);
              reject(logger$t.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout }));
            }, timeout);
            if (timer2.unref) {
              timer2.unref();
            }
          }
        });
      });
    }
    getBlockNumber() {
      return __awaiter$8(this, void 0, void 0, function* () {
        return this._getInternalBlockNumber(0);
      });
    }
    getGasPrice() {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const result = yield this.perform("getGasPrice", {});
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getGasPrice", result, error });
        }
      });
    }
    getBalance(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getBalance", params);
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getBalance", params, result, error });
        }
      });
    }
    getTransactionCount(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getTransactionCount", params);
        try {
          return BigNumber.from(result).toNumber();
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getTransactionCount", params, result, error });
        }
      });
    }
    getCode(addressOrName, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("getCode", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getCode", params, result, error });
        }
      });
    }
    getStorageAt(addressOrName, position, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ address: this._getAddress(addressOrName), blockTag: this._getBlockTag(blockTag), position: Promise.resolve(position).then((p) => hexValue(p)) });
        const result = yield this.perform("getStorageAt", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "getStorageAt", params, result, error });
        }
      });
    }
    _wrapTransaction(tx, hash) {
      if (hash != null && hexDataLength(hash) !== 32) {
        throw new Error("invalid response - sendTransaction");
      }
      const result = tx;
      if (hash != null && tx.hash !== hash) {
        logger$t.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
      }
      result.wait = (confirmations) => __awaiter$8(this, void 0, void 0, function* () {
        if (confirmations !== 0) {
          this._emitted["t:" + tx.hash] = "pending";
        }
        const receipt = yield this.waitForTransaction(tx.hash, confirmations);
        if (receipt == null && confirmations === 0) {
          return null;
        }
        this._emitted["t:" + tx.hash] = receipt.blockNumber;
        if (receipt.status === 0) {
          logger$t.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, { transactionHash: tx.hash, transaction: tx, receipt });
        }
        return receipt;
      });
      return result;
    }
    sendTransaction(signedTransaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const hexTx = yield Promise.resolve(signedTransaction).then((t) => hexlify(t));
        const tx = this.formatter.transaction(signedTransaction);
        try {
          const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
          return this._wrapTransaction(tx, hash);
        } catch (error) {
          error.transaction = tx;
          error.transactionHash = tx.hash;
          throw error;
        }
      });
    }
    _getTransactionRequest(transaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const values = yield transaction;
        const tx = {};
        ["from", "to"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? this._getAddress(v) : null);
        });
        ["gasLimit", "gasPrice", "value"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? BigNumber.from(v) : null);
        });
        ["type"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v != null ? v : null);
        });
        if (values.accessList) {
          tx.accessList = this.formatter.accessList(values.accessList);
        }
        ["data"].forEach((key2) => {
          if (values[key2] == null) {
            return;
          }
          tx[key2] = Promise.resolve(values[key2]).then((v) => v ? hexlify(v) : null);
        });
        return this.formatter.transactionRequest(yield resolveProperties(tx));
      });
    }
    _getFilter(filter) {
      return __awaiter$8(this, void 0, void 0, function* () {
        filter = yield filter;
        const result = {};
        if (filter.address != null) {
          result.address = this._getAddress(filter.address);
        }
        ["blockHash", "topics"].forEach((key2) => {
          if (filter[key2] == null) {
            return;
          }
          result[key2] = filter[key2];
        });
        ["fromBlock", "toBlock"].forEach((key2) => {
          if (filter[key2] == null) {
            return;
          }
          result[key2] = this._getBlockTag(filter[key2]);
        });
        return this.formatter.filter(yield resolveProperties(result));
      });
    }
    call(transaction, blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ transaction: this._getTransactionRequest(transaction), blockTag: this._getBlockTag(blockTag) });
        const result = yield this.perform("call", params);
        try {
          return hexlify(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "call", params, result, error });
        }
      });
    }
    estimateGas(transaction) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ transaction: this._getTransactionRequest(transaction) });
        const result = yield this.perform("estimateGas", params);
        try {
          return BigNumber.from(result);
        } catch (error) {
          return logger$t.throwError("bad result from backend", Logger.errors.SERVER_ERROR, { method: "estimateGas", params, result, error });
        }
      });
    }
    _getAddress(addressOrName) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const address = yield this.resolveName(addressOrName);
        if (address == null) {
          logger$t.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, { operation: `resolveName(${JSON.stringify(addressOrName)})` });
        }
        return address;
      });
    }
    _getBlock(blockHashOrBlockTag, includeTransactions) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        blockHashOrBlockTag = yield blockHashOrBlockTag;
        let blockNumber = -128;
        const params = { includeTransactions: !!includeTransactions };
        if (isHexString(blockHashOrBlockTag, 32)) {
          params.blockHash = blockHashOrBlockTag;
        } else {
          try {
            params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));
            if (isHexString(params.blockTag)) {
              blockNumber = parseInt(params.blockTag.substring(2), 16);
            }
          } catch (error) {
            logger$t.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
          }
        }
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const block = yield this.perform("getBlock", params);
          if (block == null) {
            if (params.blockHash != null) {
              if (this._emitted["b:" + params.blockHash] == null) {
                return null;
              }
            }
            if (params.blockTag != null) {
              if (blockNumber > this._emitted.block) {
                return null;
              }
            }
            return void 0;
          }
          if (includeTransactions) {
            let blockNumber2 = null;
            for (let i = 0; i < block.transactions.length; i++) {
              const tx = block.transactions[i];
              if (tx.blockNumber == null) {
                tx.confirmations = 0;
              } else if (tx.confirmations == null) {
                if (blockNumber2 == null) {
                  blockNumber2 = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                }
                let confirmations = blockNumber2 - tx.blockNumber + 1;
                if (confirmations <= 0) {
                  confirmations = 1;
                }
                tx.confirmations = confirmations;
              }
            }
            return this.formatter.blockWithTransactions(block);
          }
          return this.formatter.block(block);
        }), { oncePoll: this });
      });
    }
    getBlock(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, false);
    }
    getBlockWithTransactions(blockHashOrBlockTag) {
      return this._getBlock(blockHashOrBlockTag, true);
    }
    getTransaction(transactionHash) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        transactionHash = yield transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const result = yield this.perform("getTransaction", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          const tx = this.formatter.transactionResponse(result);
          if (tx.blockNumber == null) {
            tx.confirmations = 0;
          } else if (tx.confirmations == null) {
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            let confirmations = blockNumber - tx.blockNumber + 1;
            if (confirmations <= 0) {
              confirmations = 1;
            }
            tx.confirmations = confirmations;
          }
          return this._wrapTransaction(tx);
        }), { oncePoll: this });
      });
    }
    getTransactionReceipt(transactionHash) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        transactionHash = yield transactionHash;
        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
        return poll(() => __awaiter$8(this, void 0, void 0, function* () {
          const result = yield this.perform("getTransactionReceipt", params);
          if (result == null) {
            if (this._emitted["t:" + transactionHash] == null) {
              return null;
            }
            return void 0;
          }
          if (result.blockHash == null) {
            return void 0;
          }
          const receipt = this.formatter.receipt(result);
          if (receipt.blockNumber == null) {
            receipt.confirmations = 0;
          } else if (receipt.confirmations == null) {
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            let confirmations = blockNumber - receipt.blockNumber + 1;
            if (confirmations <= 0) {
              confirmations = 1;
            }
            receipt.confirmations = confirmations;
          }
          return receipt;
        }), { oncePoll: this });
      });
    }
    getLogs(filter) {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        const params = yield resolveProperties({ filter: this._getFilter(filter) });
        const logs = yield this.perform("getLogs", params);
        logs.forEach((log) => {
          if (log.removed == null) {
            log.removed = false;
          }
        });
        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
      });
    }
    getEtherPrice() {
      return __awaiter$8(this, void 0, void 0, function* () {
        yield this.getNetwork();
        return this.perform("getEtherPrice", {});
      });
    }
    _getBlockTag(blockTag) {
      return __awaiter$8(this, void 0, void 0, function* () {
        blockTag = yield blockTag;
        if (typeof blockTag === "number" && blockTag < 0) {
          if (blockTag % 1) {
            logger$t.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
          }
          let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
          blockNumber += blockTag;
          if (blockNumber < 0) {
            blockNumber = 0;
          }
          return this.formatter.blockTag(blockNumber);
        }
        return this.formatter.blockTag(blockTag);
      });
    }
    getResolver(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const address = yield this._getResolver(name2);
        if (address == null) {
          return null;
        }
        return new Resolver(this, address, name2);
      });
    }
    _getResolver(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        const network = yield this.getNetwork();
        if (!network.ensAddress) {
          logger$t.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
        }
        const transaction = { to: network.ensAddress, data: "0x0178b8bf" + namehash(name2).substring(2) };
        return this.formatter.callAddress(yield this.call(transaction));
      });
    }
    resolveName(name2) {
      return __awaiter$8(this, void 0, void 0, function* () {
        name2 = yield name2;
        try {
          return Promise.resolve(this.formatter.address(name2));
        } catch (error) {
          if (isHexString(name2)) {
            throw error;
          }
        }
        if (typeof name2 !== "string") {
          logger$t.throwArgumentError("invalid ENS name", "name", name2);
        }
        const resolver = yield this.getResolver(name2);
        if (!resolver) {
          return null;
        }
        return yield resolver.getAddress();
      });
    }
    lookupAddress(address) {
      return __awaiter$8(this, void 0, void 0, function* () {
        address = yield address;
        address = this.formatter.address(address);
        const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
        const resolverAddress = yield this._getResolver(reverseName);
        if (!resolverAddress) {
          return null;
        }
        let bytes = arrayify(yield this.call({ to: resolverAddress, data: "0x691f3431" + namehash(reverseName).substring(2) }));
        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {
          return null;
        }
        bytes = bytes.slice(32);
        if (bytes.length < 32) {
          return null;
        }
        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();
        bytes = bytes.slice(32);
        if (length > bytes.length) {
          return null;
        }
        const name2 = toUtf8String(bytes.slice(0, length));
        const addr = yield this.resolveName(name2);
        if (addr != address) {
          return null;
        }
        return name2;
      });
    }
    perform(method, params) {
      return logger$t.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
    }
    _startEvent(event) {
      this.polling = this._events.filter((e) => e.pollable()).length > 0;
    }
    _stopEvent(event) {
      this.polling = this._events.filter((e) => e.pollable()).length > 0;
    }
    _addEventListener(eventName, listener, once) {
      const event = new Event2(getEventTag$1(eventName), listener, once);
      this._events.push(event);
      this._startEvent(event);
      return this;
    }
    on(eventName, listener) {
      return this._addEventListener(eventName, listener, false);
    }
    once(eventName, listener) {
      return this._addEventListener(eventName, listener, true);
    }
    emit(eventName, ...args) {
      let result = false;
      let stopped = [];
      let eventTag = getEventTag$1(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag) {
          return true;
        }
        setTimeout(() => {
          event.listener.apply(this, args);
        }, 0);
        result = true;
        if (event.once) {
          stopped.push(event);
          return false;
        }
        return true;
      });
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return result;
    }
    listenerCount(eventName) {
      if (!eventName) {
        return this._events.length;
      }
      let eventTag = getEventTag$1(eventName);
      return this._events.filter((event) => {
        return event.tag === eventTag;
      }).length;
    }
    listeners(eventName) {
      if (eventName == null) {
        return this._events.map((event) => event.listener);
      }
      let eventTag = getEventTag$1(eventName);
      return this._events.filter((event) => event.tag === eventTag).map((event) => event.listener);
    }
    off(eventName, listener) {
      if (listener == null) {
        return this.removeAllListeners(eventName);
      }
      const stopped = [];
      let found = false;
      let eventTag = getEventTag$1(eventName);
      this._events = this._events.filter((event) => {
        if (event.tag !== eventTag || event.listener != listener) {
          return true;
        }
        if (found) {
          return true;
        }
        found = true;
        stopped.push(event);
        return false;
      });
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return this;
    }
    removeAllListeners(eventName) {
      let stopped = [];
      if (eventName == null) {
        stopped = this._events;
        this._events = [];
      } else {
        const eventTag = getEventTag$1(eventName);
        this._events = this._events.filter((event) => {
          if (event.tag !== eventTag) {
            return true;
          }
          stopped.push(event);
          return false;
        });
      }
      stopped.forEach((event) => {
        this._stopEvent(event);
      });
      return this;
    }
  };
  var __awaiter$9 = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$u = new Logger(version$m);
  var errorGas = ["call", "estimateGas"];
  function checkError(method, error, params) {
    if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
      const e = error.error;
      if (e && e.message.match("reverted") && isHexString(e.data)) {
        return e.data;
      }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
    message = (message || "").toLowerCase();
    const transaction = params.transaction || params.signedTransaction;
    if (message.match(/insufficient funds/)) {
      logger$u.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, { error, method, transaction });
    }
    if (message.match(/nonce too low/)) {
      logger$u.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, { error, method, transaction });
    }
    if (message.match(/replacement transaction underpriced/)) {
      logger$u.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, { error, method, transaction });
    }
    if (message.match(/only replay-protected/)) {
      logger$u.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, { error, method, transaction });
    }
    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
      logger$u.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, method, transaction });
    }
    throw error;
  }
  function timer(timeout) {
    return new Promise(function(resolve) {
      setTimeout(resolve, timeout);
    });
  }
  function getResult(payload) {
    if (payload.error) {
      const error = new Error(payload.error.message);
      error.code = payload.error.code;
      error.data = payload.error.data;
      throw error;
    }
    return payload.result;
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  var _constructorGuard$4 = {};
  var JsonRpcSigner = class extends Signer {
    constructor(constructorGuard, provider, addressOrIndex) {
      logger$u.checkNew(new.target, JsonRpcSigner);
      super();
      if (constructorGuard !== _constructorGuard$4) {
        throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
      }
      defineReadOnly(this, "provider", provider);
      if (addressOrIndex == null) {
        addressOrIndex = 0;
      }
      if (typeof addressOrIndex === "string") {
        defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
        defineReadOnly(this, "_index", null);
      } else if (typeof addressOrIndex === "number") {
        defineReadOnly(this, "_index", addressOrIndex);
        defineReadOnly(this, "_address", null);
      } else {
        logger$u.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
      }
    }
    connect(provider) {
      return logger$u.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, { operation: "connect" });
    }
    connectUnchecked() {
      return new UncheckedJsonRpcSigner(_constructorGuard$4, this.provider, this._address || this._index);
    }
    getAddress() {
      if (this._address) {
        return Promise.resolve(this._address);
      }
      return this.provider.send("eth_accounts", []).then((accounts) => {
        if (accounts.length <= this._index) {
          logger$u.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, { operation: "getAddress" });
        }
        return this.provider.formatter.address(accounts[this._index]);
      });
    }
    sendUncheckedTransaction(transaction) {
      transaction = shallowCopy(transaction);
      const fromAddress = this.getAddress().then((address) => {
        if (address) {
          address = address.toLowerCase();
        }
        return address;
      });
      if (transaction.gasLimit == null) {
        const estimate = shallowCopy(transaction);
        estimate.from = fromAddress;
        transaction.gasLimit = this.provider.estimateGas(estimate);
      }
      return resolveProperties({ tx: resolveProperties(transaction), sender: fromAddress }).then(({ tx, sender }) => {
        if (tx.from != null) {
          if (tx.from.toLowerCase() !== sender) {
            logger$u.throwArgumentError("from address mismatch", "transaction", transaction);
          }
        } else {
          tx.from = sender;
        }
        const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
        return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
          return hash;
        }, (error) => {
          return checkError("sendTransaction", error, hexTx);
        });
      });
    }
    signTransaction(transaction) {
      return logger$u.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, { operation: "signTransaction" });
    }
    sendTransaction(transaction) {
      return this.sendUncheckedTransaction(transaction).then((hash) => {
        return poll(() => {
          return this.provider.getTransaction(hash).then((tx) => {
            if (tx === null) {
              return void 0;
            }
            return this.provider._wrapTransaction(tx, hash);
          });
        }, { onceBlock: this.provider }).catch((error) => {
          error.transactionHash = hash;
          throw error;
        });
      });
    }
    signMessage(message) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const data2 = typeof message === "string" ? toUtf8Bytes(message) : message;
        const address = yield this.getAddress();
        return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data2)]);
      });
    }
    _signTypedData(domain, types, value) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name2) => {
          return this.provider.resolveName(name2);
        });
        const address = yield this.getAddress();
        return yield this.provider.send("eth_signTypedData_v4", [address.toLowerCase(), JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);
      });
    }
    unlock(password) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const provider = this.provider;
        const address = yield this.getAddress();
        return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
      });
    }
  };
  var UncheckedJsonRpcSigner = class extends JsonRpcSigner {
    sendTransaction(transaction) {
      return this.sendUncheckedTransaction(transaction).then((hash) => {
        return { hash, nonce: null, gasLimit: null, gasPrice: null, data: null, value: null, chainId: null, confirmations: 0, from: null, wait: (confirmations) => {
          return this.provider.waitForTransaction(hash, confirmations);
        } };
      });
    }
  };
  var allowedTransactionKeys$3 = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true, type: true, accessList: true };
  var JsonRpcProvider = class extends BaseProvider {
    constructor(url, network) {
      logger$u.checkNew(new.target, JsonRpcProvider);
      let networkOrReady = network;
      if (networkOrReady == null) {
        networkOrReady = new Promise((resolve, reject) => {
          setTimeout(() => {
            this.detectNetwork().then((network2) => {
              resolve(network2);
            }, (error) => {
              reject(error);
            });
          }, 0);
        });
      }
      super(networkOrReady);
      if (!url) {
        url = getStatic(this.constructor, "defaultUrl")();
      }
      if (typeof url === "string") {
        defineReadOnly(this, "connection", Object.freeze({ url }));
      } else {
        defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
      }
      this._nextId = 42;
    }
    get _cache() {
      if (this._eventLoopCache == null) {
        this._eventLoopCache = {};
      }
      return this._eventLoopCache;
    }
    static defaultUrl() {
      return "http://localhost:8545";
    }
    detectNetwork() {
      if (!this._cache["detectNetwork"]) {
        this._cache["detectNetwork"] = this._uncachedDetectNetwork();
        setTimeout(() => {
          this._cache["detectNetwork"] = null;
        }, 0);
      }
      return this._cache["detectNetwork"];
    }
    _uncachedDetectNetwork() {
      return __awaiter$9(this, void 0, void 0, function* () {
        yield timer(0);
        let chainId = null;
        try {
          chainId = yield this.send("eth_chainId", []);
        } catch (error) {
          try {
            chainId = yield this.send("net_version", []);
          } catch (error2) {
          }
        }
        if (chainId != null) {
          const getNetwork2 = getStatic(this.constructor, "getNetwork");
          try {
            return getNetwork2(BigNumber.from(chainId).toNumber());
          } catch (error) {
            return logger$u.throwError("could not detect network", Logger.errors.NETWORK_ERROR, { chainId, event: "invalidNetwork", serverError: error });
          }
        }
        return logger$u.throwError("could not detect network", Logger.errors.NETWORK_ERROR, { event: "noNetwork" });
      });
    }
    getSigner(addressOrIndex) {
      return new JsonRpcSigner(_constructorGuard$4, this, addressOrIndex);
    }
    getUncheckedSigner(addressOrIndex) {
      return this.getSigner(addressOrIndex).connectUnchecked();
    }
    listAccounts() {
      return this.send("eth_accounts", []).then((accounts) => {
        return accounts.map((a) => this.formatter.address(a));
      });
    }
    send(method, params) {
      const request = { method, params, id: this._nextId++, jsonrpc: "2.0" };
      this.emit("debug", { action: "request", request: deepCopy(request), provider: this });
      const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;
      if (cache && this._cache[method]) {
        return this._cache[method];
      }
      const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result2) => {
        this.emit("debug", { action: "response", request, response: result2, provider: this });
        return result2;
      }, (error) => {
        this.emit("debug", { action: "response", error, request, provider: this });
        throw error;
      });
      if (cache) {
        this._cache[method] = result;
        setTimeout(() => {
          this._cache[method] = null;
        }, 0);
      }
      return result;
    }
    prepareRequest(method, params) {
      switch (method) {
        case "getBlockNumber":
          return ["eth_blockNumber", []];
        case "getGasPrice":
          return ["eth_gasPrice", []];
        case "getBalance":
          return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
        case "getTransactionCount":
          return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
        case "getCode":
          return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
        case "getStorageAt":
          return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
        case "sendTransaction":
          return ["eth_sendRawTransaction", [params.signedTransaction]];
        case "getBlock":
          if (params.blockTag) {
            return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
          } else if (params.blockHash) {
            return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
          }
          return null;
        case "getTransaction":
          return ["eth_getTransactionByHash", [params.transactionHash]];
        case "getTransactionReceipt":
          return ["eth_getTransactionReceipt", [params.transactionHash]];
        case "call": {
          const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
          return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
        }
        case "estimateGas": {
          const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
          return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
        }
        case "getLogs":
          if (params.filter && params.filter.address != null) {
            params.filter.address = getLowerCase(params.filter.address);
          }
          return ["eth_getLogs", [params.filter]];
        default:
          break;
      }
      return null;
    }
    perform(method, params) {
      return __awaiter$9(this, void 0, void 0, function* () {
        const args = this.prepareRequest(method, params);
        if (args == null) {
          logger$u.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        try {
          return yield this.send(args[0], args[1]);
        } catch (error) {
          return checkError(method, error, params);
        }
      });
    }
    _startEvent(event) {
      if (event.tag === "pending") {
        this._startPending();
      }
      super._startEvent(event);
    }
    _startPending() {
      if (this._pendingFilter != null) {
        return;
      }
      const self2 = this;
      const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
      this._pendingFilter = pendingFilter;
      pendingFilter.then(function(filterId) {
        function poll2() {
          self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
            if (self2._pendingFilter != pendingFilter) {
              return null;
            }
            let seq = Promise.resolve();
            hashes.forEach(function(hash) {
              self2._emitted["t:" + hash.toLowerCase()] = "pending";
              seq = seq.then(function() {
                return self2.getTransaction(hash).then(function(tx) {
                  self2.emit("pending", tx);
                  return null;
                });
              });
            });
            return seq.then(function() {
              return timer(1e3);
            });
          }).then(function() {
            if (self2._pendingFilter != pendingFilter) {
              self2.send("eth_uninstallFilter", [filterId]);
              return;
            }
            setTimeout(function() {
              poll2();
            }, 0);
            return null;
          }).catch((error) => {
          });
        }
        poll2();
        return filterId;
      }).catch((error) => {
      });
    }
    _stopEvent(event) {
      if (event.tag === "pending" && this.listenerCount("pending") === 0) {
        this._pendingFilter = null;
      }
      super._stopEvent(event);
    }
    static hexlifyTransaction(transaction, allowExtra) {
      const allowed = shallowCopy(allowedTransactionKeys$3);
      if (allowExtra) {
        for (const key2 in allowExtra) {
          if (allowExtra[key2]) {
            allowed[key2] = true;
          }
        }
      }
      checkProperties(transaction, allowed);
      const result = {};
      ["gasLimit", "gasPrice", "type", "nonce", "value"].forEach(function(key2) {
        if (transaction[key2] == null) {
          return;
        }
        const value = hexValue(transaction[key2]);
        if (key2 === "gasLimit") {
          key2 = "gas";
        }
        result[key2] = value;
      });
      ["from", "to", "data"].forEach(function(key2) {
        if (transaction[key2] == null) {
          return;
        }
        result[key2] = hexlify(transaction[key2]);
      });
      if (transaction.accessList) {
        result["accessList"] = accessListify(transaction.accessList);
      }
      return result;
    }
  };
  var WS = null;
  try {
    WS = WebSocket;
    if (WS == null) {
      throw new Error("inject please");
    }
  } catch (error) {
    const logger2 = new Logger(version$m);
    WS = function() {
      logger2.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, { operation: "new WebSocket()" });
    };
  }
  var __awaiter$a = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$v = new Logger(version$m);
  var NextId = 1;
  var WebSocketProvider = class extends JsonRpcProvider {
    constructor(url, network) {
      if (network === "any") {
        logger$v.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, { operation: "network:any" });
      }
      super(url, network);
      this._pollingInterval = -1;
      this._wsReady = false;
      defineReadOnly(this, "_websocket", new WS(this.connection.url));
      defineReadOnly(this, "_requests", {});
      defineReadOnly(this, "_subs", {});
      defineReadOnly(this, "_subIds", {});
      defineReadOnly(this, "_detectNetwork", super.detectNetwork());
      this._websocket.onopen = () => {
        this._wsReady = true;
        Object.keys(this._requests).forEach((id2) => {
          this._websocket.send(this._requests[id2].payload);
        });
      };
      this._websocket.onmessage = (messageEvent) => {
        const data2 = messageEvent.data;
        const result = JSON.parse(data2);
        if (result.id != null) {
          const id2 = String(result.id);
          const request = this._requests[id2];
          delete this._requests[id2];
          if (result.result !== void 0) {
            request.callback(null, result.result);
            this.emit("debug", { action: "response", request: JSON.parse(request.payload), response: result.result, provider: this });
          } else {
            let error = null;
            if (result.error) {
              error = new Error(result.error.message || "unknown error");
              defineReadOnly(error, "code", result.error.code || null);
              defineReadOnly(error, "response", data2);
            } else {
              error = new Error("unknown error");
            }
            request.callback(error, void 0);
            this.emit("debug", { action: "response", error, request: JSON.parse(request.payload), provider: this });
          }
        } else if (result.method === "eth_subscription") {
          const sub = this._subs[result.params.subscription];
          if (sub) {
            sub.processFunc(result.params.result);
          }
        } else {
          console.warn("this should not happen");
        }
      };
      const fauxPoll = setInterval(() => {
        this.emit("poll");
      }, 1e3);
      if (fauxPoll.unref) {
        fauxPoll.unref();
      }
    }
    detectNetwork() {
      return this._detectNetwork;
    }
    get pollingInterval() {
      return 0;
    }
    resetEventsBlock(blockNumber) {
      logger$v.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "resetEventBlock" });
    }
    set pollingInterval(value) {
      logger$v.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setPollingInterval" });
    }
    poll() {
      return __awaiter$a(this, void 0, void 0, function* () {
        return null;
      });
    }
    set polling(value) {
      if (!value) {
        return;
      }
      logger$v.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "setPolling" });
    }
    send(method, params) {
      const rid = NextId++;
      return new Promise((resolve, reject) => {
        function callback(error, result) {
          if (error) {
            return reject(error);
          }
          return resolve(result);
        }
        const payload = JSON.stringify({ method, params, id: rid, jsonrpc: "2.0" });
        this.emit("debug", { action: "request", request: JSON.parse(payload), provider: this });
        this._requests[String(rid)] = { callback, payload };
        if (this._wsReady) {
          this._websocket.send(payload);
        }
      });
    }
    static defaultUrl() {
      return "ws://localhost:8546";
    }
    _subscribe(tag, param, processFunc) {
      return __awaiter$a(this, void 0, void 0, function* () {
        let subIdPromise = this._subIds[tag];
        if (subIdPromise == null) {
          subIdPromise = Promise.all(param).then((param2) => {
            return this.send("eth_subscribe", param2);
          });
          this._subIds[tag] = subIdPromise;
        }
        const subId = yield subIdPromise;
        this._subs[subId] = { tag, processFunc };
      });
    }
    _startEvent(event) {
      switch (event.type) {
        case "block":
          this._subscribe("block", ["newHeads"], (result) => {
            const blockNumber = BigNumber.from(result.number).toNumber();
            this._emitted.block = blockNumber;
            this.emit("block", blockNumber);
          });
          break;
        case "pending":
          this._subscribe("pending", ["newPendingTransactions"], (result) => {
            this.emit("pending", result);
          });
          break;
        case "filter":
          this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
            if (result.removed == null) {
              result.removed = false;
            }
            this.emit(event.filter, this.formatter.filterLog(result));
          });
          break;
        case "tx": {
          const emitReceipt = (event2) => {
            const hash = event2.hash;
            this.getTransactionReceipt(hash).then((receipt) => {
              if (!receipt) {
                return;
              }
              this.emit(hash, receipt);
            });
          };
          emitReceipt(event);
          this._subscribe("tx", ["newHeads"], (result) => {
            this._events.filter((e) => e.type === "tx").forEach(emitReceipt);
          });
          break;
        }
        case "debug":
        case "poll":
        case "willPoll":
        case "didPoll":
        case "error":
          break;
        default:
          console.log("unhandled:", event);
          break;
      }
    }
    _stopEvent(event) {
      let tag = event.tag;
      if (event.type === "tx") {
        if (this._events.filter((e) => e.type === "tx").length) {
          return;
        }
        tag = "tx";
      } else if (this.listenerCount(event.event)) {
        return;
      }
      const subId = this._subIds[tag];
      if (!subId) {
        return;
      }
      delete this._subIds[tag];
      subId.then((subId2) => {
        if (!this._subs[subId2]) {
          return;
        }
        delete this._subs[subId2];
        this.send("eth_unsubscribe", [subId2]);
      });
    }
    destroy() {
      return __awaiter$a(this, void 0, void 0, function* () {
        if (this._websocket.readyState === WS.CONNECTING) {
          yield new Promise((resolve) => {
            this._websocket.onopen = function() {
              resolve(true);
            };
            this._websocket.onerror = function() {
              resolve(false);
            };
          });
        }
        this._websocket.close(1e3);
      });
    }
  };
  var __awaiter$b = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$w = new Logger(version$m);
  var StaticJsonRpcProvider = class extends JsonRpcProvider {
    detectNetwork() {
      const _super = Object.create(null, { detectNetwork: { get: () => super.detectNetwork } });
      return __awaiter$b(this, void 0, void 0, function* () {
        let network = this.network;
        if (network == null) {
          network = yield _super.detectNetwork.call(this);
          if (!network) {
            logger$w.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
          }
          if (this._network == null) {
            defineReadOnly(this, "_network", network);
            this.emit("network", network, null);
          }
        }
        return network;
      });
    }
  };
  var UrlJsonRpcProvider = class extends StaticJsonRpcProvider {
    constructor(network, apiKey) {
      logger$w.checkAbstract(new.target, UrlJsonRpcProvider);
      network = getStatic(new.target, "getNetwork")(network);
      apiKey = getStatic(new.target, "getApiKey")(apiKey);
      const connection = getStatic(new.target, "getUrl")(network, apiKey);
      super(connection, network);
      if (typeof apiKey === "string") {
        defineReadOnly(this, "apiKey", apiKey);
      } else if (apiKey != null) {
        Object.keys(apiKey).forEach((key2) => {
          defineReadOnly(this, key2, apiKey[key2]);
        });
      }
    }
    _startPending() {
      logger$w.warn("WARNING: API provider does not support pending filters");
    }
    isCommunityResource() {
      return false;
    }
    getSigner(address) {
      return logger$w.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
    }
    listAccounts() {
      return Promise.resolve([]);
    }
    static getApiKey(apiKey) {
      return apiKey;
    }
    static getUrl(network, apiKey) {
      return logger$w.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, { operation: "getUrl" });
    }
  };
  var logger$x = new Logger(version$m);
  var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
  var AlchemyWebSocketProvider = class extends WebSocketProvider {
    constructor(network, apiKey) {
      const provider = new AlchemyProvider(network, apiKey);
      const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
      super(url, provider.network);
      defineReadOnly(this, "apiKey", provider.apiKey);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  };
  var AlchemyProvider = class extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
      return new AlchemyWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
      if (apiKey == null) {
        return defaultApiKey;
      }
      if (apiKey && typeof apiKey !== "string") {
        logger$x.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "eth-mainnet.alchemyapi.io/v2/";
          break;
        case "ropsten":
          host = "eth-ropsten.alchemyapi.io/v2/";
          break;
        case "rinkeby":
          host = "eth-rinkeby.alchemyapi.io/v2/";
          break;
        case "goerli":
          host = "eth-goerli.alchemyapi.io/v2/";
          break;
        case "kovan":
          host = "eth-kovan.alchemyapi.io/v2/";
          break;
        default:
          logger$x.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return { allowGzip: true, url: "https://" + host + apiKey, throttleCallback: (attempt, url) => {
        if (apiKey === defaultApiKey) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      } };
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  };
  var __awaiter$c = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$y = new Logger(version$m);
  var CloudflareProvider = class extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
      if (apiKey != null) {
        logger$y.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
      }
      return null;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "https://cloudflare-eth.com/";
          break;
        default:
          logger$y.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host;
    }
    perform(method, params) {
      const _super = Object.create(null, { perform: { get: () => super.perform } });
      return __awaiter$c(this, void 0, void 0, function* () {
        if (method === "getBlockNumber") {
          const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
          return block.number;
        }
        return _super.perform.call(this, method, params);
      });
    }
  };
  var __awaiter$d = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$z = new Logger(version$m);
  function getTransactionPostData(transaction) {
    const result = {};
    for (let key2 in transaction) {
      if (transaction[key2] == null) {
        continue;
      }
      let value = transaction[key2];
      if ({ type: true, gasLimit: true, gasPrice: true, nonce: true, value: true }[key2]) {
        value = hexValue(hexlify(value));
      } else if (key2 === "accessList") {
        const sets = accessListify(value);
        value = "[" + sets.map((set) => {
          return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
        }).join(",") + "]";
      } else {
        value = hexlify(value);
      }
      result[key2] = value;
    }
    return result;
  }
  function getResult$1(result) {
    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
      return result.result;
    }
    if (result.status != 1 || result.message != "OK") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        error.throttleRetry = true;
      }
      throw error;
    }
    return result.result;
  }
  function getJsonResult(result) {
    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      const error = new Error("throttled response");
      error.result = JSON.stringify(result);
      error.throttleRetry = true;
      throw error;
    }
    if (result.jsonrpc != "2.0") {
      const error = new Error("invalid response");
      error.result = JSON.stringify(result);
      throw error;
    }
    if (result.error) {
      const error = new Error(result.error.message || "unknown error");
      if (result.error.code) {
        error.code = result.error.code;
      }
      if (result.error.data) {
        error.data = result.error.data;
      }
      throw error;
    }
    return result.result;
  }
  function checkLogTag(blockTag) {
    if (blockTag === "pending") {
      throw new Error("pending not supported");
    }
    if (blockTag === "latest") {
      return blockTag;
    }
    return parseInt(blockTag.substring(2), 16);
  }
  var defaultApiKey$1 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
  function checkError$1(method, error, transaction) {
    if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
      const e = error.error;
      if (e && e.message.match("reverted") && isHexString(e.data)) {
        return e.data;
      }
    }
    let message = error.message;
    if (error.code === Logger.errors.SERVER_ERROR) {
      if (error.error && typeof error.error.message === "string") {
        message = error.error.message;
      } else if (typeof error.body === "string") {
        message = error.body;
      } else if (typeof error.responseText === "string") {
        message = error.responseText;
      }
    }
    message = (message || "").toLowerCase();
    if (message.match(/insufficient funds/)) {
      logger$z.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, { error, method, transaction });
    }
    if (message.match(/same hash was already imported|transaction nonce is too low/)) {
      logger$z.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, { error, method, transaction });
    }
    if (message.match(/another transaction with same nonce/)) {
      logger$z.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, { error, method, transaction });
    }
    if (message.match(/execution failed due to an exception/)) {
      logger$z.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, { error, method, transaction });
    }
    throw error;
  }
  var EtherscanProvider = class extends BaseProvider {
    constructor(network, apiKey) {
      logger$z.checkNew(new.target, EtherscanProvider);
      super(network);
      let name2 = "invalid";
      if (this.network) {
        name2 = this.network.name;
      }
      let baseUrl = null;
      switch (name2) {
        case "homestead":
          baseUrl = "https://api.etherscan.io";
          break;
        case "ropsten":
          baseUrl = "https://api-ropsten.etherscan.io";
          break;
        case "rinkeby":
          baseUrl = "https://api-rinkeby.etherscan.io";
          break;
        case "kovan":
          baseUrl = "https://api-kovan.etherscan.io";
          break;
        case "goerli":
          baseUrl = "https://api-goerli.etherscan.io";
          break;
        default:
          throw new Error("unsupported network");
      }
      defineReadOnly(this, "baseUrl", baseUrl);
      defineReadOnly(this, "apiKey", apiKey || defaultApiKey$1);
    }
    detectNetwork() {
      return __awaiter$d(this, void 0, void 0, function* () {
        return this.network;
      });
    }
    perform(method, params) {
      const _super = Object.create(null, { perform: { get: () => super.perform } });
      return __awaiter$d(this, void 0, void 0, function* () {
        let url = this.baseUrl + "/api";
        let apiKey = "";
        if (this.apiKey) {
          apiKey += "&apikey=" + this.apiKey;
        }
        const get = (url2, payload, procFunc) => __awaiter$d(this, void 0, void 0, function* () {
          this.emit("debug", { action: "request", request: url2, provider: this });
          const connection = { url: url2, throttleSlotInterval: 1e3, throttleCallback: (attempt, url3) => {
            if (this.isCommunityResource()) {
              showThrottleMessage();
            }
            return Promise.resolve(true);
          } };
          let payloadStr = null;
          if (payload) {
            connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
            payloadStr = Object.keys(payload).map((key2) => {
              return `${key2}=${payload[key2]}`;
            }).join("&");
          }
          const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
          this.emit("debug", { action: "response", request: url2, response: deepCopy(result), provider: this });
          return result;
        });
        switch (method) {
          case "getBlockNumber":
            url += "?module=proxy&action=eth_blockNumber" + apiKey;
            return get(url, null);
          case "getGasPrice":
            url += "?module=proxy&action=eth_gasPrice" + apiKey;
            return get(url, null);
          case "getBalance":
            url += "?module=account&action=balance&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null, getResult$1);
          case "getTransactionCount":
            url += "?module=proxy&action=eth_getTransactionCount&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "getCode":
            url += "?module=proxy&action=eth_getCode&address=" + params.address;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "getStorageAt":
            url += "?module=proxy&action=eth_getStorageAt&address=" + params.address;
            url += "&position=" + params.position;
            url += "&tag=" + params.blockTag + apiKey;
            return get(url, null);
          case "sendTransaction":
            return get(url, { module: "proxy", action: "eth_sendRawTransaction", hex: params.signedTransaction, apikey: this.apiKey }).catch((error) => {
              return checkError$1("sendTransaction", error, params.signedTransaction);
            });
          case "getBlock":
            if (params.blockTag) {
              url += "?module=proxy&action=eth_getBlockByNumber&tag=" + params.blockTag;
              if (params.includeTransactions) {
                url += "&boolean=true";
              } else {
                url += "&boolean=false";
              }
              url += apiKey;
              return get(url, null);
            }
            throw new Error("getBlock by blockHash not implemented");
          case "getTransaction":
            url += "?module=proxy&action=eth_getTransactionByHash&txhash=" + params.transactionHash;
            url += apiKey;
            return get(url, null);
          case "getTransactionReceipt":
            url += "?module=proxy&action=eth_getTransactionReceipt&txhash=" + params.transactionHash;
            url += apiKey;
            return get(url, null);
          case "call": {
            if (params.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            postData.apikey = this.apiKey;
            try {
              return yield get(url, postData);
            } catch (error) {
              return checkError$1("call", error, params.transaction);
            }
          }
          case "estimateGas": {
            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            postData.apikey = this.apiKey;
            try {
              return yield get(url, postData);
            } catch (error) {
              return checkError$1("estimateGas", error, params.transaction);
            }
          }
          case "getLogs": {
            url += "?module=logs&action=getLogs";
            if (params.filter.fromBlock) {
              url += "&fromBlock=" + checkLogTag(params.filter.fromBlock);
            }
            if (params.filter.toBlock) {
              url += "&toBlock=" + checkLogTag(params.filter.toBlock);
            }
            if (params.filter.address) {
              url += "&address=" + params.filter.address;
            }
            if (params.filter.topics && params.filter.topics.length > 0) {
              if (params.filter.topics.length > 1) {
                logger$z.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
              }
              if (params.filter.topics.length === 1) {
                const topic0 = params.filter.topics[0];
                if (typeof topic0 !== "string" || topic0.length !== 66) {
                  logger$z.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0 });
                }
                url += "&topic0=" + topic0;
              }
            }
            url += apiKey;
            const logs = yield get(url, null, getResult$1);
            let blocks = {};
            for (let i = 0; i < logs.length; i++) {
              const log = logs[i];
              if (log.blockHash != null) {
                continue;
              }
              if (blocks[log.blockNumber] == null) {
                const block = yield this.getBlock(log.blockNumber);
                if (block) {
                  blocks[log.blockNumber] = block.hash;
                }
              }
              log.blockHash = blocks[log.blockNumber];
            }
            return logs;
          }
          case "getEtherPrice":
            if (this.network.name !== "homestead") {
              return 0;
            }
            url += "?module=stats&action=ethprice";
            url += apiKey;
            return parseFloat((yield get(url, null, getResult$1)).ethusd);
          default:
            break;
        }
        return _super.perform.call(this, method, params);
      });
    }
    getHistory(addressOrName, startBlock, endBlock) {
      let url = this.baseUrl;
      let apiKey = "";
      if (this.apiKey) {
        apiKey += "&apikey=" + this.apiKey;
      }
      if (startBlock == null) {
        startBlock = 0;
      }
      if (endBlock == null) {
        endBlock = 99999999;
      }
      return this.resolveName(addressOrName).then((address) => {
        url += "/api?module=account&action=txlist&address=" + address;
        url += "&startblock=" + startBlock;
        url += "&endblock=" + endBlock;
        url += "&sort=asc" + apiKey;
        this.emit("debug", { action: "request", request: url, provider: this });
        const connection = { url, throttleSlotInterval: 1e3, throttleCallback: (attempt, url2) => {
          if (this.apiKey === defaultApiKey$1) {
            showThrottleMessage();
          }
          return Promise.resolve(true);
        } };
        return fetchJson(connection, null, getResult$1).then((result) => {
          this.emit("debug", { action: "response", request: url, response: deepCopy(result), provider: this });
          let output = [];
          result.forEach((tx) => {
            ["contractAddress", "to"].forEach(function(key2) {
              if (tx[key2] == "") {
                delete tx[key2];
              }
            });
            if (tx.creates == null && tx.contractAddress != null) {
              tx.creates = tx.contractAddress;
            }
            let item = this.formatter.transactionResponse(tx);
            if (tx.timeStamp) {
              item.timestamp = parseInt(tx.timeStamp);
            }
            output.push(item);
          });
          return output;
        });
      });
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey$1;
    }
  };
  var __awaiter$e = window && window.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var logger$A = new Logger(version$m);
  function now() {
    return new Date().getTime();
  }
  function checkNetworks(networks2) {
    let result = null;
    for (let i = 0; i < networks2.length; i++) {
      const network = networks2[i];
      if (network == null) {
        return null;
      }
      if (result) {
        if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
          logger$A.throwArgumentError("provider mismatch", "networks", networks2);
        }
      } else {
        result = network;
      }
    }
    return result;
  }
  function median(values, maxDelta) {
    values = values.slice().sort();
    const middle = Math.floor(values.length / 2);
    if (values.length % 2) {
      return values[middle];
    }
    const a = values[middle - 1], b = values[middle];
    if (maxDelta != null && Math.abs(a - b) > maxDelta) {
      return null;
    }
    return (a + b) / 2;
  }
  function serialize$1(value) {
    if (value === null) {
      return "null";
    } else if (typeof value === "number" || typeof value === "boolean") {
      return JSON.stringify(value);
    } else if (typeof value === "string") {
      return value;
    } else if (BigNumber.isBigNumber(value)) {
      return value.toString();
    } else if (Array.isArray(value)) {
      return JSON.stringify(value.map((i) => serialize$1(i)));
    } else if (typeof value === "object") {
      const keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map((key2) => {
        let v = value[key2];
        if (typeof v === "function") {
          v = "[function]";
        } else {
          v = serialize$1(v);
        }
        return JSON.stringify(key2) + ":" + v;
      }).join(",") + "}";
    }
    throw new Error("unknown value type: " + typeof value);
  }
  var nextRid = 1;
  function stall$1(duration) {
    let cancel = null;
    let timer2 = null;
    let promise = new Promise((resolve) => {
      cancel = function() {
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        resolve();
      };
      timer2 = setTimeout(cancel, duration);
    });
    const wait = (func) => {
      promise = promise.then(func);
      return promise;
    };
    function getPromise() {
      return promise;
    }
    return { cancel, getPromise, wait };
  }
  var ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];
  var ForwardProperties = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
  function exposeDebugConfig(config, now2) {
    const result = { weight: config.weight };
    Object.defineProperty(result, "provider", { get: () => config.provider });
    if (config.start) {
      result.start = config.start;
    }
    if (now2) {
      result.duration = now2 - config.start;
    }
    if (config.done) {
      if (config.error) {
        result.error = config.error;
      } else {
        result.result = config.result || null;
      }
    }
    return result;
  }
  function normalizedTally(normalize, quorum) {
    return function(configs) {
      const tally = {};
      configs.forEach((c) => {
        const value = normalize(c.result);
        if (!tally[value]) {
          tally[value] = { count: 0, result: c.result };
        }
        tally[value].count++;
      });
      const keys = Object.keys(tally);
      for (let i = 0; i < keys.length; i++) {
        const check = tally[keys[i]];
        if (check.count >= quorum) {
          return check.result;
        }
      }
      return void 0;
    };
  }
  function getProcessFunc(provider, method, params) {
    let normalize = serialize$1;
    switch (method) {
      case "getBlockNumber":
        return function(configs) {
          const values = configs.map((c) => c.result);
          let blockNumber = median(configs.map((c) => c.result), 2);
          if (blockNumber == null) {
            return void 0;
          }
          blockNumber = Math.ceil(blockNumber);
          if (values.indexOf(blockNumber + 1) >= 0) {
            blockNumber++;
          }
          if (blockNumber >= provider._highestBlockNumber) {
            provider._highestBlockNumber = blockNumber;
          }
          return provider._highestBlockNumber;
        };
      case "getGasPrice":
        return function(configs) {
          const values = configs.map((c) => c.result);
          values.sort();
          return values[Math.floor(values.length / 2)];
        };
      case "getEtherPrice":
        return function(configs) {
          return median(configs.map((c) => c.result));
        };
      case "getBalance":
      case "getTransactionCount":
      case "getCode":
      case "getStorageAt":
      case "call":
      case "estimateGas":
      case "getLogs":
        break;
      case "getTransaction":
      case "getTransactionReceipt":
        normalize = function(tx) {
          if (tx == null) {
            return null;
          }
          tx = shallowCopy(tx);
          tx.confirmations = -1;
          return serialize$1(tx);
        };
        break;
      case "getBlock":
        if (params.includeTransactions) {
          normalize = function(block) {
            if (block == null) {
              return null;
            }
            block = shallowCopy(block);
            block.transactions = block.transactions.map((tx) => {
              tx = shallowCopy(tx);
              tx.confirmations = -1;
              return tx;
            });
            return serialize$1(block);
          };
        } else {
          normalize = function(block) {
            if (block == null) {
              return null;
            }
            return serialize$1(block);
          };
        }
        break;
      default:
        throw new Error("unknown method: " + method);
    }
    return normalizedTally(normalize, provider.quorum);
  }
  function waitForSync(config, blockNumber) {
    return __awaiter$e(this, void 0, void 0, function* () {
      const provider = config.provider;
      if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
        return provider;
      }
      return poll(() => {
        return new Promise((resolve, reject) => {
          setTimeout(function() {
            if (provider.blockNumber >= blockNumber) {
              return resolve(provider);
            }
            if (config.cancelled) {
              return resolve(null);
            }
            return resolve(void 0);
          }, 0);
        });
      }, { oncePoll: provider });
    });
  }
  function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter$e(this, void 0, void 0, function* () {
      let provider = config.provider;
      switch (method) {
        case "getBlockNumber":
        case "getGasPrice":
          return provider[method]();
        case "getEtherPrice":
          if (provider.getEtherPrice) {
            return provider.getEtherPrice();
          }
          break;
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.address, params.blockTag || "latest");
        case "getStorageAt":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
        case "getBlock":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
        case "call":
        case "estimateGas":
          if (params.blockTag && isHexString(params.blockTag)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider[method](params.transaction);
        case "getTransaction":
        case "getTransactionReceipt":
          return provider[method](params.transactionHash);
        case "getLogs": {
          let filter = params.filter;
          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }
          return provider.getLogs(filter);
        }
      }
      return logger$A.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, { method, params });
    });
  }
  var FallbackProvider = class extends BaseProvider {
    constructor(providers, quorum) {
      logger$A.checkNew(new.target, FallbackProvider);
      if (providers.length === 0) {
        logger$A.throwArgumentError("missing providers", "providers", providers);
      }
      const providerConfigs = providers.map((configOrProvider, index2) => {
        if (Provider.isProvider(configOrProvider)) {
          const stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
          const priority = 1;
          return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
        }
        const config = shallowCopy(configOrProvider);
        if (config.priority == null) {
          config.priority = 1;
        }
        if (config.stallTimeout == null) {
          config.stallTimeout = isCommunityResource(configOrProvider) ? 2e3 : 750;
        }
        if (config.weight == null) {
          config.weight = 1;
        }
        const weight = config.weight;
        if (weight % 1 || weight > 512 || weight < 1) {
          logger$A.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index2}].weight`, weight);
        }
        return Object.freeze(config);
      });
      const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);
      if (quorum == null) {
        quorum = total / 2;
      } else if (quorum > total) {
        logger$A.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
      }
      let networkOrReady = checkNetworks(providerConfigs.map((c) => c.provider.network));
      if (networkOrReady == null) {
        networkOrReady = new Promise((resolve, reject) => {
          setTimeout(() => {
            this.detectNetwork().then(resolve, reject);
          }, 0);
        });
      }
      super(networkOrReady);
      defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
      defineReadOnly(this, "quorum", quorum);
      this._highestBlockNumber = -1;
    }
    detectNetwork() {
      return __awaiter$e(this, void 0, void 0, function* () {
        const networks2 = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
        return checkNetworks(networks2);
      });
    }
    perform(method, params) {
      return __awaiter$e(this, void 0, void 0, function* () {
        if (method === "sendTransaction") {
          const results = yield Promise.all(this.providerConfigs.map((c) => {
            return c.provider.sendTransaction(params.signedTransaction).then((result) => {
              return result.hash;
            }, (error) => {
              return error;
            });
          }));
          for (let i2 = 0; i2 < results.length; i2++) {
            const result = results[i2];
            if (typeof result === "string") {
              return result;
            }
          }
          throw results[0];
        }
        if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
          yield this.getBlockNumber();
        }
        const processFunc = getProcessFunc(this, method, params);
        const configs = shuffled(this.providerConfigs.map(shallowCopy));
        configs.sort((a, b) => a.priority - b.priority);
        const currentBlockNumber = this._highestBlockNumber;
        let i = 0;
        let first = true;
        while (true) {
          const t0 = now();
          let inflightWeight = configs.filter((c) => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);
          while (inflightWeight < this.quorum && i < configs.length) {
            const config = configs[i++];
            const rid = nextRid++;
            config.start = now();
            config.staller = stall$1(config.stallTimeout);
            config.staller.wait(() => {
              config.staller = null;
            });
            config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
              config.done = true;
              config.result = result;
              if (this.listenerCount("debug")) {
                this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, now()), request: { method, params: deepCopy(params) }, provider: this });
              }
            }, (error) => {
              config.done = true;
              config.error = error;
              if (this.listenerCount("debug")) {
                this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, now()), request: { method, params: deepCopy(params) }, provider: this });
              }
            });
            if (this.listenerCount("debug")) {
              this.emit("debug", { action: "request", rid, backend: exposeDebugConfig(config, null), request: { method, params: deepCopy(params) }, provider: this });
            }
            inflightWeight += config.weight;
          }
          const waiting = [];
          configs.forEach((c) => {
            if (c.done || !c.runner) {
              return;
            }
            waiting.push(c.runner);
            if (c.staller) {
              waiting.push(c.staller.getPromise());
            }
          });
          if (waiting.length) {
            yield Promise.race(waiting);
          }
          const results = configs.filter((c) => c.done && c.error == null);
          if (results.length >= this.quorum) {
            const result = processFunc(results);
            if (result !== void 0) {
              configs.forEach((c) => {
                if (c.staller) {
                  c.staller.cancel();
                }
                c.cancelled = true;
              });
              return result;
            }
            if (!first) {
              yield stall$1(100).getPromise();
            }
            first = false;
          }
          const errors = configs.reduce((accum, c) => {
            if (!c.done || c.error == null) {
              return accum;
            }
            const code = c.error.code;
            if (ForwardErrors.indexOf(code) >= 0) {
              if (!accum[code]) {
                accum[code] = { error: c.error, weight: 0 };
              }
              accum[code].weight += c.weight;
            }
            return accum;
          }, {});
          Object.keys(errors).forEach((errorCode) => {
            const tally = errors[errorCode];
            if (tally.weight < this.quorum) {
              return;
            }
            configs.forEach((c) => {
              if (c.staller) {
                c.staller.cancel();
              }
              c.cancelled = true;
            });
            const e = tally.error;
            const props = {};
            ForwardProperties.forEach((name2) => {
              if (e[name2] == null) {
                return;
              }
              props[name2] = e[name2];
            });
            logger$A.throwError(e.reason || e.message, errorCode, props);
          });
          if (configs.filter((c) => !c.done).length === 0) {
            break;
          }
        }
        configs.forEach((c) => {
          if (c.staller) {
            c.staller.cancel();
          }
          c.cancelled = true;
        });
        return logger$A.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, { method, params, results: configs.map((c) => exposeDebugConfig(c)), provider: this });
      });
    }
  };
  var IpcProvider = null;
  var logger$B = new Logger(version$m);
  var defaultProjectId = "84842078b09946638c03157f83405213";
  var InfuraWebSocketProvider = class extends WebSocketProvider {
    constructor(network, apiKey) {
      const provider = new InfuraProvider(network, apiKey);
      const connection = provider.connection;
      if (connection.password) {
        logger$B.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, { operation: "InfuraProvider.getWebSocketProvider()" });
      }
      const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
      super(url, network);
      defineReadOnly(this, "apiKey", provider.projectId);
      defineReadOnly(this, "projectId", provider.projectId);
      defineReadOnly(this, "projectSecret", provider.projectSecret);
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  };
  var InfuraProvider = class extends UrlJsonRpcProvider {
    static getWebSocketProvider(network, apiKey) {
      return new InfuraWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
      const apiKeyObj = { apiKey: defaultProjectId, projectId: defaultProjectId, projectSecret: null };
      if (apiKey == null) {
        return apiKeyObj;
      }
      if (typeof apiKey === "string") {
        apiKeyObj.projectId = apiKey;
      } else if (apiKey.projectSecret != null) {
        logger$B.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
        logger$B.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
        apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.projectSecret = apiKey.projectSecret;
      } else if (apiKey.projectId) {
        apiKeyObj.projectId = apiKey.projectId;
      }
      apiKeyObj.apiKey = apiKeyObj.projectId;
      return apiKeyObj;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "mainnet.infura.io";
          break;
        case "ropsten":
          host = "ropsten.infura.io";
          break;
        case "rinkeby":
          host = "rinkeby.infura.io";
          break;
        case "kovan":
          host = "kovan.infura.io";
          break;
        case "goerli":
          host = "goerli.infura.io";
          break;
        default:
          logger$B.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
      }
      const connection = { allowGzip: true, url: "https://" + host + "/v3/" + apiKey.projectId, throttleCallback: (attempt, url) => {
        if (apiKey.projectId === defaultProjectId) {
          showThrottleMessage();
        }
        return Promise.resolve(true);
      } };
      if (apiKey.projectSecret != null) {
        connection.user = "";
        connection.password = apiKey.projectSecret;
      }
      return connection;
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  };
  var JsonRpcBatchProvider = class extends JsonRpcProvider {
    send(method, params) {
      const request = { method, params, id: this._nextId++, jsonrpc: "2.0" };
      if (this._pendingBatch == null) {
        this._pendingBatch = [];
      }
      const inflightRequest = { request, resolve: null, reject: null };
      const promise = new Promise((resolve, reject) => {
        inflightRequest.resolve = resolve;
        inflightRequest.reject = reject;
      });
      this._pendingBatch.push(inflightRequest);
      if (!this._pendingBatchAggregator) {
        this._pendingBatchAggregator = setTimeout(() => {
          const batch = this._pendingBatch;
          this._pendingBatch = null;
          this._pendingBatchAggregator = null;
          const request2 = batch.map((inflight) => inflight.request);
          this.emit("debug", { action: "requestBatch", request: deepCopy(request2), provider: this });
          return fetchJson(this.connection, JSON.stringify(request2)).then((result) => {
            this.emit("debug", { action: "response", request: request2, response: result, provider: this });
            batch.forEach((inflightRequest2, index2) => {
              const payload = result[index2];
              if (payload.error) {
                const error = new Error(payload.error.message);
                error.code = payload.error.code;
                error.data = payload.error.data;
                inflightRequest2.reject(error);
              } else {
                inflightRequest2.resolve(payload.result);
              }
            });
          }, (error) => {
            this.emit("debug", { action: "response", error, request: request2, provider: this });
            batch.forEach((inflightRequest2) => {
              inflightRequest2.reject(error);
            });
          });
        }, 10);
      }
      return promise;
    }
  };
  var logger$C = new Logger(version$m);
  var defaultApiKey$2 = "ETHERS_JS_SHARED";
  var NodesmithProvider = class extends UrlJsonRpcProvider {
    static getApiKey(apiKey) {
      if (apiKey && typeof apiKey !== "string") {
        logger$C.throwArgumentError("invalid apiKey", "apiKey", apiKey);
      }
      return apiKey || defaultApiKey$2;
    }
    static getUrl(network, apiKey) {
      logger$C.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
      let host = null;
      switch (network.name) {
        case "homestead":
          host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
          break;
        case "ropsten":
          host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
          break;
        case "rinkeby":
          host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
          break;
        case "goerli":
          host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
          break;
        case "kovan":
          host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
          break;
        default:
          logger$C.throwArgumentError("unsupported network", "network", arguments[0]);
      }
      return host + "?apiKey=" + apiKey;
    }
  };
  var logger$D = new Logger(version$m);
  var defaultApplicationIds = { homestead: "6004bcd10040261633ade990", ropsten: "6004bd4d0040261633ade991", rinkeby: "6004bda20040261633ade994", goerli: "6004bd860040261633ade992" };
  var PocketProvider = class extends UrlJsonRpcProvider {
    constructor(network, apiKey) {
      if (apiKey == null) {
        const n = getStatic(new.target, "getNetwork")(network);
        if (n) {
          const applicationId = defaultApplicationIds[n.name];
          if (applicationId) {
            apiKey = { applicationId, loadBalancer: true };
          }
        }
        if (apiKey == null) {
          logger$D.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
        }
      }
      super(network, apiKey);
    }
    static getApiKey(apiKey) {
      if (apiKey == null) {
        logger$D.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
      }
      const apiKeyObj = { applicationId: null, loadBalancer: false, applicationSecretKey: null };
      if (typeof apiKey === "string") {
        apiKeyObj.applicationId = apiKey;
      } else if (apiKey.applicationSecretKey != null) {
        logger$D.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
        logger$D.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else if (apiKey.applicationId) {
        logger$D.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
        apiKeyObj.applicationId = apiKey.applicationId;
        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
      } else {
        logger$D.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
      }
      return apiKeyObj;
    }
    static getUrl(network, apiKey) {
      let host = null;
      switch (network ? network.name : "unknown") {
        case "homestead":
          host = "eth-mainnet.gateway.pokt.network";
          break;
        case "ropsten":
          host = "eth-ropsten.gateway.pokt.network";
          break;
        case "rinkeby":
          host = "eth-rinkeby.gateway.pokt.network";
          break;
        case "goerli":
          host = "eth-goerli.gateway.pokt.network";
          break;
        default:
          logger$D.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, { argument: "network", value: network });
      }
      let url = null;
      if (apiKey.loadBalancer) {
        url = `https://${host}/v1/lb/${apiKey.applicationId}`;
      } else {
        url = `https://${host}/v1/${apiKey.applicationId}`;
      }
      const connection = { url };
      connection.headers = {};
      if (apiKey.applicationSecretKey != null) {
        connection.user = "";
        connection.password = apiKey.applicationSecretKey;
      }
      return connection;
    }
    isCommunityResource() {
      return this.applicationId === defaultApplicationIds[this.network.name];
    }
  };
  var logger$E = new Logger(version$m);
  var _nextId = 1;
  function buildWeb3LegacyFetcher(provider, sendFunc) {
    return function(method, params) {
      if (method == "eth_sign" && (provider.isMetaMask || provider.isStatus)) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }
      const request = { method, params, id: _nextId++, jsonrpc: "2.0" };
      return new Promise((resolve, reject) => {
        sendFunc(request, function(error, result) {
          if (error) {
            return reject(error);
          }
          if (result.error) {
            const error2 = new Error(result.error.message);
            error2.code = result.error.code;
            error2.data = result.error.data;
            return reject(error2);
          }
          resolve(result.result);
        });
      });
    };
  }
  function buildEip1193Fetcher(provider) {
    return function(method, params) {
      if (params == null) {
        params = [];
      }
      if (method == "eth_sign" && (provider.isMetaMask || provider.isStatus)) {
        method = "personal_sign";
        params = [params[1], params[0]];
      }
      return provider.request({ method, params });
    };
  }
  var Web3Provider = class extends JsonRpcProvider {
    constructor(provider, network) {
      logger$E.checkNew(new.target, Web3Provider);
      if (provider == null) {
        logger$E.throwArgumentError("missing provider", "provider", provider);
      }
      let path = null;
      let jsonRpcFetchFunc = null;
      let subprovider = null;
      if (typeof provider === "function") {
        path = "unknown:";
        jsonRpcFetchFunc = provider;
      } else {
        path = provider.host || provider.path || "";
        if (!path && provider.isMetaMask) {
          path = "metamask";
        }
        subprovider = provider;
        if (provider.request) {
          if (path === "") {
            path = "eip-1193:";
          }
          jsonRpcFetchFunc = buildEip1193Fetcher(provider);
        } else if (provider.sendAsync) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
        } else if (provider.send) {
          jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
        } else {
          logger$E.throwArgumentError("unsupported provider", "provider", provider);
        }
        if (!path) {
          path = "unknown:";
        }
      }
      super(path, network);
      defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
      defineReadOnly(this, "provider", subprovider);
    }
    send(method, params) {
      return this.jsonRpcFetchFunc(method, params);
    }
  };
  var logger$F = new Logger(version$m);
  function getDefaultProvider(network, options) {
    if (network == null) {
      network = "homestead";
    }
    if (typeof network === "string") {
      const match = network.match(/^(ws|http)s?:/i);
      if (match) {
        switch (match[1]) {
          case "http":
            return new JsonRpcProvider(network);
          case "ws":
            return new WebSocketProvider(network);
          default:
            logger$F.throwArgumentError("unsupported URL scheme", "network", network);
        }
      }
    }
    const n = getNetwork(network);
    if (!n || !n._defaultProvider) {
      logger$F.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, { operation: "getDefaultProvider", network });
    }
    return n._defaultProvider({ FallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, PocketProvider, Web3Provider, IpcProvider }, options);
  }
  var index$3 = Object.freeze({ __proto__: null, Provider, BaseProvider, Resolver, UrlJsonRpcProvider, FallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider, JsonRpcSigner, getDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage, Formatter });
  var regexBytes = new RegExp("^bytes([0-9]+)$");
  var regexNumber = new RegExp("^(u?int)([0-9]*)$");
  var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
  var Zeros$1 = "0000000000000000000000000000000000000000000000000000000000000000";
  function _pack(type, value, isArray) {
    switch (type) {
      case "address":
        if (isArray) {
          return zeroPad(value, 32);
        }
        return arrayify(value);
      case "string":
        return toUtf8Bytes(value);
      case "bytes":
        return arrayify(value);
      case "bool":
        value = value ? "0x01" : "0x00";
        if (isArray) {
          return zeroPad(value, 32);
        }
        return arrayify(value);
    }
    let match = type.match(regexNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
        throw new Error("invalid number type - " + type);
      }
      if (isArray) {
        size = 256;
      }
      value = BigNumber.from(value).toTwos(size);
      return zeroPad(value, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
      const size = parseInt(match[1]);
      if (String(size) !== match[1] || size === 0 || size > 32) {
        throw new Error("invalid bytes type - " + type);
      }
      if (arrayify(value).byteLength !== size) {
        throw new Error("invalid value for " + type);
      }
      if (isArray) {
        return arrayify((value + Zeros$1).substring(0, 66));
      }
      return value;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value)) {
      const baseType = match[1];
      const count = parseInt(match[2] || String(value.length));
      if (count != value.length) {
        throw new Error("invalid value for " + type);
      }
      const result = [];
      value.forEach(function(value2) {
        result.push(_pack(baseType, value2, true));
      });
      return concat(result);
    }
    throw new Error("invalid type - " + type);
  }
  function pack$1(types, values) {
    if (types.length != values.length) {
      throw new Error("type/value count mismatch");
    }
    const tight = [];
    types.forEach(function(type, index2) {
      tight.push(_pack(type, values[index2]));
    });
    return hexlify(concat(tight));
  }
  function keccak256$1(types, values) {
    return keccak256(pack$1(types, values));
  }
  function sha256$2(types, values) {
    return sha256$1(pack$1(types, values));
  }
  var version$n = "units/5.1.0";
  var logger$G = new Logger(version$n);
  var names = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];
  function commify(value) {
    const comps = String(value).split(".");
    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
      logger$G.throwArgumentError("invalid value", "value", value);
    }
    let whole = comps[0];
    let negative = "";
    if (whole.substring(0, 1) === "-") {
      negative = "-";
      whole = whole.substring(1);
    }
    while (whole.substring(0, 1) === "0") {
      whole = whole.substring(1);
    }
    if (whole === "") {
      whole = "0";
    }
    let suffix = "";
    if (comps.length === 2) {
      suffix = "." + (comps[1] || "0");
    }
    while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
      suffix = suffix.substring(0, suffix.length - 1);
    }
    const formatted = [];
    while (whole.length) {
      if (whole.length <= 3) {
        formatted.unshift(whole);
        break;
      } else {
        const index2 = whole.length - 3;
        formatted.unshift(whole.substring(index2));
        whole = whole.substring(0, index2);
      }
    }
    return negative + formatted.join(",") + suffix;
  }
  function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
      const index2 = names.indexOf(unitName);
      if (index2 !== -1) {
        unitName = 3 * index2;
      }
    }
    return formatFixed(value, unitName != null ? unitName : 18);
  }
  function parseUnits(value, unitName) {
    if (typeof value !== "string") {
      logger$G.throwArgumentError("value must be a string", "value", value);
    }
    if (typeof unitName === "string") {
      const index2 = names.indexOf(unitName);
      if (index2 !== -1) {
        unitName = 3 * index2;
      }
    }
    return parseFixed(value, unitName != null ? unitName : 18);
  }
  function formatEther(wei) {
    return formatUnits(wei, 18);
  }
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  var utils$1 = Object.freeze({ __proto__: null, AbiCoder, defaultAbiCoder, Fragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP: index, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58: Base58, base64: index$2, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, hashMessage, namehash, isValidName, id, _TypedDataEncoder: TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160: ripemd160$1, sha256: sha256$1, sha512: sha512$1, randomBytes, shuffled, solidityPack: pack$1, solidityKeccak256: keccak256$1, soliditySha256: sha256$2, splitSignature, joinSignature, accessListify, parseTransaction: parse, serializeTransaction: serialize, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed, get SupportedAlgorithm() {
    return SupportedAlgorithm;
  }, get UnicodeNormalizationForm() {
    return UnicodeNormalizationForm;
  }, get Utf8ErrorReason() {
    return Utf8ErrorReason;
  }, Indexed });
  var version$o = "ethers/5.1.4";
  var logger$H = new Logger(version$o);
  var ethers = Object.freeze({ __proto__: null, Signer, Wallet, VoidSigner, getDefaultProvider, providers: index$3, BaseContract, Contract, ContractFactory, BigNumber, FixedNumber, constants: index$1, get errors() {
    return ErrorCode;
  }, logger: logger$H, utils: utils$1, wordlists, version: version$o, Wordlist });
  try {
    const anyGlobal2 = window;
    if (anyGlobal2._ethers == null) {
      anyGlobal2._ethers = ethers;
    }
  } catch (error) {
  }

  // js/hooks/metamask.js
  var web3Provider = new ethers.providers.Web3Provider(window.ethereum);
  var Metamask = {
    mounted() {
      let signer = web3Provider.getSigner();
      window.addEventListener("load", async () => {
        web3Provider.listAccounts().then((accounts) => {
          if (accounts.length > 0) {
            signer = web3Provider.getSigner();
            signer.getAddress().then((address) => {
              this.pushEvent("account-check", { connected: true, current_wallet_address: address });
            });
          } else {
            this.pushEvent("account-check", { connected: false, current_wallet_address: null });
          }
        });
      });
      window.addEventListener(`phx:get-current-wallet`, (e) => {
        signer.getAddress().then((address) => {
          const message = `You are signing this message to sign in with Dora. Nonce: ${e.detail.nonce}`;
          signer.signMessage(message).then((signature2) => {
            this.pushEvent("verify-signature", { public_address: address, signature: signature2 });
            return;
          });
        });
      });
      window.addEventListener(`phx:connect-metamask`, (e) => {
        web3Provider.provider.request({ method: "eth_requestAccounts" }).then((accounts) => {
          if (accounts.length > 0) {
            signer.getAddress().then((address) => {
              this.pushEvent("wallet-connected", { public_address: address });
            });
          }
        }, (error) => console.log(error));
      });
    }
  };

  // js/app.js
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var Hooks2 = {};
  Hooks2.Metamask = Metamask;
  var liveSocket = new LiveSocket("/live", Socket, {
    params: { _csrf_token: csrfToken },
    hooks: Hooks2
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  window.addEventListener("dora:clipcopy", (event) => {
    if ("clipboard" in navigator) {
      const text = event.target.textContent.trim();
      navigator.clipboard.writeText(text);
    } else {
      alert("Sorry, your browser does not support clipboard copy.");
    }
  });
  liveSocket.connect();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vYXNzZXRzL3ZlbmRvci90b3BiYXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2h0bWwvcHJpdi9zdGF0aWMvcGhvZW5peF9odG1sLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC91dGlscy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9wdXNoLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC90aW1lci5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvY2hhbm5lbC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvYWpheC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvbG9uZ3BvbGwuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L3ByZXNlbmNlLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zZXJpYWxpemVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9zb2NrZXQuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2VudHJ5X3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3V0aWxzLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3VwbG9hZF9lbnRyeS5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3VwbG9hZGVyLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2FyaWEuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvaG9va3MuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXIuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvbm9kZV9tb2R1bGVzL21vcnBoZG9tL2Rpc3QvbW9ycGhkb20tZXNtLmpzIiwgIi4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbV9wYXRjaC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9yZW5kZXJlZC5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3X2hvb2suanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvanMuanMiLCAiLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdmlldy5qcyIsICIuLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9saXZlX3NvY2tldC5qcyIsICIuLi8uLi8uLi9hc3NldHMvanMvYXBwLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy92ZW5kb3IvZXRoZXJzLmpzIiwgIi4uLy4uLy4uL2Fzc2V0cy9qcy9ob29rcy9tZXRhbWFzay5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyoqXG4gKiBAbGljZW5zZSBNSVRcbiAqIHRvcGJhciAyLjAuMCwgMjAyMy0wMi0wNFxuICogaHR0cHM6Ly9idXVuZ3V5ZW4uZ2l0aHViLmlvL3RvcGJhclxuICogQ29weXJpZ2h0IChjKSAyMDIxIEJ1dSBOZ3V5ZW5cbiAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB2YXIgdmVuZG9ycyA9IFtcIm1zXCIsIFwibW96XCIsIFwid2Via2l0XCIsIFwib1wiXTtcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPVxuICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArIFwiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8XG4gICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG4gICAgfVxuICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgfSwgdGltZVRvQ2FsbCk7XG4gICAgICAgIGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICB9O1xuICB9KSgpO1xuXG4gIHZhciBjYW52YXMsXG4gICAgY3VycmVudFByb2dyZXNzLFxuICAgIHNob3dpbmcsXG4gICAgcHJvZ3Jlc3NUaW1lcklkID0gbnVsbCxcbiAgICBmYWRlVGltZXJJZCA9IG51bGwsXG4gICAgZGVsYXlUaW1lcklkID0gbnVsbCxcbiAgICBhZGRFdmVudCA9IGZ1bmN0aW9uIChlbGVtLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgICBpZiAoZWxlbS5hZGRFdmVudExpc3RlbmVyKSBlbGVtLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgZWxzZSBpZiAoZWxlbS5hdHRhY2hFdmVudCkgZWxlbS5hdHRhY2hFdmVudChcIm9uXCIgKyB0eXBlLCBoYW5kbGVyKTtcbiAgICAgIGVsc2UgZWxlbVtcIm9uXCIgKyB0eXBlXSA9IGhhbmRsZXI7XG4gICAgfSxcbiAgICBvcHRpb25zID0ge1xuICAgICAgYXV0b1J1bjogdHJ1ZSxcbiAgICAgIGJhclRoaWNrbmVzczogMyxcbiAgICAgIGJhckNvbG9yczoge1xuICAgICAgICAwOiBcInJnYmEoMjYsICAxODgsIDE1NiwgLjkpXCIsXG4gICAgICAgIFwiLjI1XCI6IFwicmdiYSg1MiwgIDE1MiwgMjE5LCAuOSlcIixcbiAgICAgICAgXCIuNTBcIjogXCJyZ2JhKDI0MSwgMTk2LCAxNSwgIC45KVwiLFxuICAgICAgICBcIi43NVwiOiBcInJnYmEoMjMwLCAxMjYsIDM0LCAgLjkpXCIsXG4gICAgICAgIFwiMS4wXCI6IFwicmdiYSgyMTEsIDg0LCAgMCwgICAuOSlcIixcbiAgICAgIH0sXG4gICAgICBzaGFkb3dCbHVyOiAxMCxcbiAgICAgIHNoYWRvd0NvbG9yOiBcInJnYmEoMCwgICAwLCAgIDAsICAgLjYpXCIsXG4gICAgICBjbGFzc05hbWU6IG51bGwsXG4gICAgfSxcbiAgICByZXBhaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gb3B0aW9ucy5iYXJUaGlja25lc3MgKiA1OyAvLyBuZWVkIHNwYWNlIGZvciBzaGFkb3dcblxuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICBjdHguc2hhZG93Qmx1ciA9IG9wdGlvbnMuc2hhZG93Qmx1cjtcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuc2hhZG93Q29sb3I7XG5cbiAgICAgIHZhciBsaW5lR3JhZGllbnQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgY2FudmFzLndpZHRoLCAwKTtcbiAgICAgIGZvciAodmFyIHN0b3AgaW4gb3B0aW9ucy5iYXJDb2xvcnMpXG4gICAgICAgIGxpbmVHcmFkaWVudC5hZGRDb2xvclN0b3Aoc3RvcCwgb3B0aW9ucy5iYXJDb2xvcnNbc3RvcF0pO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbygwLCBvcHRpb25zLmJhclRoaWNrbmVzcyAvIDIpO1xuICAgICAgY3R4LmxpbmVUbyhcbiAgICAgICAgTWF0aC5jZWlsKGN1cnJlbnRQcm9ncmVzcyAqIGNhbnZhcy53aWR0aCksXG4gICAgICAgIG9wdGlvbnMuYmFyVGhpY2tuZXNzIC8gMlxuICAgICAgKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxpbmVHcmFkaWVudDtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9LFxuICAgIGNyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICB2YXIgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgICBzdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICAgIHN0eWxlLnRvcCA9IHN0eWxlLmxlZnQgPSBzdHlsZS5yaWdodCA9IHN0eWxlLm1hcmdpbiA9IHN0eWxlLnBhZGRpbmcgPSAwO1xuICAgICAgc3R5bGUuekluZGV4ID0gMTAwMDAxO1xuICAgICAgc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSBjYW52YXMuY2xhc3NMaXN0LmFkZChvcHRpb25zLmNsYXNzTmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICBhZGRFdmVudCh3aW5kb3csIFwicmVzaXplXCIsIHJlcGFpbnQpO1xuICAgIH0sXG4gICAgdG9wYmFyID0ge1xuICAgICAgY29uZmlnOiBmdW5jdGlvbiAob3B0cykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0cylcbiAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSBvcHRpb25zW2tleV0gPSBvcHRzW2tleV07XG4gICAgICB9LFxuICAgICAgc2hvdzogZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgIGlmIChzaG93aW5nKSByZXR1cm47XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgIGlmIChkZWxheVRpbWVySWQpIHJldHVybjtcbiAgICAgICAgICBkZWxheVRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHRvcGJhci5zaG93KCksIGRlbGF5KTtcbiAgICAgICAgfSBlbHNlICB7XG4gICAgICAgICAgc2hvd2luZyA9IHRydWU7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lcklkICE9PSBudWxsKSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoZmFkZVRpbWVySWQpO1xuICAgICAgICAgIGlmICghY2FudmFzKSBjcmVhdGVDYW52YXMoKTtcbiAgICAgICAgICBjYW52YXMuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgdG9wYmFyLnByb2dyZXNzKDApO1xuICAgICAgICAgIGlmIChvcHRpb25zLmF1dG9SdW4pIHtcbiAgICAgICAgICAgIChmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICAgICAgICBwcm9ncmVzc1RpbWVySWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgICB0b3BiYXIucHJvZ3Jlc3MoXG4gICAgICAgICAgICAgICAgXCIrXCIgKyAwLjA1ICogTWF0aC5wb3coMSAtIE1hdGguc3FydChjdXJyZW50UHJvZ3Jlc3MpLCAyKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm9ncmVzczogZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBjdXJyZW50UHJvZ3Jlc3M7XG4gICAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0byA9XG4gICAgICAgICAgICAodG8uaW5kZXhPZihcIitcIikgPj0gMCB8fCB0by5pbmRleE9mKFwiLVwiKSA+PSAwXG4gICAgICAgICAgICAgID8gY3VycmVudFByb2dyZXNzXG4gICAgICAgICAgICAgIDogMCkgKyBwYXJzZUZsb2F0KHRvKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UHJvZ3Jlc3MgPSB0byA+IDEgPyAxIDogdG87XG4gICAgICAgIHJlcGFpbnQoKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9ncmVzcztcbiAgICAgIH0sXG4gICAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChkZWxheVRpbWVySWQpO1xuICAgICAgICBkZWxheVRpbWVySWQgPSBudWxsO1xuICAgICAgICBpZiAoIXNob3dpbmcpIHJldHVybjtcbiAgICAgICAgc2hvd2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAocHJvZ3Jlc3NUaW1lcklkICE9IG51bGwpIHtcbiAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUocHJvZ3Jlc3NUaW1lcklkKTtcbiAgICAgICAgICBwcm9ncmVzc1RpbWVySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIChmdW5jdGlvbiBsb29wKCkge1xuICAgICAgICAgIGlmICh0b3BiYXIucHJvZ3Jlc3MoXCIrLjFcIikgPj0gMSkge1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlLm9wYWNpdHkgLT0gMC4wNTtcbiAgICAgICAgICAgIGlmIChjYW52YXMuc3R5bGUub3BhY2l0eSA8PSAwLjA1KSB7XG4gICAgICAgICAgICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgIGZhZGVUaW1lcklkID0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmYWRlVGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgIH0pKCk7XG4gICAgICB9LFxuICAgIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0b3BiYXI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRvcGJhcjtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRvcGJhciA9IHRvcGJhcjtcbiAgfVxufS5jYWxsKHRoaXMsIHdpbmRvdywgZG9jdW1lbnQpKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgUG9seWZpbGxFdmVudCA9IGV2ZW50Q29uc3RydWN0b3IoKTtcblxuICBmdW5jdGlvbiBldmVudENvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG4gICAgLy8gSUU8PTkgU3VwcG9ydFxuICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7YnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZH07XG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG4gICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcbiAgICByZXR1cm4gQ3VzdG9tRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEhpZGRlbklucHV0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgIGlucHV0Lm5hbWUgPSBuYW1lO1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZWxlbWVudCwgdGFyZ2V0TW9kaWZpZXJLZXkpIHtcbiAgICB2YXIgdG8gPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIiksXG4gICAgICAgIG1ldGhvZCA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfbWV0aG9kXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpLFxuICAgICAgICBjc3JmID0gYnVpbGRIaWRkZW5JbnB1dChcIl9jc3JmX3Rva2VuXCIsIGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3JmXCIpKSxcbiAgICAgICAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgICBzdWJtaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgIGlmICh0YXJnZXQpIGZvcm0udGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGVsc2UgaWYgKHRhcmdldE1vZGlmaWVyS2V5KSBmb3JtLnRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbiAgICBmb3JtLmFwcGVuZENoaWxkKGNzcmYpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQobWV0aG9kKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgLy8gSW5zZXJ0IGEgYnV0dG9uIGFuZCBjbGljayBpdCBpbnN0ZWFkIG9mIHVzaW5nIGBmb3JtLnN1Ym1pdGBcbiAgICAvLyBiZWNhdXNlIHRoZSBgc3VibWl0YCBmdW5jdGlvbiBkb2VzIG5vdCBlbWl0IGEgYHN1Ym1pdGAgZXZlbnQuXG4gICAgc3VibWl0LnR5cGUgPSBcInN1Ym1pdFwiO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0KTtcbiAgICBzdWJtaXQuY2xpY2soKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBwaG9lbml4TGlua0V2ZW50ID0gbmV3IFBvbHlmaWxsRXZlbnQoJ3Bob2VuaXgubGluay5jbGljaycsIHtcbiAgICAgICAgXCJidWJibGVzXCI6IHRydWUsIFwiY2FuY2VsYWJsZVwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFlbGVtZW50LmRpc3BhdGNoRXZlbnQocGhvZW5peExpbmtFdmVudCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGVsZW1lbnQsIGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIiwgIi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsdWUpID0+IHtcbiAgaWYodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpe1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIGxldCBjbG9zdXJlID0gZnVuY3Rpb24gKCl7IHJldHVybiB2YWx1ZSB9XG4gICAgcmV0dXJuIGNsb3N1cmVcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBnbG9iYWxTZWxmID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogbnVsbFxuZXhwb3J0IGNvbnN0IHBoeFdpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBudWxsXG5leHBvcnQgY29uc3QgZ2xvYmFsID0gZ2xvYmFsU2VsZiB8fCBwaHhXaW5kb3cgfHwgZ2xvYmFsXG5leHBvcnQgY29uc3QgREVGQVVMVF9WU04gPSBcIjIuMC4wXCJcbmV4cG9ydCBjb25zdCBTT0NLRVRfU1RBVEVTID0ge2Nvbm5lY3Rpbmc6IDAsIG9wZW46IDEsIGNsb3Npbmc6IDIsIGNsb3NlZDogM31cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMFxuZXhwb3J0IGNvbnN0IFdTX0NMT1NFX05PUk1BTCA9IDEwMDBcbmV4cG9ydCBjb25zdCBDSEFOTkVMX1NUQVRFUyA9IHtcbiAgY2xvc2VkOiBcImNsb3NlZFwiLFxuICBlcnJvcmVkOiBcImVycm9yZWRcIixcbiAgam9pbmVkOiBcImpvaW5lZFwiLFxuICBqb2luaW5nOiBcImpvaW5pbmdcIixcbiAgbGVhdmluZzogXCJsZWF2aW5nXCIsXG59XG5leHBvcnQgY29uc3QgQ0hBTk5FTF9FVkVOVFMgPSB7XG4gIGNsb3NlOiBcInBoeF9jbG9zZVwiLFxuICBlcnJvcjogXCJwaHhfZXJyb3JcIixcbiAgam9pbjogXCJwaHhfam9pblwiLFxuICByZXBseTogXCJwaHhfcmVwbHlcIixcbiAgbGVhdmU6IFwicGh4X2xlYXZlXCJcbn1cblxuZXhwb3J0IGNvbnN0IFRSQU5TUE9SVFMgPSB7XG4gIGxvbmdwb2xsOiBcImxvbmdwb2xsXCIsXG4gIHdlYnNvY2tldDogXCJ3ZWJzb2NrZXRcIlxufVxuZXhwb3J0IGNvbnN0IFhIUl9TVEFURVMgPSB7XG4gIGNvbXBsZXRlOiA0XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHVzaFxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIC0gVGhlIENoYW5uZWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCAtIFRoZSBldmVudCwgZm9yIGV4YW1wbGUgYFwicGh4X2pvaW5cImBcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkIC0gVGhlIHBheWxvYWQsIGZvciBleGFtcGxlIGB7dXNlcl9pZDogMTIzfWBcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lb3V0IC0gVGhlIHB1c2ggdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVzaCB7XG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIGV2ZW50LCBwYXlsb2FkLCB0aW1lb3V0KXtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gICAgdGhpcy5ldmVudCA9IGV2ZW50XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZCB8fCBmdW5jdGlvbiAoKXsgcmV0dXJuIHt9IH1cbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5yZWNIb29rcyA9IFtdXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dFxuICAgKi9cbiAgcmVzZW5kKHRpbWVvdXQpe1xuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXRcbiAgICB0aGlzLnJlc2V0KClcbiAgICB0aGlzLnNlbmQoKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBzZW5kKCl7XG4gICAgaWYodGhpcy5oYXNSZWNlaXZlZChcInRpbWVvdXRcIikpeyByZXR1cm4gfVxuICAgIHRoaXMuc3RhcnRUaW1lb3V0KClcbiAgICB0aGlzLnNlbnQgPSB0cnVlXG4gICAgdGhpcy5jaGFubmVsLnNvY2tldC5wdXNoKHtcbiAgICAgIHRvcGljOiB0aGlzLmNoYW5uZWwudG9waWMsXG4gICAgICBldmVudDogdGhpcy5ldmVudCxcbiAgICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCgpLFxuICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgIGpvaW5fcmVmOiB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHN0YXR1c1xuICAgKiBAcGFyYW0geyp9IGNhbGxiYWNrXG4gICAqL1xuICByZWNlaXZlKHN0YXR1cywgY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoc3RhdHVzKSl7XG4gICAgICBjYWxsYmFjayh0aGlzLnJlY2VpdmVkUmVzcC5yZXNwb25zZSlcbiAgICB9XG5cbiAgICB0aGlzLnJlY0hvb2tzLnB1c2goe3N0YXR1cywgY2FsbGJhY2t9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlc2V0KCl7XG4gICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgdGhpcy5yZWYgPSBudWxsXG4gICAgdGhpcy5yZWZFdmVudCA9IG51bGxcbiAgICB0aGlzLnJlY2VpdmVkUmVzcCA9IG51bGxcbiAgICB0aGlzLnNlbnQgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtYXRjaFJlY2VpdmUoe3N0YXR1cywgcmVzcG9uc2UsIF9yZWZ9KXtcbiAgICB0aGlzLnJlY0hvb2tzLmZpbHRlcihoID0+IGguc3RhdHVzID09PSBzdGF0dXMpXG4gICAgICAuZm9yRWFjaChoID0+IGguY2FsbGJhY2socmVzcG9uc2UpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxSZWZFdmVudCgpe1xuICAgIGlmKCF0aGlzLnJlZkV2ZW50KXsgcmV0dXJuIH1cbiAgICB0aGlzLmNoYW5uZWwub2ZmKHRoaXMucmVmRXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbmNlbFRpbWVvdXQoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0VGltZXIpXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXJ0VGltZW91dCgpe1xuICAgIGlmKHRoaXMudGltZW91dFRpbWVyKXsgdGhpcy5jYW5jZWxUaW1lb3V0KCkgfVxuICAgIHRoaXMucmVmID0gdGhpcy5jaGFubmVsLnNvY2tldC5tYWtlUmVmKClcbiAgICB0aGlzLnJlZkV2ZW50ID0gdGhpcy5jaGFubmVsLnJlcGx5RXZlbnROYW1lKHRoaXMucmVmKVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKHRoaXMucmVmRXZlbnQsIHBheWxvYWQgPT4ge1xuICAgICAgdGhpcy5jYW5jZWxSZWZFdmVudCgpXG4gICAgICB0aGlzLmNhbmNlbFRpbWVvdXQoKVxuICAgICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBwYXlsb2FkXG4gICAgICB0aGlzLm1hdGNoUmVjZWl2ZShwYXlsb2FkKVxuICAgIH0pXG5cbiAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyKFwidGltZW91dFwiLCB7fSlcbiAgICB9LCB0aGlzLnRpbWVvdXQpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhc1JlY2VpdmVkKHN0YXR1cyl7XG4gICAgcmV0dXJuIHRoaXMucmVjZWl2ZWRSZXNwICYmIHRoaXMucmVjZWl2ZWRSZXNwLnN0YXR1cyA9PT0gc3RhdHVzXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXIoc3RhdHVzLCByZXNwb25zZSl7XG4gICAgdGhpcy5jaGFubmVsLnRyaWdnZXIodGhpcy5yZWZFdmVudCwge3N0YXR1cywgcmVzcG9uc2V9KVxuICB9XG59XG4iLCAiLyoqXG4gKlxuICogQ3JlYXRlcyBhIHRpbWVyIHRoYXQgYWNjZXB0cyBhIGB0aW1lckNhbGNgIGZ1bmN0aW9uIHRvIHBlcmZvcm1cbiAqIGNhbGN1bGF0ZWQgdGltZW91dCByZXRyaWVzLCBzdWNoIGFzIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gKlxuICogQGV4YW1wbGVcbiAqIGxldCByZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLmNvbm5lY3QoKSwgZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDUwMDAsIDEwMDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9KVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgNTAwMFxuICogcmVjb25uZWN0VGltZXIucmVzZXQoKVxuICogcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0aW1lckNhbGNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgdGltZXJDYWxjKXtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsY1xuICAgIHRoaXMudGltZXIgPSBudWxsXG4gICAgdGhpcy50cmllcyA9IDBcbiAgfVxuXG4gIHJlc2V0KCl7XG4gICAgdGhpcy50cmllcyA9IDBcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGFueSBwcmV2aW91cyBzY2hlZHVsZVRpbWVvdXQgYW5kIHNjaGVkdWxlcyBjYWxsYmFja1xuICAgKi9cbiAgc2NoZWR1bGVUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG5cbiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyaWVzID0gdGhpcy50cmllcyArIDFcbiAgICAgIHRoaXMuY2FsbGJhY2soKVxuICAgIH0sIHRoaXMudGltZXJDYWxjKHRoaXMudHJpZXMgKyAxKSlcbiAgfVxufVxuIiwgImltcG9ydCB7Y2xvc3VyZX0gZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHtcbiAgQ0hBTk5FTF9FVkVOVFMsXG4gIENIQU5ORUxfU1RBVEVTLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgUHVzaCBmcm9tIFwiLi9wdXNoXCJcbmltcG9ydCBUaW1lciBmcm9tIFwiLi90aW1lclwiXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gcGFyYW1zXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYW5uZWwge1xuICBjb25zdHJ1Y3Rvcih0b3BpYywgcGFyYW1zLCBzb2NrZXQpe1xuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5jbG9zZWRcbiAgICB0aGlzLnRvcGljID0gdG9waWNcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zIHx8IHt9KVxuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgdGhpcy5iaW5kaW5ncyA9IFtdXG4gICAgdGhpcy5iaW5kaW5nUmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IHRoaXMuc29ja2V0LnRpbWVvdXRcbiAgICB0aGlzLmpvaW5lZE9uY2UgPSBmYWxzZVxuICAgIHRoaXMuam9pblB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5qb2luLCB0aGlzLnBhcmFtcywgdGhpcy50aW1lb3V0KVxuICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMgPSBbXVxuXG4gICAgdGhpcy5yZWpvaW5UaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSwgdGhpcy5zb2NrZXQucmVqb2luQWZ0ZXJNcylcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uRXJyb3IoKCkgPT4gdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpKSlcbiAgICB0aGlzLnN0YXRlQ2hhbmdlUmVmcy5wdXNoKHRoaXMuc29ja2V0Lm9uT3BlbigoKSA9PiB7XG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuaXNFcnJvcmVkKCkpeyB0aGlzLnJlam9pbigpIH1cbiAgICB9KVxuICAgIClcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuam9pbmVkXG4gICAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5mb3JFYWNoKHB1c2hFdmVudCA9PiBwdXNoRXZlbnQuc2VuZCgpKVxuICAgICAgdGhpcy5wdXNoQnVmZmVyID0gW11cbiAgICB9KVxuICAgIHRoaXMuam9pblB1c2gucmVjZWl2ZShcImVycm9yXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uQ2xvc2UoKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgY2xvc2UgJHt0aGlzLnRvcGljfSAke3RoaXMuam9pblJlZigpfWApXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgICB0aGlzLnNvY2tldC5yZW1vdmUodGhpcylcbiAgICB9KVxuICAgIHRoaXMub25FcnJvcihyZWFzb24gPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGVycm9yICR7dGhpcy50b3BpY31gLCByZWFzb24pXG4gICAgICBpZih0aGlzLmlzSm9pbmluZygpKXsgdGhpcy5qb2luUHVzaC5yZXNldCgpIH1cbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGB0aW1lb3V0ICR7dGhpcy50b3BpY30gKCR7dGhpcy5qb2luUmVmKCl9KWAsIHRoaXMuam9pblB1c2gudGltZW91dClcbiAgICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRoaXMudGltZW91dClcbiAgICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5lcnJvcmVkXG4gICAgICB0aGlzLmpvaW5QdXNoLnJlc2V0KClcbiAgICAgIGlmKHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkpeyB0aGlzLnJlam9pblRpbWVyLnNjaGVkdWxlVGltZW91dCgpIH1cbiAgICB9KVxuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMucmVwbHksIChwYXlsb2FkLCByZWYpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcih0aGlzLnJlcGx5RXZlbnROYW1lKHJlZiksIHBheWxvYWQpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBKb2luIHRoZSBjaGFubmVsXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGpvaW4odGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgaWYodGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInRyaWVkIHRvIGpvaW4gbXVsdGlwbGUgdGltZXMuICdqb2luJyBjYW4gb25seSBiZSBjYWxsZWQgYSBzaW5nbGUgdGltZSBwZXIgY2hhbm5lbCBpbnN0YW5jZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgICB0aGlzLmpvaW5lZE9uY2UgPSB0cnVlXG4gICAgICB0aGlzLnJlam9pbigpXG4gICAgICByZXR1cm4gdGhpcy5qb2luUHVzaFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIGludG8gY2hhbm5lbCBjbG9zZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgY2FsbGJhY2spXG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgZXJyb3JzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICByZXR1cm4gdGhpcy5vbihDSEFOTkVMX0VWRU5UUy5lcnJvciwgcmVhc29uID0+IGNhbGxiYWNrKHJlYXNvbikpXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyBvbiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBTdWJzY3JpcHRpb24gcmV0dXJucyBhIHJlZiBjb3VudGVyLCB3aGljaCBjYW4gYmUgdXNlZCBsYXRlciB0b1xuICAgKiB1bnN1YnNjcmliZSB0aGUgZXhhY3QgZXZlbnQgbGlzdGVuZXJcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY29uc3QgcmVmMiA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19vdGhlcl9zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKiAvLyBTaW5jZSB1bnN1YnNjcmlwdGlvbiwgZG9fc3R1ZmYgd29uJ3QgZmlyZSxcbiAgICogLy8gd2hpbGUgZG9fb3RoZXJfc3R1ZmYgd2lsbCBrZWVwIGZpcmluZyBvbiB0aGUgXCJldmVudFwiXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKiBAcmV0dXJucyB7aW50ZWdlcn0gcmVmXG4gICAqL1xuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLmJpbmRpbmdSZWYrK1xuICAgIHRoaXMuYmluZGluZ3MucHVzaCh7ZXZlbnQsIHJlZiwgY2FsbGJhY2t9KVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgb2ZmIG9mIGNoYW5uZWwgZXZlbnRzXG4gICAqXG4gICAqIFVzZSB0aGUgcmVmIHJldHVybmVkIGZyb20gYSBjaGFubmVsLm9uKCkgdG8gdW5zdWJzY3JpYmUgb25lXG4gICAqIGhhbmRsZXIsIG9yIHBhc3Mgbm90aGluZyBmb3IgdGhlIHJlZiB0byB1bnN1YnNjcmliZSBhbGxcbiAgICogaGFuZGxlcnMgZm9yIHRoZSBnaXZlbiBldmVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gVW5zdWJzY3JpYmUgdGhlIGRvX3N0dWZmIGhhbmRsZXJcbiAgICogY29uc3QgcmVmMSA9IGNoYW5uZWwub24oXCJldmVudFwiLCBkb19zdHVmZilcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiLCByZWYxKVxuICAgKlxuICAgKiAvLyBVbnN1YnNjcmliZSBhbGwgaGFuZGxlcnMgZnJvbSBldmVudFxuICAgKiBjaGFubmVsLm9mZihcImV2ZW50XCIpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb2ZmKGV2ZW50LCByZWYpe1xuICAgIHRoaXMuYmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcigoYmluZCkgPT4ge1xuICAgICAgcmV0dXJuICEoYmluZC5ldmVudCA9PT0gZXZlbnQgJiYgKHR5cGVvZiByZWYgPT09IFwidW5kZWZpbmVkXCIgfHwgcmVmID09PSBiaW5kLnJlZikpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuUHVzaCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSAmJiB0aGlzLmlzSm9pbmVkKCkgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UgYGV2ZW50YCB0byBwaG9lbml4IHdpdGggdGhlIHBheWxvYWQgYHBheWxvYWRgLlxuICAgKiBQaG9lbml4IHJlY2VpdmVzIHRoaXMgaW4gdGhlIGBoYW5kbGVfaW4oZXZlbnQsIHBheWxvYWQsIHNvY2tldClgXG4gICAqIGZ1bmN0aW9uLiBpZiBwaG9lbml4IHJlcGxpZXMgb3IgaXQgdGltZXMgb3V0IChkZWZhdWx0IDEwMDAwbXMpLFxuICAgKiB0aGVuIG9wdGlvbmFsbHkgdGhlIHJlcGx5IGNhbiBiZSByZWNlaXZlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY2hhbm5lbC5wdXNoKFwiZXZlbnRcIilcbiAgICogICAucmVjZWl2ZShcIm9rXCIsIHBheWxvYWQgPT4gY29uc29sZS5sb2coXCJwaG9lbml4IHJlcGxpZWQ6XCIsIHBheWxvYWQpKVxuICAgKiAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgZXJyID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCBlcnJvcmVkXCIsIGVycikpXG4gICAqICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IGNvbnNvbGUubG9nKFwidGltZWQgb3V0IHB1c2hpbmdcIikpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXRdXG4gICAqIEByZXR1cm5zIHtQdXNofVxuICAgKi9cbiAgcHVzaChldmVudCwgcGF5bG9hZCwgdGltZW91dCA9IHRoaXMudGltZW91dCl7XG4gICAgcGF5bG9hZCA9IHBheWxvYWQgfHwge31cbiAgICBpZighdGhpcy5qb2luZWRPbmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJpZWQgdG8gcHVzaCAnJHtldmVudH0nIHRvICcke3RoaXMudG9waWN9JyBiZWZvcmUgam9pbmluZy4gVXNlIGNoYW5uZWwuam9pbigpIGJlZm9yZSBwdXNoaW5nIGV2ZW50c2ApXG4gICAgfVxuICAgIGxldCBwdXNoRXZlbnQgPSBuZXcgUHVzaCh0aGlzLCBldmVudCwgZnVuY3Rpb24gKCl7IHJldHVybiBwYXlsb2FkIH0sIHRpbWVvdXQpXG4gICAgaWYodGhpcy5jYW5QdXNoKCkpe1xuICAgICAgcHVzaEV2ZW50LnNlbmQoKVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoRXZlbnQuc3RhcnRUaW1lb3V0KClcbiAgICAgIHRoaXMucHVzaEJ1ZmZlci5wdXNoKHB1c2hFdmVudClcbiAgICB9XG5cbiAgICByZXR1cm4gcHVzaEV2ZW50XG4gIH1cblxuICAvKiogTGVhdmVzIHRoZSBjaGFubmVsXG4gICAqXG4gICAqIFVuc3Vic2NyaWJlcyBmcm9tIHNlcnZlciBldmVudHMsIGFuZFxuICAgKiBpbnN0cnVjdHMgY2hhbm5lbCB0byB0ZXJtaW5hdGUgb24gc2VydmVyXG4gICAqXG4gICAqIFRyaWdnZXJzIG9uQ2xvc2UoKSBob29rc1xuICAgKlxuICAgKiBUbyByZWNlaXZlIGxlYXZlIGFja25vd2xlZGdlbWVudHMsIHVzZSB0aGUgYHJlY2VpdmVgXG4gICAqIGhvb2sgdG8gYmluZCB0byB0aGUgc2VydmVyIGFjaywgaWU6XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwubGVhdmUoKS5yZWNlaXZlKFwib2tcIiwgKCkgPT4gYWxlcnQoXCJsZWZ0IVwiKSApXG4gICAqXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gdGltZW91dFxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIGxlYXZlKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgIHRoaXMuam9pblB1c2guY2FuY2VsVGltZW91dCgpXG5cbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMubGVhdmluZ1xuICAgIGxldCBvbkNsb3NlID0gKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGxlYXZlICR7dGhpcy50b3BpY31gKVxuICAgICAgdGhpcy50cmlnZ2VyKENIQU5ORUxfRVZFTlRTLmNsb3NlLCBcImxlYXZlXCIpXG4gICAgfVxuICAgIGxldCBsZWF2ZVB1c2ggPSBuZXcgUHVzaCh0aGlzLCBDSEFOTkVMX0VWRU5UUy5sZWF2ZSwgY2xvc3VyZSh7fSksIHRpbWVvdXQpXG4gICAgbGVhdmVQdXNoLnJlY2VpdmUoXCJva1wiLCAoKSA9PiBvbkNsb3NlKCkpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgIGxlYXZlUHVzaC5zZW5kKClcbiAgICBpZighdGhpcy5jYW5QdXNoKCkpeyBsZWF2ZVB1c2gudHJpZ2dlcihcIm9rXCIsIHt9KSB9XG5cbiAgICByZXR1cm4gbGVhdmVQdXNoXG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGFibGUgbWVzc2FnZSBob29rXG4gICAqXG4gICAqIFJlY2VpdmVzIGFsbCBldmVudHMgZm9yIHNwZWNpYWxpemVkIG1lc3NhZ2UgaGFuZGxpbmdcbiAgICogYmVmb3JlIGRpc3BhdGNoaW5nIHRvIHRoZSBjaGFubmVsIGNhbGxiYWNrcy5cbiAgICpcbiAgICogTXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gcmVmXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBvbk1lc3NhZ2UoX2V2ZW50LCBwYXlsb2FkLCBfcmVmKXsgcmV0dXJuIHBheWxvYWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmKXtcbiAgICBpZih0aGlzLnRvcGljICE9PSB0b3BpYyl7IHJldHVybiBmYWxzZSB9XG5cbiAgICBpZihqb2luUmVmICYmIGpvaW5SZWYgIT09IHRoaXMuam9pblJlZigpKXtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIFwiZHJvcHBpbmcgb3V0ZGF0ZWQgbWVzc2FnZVwiLCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luUmVmfSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgam9pblJlZigpeyByZXR1cm4gdGhpcy5qb2luUHVzaC5yZWYgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuaXNMZWF2aW5nKCkpeyByZXR1cm4gfVxuICAgIHRoaXMuc29ja2V0LmxlYXZlT3BlblRvcGljKHRoaXMudG9waWMpXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5pbmdcbiAgICB0aGlzLmpvaW5QdXNoLnJlc2VuZCh0aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpe1xuICAgIGxldCBoYW5kbGVkUGF5bG9hZCA9IHRoaXMub25NZXNzYWdlKGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5SZWYpXG4gICAgaWYocGF5bG9hZCAmJiAhaGFuZGxlZFBheWxvYWQpeyB0aHJvdyBuZXcgRXJyb3IoXCJjaGFubmVsIG9uTWVzc2FnZSBjYWxsYmFja3MgbXVzdCByZXR1cm4gdGhlIHBheWxvYWQsIG1vZGlmaWVkIG9yIHVubW9kaWZpZWRcIikgfVxuXG4gICAgbGV0IGV2ZW50QmluZGluZ3MgPSB0aGlzLmJpbmRpbmdzLmZpbHRlcihiaW5kID0+IGJpbmQuZXZlbnQgPT09IGV2ZW50KVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGV2ZW50QmluZGluZ3MubGVuZ3RoOyBpKyspe1xuICAgICAgbGV0IGJpbmQgPSBldmVudEJpbmRpbmdzW2ldXG4gICAgICBiaW5kLmNhbGxiYWNrKGhhbmRsZWRQYXlsb2FkLCByZWYsIGpvaW5SZWYgfHwgdGhpcy5qb2luUmVmKCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXBseUV2ZW50TmFtZShyZWYpeyByZXR1cm4gYGNoYW5fcmVwbHlfJHtyZWZ9YCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Nsb3NlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzRXJyb3JlZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5lZCgpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmVkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzSm9pbmluZygpeyByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ0hBTk5FTF9TVEFURVMuam9pbmluZyB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0xlYXZpbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmxlYXZpbmcgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgWEhSX1NUQVRFU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBamF4IHtcblxuICBzdGF0aWMgcmVxdWVzdChtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIGlmKGdsb2JhbC5YRG9tYWluUmVxdWVzdCl7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YRG9tYWluUmVxdWVzdCgpIC8vIElFOCwgSUU5XG4gICAgICByZXR1cm4gdGhpcy54ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KCkgLy8gSUU3KywgRmlyZWZveCwgQ2hyb21lLCBPcGVyYSwgU2FmYXJpXG4gICAgICByZXR1cm4gdGhpcy54aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB4ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQpXG4gICAgcmVxLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSlcbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICAvLyBXb3JrIGFyb3VuZCBidWcgaW4gSUU5IHRoYXQgcmVxdWlyZXMgYW4gYXR0YWNoZWQgb25wcm9ncmVzcyBoYW5kbGVyXG4gICAgcmVxLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gICAgcmV0dXJuIHJlcVxuICB9XG5cbiAgc3RhdGljIHhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spe1xuICAgIHJlcS5vcGVuKG1ldGhvZCwgZW5kUG9pbnQsIHRydWUpXG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgYWNjZXB0KVxuICAgIHJlcS5vbmVycm9yID0gKCkgPT4gY2FsbGJhY2sgJiYgY2FsbGJhY2sobnVsbClcbiAgICByZXEub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYocmVxLnJlYWR5U3RhdGUgPT09IFhIUl9TVEFURVMuY29tcGxldGUgJiYgY2FsbGJhY2spe1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgICBjYWxsYmFjayhyZXNwb25zZSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYob250aW1lb3V0KXsgcmVxLm9udGltZW91dCA9IG9udGltZW91dCB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUpTT04ocmVzcCl7XG4gICAgaWYoIXJlc3AgfHwgcmVzcCA9PT0gXCJcIil7IHJldHVybiBudWxsIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXNwKVxuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcImZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlXCIsIHJlc3ApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBzZXJpYWxpemUob2JqLCBwYXJlbnRLZXkpe1xuICAgIGxldCBxdWVyeVN0ciA9IFtdXG4gICAgZm9yKHZhciBrZXkgaW4gb2JqKXtcbiAgICAgIGlmKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKXsgY29udGludWUgfVxuICAgICAgbGV0IHBhcmFtS2V5ID0gcGFyZW50S2V5ID8gYCR7cGFyZW50S2V5fVske2tleX1dYCA6IGtleVxuICAgICAgbGV0IHBhcmFtVmFsID0gb2JqW2tleV1cbiAgICAgIGlmKHR5cGVvZiBwYXJhbVZhbCA9PT0gXCJvYmplY3RcIil7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2godGhpcy5zZXJpYWxpemUocGFyYW1WYWwsIHBhcmFtS2V5KSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5U3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtS2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtVmFsKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5U3RyLmpvaW4oXCImXCIpXG4gIH1cblxuICBzdGF0aWMgYXBwZW5kUGFyYW1zKHVybCwgcGFyYW1zKXtcbiAgICBpZihPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCA9PT0gMCl7IHJldHVybiB1cmwgfVxuXG4gICAgbGV0IHByZWZpeCA9IHVybC5tYXRjaCgvXFw/LykgPyBcIiZcIiA6IFwiP1wiXG4gICAgcmV0dXJuIGAke3VybH0ke3ByZWZpeH0ke3RoaXMuc2VyaWFsaXplKHBhcmFtcyl9YFxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9uZ1BvbGwge1xuXG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50KXtcbiAgICB0aGlzLmVuZFBvaW50ID0gbnVsbFxuICAgIHRoaXMudG9rZW4gPSBudWxsXG4gICAgdGhpcy5za2lwSGVhcnRiZWF0ID0gdHJ1ZVxuICAgIHRoaXMucmVxcyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IGZhbHNlXG4gICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBudWxsXG4gICAgdGhpcy5jdXJyZW50QmF0Y2hUaW1lciA9IG51bGxcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICB0aGlzLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMucG9sbEVuZHBvaW50ID0gdGhpcy5ub3JtYWxpemVFbmRwb2ludChlbmRQb2ludClcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgICB0aGlzLnBvbGwoKVxuICB9XG5cbiAgbm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpe1xuICAgIHJldHVybiAoZW5kUG9pbnRcbiAgICAgIC5yZXBsYWNlKFwid3M6Ly9cIiwgXCJodHRwOi8vXCIpXG4gICAgICAucmVwbGFjZShcIndzczovL1wiLCBcImh0dHBzOi8vXCIpXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKFwiKC4qKVxcL1wiICsgVFJBTlNQT1JUUy53ZWJzb2NrZXQpLCBcIiQxL1wiICsgVFJBTlNQT1JUUy5sb25ncG9sbCkpXG4gIH1cblxuICBlbmRwb2ludFVSTCgpe1xuICAgIHJldHVybiBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLnBvbGxFbmRwb2ludCwge3Rva2VuOiB0aGlzLnRva2VufSlcbiAgfVxuXG4gIGNsb3NlQW5kUmV0cnkoY29kZSwgcmVhc29uLCB3YXNDbGVhbil7XG4gICAgdGhpcy5jbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZ1xuICB9XG5cbiAgb250aW1lb3V0KCl7XG4gICAgdGhpcy5vbmVycm9yKFwidGltZW91dFwiKVxuICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgxMDA1LCBcInRpbWVvdXRcIiwgZmFsc2UpXG4gIH1cblxuICBpc0FjdGl2ZSgpeyByZXR1cm4gdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLm9wZW4gfHwgdGhpcy5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmcgfVxuXG4gIHBvbGwoKXtcbiAgICB0aGlzLmFqYXgoXCJHRVRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIG51bGwsICgpID0+IHRoaXMub250aW1lb3V0KCksIHJlc3AgPT4ge1xuICAgICAgaWYocmVzcCl7XG4gICAgICAgIHZhciB7c3RhdHVzLCB0b2tlbiwgbWVzc2FnZXN9ID0gcmVzcFxuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1cyA9IDBcbiAgICAgIH1cblxuICAgICAgc3dpdGNoKHN0YXR1cyl7XG4gICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgIG1lc3NhZ2VzLmZvckVhY2gobXNnID0+IHtcbiAgICAgICAgICAgIC8vIFRhc2tzIGFyZSB3aGF0IHRoaW5ncyBsaWtlIGV2ZW50IGhhbmRsZXJzLCBzZXRUaW1lb3V0IGNhbGxiYWNrcyxcbiAgICAgICAgICAgIC8vIHByb21pc2UgcmVzb2x2ZXMgYW5kIG1vcmUgYXJlIHJ1biB3aXRoaW4uXG4gICAgICAgICAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMsIHRoZXJlIGFyZSB0d28gZGlmZmVyZW50IGtpbmRzIG9mIHRhc2tzLFxuICAgICAgICAgICAgLy8gbWljcm90YXNrcyBhbmQgbWFjcm90YXNrcy5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYXJlIG1haW5seSB1c2VkIGZvciBQcm9taXNlcywgd2hpbGUgbWFjcm90YXNrcyBhcmVcbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGV2ZXJ5dGhpbmcgZWxzZS5cbiAgICAgICAgICAgIC8vIE1pY3JvdGFza3MgYWx3YXlzIGhhdmUgcHJpb3JpdHkgb3ZlciBtYWNyb3Rhc2tzLiBJZiB0aGUgSlMgZW5naW5lXG4gICAgICAgICAgICAvLyBpcyBsb29raW5nIGZvciBhIHRhc2sgdG8gcnVuLCBpdCB3aWxsIGFsd2F5cyB0cnkgdG8gZW1wdHkgdGhlXG4gICAgICAgICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcnVuIGFueXRoaW5nIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBtYWNyb3Rhc2sgcXVldWUuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gRm9yIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0LCBtZXNzYWdlcyBhbHdheXMgYXJyaXZlIGluIHRoZWlyIG93blxuICAgICAgICAgICAgLy8gZXZlbnQuIFRoaXMgbWVhbnMgdGhhdCBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlc29sdmVkIGZyb20gd2l0aGluLFxuICAgICAgICAgICAgLy8gdGhlaXIgY2FsbGJhY2tzIHdpbGwgYWx3YXlzIGZpbmlzaCBleGVjdXRpb24gYnkgdGhlIHRpbWUgdGhlXG4gICAgICAgICAgICAvLyBuZXh0IG1lc3NhZ2UgZXZlbnQgaGFuZGxlciBpcyBydW4uXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gZW11bGF0ZSB0aGlzIGJlaGF2aW91ciwgd2UgbmVlZCB0byBtYWtlIHN1cmUgZWFjaFxuICAgICAgICAgICAgLy8gb25tZXNzYWdlIGhhbmRsZXIgaXMgcnVuIHdpdGhpbiBpdHMgb3duIG1hY3JvdGFzay5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vbm1lc3NhZ2Uoe2RhdGE6IG1zZ30pLCAwKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDIwNDpcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDEwOlxuICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMub3BlblxuICAgICAgICAgIHRoaXMub25vcGVuKHt9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0MDM6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDQwMylcbiAgICAgICAgICB0aGlzLmNsb3NlKDEwMDgsIFwiZm9yYmlkZGVuXCIsIGZhbHNlKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSA1MDA6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKDUwMClcbiAgICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgNTAwKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgdW5oYW5kbGVkIHBvbGwgc3RhdHVzICR7c3RhdHVzfWApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHdlIGNvbGxlY3QgYWxsIHB1c2hlcyB3aXRoaW4gdGhlIGN1cnJlbnQgZXZlbnQgbG9vcCBieVxuICAvLyBzZXRUaW1lb3V0IDAsIHdoaWNoIG9wdGltaXplcyBiYWNrLXRvLWJhY2sgcHJvY2VkdXJhbFxuICAvLyBwdXNoZXMgYWdhaW5zdCBhbiBlbXB0eSBidWZmZXJcbiAgc2VuZChib2R5KXtcbiAgICBpZih0aGlzLmN1cnJlbnRCYXRjaCl7XG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaC5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIGlmKHRoaXMuYXdhaXRpbmdCYXRjaEFjayl7XG4gICAgICB0aGlzLmJhdGNoQnVmZmVyLnB1c2goYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2ggPSBbYm9keV1cbiAgICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5jdXJyZW50QmF0Y2gpXG4gICAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgICAgfSwgMClcbiAgICB9XG4gIH1cblxuICBiYXRjaFNlbmQobWVzc2FnZXMpe1xuICAgIHRoaXMuYXdhaXRpbmdCYXRjaEFjayA9IHRydWVcbiAgICB0aGlzLmFqYXgoXCJQT1NUXCIsIFwiYXBwbGljYXRpb24veC1uZGpzb25cIiwgbWVzc2FnZXMuam9pbihcIlxcblwiKSwgKCkgPT4gdGhpcy5vbmVycm9yKFwidGltZW91dFwiKSwgcmVzcCA9PiB7XG4gICAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgICAgaWYoIXJlc3AgfHwgcmVzcC5zdGF0dXMgIT09IDIwMCl7XG4gICAgICAgIHRoaXMub25lcnJvcihyZXNwICYmIHJlc3Auc3RhdHVzKVxuICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAxMSwgXCJpbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgZmFsc2UpXG4gICAgICB9IGVsc2UgaWYodGhpcy5iYXRjaEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgICAgdGhpcy5iYXRjaFNlbmQodGhpcy5iYXRjaEJ1ZmZlcilcbiAgICAgICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNsb3NlKGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIGZvcihsZXQgcmVxIG9mIHRoaXMucmVxcyl7IHJlcS5hYm9ydCgpIH1cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNsb3NlZFxuICAgIGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbih7Y29kZTogMTAwMCwgcmVhc29uOiB1bmRlZmluZWQsIHdhc0NsZWFuOiB0cnVlfSwge2NvZGUsIHJlYXNvbiwgd2FzQ2xlYW59KVxuICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRCYXRjaFRpbWVyKVxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgaWYodHlwZW9mKENsb3NlRXZlbnQpICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHRoaXMub25jbG9zZShuZXcgQ2xvc2VFdmVudChcImNsb3NlXCIsIG9wdHMpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uY2xvc2Uob3B0cylcbiAgICB9XG4gIH1cblxuICBhamF4KG1ldGhvZCwgY29udGVudFR5cGUsIGJvZHksIG9uQ2FsbGVyVGltZW91dCwgY2FsbGJhY2spe1xuICAgIGxldCByZXFcbiAgICBsZXQgb250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBvbkNhbGxlclRpbWVvdXQoKVxuICAgIH1cbiAgICByZXEgPSBBamF4LnJlcXVlc3QobWV0aG9kLCB0aGlzLmVuZHBvaW50VVJMKCksIGNvbnRlbnRUeXBlLCBib2R5LCB0aGlzLnRpbWVvdXQsIG9udGltZW91dCwgcmVzcCA9PiB7XG4gICAgICB0aGlzLnJlcXMuZGVsZXRlKHJlcSlcbiAgICAgIGlmKHRoaXMuaXNBY3RpdmUoKSl7IGNhbGxiYWNrKHJlc3ApIH1cbiAgICB9KVxuICAgIHRoaXMucmVxcy5hZGQocmVxKVxuICB9XG59XG4iLCAiLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgUHJlc2VuY2VcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zLFxuICogICAgICAgIGZvciBleGFtcGxlIGB7ZXZlbnRzOiB7c3RhdGU6IFwic3RhdGVcIiwgZGlmZjogXCJkaWZmXCJ9fWBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlc2VuY2Uge1xuXG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGV2ZW50cyA9IG9wdHMuZXZlbnRzIHx8IHtzdGF0ZTogXCJwcmVzZW5jZV9zdGF0ZVwiLCBkaWZmOiBcInByZXNlbmNlX2RpZmZcIn1cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuam9pblJlZiA9IG51bGxcbiAgICB0aGlzLmNhbGxlciA9IHtcbiAgICAgIG9uSm9pbjogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvbkxlYXZlOiBmdW5jdGlvbiAoKXsgfSxcbiAgICAgIG9uU3luYzogZnVuY3Rpb24gKCl7IH1cbiAgICB9XG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLnN0YXRlLCBuZXdTdGF0ZSA9PiB7XG4gICAgICBsZXQge29uSm9pbiwgb25MZWF2ZSwgb25TeW5jfSA9IHRoaXMuY2FsbGVyXG5cbiAgICAgIHRoaXMuam9pblJlZiA9IHRoaXMuY2hhbm5lbC5qb2luUmVmKClcbiAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jU3RhdGUodGhpcy5zdGF0ZSwgbmV3U3RhdGUsIG9uSm9pbiwgb25MZWF2ZSlcblxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMuZm9yRWFjaChkaWZmID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgICBvblN5bmMoKVxuICAgIH0pXG5cbiAgICB0aGlzLmNoYW5uZWwub24oZXZlbnRzLmRpZmYsIGRpZmYgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICBpZih0aGlzLmluUGVuZGluZ1N5bmNTdGF0ZSgpKXtcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMucHVzaChkaWZmKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSlcbiAgICAgICAgb25TeW5jKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgb25Kb2luKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25Kb2luID0gY2FsbGJhY2sgfVxuXG4gIG9uTGVhdmUoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vbkxlYXZlID0gY2FsbGJhY2sgfVxuXG4gIG9uU3luYyhjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uU3luYyA9IGNhbGxiYWNrIH1cblxuICBsaXN0KGJ5KXsgcmV0dXJuIFByZXNlbmNlLmxpc3QodGhpcy5zdGF0ZSwgYnkpIH1cblxuICBpblBlbmRpbmdTeW5jU3RhdGUoKXtcbiAgICByZXR1cm4gIXRoaXMuam9pblJlZiB8fCAodGhpcy5qb2luUmVmICE9PSB0aGlzLmNoYW5uZWwuam9pblJlZigpKVxuICB9XG5cbiAgLy8gbG93ZXItbGV2ZWwgcHVibGljIHN0YXRpYyBBUElcblxuICAvKipcbiAgICogVXNlZCB0byBzeW5jIHRoZSBsaXN0IG9mIHByZXNlbmNlcyBvbiB0aGUgc2VydmVyXG4gICAqIHdpdGggdGhlIGNsaWVudCdzIHN0YXRlLiBBbiBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrIGNhblxuICAgKiBiZSBwcm92aWRlZCB0byByZWFjdCB0byBjaGFuZ2VzIGluIHRoZSBjbGllbnQncyBsb2NhbCBwcmVzZW5jZXMgYWNyb3NzXG4gICAqIGRpc2Nvbm5lY3RzIGFuZCByZWNvbm5lY3RzIHdpdGggdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNTdGF0ZShjdXJyZW50U3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuY2xvbmUoY3VycmVudFN0YXRlKVxuICAgIGxldCBqb2lucyA9IHt9XG4gICAgbGV0IGxlYXZlcyA9IHt9XG5cbiAgICB0aGlzLm1hcChzdGF0ZSwgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIGlmKCFuZXdTdGF0ZVtrZXldKXtcbiAgICAgICAgbGVhdmVzW2tleV0gPSBwcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5tYXAobmV3U3RhdGUsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlKXtcbiAgICAgICAgbGV0IG5ld1JlZnMgPSBuZXdQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJSZWZzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLm1hcChtID0+IG0ucGh4X3JlZilcbiAgICAgICAgbGV0IGpvaW5lZE1ldGFzID0gbmV3UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gY3VyUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBsZXQgbGVmdE1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IG5ld1JlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgaWYoam9pbmVkTWV0YXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICAgICAgam9pbnNba2V5XS5tZXRhcyA9IGpvaW5lZE1ldGFzXG4gICAgICAgIH1cbiAgICAgICAgaWYobGVmdE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGxlYXZlc1trZXldID0gdGhpcy5jbG9uZShjdXJyZW50UHJlc2VuY2UpXG4gICAgICAgICAgbGVhdmVzW2tleV0ubWV0YXMgPSBsZWZ0TWV0YXNcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9pbnNba2V5XSA9IG5ld1ByZXNlbmNlXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5zeW5jRGlmZihzdGF0ZSwge2pvaW5zOiBqb2lucywgbGVhdmVzOiBsZWF2ZXN9LCBvbkpvaW4sIG9uTGVhdmUpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogVXNlZCB0byBzeW5jIGEgZGlmZiBvZiBwcmVzZW5jZSBqb2luIGFuZCBsZWF2ZVxuICAgKiBldmVudHMgZnJvbSB0aGUgc2VydmVyLCBhcyB0aGV5IGhhcHBlbi4gTGlrZSBgc3luY1N0YXRlYCwgYHN5bmNEaWZmYFxuICAgKiBhY2NlcHRzIG9wdGlvbmFsIGBvbkpvaW5gIGFuZCBgb25MZWF2ZWAgY2FsbGJhY2tzIHRvIHJlYWN0IHRvIGEgdXNlclxuICAgKiBqb2luaW5nIG9yIGxlYXZpbmcgZnJvbSBhIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybnMge1ByZXNlbmNlfVxuICAgKi9cbiAgc3RhdGljIHN5bmNEaWZmKHN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpe1xuICAgIGxldCB7am9pbnMsIGxlYXZlc30gPSB0aGlzLmNsb25lKGRpZmYpXG4gICAgaWYoIW9uSm9pbil7IG9uSm9pbiA9IGZ1bmN0aW9uICgpeyB9IH1cbiAgICBpZighb25MZWF2ZSl7IG9uTGVhdmUgPSBmdW5jdGlvbiAoKXsgfSB9XG5cbiAgICB0aGlzLm1hcChqb2lucywgKGtleSwgbmV3UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBzdGF0ZVtrZXldID0gdGhpcy5jbG9uZShuZXdQcmVzZW5jZSlcbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBqb2luZWRSZWZzID0gc3RhdGVba2V5XS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBjdXJNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBqb2luZWRSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIHN0YXRlW2tleV0ubWV0YXMudW5zaGlmdCguLi5jdXJNZXRhcylcbiAgICAgIH1cbiAgICAgIG9uSm9pbihrZXksIGN1cnJlbnRQcmVzZW5jZSwgbmV3UHJlc2VuY2UpXG4gICAgfSlcbiAgICB0aGlzLm1hcChsZWF2ZXMsIChrZXksIGxlZnRQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKCFjdXJyZW50UHJlc2VuY2UpeyByZXR1cm4gfVxuICAgICAgbGV0IHJlZnNUb1JlbW92ZSA9IGxlZnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICBjdXJyZW50UHJlc2VuY2UubWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKHAgPT4ge1xuICAgICAgICByZXR1cm4gcmVmc1RvUmVtb3ZlLmluZGV4T2YocC5waHhfcmVmKSA8IDBcbiAgICAgIH0pXG4gICAgICBvbkxlYXZlKGtleSwgY3VycmVudFByZXNlbmNlLCBsZWZ0UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2UubWV0YXMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgZGVsZXRlIHN0YXRlW2tleV1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBzdGF0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHByZXNlbmNlcywgd2l0aCBzZWxlY3RlZCBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHByZXNlbmNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaG9vc2VyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBsaXN0KHByZXNlbmNlcywgY2hvb3Nlcil7XG4gICAgaWYoIWNob29zZXIpeyBjaG9vc2VyID0gZnVuY3Rpb24gKGtleSwgcHJlcyl7IHJldHVybiBwcmVzIH0gfVxuXG4gICAgcmV0dXJuIHRoaXMubWFwKHByZXNlbmNlcywgKGtleSwgcHJlc2VuY2UpID0+IHtcbiAgICAgIHJldHVybiBjaG9vc2VyKGtleSwgcHJlc2VuY2UpXG4gICAgfSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICBzdGF0aWMgbWFwKG9iaiwgZnVuYyl7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubWFwKGtleSA9PiBmdW5jKGtleSwgb2JqW2tleV0pKVxuICB9XG5cbiAgc3RhdGljIGNsb25lKG9iail7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cbn1cbiIsICIvKiBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgbWVzc2FnZXMgKi9cbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgSEVBREVSX0xFTkdUSDogMSxcbiAgTUVUQV9MRU5HVEg6IDQsXG4gIEtJTkRTOiB7cHVzaDogMCwgcmVwbHk6IDEsIGJyb2FkY2FzdDogMn0sXG5cbiAgZW5jb2RlKG1zZywgY2FsbGJhY2spe1xuICAgIGlmKG1zZy5wYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5iaW5hcnlFbmNvZGUobXNnKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBheWxvYWQgPSBbbXNnLmpvaW5fcmVmLCBtc2cucmVmLCBtc2cudG9waWMsIG1zZy5ldmVudCwgbXNnLnBheWxvYWRdXG4gICAgICByZXR1cm4gY2FsbGJhY2soSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpXG4gICAgfVxuICB9LFxuXG4gIGRlY29kZShyYXdQYXlsb2FkLCBjYWxsYmFjayl7XG4gICAgaWYocmF3UGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RGVjb2RlKHJhd1BheWxvYWQpKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgW2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZF0gPSBKU09OLnBhcnNlKHJhd1BheWxvYWQpXG4gICAgICByZXR1cm4gY2FsbGJhY2soe2pvaW5fcmVmLCByZWYsIHRvcGljLCBldmVudCwgcGF5bG9hZH0pXG4gICAgfVxuICB9LFxuXG4gIC8vIHByaXZhdGVcblxuICBiaW5hcnlFbmNvZGUobWVzc2FnZSl7XG4gICAgbGV0IHtqb2luX3JlZiwgcmVmLCBldmVudCwgdG9waWMsIHBheWxvYWR9ID0gbWVzc2FnZVxuICAgIGxldCBtZXRhTGVuZ3RoID0gdGhpcy5NRVRBX0xFTkdUSCArIGpvaW5fcmVmLmxlbmd0aCArIHJlZi5sZW5ndGggKyB0b3BpYy5sZW5ndGggKyBldmVudC5sZW5ndGhcbiAgICBsZXQgaGVhZGVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuSEVBREVSX0xFTkdUSCArIG1ldGFMZW5ndGgpXG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoaGVhZGVyKVxuICAgIGxldCBvZmZzZXQgPSAwXG5cbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0aGlzLktJTkRTLnB1c2gpIC8vIGtpbmRcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBqb2luX3JlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgcmVmLmxlbmd0aClcbiAgICB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCB0b3BpYy5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgZXZlbnQubGVuZ3RoKVxuICAgIEFycmF5LmZyb20oam9pbl9yZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHJlZiwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuICAgIEFycmF5LmZyb20odG9waWMsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKGV2ZW50LCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG5cbiAgICB2YXIgY29tYmluZWQgPSBuZXcgVWludDhBcnJheShoZWFkZXIuYnl0ZUxlbmd0aCArIHBheWxvYWQuYnl0ZUxlbmd0aClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkoaGVhZGVyKSwgMClcbiAgICBjb21iaW5lZC5zZXQobmV3IFVpbnQ4QXJyYXkocGF5bG9hZCksIGhlYWRlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIGNvbWJpbmVkLmJ1ZmZlclxuICB9LFxuXG4gIGJpbmFyeURlY29kZShidWZmZXIpe1xuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICBsZXQga2luZCA9IHZpZXcuZ2V0VWludDgoMClcbiAgICBsZXQgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpXG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSB0aGlzLktJTkRTLnB1c2g6IHJldHVybiB0aGlzLmRlY29kZVB1c2goYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLnJlcGx5OiByZXR1cm4gdGhpcy5kZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpXG4gICAgICBjYXNlIHRoaXMuS0lORFMuYnJvYWRjYXN0OiByZXR1cm4gdGhpcy5kZWNvZGVCcm9hZGNhc3QoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDIpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMylcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSCAtIDEgLy8gcHVzaGVzIGhhdmUgbm8gcmVmXG4gICAgbGV0IGpvaW5SZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBqb2luUmVmU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgam9pblJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9LFxuXG4gIGRlY29kZVJlcGx5KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IGpvaW5SZWZTaXplID0gdmlldy5nZXRVaW50OCgxKVxuICAgIGxldCByZWZTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoNClcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgdGhpcy5NRVRBX0xFTkdUSFxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHJlZlNpemVcbiAgICBsZXQgdG9waWMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyB0b3BpY1NpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZVxuICAgIGxldCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgZXZlbnRTaXplXG4gICAgbGV0IGRhdGEgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aClcbiAgICBsZXQgcGF5bG9hZCA9IHtzdGF0dXM6IGV2ZW50LCByZXNwb25zZTogZGF0YX1cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBqb2luUmVmLCByZWY6IHJlZiwgdG9waWM6IHRvcGljLCBldmVudDogQ0hBTk5FTF9FVkVOVFMucmVwbHksIHBheWxvYWQ6IHBheWxvYWR9XG4gIH0sXG5cbiAgZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcil7XG4gICAgbGV0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBvZmZzZXQgPSB0aGlzLkhFQURFUl9MRU5HVEggKyAyXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG5cbiAgICByZXR1cm4ge2pvaW5fcmVmOiBudWxsLCByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhfVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgZ2xvYmFsLFxuICBwaHhXaW5kb3csXG4gIENIQU5ORUxfRVZFTlRTLFxuICBERUZBVUxUX1RJTUVPVVQsXG4gIERFRkFVTFRfVlNOLFxuICBTT0NLRVRfU1RBVEVTLFxuICBUUkFOU1BPUlRTLFxuICBXU19DTE9TRV9OT1JNQUxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvc3VyZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBBamF4IGZyb20gXCIuL2FqYXhcIlxuaW1wb3J0IENoYW5uZWwgZnJvbSBcIi4vY2hhbm5lbFwiXG5pbXBvcnQgTG9uZ1BvbGwgZnJvbSBcIi4vbG9uZ3BvbGxcIlxuaW1wb3J0IFNlcmlhbGl6ZXIgZnJvbSBcIi4vc2VyaWFsaXplclwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKiogSW5pdGlhbGl6ZXMgdGhlIFNvY2tldCAqXG4gKlxuICogRm9yIElFOCBzdXBwb3J0IHVzZSBhbiBFUzUtc2hpbSAoaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3M6Ly9leGFtcGxlLmNvbS9zb2NrZXRcImAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwid3NzOi8vZXhhbXBsZS5jb21cImBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvc29ja2V0XCJgIChpbmhlcml0ZWQgaG9zdCAmIHByb3RvY29sKVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLnRyYW5zcG9ydF0gLSBUaGUgV2Vic29ja2V0IFRyYW5zcG9ydCwgZm9yIGV4YW1wbGUgV2ViU29ja2V0IG9yIFBob2VuaXguTG9uZ1BvbGwuXG4gKlxuICogRGVmYXVsdHMgdG8gV2ViU29ja2V0IHdpdGggYXV0b21hdGljIExvbmdQb2xsIGZhbGxiYWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMuZW5jb2RlXSAtIFRoZSBmdW5jdGlvbiB0byBlbmNvZGUgb3V0Z29pbmcgbWVzc2FnZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gSlNPTiBlbmNvZGVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmRlY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZGVjb2RlIGluY29taW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT046XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogKHBheWxvYWQsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhKU09OLnBhcnNlKHBheWxvYWQpKVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXRdIC0gVGhlIGRlZmF1bHQgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gdHJpZ2dlciBwdXNoIHRpbWVvdXRzLlxuICpcbiAqIERlZmF1bHRzIGBERUZBVUxUX1RJTUVPVVRgXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNc10gLSBUaGUgbWlsbGlzZWMgaW50ZXJ2YWwgdG8gc2VuZCBhIGhlYXJ0YmVhdCBtZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVjb25uZWN0QWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogc29ja2V0IHJlY29ubmVjdCBpbnRlcnZhbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBzdGVwcGVkIGJhY2tvZmYgb2Y6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWpvaW5BZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxpc2VjXG4gKiByZWpvaW4gaW50ZXJ2YWwgZm9yIGluZGl2aWR1YWwgY2hhbm5lbHMuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5sb2dnZXJdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLCBpZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbihraW5kLCBtc2csIGRhdGEpIHtcbiAqICAgY29uc29sZS5sb2coYCR7a2luZH06ICR7bXNnfWAsIGRhdGEpXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMubG9uZ3BvbGxlclRpbWVvdXRdIC0gVGhlIG1heGltdW0gdGltZW91dCBvZiBhIGxvbmcgcG9sbCBBSkFYIHJlcXVlc3QuXG4gKlxuICogRGVmYXVsdHMgdG8gMjBzIChkb3VibGUgdGhlIHNlcnZlciBsb25nIHBvbGwgdGltZXIpLlxuICpcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IFtvcHRzLnBhcmFtc10gLSBUaGUgb3B0aW9uYWwgcGFyYW1zIHRvIHBhc3Mgd2hlbiBjb25uZWN0aW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluYXJ5VHlwZV0gLSBUaGUgYmluYXJ5IHR5cGUgdG8gdXNlIGZvciBiaW5hcnkgV2ViU29ja2V0IGZyYW1lcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBcImFycmF5YnVmZmVyXCJcbiAqXG4gKiBAcGFyYW0ge3Zzbn0gW29wdHMudnNuXSAtIFRoZSBzZXJpYWxpemVyJ3MgcHJvdG9jb2wgdmVyc2lvbiB0byBzZW5kIG9uIGNvbm5lY3QuXG4gKlxuICogRGVmYXVsdHMgdG8gREVGQVVMVF9WU04uXG4qL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0IHtcbiAgY29uc3RydWN0b3IoZW5kUG9pbnQsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyA9IHtvcGVuOiBbXSwgY2xvc2U6IFtdLCBlcnJvcjogW10sIG1lc3NhZ2U6IFtdfVxuICAgIHRoaXMuY2hhbm5lbHMgPSBbXVxuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5yZWYgPSAwXG4gICAgdGhpcy50aW1lb3V0ID0gb3B0cy50aW1lb3V0IHx8IERFRkFVTFRfVElNRU9VVFxuICAgIHRoaXMudHJhbnNwb3J0ID0gb3B0cy50cmFuc3BvcnQgfHwgZ2xvYmFsLldlYlNvY2tldCB8fCBMb25nUG9sbFxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucyA9IDBcbiAgICB0aGlzLmRlZmF1bHRFbmNvZGVyID0gU2VyaWFsaXplci5lbmNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuZGVmYXVsdERlY29kZXIgPSBTZXJpYWxpemVyLmRlY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmJpbmFyeVR5cGUgPSBvcHRzLmJpbmFyeVR5cGUgfHwgXCJhcnJheWJ1ZmZlclwiXG4gICAgdGhpcy5jb25uZWN0Q2xvY2sgPSAxXG4gICAgaWYodGhpcy50cmFuc3BvcnQgIT09IExvbmdQb2xsKXtcbiAgICAgIHRoaXMuZW5jb2RlID0gb3B0cy5lbmNvZGUgfHwgdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSBvcHRzLmRlY29kZSB8fCB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW5jb2RlID0gdGhpcy5kZWZhdWx0RW5jb2RlclxuICAgICAgdGhpcy5kZWNvZGUgPSB0aGlzLmRlZmF1bHREZWNvZGVyXG4gICAgfVxuICAgIGxldCBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgIGlmKHBoeFdpbmRvdyAmJiBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7XG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSB0aGlzLmNvbm5lY3RDbG9ja1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBfZSA9PiB7XG4gICAgICAgIGlmKGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPT09IHRoaXMuY29ubmVjdENsb2NrKXtcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gbnVsbFxuICAgICAgICAgIHRoaXMuY29ubmVjdCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcyA9IG9wdHMuaGVhcnRiZWF0SW50ZXJ2YWxNcyB8fCAzMDAwMFxuICAgIHRoaXMucmVqb2luQWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWpvaW5BZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVqb2luQWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAwMCwgMjAwMCwgNTAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlY29ubmVjdEFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVjb25uZWN0QWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlY29ubmVjdEFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxvZ2dlciA9IG9wdHMubG9nZ2VyIHx8IG51bGxcbiAgICB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0ID0gb3B0cy5sb25ncG9sbGVyVGltZW91dCB8fCAyMDAwMFxuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLmVuZFBvaW50ID0gYCR7ZW5kUG9pbnR9LyR7VFJBTlNQT1JUUy53ZWJzb2NrZXR9YFxuICAgIHRoaXMudnNuID0gb3B0cy52c24gfHwgREVGQVVMVF9WU05cbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVvdXRUaW1lciA9IG51bGxcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyID0gbmV3IFRpbWVyKCgpID0+IHtcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5jb25uZWN0KCkpXG4gICAgfSwgdGhpcy5yZWNvbm5lY3RBZnRlck1zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIExvbmdQb2xsIHRyYW5zcG9ydCByZWZlcmVuY2VcbiAgICovXG4gIGdldExvbmdQb2xsVHJhbnNwb3J0KCl7IHJldHVybiBMb25nUG9sbCB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIGFuZCByZXBsYWNlcyB0aGUgYWN0aXZlIHRyYW5zcG9ydFxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdUcmFuc3BvcnQgLSBUaGUgbmV3IHRyYW5zcG9ydCBjbGFzcyB0byBpbnN0YW50aWF0ZVxuICAgKlxuICAgKi9cbiAgcmVwbGFjZVRyYW5zcG9ydChuZXdUcmFuc3BvcnQpe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgdGhpcy5jb25uLmNsb3NlKClcbiAgICAgIHRoaXMuY29ubiA9IG51bGxcbiAgICB9XG4gICAgdGhpcy50cmFuc3BvcnQgPSBuZXdUcmFuc3BvcnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzb2NrZXQgcHJvdG9jb2xcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHByb3RvY29sKCl7IHJldHVybiBsb2NhdGlvbi5wcm90b2NvbC5tYXRjaCgvXmh0dHBzLykgPyBcIndzc1wiIDogXCJ3c1wiIH1cblxuICAvKipcbiAgICogVGhlIGZ1bGx5IHF1YWxpZmllZCBzb2NrZXQgdXJsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBlbmRQb2ludFVSTCgpe1xuICAgIGxldCB1cmkgPSBBamF4LmFwcGVuZFBhcmFtcyhcbiAgICAgIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMuZW5kUG9pbnQsIHRoaXMucGFyYW1zKCkpLCB7dnNuOiB0aGlzLnZzbn0pXG4gICAgaWYodXJpLmNoYXJBdCgwKSAhPT0gXCIvXCIpeyByZXR1cm4gdXJpIH1cbiAgICBpZih1cmkuY2hhckF0KDEpID09PSBcIi9cIil7IHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9OiR7dXJpfWAgfVxuXG4gICAgcmV0dXJuIGAke3RoaXMucHJvdG9jb2woKX06Ly8ke2xvY2F0aW9uLmhvc3R9JHt1cml9YFxuICB9XG5cbiAgLyoqXG4gICAqIERpc2Nvbm5lY3RzIHRoZSBzb2NrZXRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2RlcyBmb3IgdmFsaWQgc3RhdHVzIGNvZGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBzb2NrZXQgaXMgZGlzY29ubmVjdGVkLlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IGNvZGUgLSBBIHN0YXR1cyBjb2RlIGZvciBkaXNjb25uZWN0aW9uIChPcHRpb25hbCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gLSBBIHRleHR1YWwgZGVzY3JpcHRpb24gb2YgdGhlIHJlYXNvbiB0byBkaXNjb25uZWN0LiAoT3B0aW9uYWwpXG4gICAqL1xuICBkaXNjb25uZWN0KGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSB0cnVlXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy50ZWFyZG93bihjYWxsYmFjaywgY29kZSwgcmVhc29uKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBUaGUgcGFyYW1zIHRvIHNlbmQgd2hlbiBjb25uZWN0aW5nLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IHVzZXJUb2tlbn1gXG4gICAqXG4gICAqIFBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZDsgcGFzcyB0aGVtIGluIHRoZSBTb2NrZXQgY29uc3RydWN0b3IgaW5zdGVhZDpcbiAgICogYG5ldyBTb2NrZXQoXCIvc29ja2V0XCIsIHtwYXJhbXM6IHt1c2VyX2lkOiB1c2VyVG9rZW59fSlgLlxuICAgKi9cbiAgY29ubmVjdChwYXJhbXMpe1xuICAgIGlmKHBhcmFtcyl7XG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUubG9nKFwicGFzc2luZyBwYXJhbXMgdG8gY29ubmVjdCBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkIHBhc3MgOnBhcmFtcyB0byB0aGUgU29ja2V0IGNvbnN0cnVjdG9yXCIpXG4gICAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUocGFyYW1zKVxuICAgIH1cbiAgICBpZih0aGlzLmNvbm4peyByZXR1cm4gfVxuXG4gICAgdGhpcy5jb25uZWN0Q2xvY2srK1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5jb25uID0gbmV3IHRoaXMudHJhbnNwb3J0KHRoaXMuZW5kUG9pbnRVUkwoKSlcbiAgICB0aGlzLmNvbm4uYmluYXJ5VHlwZSA9IHRoaXMuYmluYXJ5VHlwZVxuICAgIHRoaXMuY29ubi50aW1lb3V0ID0gdGhpcy5sb25ncG9sbGVyVGltZW91dFxuICAgIHRoaXMuY29ubi5vbm9wZW4gPSAoKSA9PiB0aGlzLm9uQ29ubk9wZW4oKVxuICAgIHRoaXMuY29ubi5vbmVycm9yID0gZXJyb3IgPT4gdGhpcy5vbkNvbm5FcnJvcihlcnJvcilcbiAgICB0aGlzLmNvbm4ub25tZXNzYWdlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5NZXNzYWdlKGV2ZW50KVxuICAgIHRoaXMuY29ubi5vbmNsb3NlID0gZXZlbnQgPT4gdGhpcy5vbkNvbm5DbG9zZShldmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSBtZXNzYWdlLiBPdmVycmlkZSBgdGhpcy5sb2dnZXJgIGZvciBzcGVjaWFsaXplZCBsb2dnaW5nLiBub29wcyBieSBkZWZhdWx0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtc2dcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIGxvZyhraW5kLCBtc2csIGRhdGEpeyB0aGlzLmxvZ2dlcihraW5kLCBtc2csIGRhdGEpIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGEgbG9nZ2VyIGhhcyBiZWVuIHNldCBvbiB0aGlzIHNvY2tldC5cbiAgICovXG4gIGhhc0xvZ2dlcigpeyByZXR1cm4gdGhpcy5sb2dnZXIgIT09IG51bGwgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG9wZW4gZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbk9wZW4oZnVuY3Rpb24oKXsgY29uc29sZS5pbmZvKFwidGhlIHNvY2tldCB3YXMgb3BlbmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW4oY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBjbG9zZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gZXJyb3IgZXZlbnRzXG4gICAqXG4gICAqIEBleGFtcGxlIHNvY2tldC5vbkVycm9yKGZ1bmN0aW9uKGVycm9yKXsgYWxlcnQoXCJBbiBlcnJvciBvY2N1cnJlZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBtZXNzYWdlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25NZXNzYWdlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFBpbmdzIHRoZSBzZXJ2ZXIgYW5kIGludm9rZXMgdGhlIGNhbGxiYWNrIHdpdGggdGhlIFJUVCBpbiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwaW5nIHdhcyBwdXNoZWQgb3IgZmFsc2UgaWYgdW5hYmxlIHRvIGJlIHB1c2hlZC5cbiAgICovXG4gIHBpbmcoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gZmFsc2UgfVxuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIGxldCBzdGFydFRpbWUgPSBEYXRlLm5vdygpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiByZWZ9KVxuICAgIGxldCBvbk1zZ1JlZiA9IHRoaXMub25NZXNzYWdlKG1zZyA9PiB7XG4gICAgICBpZihtc2cucmVmID09PSByZWYpe1xuICAgICAgICB0aGlzLm9mZihbb25Nc2dSZWZdKVxuICAgICAgICBjYWxsYmFjayhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBjbGVhckhlYXJ0YmVhdHMoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lcilcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIpXG4gIH1cblxuICBvbkNvbm5PcGVuKCl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGNvbm5lY3RlZCB0byAke3RoaXMuZW5kUG9pbnRVUkwoKX1gKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zKytcbiAgICB0aGlzLmZsdXNoU2VuZEJ1ZmZlcigpXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lci5yZXNldCgpXG4gICAgdGhpcy5yZXNldEhlYXJ0YmVhdCgpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBoZWFydGJlYXRUaW1lb3V0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmKXtcbiAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpeyB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImhlYXJ0YmVhdCB0aW1lb3V0LiBBdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uXCIpIH1cbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpLCBXU19DTE9TRV9OT1JNQUwsIFwiaGVhcnRiZWF0IHRpbWVvdXRcIilcbiAgICB9XG4gIH1cblxuICByZXNldEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4uc2tpcEhlYXJ0YmVhdCl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgdGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbil7XG4gICAgaWYoIXRoaXMuY29ubil7XG4gICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMud2FpdEZvckJ1ZmZlckRvbmUoKCkgPT4ge1xuICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgaWYoY29kZSl7IHRoaXMuY29ubi5jbG9zZShjb2RlLCByZWFzb24gfHwgXCJcIikgfSBlbHNlIHsgdGhpcy5jb25uLmNsb3NlKCkgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLndhaXRGb3JTb2NrZXRDbG9zZWQoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuY29ubi5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB3YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8ICF0aGlzLmNvbm4uYnVmZmVyZWRBbW91bnQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICB3YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgdGhpcy5jb25uLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY2xvc2VkKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICBvbkNvbm5DbG9zZShldmVudCl7XG4gICAgbGV0IGNsb3NlQ29kZSA9IGV2ZW50ICYmIGV2ZW50LmNvZGVcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNsb3NlXCIsIGV2ZW50KVxuICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgdGhpcy5jbGVhckhlYXJ0YmVhdHMoKVxuICAgIGlmKCF0aGlzLmNsb3NlV2FzQ2xlYW4gJiYgY2xvc2VDb2RlICE9PSAxMDAwKXtcbiAgICAgIHRoaXMucmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KClcbiAgICB9XG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKGV2ZW50KSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgb25Db25uRXJyb3IoZXJyb3Ipe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGVycm9yKVxuICAgIGxldCB0cmFuc3BvcnRCZWZvcmUgPSB0aGlzLnRyYW5zcG9ydFxuICAgIGxldCBlc3RhYmxpc2hlZEJlZm9yZSA9IHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9uc1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiB7XG4gICAgICBjYWxsYmFjayhlcnJvciwgdHJhbnNwb3J0QmVmb3JlLCBlc3RhYmxpc2hlZEJlZm9yZSlcbiAgICB9KVxuICAgIGlmKHRyYW5zcG9ydEJlZm9yZSA9PT0gdGhpcy50cmFuc3BvcnQgfHwgZXN0YWJsaXNoZWRCZWZvcmUgPiAwKXtcbiAgICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyQ2hhbkVycm9yKCl7XG4gICAgdGhpcy5jaGFubmVscy5mb3JFYWNoKGNoYW5uZWwgPT4ge1xuICAgICAgaWYoIShjaGFubmVsLmlzRXJyb3JlZCgpIHx8IGNoYW5uZWwuaXNMZWF2aW5nKCkgfHwgY2hhbm5lbC5pc0Nsb3NlZCgpKSl7XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBjb25uZWN0aW9uU3RhdGUoKXtcbiAgICBzd2l0Y2godGhpcy5jb25uICYmIHRoaXMuY29ubi5yZWFkeVN0YXRlKXtcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nOiByZXR1cm4gXCJjb25uZWN0aW5nXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5vcGVuOiByZXR1cm4gXCJvcGVuXCJcbiAgICAgIGNhc2UgU09DS0VUX1NUQVRFUy5jbG9zaW5nOiByZXR1cm4gXCJjbG9zaW5nXCJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBcImNsb3NlZFwiXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY29ubmVjdGlvblN0YXRlKCkgPT09IFwib3BlblwiIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHBhcmFtIHtDaGFubmVsfVxuICAgKi9cbiAgcmVtb3ZlKGNoYW5uZWwpe1xuICAgIHRoaXMub2ZmKGNoYW5uZWwuc3RhdGVDaGFuZ2VSZWZzKVxuICAgIHRoaXMuY2hhbm5lbHMgPSB0aGlzLmNoYW5uZWxzLmZpbHRlcihjID0+IGMuam9pblJlZigpICE9PSBjaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgIHJlZ2lzdHJhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7cmVmc30gLSBsaXN0IG9mIHJlZnMgcmV0dXJuZWQgYnkgY2FsbHMgdG9cbiAgICogICAgICAgICAgICAgICAgIGBvbk9wZW5gLCBgb25DbG9zZWAsIGBvbkVycm9yLGAgYW5kIGBvbk1lc3NhZ2VgXG4gICAqL1xuICBvZmYocmVmcyl7XG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcyl7XG4gICAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzW2tleV0uZmlsdGVyKChbcmVmXSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVmcy5pbmRleE9mKHJlZikgPT09IC0xXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgYSBuZXcgY2hhbm5lbCBmb3IgdGhlIGdpdmVuIHRvcGljXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gY2hhblBhcmFtcyAtIFBhcmFtZXRlcnMgZm9yIHRoZSBjaGFubmVsXG4gICAqIEByZXR1cm5zIHtDaGFubmVsfVxuICAgKi9cbiAgY2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcyA9IHt9KXtcbiAgICBsZXQgY2hhbiA9IG5ldyBDaGFubmVsKHRvcGljLCBjaGFuUGFyYW1zLCB0aGlzKVxuICAgIHRoaXMuY2hhbm5lbHMucHVzaChjaGFuKVxuICAgIHJldHVybiBjaGFuXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIHB1c2goZGF0YSl7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSl7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBkYXRhXG4gICAgICB0aGlzLmxvZyhcInB1c2hcIiwgYCR7dG9waWN9ICR7ZXZlbnR9ICgke2pvaW5fcmVmfSwgJHtyZWZ9KWAsIHBheWxvYWQpXG4gICAgfVxuXG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgIHRoaXMuZW5jb2RlKGRhdGEsIHJlc3VsdCA9PiB0aGlzLmNvbm4uc2VuZChyZXN1bHQpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaCgoKSA9PiB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbmV4dCBtZXNzYWdlIHJlZiwgYWNjb3VudGluZyBmb3Igb3ZlcmZsb3dzXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBtYWtlUmVmKCl7XG4gICAgbGV0IG5ld1JlZiA9IHRoaXMucmVmICsgMVxuICAgIGlmKG5ld1JlZiA9PT0gdGhpcy5yZWYpeyB0aGlzLnJlZiA9IDAgfSBlbHNlIHsgdGhpcy5yZWYgPSBuZXdSZWYgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVmLnRvU3RyaW5nKClcbiAgfVxuXG4gIHNlbmRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgJiYgIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnB1c2goe3RvcGljOiBcInBob2VuaXhcIiwgZXZlbnQ6IFwiaGVhcnRiZWF0XCIsIHBheWxvYWQ6IHt9LCByZWY6IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZn0pXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaGVhcnRiZWF0VGltZW91dCgpLCB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMpXG4gIH1cblxuICBmbHVzaFNlbmRCdWZmZXIoKXtcbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSlcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgfVxuICB9XG5cbiAgb25Db25uTWVzc2FnZShyYXdNZXNzYWdlKXtcbiAgICB0aGlzLmRlY29kZShyYXdNZXNzYWdlLmRhdGEsIG1zZyA9PiB7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBtc2dcbiAgICAgIGlmKHJlZiAmJiByZWYgPT09IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgICAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlbmRIZWFydGJlYXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInJlY2VpdmVcIiwgYCR7cGF5bG9hZC5zdGF0dXMgfHwgXCJcIn0gJHt0b3BpY30gJHtldmVudH0gJHtyZWYgJiYgXCIoXCIgKyByZWYgKyBcIilcIiB8fCBcIlwifWAsIHBheWxvYWQpXG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYW5uZWxzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHNbaV1cbiAgICAgICAgaWYoIWNoYW5uZWwuaXNNZW1iZXIodG9waWMsIGV2ZW50LCBwYXlsb2FkLCBqb2luX3JlZikpeyBjb250aW51ZSB9XG4gICAgICAgIGNoYW5uZWwudHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZilcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCBbLCBjYWxsYmFja10gPSB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2VbaV1cbiAgICAgICAgY2FsbGJhY2sobXNnKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBsZWF2ZU9wZW5Ub3BpYyh0b3BpYyl7XG4gICAgbGV0IGR1cENoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLmZpbmQoYyA9PiBjLnRvcGljID09PSB0b3BpYyAmJiAoYy5pc0pvaW5lZCgpIHx8IGMuaXNKb2luaW5nKCkpKVxuICAgIGlmKGR1cENoYW5uZWwpe1xuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgYGxlYXZpbmcgZHVwbGljYXRlIHRvcGljIFwiJHt0b3BpY31cImApXG4gICAgICBkdXBDaGFubmVsLmxlYXZlKClcbiAgICB9XG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgQ09OU0VDVVRJVkVfUkVMT0FEUyA9IFwiY29uc2VjdXRpdmUtcmVsb2Fkc1wiXG5leHBvcnQgY29uc3QgTUFYX1JFTE9BRFMgPSAxMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUlOID0gNTAwMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUFYID0gMTAwMDBcbmV4cG9ydCBjb25zdCBGQUlMU0FGRV9KSVRURVIgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IFBIWF9FVkVOVF9DTEFTU0VTID0gW1xuICBcInBoeC1jbGljay1sb2FkaW5nXCIsIFwicGh4LWNoYW5nZS1sb2FkaW5nXCIsIFwicGh4LXN1Ym1pdC1sb2FkaW5nXCIsXG4gIFwicGh4LWtleWRvd24tbG9hZGluZ1wiLCBcInBoeC1rZXl1cC1sb2FkaW5nXCIsIFwicGh4LWJsdXItbG9hZGluZ1wiLCBcInBoeC1mb2N1cy1sb2FkaW5nXCJcbl1cbmV4cG9ydCBjb25zdCBQSFhfQ09NUE9ORU5UID0gXCJkYXRhLXBoeC1jb21wb25lbnRcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0xJTksgPSBcImRhdGEtcGh4LWxpbmtcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19TVEFUSUMgPSBcInRyYWNrLXN0YXRpY1wiXG5leHBvcnQgY29uc3QgUEhYX0xJTktfU1RBVEUgPSBcImRhdGEtcGh4LWxpbmstc3RhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUYgPSBcImRhdGEtcGh4LXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1JFRl9TUkMgPSBcImRhdGEtcGh4LXJlZi1zcmNcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUkFDS19VUExPQURTID0gXCJ0cmFjay11cGxvYWRzXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBMT0FEX1JFRiA9IFwiZGF0YS1waHgtdXBsb2FkLXJlZlwiXG5leHBvcnQgY29uc3QgUEhYX1BSRUZMSUdIVEVEX1JFRlMgPSBcImRhdGEtcGh4LXByZWZsaWdodGVkLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9ET05FX1JFRlMgPSBcImRhdGEtcGh4LWRvbmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RST1BfVEFSR0VUID0gXCJkcm9wLXRhcmdldFwiXG5leHBvcnQgY29uc3QgUEhYX0FDVElWRV9FTlRSWV9SRUZTID0gXCJkYXRhLXBoeC1hY3RpdmUtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfRklMRV9VUERBVEVEID0gXCJwaHg6bGl2ZS1maWxlOnVwZGF0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TS0lQID0gXCJkYXRhLXBoeC1za2lwXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJVTkUgPSBcImRhdGEtcGh4LXBydW5lXCJcbmV4cG9ydCBjb25zdCBQSFhfUEFHRV9MT0FESU5HID0gXCJwYWdlLWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9DT05ORUNURURfQ0xBU1MgPSBcInBoeC1jb25uZWN0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNDT05ORUNURURfQ0xBU1MgPSBcInBoeC1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MgPSBcInBoeC1uby1mZWVkYmFja1wiXG5leHBvcnQgY29uc3QgUEhYX0VSUk9SX0NMQVNTID0gXCJwaHgtZXJyb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9QQVJFTlRfSUQgPSBcImRhdGEtcGh4LXBhcmVudC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX01BSU4gPSBcImRhdGEtcGh4LW1haW5cIlxuZXhwb3J0IGNvbnN0IFBIWF9ST09UX0lEID0gXCJkYXRhLXBoeC1yb290LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJJR0dFUl9BQ1RJT04gPSBcInRyaWdnZXItYWN0aW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfRkVFREJBQ0tfRk9SID0gXCJmZWVkYmFjay1mb3JcIlxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfRk9DVVNFRCA9IFwicGh4LWhhcy1mb2N1c2VkXCJcbmV4cG9ydCBjb25zdCBGT0NVU0FCTEVfSU5QVVRTID0gW1widGV4dFwiLCBcInRleHRhcmVhXCIsIFwibnVtYmVyXCIsIFwiZW1haWxcIiwgXCJwYXNzd29yZFwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwiZGF0ZXRpbWUtbG9jYWxcIiwgXCJjb2xvclwiLCBcInJhbmdlXCJdXG5leHBvcnQgY29uc3QgQ0hFQ0tBQkxFX0lOUFVUUyA9IFtcImNoZWNrYm94XCIsIFwicmFkaW9cIl1cbmV4cG9ydCBjb25zdCBQSFhfSEFTX1NVQk1JVFRFRCA9IFwicGh4LWhhcy1zdWJtaXR0ZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9TRVNTSU9OID0gXCJkYXRhLXBoeC1zZXNzaW9uXCJcbmV4cG9ydCBjb25zdCBQSFhfVklFV19TRUxFQ1RPUiA9IGBbJHtQSFhfU0VTU0lPTn1dYFxuZXhwb3J0IGNvbnN0IFBIWF9TVElDS1kgPSBcImRhdGEtcGh4LXN0aWNreVwiXG5leHBvcnQgY29uc3QgUEhYX1NUQVRJQyA9IFwiZGF0YS1waHgtc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVBRE9OTFkgPSBcImRhdGEtcGh4LXJlYWRvbmx5XCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRUQgPSBcImRhdGEtcGh4LWRpc2FibGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIID0gXCJkaXNhYmxlLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSA9IFwiZGF0YS1waHgtZGlzYWJsZS13aXRoLXJlc3RvcmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9IT09LID0gXCJob29rXCJcbmV4cG9ydCBjb25zdCBQSFhfREVCT1VOQ0UgPSBcImRlYm91bmNlXCJcbmV4cG9ydCBjb25zdCBQSFhfVEhST1RUTEUgPSBcInRocm90dGxlXCJcbmV4cG9ydCBjb25zdCBQSFhfVVBEQVRFID0gXCJ1cGRhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVFJFQU0gPSBcInN0cmVhbVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBQSFhfTU9VTlRFRCA9IFwibW91bnRlZFwiXG5leHBvcnQgY29uc3QgTE9BREVSX1RJTUVPVVQgPSAxXG5leHBvcnQgY29uc3QgQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVCA9IDIwMFxuZXhwb3J0IGNvbnN0IEJJTkRJTkdfUFJFRklYID0gXCJwaHgtXCJcbmV4cG9ydCBjb25zdCBQVVNIX1RJTUVPVVQgPSAzMDAwMFxuZXhwb3J0IGNvbnN0IExJTktfSEVBREVSID0gXCJ4LXJlcXVlc3RlZC13aXRoXCJcbmV4cG9ydCBjb25zdCBSRVNQT05TRV9VUkxfSEVBREVSID0gXCJ4LXJlc3BvbnNlLXVybFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfVFJJR0dFUiA9IFwiZGVib3VuY2UtdHJpZ2dlclwiXG5leHBvcnQgY29uc3QgVEhST1RUTEVEID0gXCJ0aHJvdHRsZWRcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1BSRVZfS0VZID0gXCJkZWJvdW5jZS1wcmV2LWtleVwiXG5leHBvcnQgY29uc3QgREVGQVVMVFMgPSB7XG4gIGRlYm91bmNlOiAzMDAsXG4gIHRocm90dGxlOiAzMDBcbn1cblxuLy8gUmVuZGVyZWRcbmV4cG9ydCBjb25zdCBEWU5BTUlDUyA9IFwiZFwiXG5leHBvcnQgY29uc3QgU1RBVElDID0gXCJzXCJcbmV4cG9ydCBjb25zdCBDT01QT05FTlRTID0gXCJjXCJcbmV4cG9ydCBjb25zdCBFVkVOVFMgPSBcImVcIlxuZXhwb3J0IGNvbnN0IFJFUExZID0gXCJyXCJcbmV4cG9ydCBjb25zdCBUSVRMRSA9IFwidFwiXG5leHBvcnQgY29uc3QgVEVNUExBVEVTID0gXCJwXCJcbmV4cG9ydCBjb25zdCBTVFJFQU0gPSBcInN0cmVhbVwiXG4iLCAiaW1wb3J0IHtcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRyeVVwbG9hZGVyIHtcbiAgY29uc3RydWN0b3IoZW50cnksIGNodW5rU2l6ZSwgbGl2ZVNvY2tldCl7XG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZW50cnkgPSBlbnRyeVxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMuY2h1bmtTaXplID0gY2h1bmtTaXplXG4gICAgdGhpcy5jaHVua1RpbWVyID0gbnVsbFxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbCA9IGxpdmVTb2NrZXQuY2hhbm5lbChgbHZ1OiR7ZW50cnkucmVmfWAsIHt0b2tlbjogZW50cnkubWV0YWRhdGEoKX0pXG4gIH1cblxuICBlcnJvcihyZWFzb24pe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmNodW5rVGltZXIpXG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmxlYXZlKClcbiAgICB0aGlzLmVudHJ5LmVycm9yKHJlYXNvbilcbiAgfVxuXG4gIHVwbG9hZCgpe1xuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gICAgdGhpcy51cGxvYWRDaGFubmVsLmpvaW4oKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBfZGF0YSA9PiB0aGlzLnJlYWROZXh0Q2h1bmsoKSlcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgcmVhc29uID0+IHRoaXMuZXJyb3IocmVhc29uKSlcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5vZmZzZXQgPj0gdGhpcy5lbnRyeS5maWxlLnNpemUgfVxuXG4gIHJlYWROZXh0Q2h1bmsoKXtcbiAgICBsZXQgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyKClcbiAgICBsZXQgYmxvYiA9IHRoaXMuZW50cnkuZmlsZS5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5jaHVua1NpemUgKyB0aGlzLm9mZnNldClcbiAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgIGlmKGUudGFyZ2V0LmVycm9yID09PSBudWxsKXtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gZS50YXJnZXQucmVzdWx0LmJ5dGVMZW5ndGhcbiAgICAgICAgdGhpcy5wdXNoQ2h1bmsoZS50YXJnZXQucmVzdWx0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvZ0Vycm9yKFwiUmVhZCBlcnJvcjogXCIgKyBlLnRhcmdldC5lcnJvcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIH1cblxuICBwdXNoQ2h1bmsoY2h1bmspe1xuICAgIGlmKCF0aGlzLnVwbG9hZENoYW5uZWwuaXNKb2luZWQoKSl7IHJldHVybiB9XG4gICAgdGhpcy51cGxvYWRDaGFubmVsLnB1c2goXCJjaHVua1wiLCBjaHVuaylcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmVudHJ5LnByb2dyZXNzKCh0aGlzLm9mZnNldCAvIHRoaXMuZW50cnkuZmlsZS5zaXplKSAqIDEwMClcbiAgICAgICAgaWYoIXRoaXMuaXNEb25lKCkpe1xuICAgICAgICAgIHRoaXMuY2h1bmtUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWFkTmV4dENodW5rKCksIHRoaXMubGl2ZVNvY2tldC5nZXRMYXRlbmN5U2ltKCkgfHwgMClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9WSUVXX1NFTEVDVE9SXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCBFbnRyeVVwbG9hZGVyIGZyb20gXCIuL2VudHJ5X3VwbG9hZGVyXCJcblxuZXhwb3J0IGxldCBsb2dFcnJvciA9IChtc2csIG9iaikgPT4gY29uc29sZS5lcnJvciAmJiBjb25zb2xlLmVycm9yKG1zZywgb2JqKVxuXG5leHBvcnQgbGV0IGlzQ2lkID0gKGNpZCkgPT4ge1xuICBsZXQgdHlwZSA9IHR5cGVvZihjaWQpXG4gIHJldHVybiB0eXBlID09PSBcIm51bWJlclwiIHx8ICh0eXBlID09PSBcInN0cmluZ1wiICYmIC9eKDB8WzEtOV1cXGQqKSQvLnRlc3QoY2lkKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdER1cGxpY2F0ZUlkcygpe1xuICBsZXQgaWRzID0gbmV3IFNldCgpXG4gIGxldCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqW2lkXVwiKVxuICBmb3IobGV0IGkgPSAwLCBsZW4gPSBlbGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgaWYoaWRzLmhhcyhlbGVtc1tpXS5pZCkpe1xuICAgICAgY29uc29sZS5lcnJvcihgTXVsdGlwbGUgSURzIGRldGVjdGVkOiAke2VsZW1zW2ldLmlkfS4gRW5zdXJlIHVuaXF1ZSBlbGVtZW50IGlkcy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZHMuYWRkKGVsZW1zW2ldLmlkKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgbGV0IGRlYnVnID0gKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiB7XG4gIGlmKHZpZXcubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH1cbn1cblxuLy8gd3JhcHMgdmFsdWUgaW4gY2xvc3VyZSBvciByZXR1cm5zIGNsb3N1cmVcbmV4cG9ydCBsZXQgY2xvc3VyZSA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIiA/IHZhbCA6IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsIH1cblxuZXhwb3J0IGxldCBjbG9uZSA9IChvYmopID0+IHsgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkgfVxuXG5leHBvcnQgbGV0IGNsb3Nlc3RQaHhCaW5kaW5nID0gKGVsLCBiaW5kaW5nLCBib3JkZXJFbCkgPT4ge1xuICBkbyB7XG4gICAgaWYoZWwubWF0Y2hlcyhgWyR7YmluZGluZ31dYCkgJiYgIWVsLmRpc2FibGVkKXsgcmV0dXJuIGVsIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZVxuICB9IHdoaWxlKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxICYmICEoKGJvcmRlckVsICYmIGJvcmRlckVsLmlzU2FtZU5vZGUoZWwpKSB8fCBlbC5tYXRjaGVzKFBIWF9WSUVXX1NFTEVDVE9SKSkpXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBsZXQgaXNPYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAhKG9iaiBpbnN0YW5jZW9mIEFycmF5KVxufVxuXG5leHBvcnQgbGV0IGlzRXF1YWxPYmogPSAob2JqMSwgb2JqMikgPT4gSlNPTi5zdHJpbmdpZnkob2JqMSkgPT09IEpTT04uc3RyaW5naWZ5KG9iajIpXG5cbmV4cG9ydCBsZXQgaXNFbXB0eSA9IChvYmopID0+IHtcbiAgZm9yKGxldCB4IGluIG9iail7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBsZXQgbWF5YmUgPSAoZWwsIGNhbGxiYWNrKSA9PiBlbCAmJiBjYWxsYmFjayhlbClcblxuZXhwb3J0IGxldCBjaGFubmVsVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldCl7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgbGV0IGVudHJ5VXBsb2FkZXIgPSBuZXcgRW50cnlVcGxvYWRlcihlbnRyeSwgcmVzcC5jb25maWcuY2h1bmtfc2l6ZSwgbGl2ZVNvY2tldClcbiAgICBlbnRyeVVwbG9hZGVyLnVwbG9hZCgpXG4gIH0pXG59XG4iLCAibGV0IEJyb3dzZXIgPSB7XG4gIGNhblB1c2hTdGF0ZSgpeyByZXR1cm4gKHR5cGVvZiAoaGlzdG9yeS5wdXNoU3RhdGUpICE9PSBcInVuZGVmaW5lZFwiKSB9LFxuXG4gIGRyb3BMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpXG4gIH0sXG5cbiAgdXBkYXRlTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSwgaW5pdGlhbCwgZnVuYyl7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IGtleSA9IHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IG5ld1ZhbCA9IGN1cnJlbnQgPT09IG51bGwgPyBpbml0aWFsIDogZnVuYyhjdXJyZW50KVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkobmV3VmFsKSlcbiAgICByZXR1cm4gbmV3VmFsXG4gIH0sXG5cbiAgZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpKVxuICB9LFxuXG4gIHVwZGF0ZUN1cnJlbnRTdGF0ZShjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGNhbGxiYWNrKGhpc3Rvcnkuc3RhdGUgfHwge30pLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgfSxcblxuICBwdXNoU3RhdGUoa2luZCwgbWV0YSwgdG8pe1xuICAgIGlmKHRoaXMuY2FuUHVzaFN0YXRlKCkpe1xuICAgICAgaWYodG8gIT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmKXtcbiAgICAgICAgaWYobWV0YS50eXBlID09IFwicmVkaXJlY3RcIiAmJiBtZXRhLnNjcm9sbCl7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVkaXJlY3Rpbmcgc3RvcmUgdGhlIGN1cnJlbnQgc2Nyb2xsWSBmb3IgdGhlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZS5cbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gaGlzdG9yeS5zdGF0ZSB8fCB7fVxuICAgICAgICAgIGN1cnJlbnRTdGF0ZS5zY3JvbGwgPSBtZXRhLnNjcm9sbFxuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGN1cnJlbnRTdGF0ZSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgbWV0YS5zY3JvbGwgLy8gT25seSBzdG9yZSB0aGUgc2Nyb2xsIGluIHRoZSByZWRpcmVjdCBjYXNlLlxuICAgICAgICBoaXN0b3J5W2tpbmQgKyBcIlN0YXRlXCJdKG1ldGEsIFwiXCIsIHRvIHx8IG51bGwpIC8vIElFIHdpbGwgY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcbiAgICAgICAgbGV0IGhhc2hFbCA9IHRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuXG4gICAgICAgIGlmKGhhc2hFbCl7XG4gICAgICAgICAgaGFzaEVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgICAgfSBlbHNlIGlmKG1ldGEudHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIDApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWRpcmVjdCh0bylcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29va2llKG5hbWUsIHZhbHVlKXtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT0ke3ZhbHVlfWBcbiAgfSxcblxuICBnZXRDb29raWUobmFtZSl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCg/Oig/Ol58Lio7XFxzKikke25hbWV9XFxzKlxcPVxccyooW147XSopLiokKXxeLiokYCksIFwiJDFcIilcbiAgfSxcblxuICByZWRpcmVjdCh0b1VSTCwgZmxhc2gpe1xuICAgIGlmKGZsYXNoKXsgQnJvd3Nlci5zZXRDb29raWUoXCJfX3Bob2VuaXhfZmxhc2hfX1wiLCBmbGFzaCArIFwiOyBtYXgtYWdlPTYwMDAwOyBwYXRoPS9cIikgfVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRvVVJMXG4gIH0sXG5cbiAgbG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpeyByZXR1cm4gYCR7bmFtZXNwYWNlfS0ke3N1YmtleX1gIH0sXG5cbiAgZ2V0SGFzaFRhcmdldEVsKG1heWJlSGFzaCl7XG4gICAgbGV0IGhhc2ggPSBtYXliZUhhc2gudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSlcbiAgICBpZihoYXNoID09PSBcIlwiKXsgcmV0dXJuIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtuYW1lPVwiJHtoYXNofVwiXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclxuIiwgImltcG9ydCB7XG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIERFQk9VTkNFX1BSRVZfS0VZLFxuICBERUJPVU5DRV9UUklHR0VSLFxuICBGT0NVU0FCTEVfSU5QVVRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX01BSU4sXG4gIFBIWF9OT19GRUVEQkFDS19DTEFTUyxcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BSSVZBVEUsXG4gIFBIWF9SRUYsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgVEhST1RUTEVEXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxubGV0IERPTSA9IHtcbiAgYnlJZChpZCl7IHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgfHwgbG9nRXJyb3IoYG5vIGlkIGZvdW5kIGZvciAke2lkfWApIH0sXG5cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSl7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXG4gICAgaWYoZWwuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCl7IGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpIH1cbiAgfSxcblxuICBhbGwobm9kZSwgcXVlcnksIGNhbGxiYWNrKXtcbiAgICBpZighbm9kZSl7IHJldHVybiBbXSB9XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuZnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKVxuICAgIHJldHVybiBjYWxsYmFjayA/IGFycmF5LmZvckVhY2goY2FsbGJhY2spIDogYXJyYXlcbiAgfSxcblxuICBjaGlsZE5vZGVMZW5ndGgoaHRtbCl7XG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkRWxlbWVudENvdW50XG4gIH0sXG5cbiAgaXNVcGxvYWRJbnB1dChlbCl7IHJldHVybiBlbC50eXBlID09PSBcImZpbGVcIiAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpICE9PSBudWxsIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXsgcmV0dXJuIHRoaXMuYWxsKG5vZGUsIGBpbnB1dFt0eXBlPVwiZmlsZVwiXVske1BIWF9VUExPQURfUkVGfV1gKSB9LFxuXG4gIGZpbmRDb21wb25lbnROb2RlTGlzdChub2RlLCBjaWQpe1xuICAgIHJldHVybiB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl1gKSwgbm9kZSlcbiAgfSxcblxuICBpc1BoeERlc3Ryb3llZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5pZCAmJiBET00ucHJpdmF0ZShub2RlLCBcImRlc3Ryb3llZFwiKSA/IHRydWUgOiBmYWxzZVxuICB9LFxuXG4gIHdhbnRzTmV3VGFiKGUpe1xuICAgIGxldCB3YW50c05ld1RhYiA9IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUubWV0YUtleSB8fCAoZS5idXR0b24gJiYgZS5idXR0b24gPT09IDEpXG4gICAgcmV0dXJuIHdhbnRzTmV3VGFiIHx8IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKSA9PT0gXCJfYmxhbmtcIlxuICB9LFxuXG4gIGlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSl7XG4gICAgcmV0dXJuICFlLmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXRoaXMud2FudHNOZXdUYWIoZSlcbiAgfSxcblxuICBpc05ld1BhZ2VIcmVmKGhyZWYsIGN1cnJlbnRMb2NhdGlvbil7XG4gICAgbGV0IHVybFxuICAgIHRyeSB7XG4gICAgICB1cmwgPSBuZXcgVVJMKGhyZWYpXG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKGhyZWYsIGN1cnJlbnRMb2NhdGlvbilcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAvLyBiYWQgVVJMLCBmYWxsYmFjayB0byBsZXQgYnJvd3NlciB0cnkgaXQgYXMgZXh0ZXJuYWxcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih1cmwuaG9zdCA9PT0gY3VycmVudExvY2F0aW9uLmhvc3QgJiYgdXJsLnByb3RvY29sID09PSBjdXJyZW50TG9jYXRpb24ucHJvdG9jb2wpe1xuICAgICAgaWYodXJsLnBhdGhuYW1lID09PSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUgJiYgdXJsLnNlYXJjaCA9PT0gY3VycmVudExvY2F0aW9uLnNlYXJjaCl7XG4gICAgICAgIHJldHVybiB1cmwuaGFzaCA9PT0gXCJcIiAmJiAhdXJsLmhyZWYuZW5kc1dpdGgoXCIjXCIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgbWFya1BoeENoaWxkRGVzdHJveWVkKGVsKXtcbiAgICBpZih0aGlzLmlzUGh4Q2hpbGQoZWwpKXsgZWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBcIlwiKSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBcImRlc3Ryb3llZFwiLCB0cnVlKVxuICB9LFxuXG4gIGZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgcGFyZW50SWQpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGhpcy5maW5kUGh4Q2hpbGRyZW4odGVtcGxhdGUuY29udGVudCwgcGFyZW50SWQpXG4gIH0sXG5cbiAgaXNJZ25vcmVkKGVsLCBwaHhVcGRhdGUpe1xuICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgfHwgZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtdXBkYXRlXCIpKSA9PT0gXCJpZ25vcmVcIlxuICB9LFxuXG4gIGlzUGh4VXBkYXRlKGVsLCBwaHhVcGRhdGUsIHVwZGF0ZVR5cGVzKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIHVwZGF0ZVR5cGVzLmluZGV4T2YoZWwuZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkpID49IDBcbiAgfSxcblxuICBmaW5kUGh4U3RpY2t5KGVsKXsgcmV0dXJuIHRoaXMuYWxsKGVsLCBgWyR7UEhYX1NUSUNLWX1dYCkgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW4oZWwsIHBhcmVudElkKXtcbiAgICByZXR1cm4gdGhpcy5hbGwoZWwsIGAke1BIWF9WSUVXX1NFTEVDVE9SfVske1BIWF9QQVJFTlRfSUR9PVwiJHtwYXJlbnRJZH1cIl1gKVxuICB9LFxuXG4gIGZpbmRQYXJlbnRDSURzKG5vZGUsIGNpZHMpe1xuICAgIGxldCBpbml0aWFsID0gbmV3IFNldChjaWRzKVxuICAgIGxldCBwYXJlbnRDaWRzID1cbiAgICAgIGNpZHMucmVkdWNlKChhY2MsIGNpZCkgPT4ge1xuICAgICAgICBsZXQgc2VsZWN0b3IgPSBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl0gWyR7UEhYX0NPTVBPTkVOVH1dYFxuXG4gICAgICAgIHRoaXMuZmlsdGVyV2l0aGluU2FtZUxpdmVWaWV3KHRoaXMuYWxsKG5vZGUsIHNlbGVjdG9yKSwgbm9kZSlcbiAgICAgICAgICAubWFwKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSkpXG4gICAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gYWNjLmRlbGV0ZShjaGlsZENJRCkpXG5cbiAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgfSwgaW5pdGlhbClcblxuICAgIHJldHVybiBwYXJlbnRDaWRzLnNpemUgPT09IDAgPyBuZXcgU2V0KGNpZHMpIDogcGFyZW50Q2lkc1xuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIGNvcHlQcml2YXRlcyh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1BIWF9QUklWQVRFXSl7XG4gICAgICB0YXJnZXRbUEhYX1BSSVZBVEVdID0gc291cmNlW1BIWF9QUklWQVRFXVxuICAgIH1cbiAgfSxcblxuICBwdXRUaXRsZShzdHIpe1xuICAgIGxldCB0aXRsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpXG4gICAgaWYodGl0bGVFbCl7XG4gICAgICBsZXQge3ByZWZpeCwgc3VmZml4fSA9IHRpdGxlRWwuZGF0YXNldFxuICAgICAgZG9jdW1lbnQudGl0bGUgPSBgJHtwcmVmaXggfHwgXCJcIn0ke3N0cn0ke3N1ZmZpeCB8fCBcIlwifWBcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQudGl0bGUgPSBzdHJcbiAgICB9XG4gIH0sXG5cbiAgZGVib3VuY2UoZWwsIGV2ZW50LCBwaHhEZWJvdW5jZSwgZGVmYXVsdERlYm91bmNlLCBwaHhUaHJvdHRsZSwgZGVmYXVsdFRocm90dGxlLCBhc3luY0ZpbHRlciwgY2FsbGJhY2spe1xuICAgIGxldCBkZWJvdW5jZSA9IGVsLmdldEF0dHJpYnV0ZShwaHhEZWJvdW5jZSlcbiAgICBsZXQgdGhyb3R0bGUgPSBlbC5nZXRBdHRyaWJ1dGUocGh4VGhyb3R0bGUpXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgbGV0IHRyaWdnZXIgPSAoKSA9PiB0aHJvdHRsZSA/IHRoaXMuZGVsZXRlUHJpdmF0ZShlbCwgVEhST1RUTEVEKSA6IGNhbGxiYWNrKClcbiAgICAgICAgbGV0IGN1cnJlbnRDeWNsZSA9IHRoaXMuaW5jQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIHRyaWdnZXIpXG4gICAgICAgIGlmKGlzTmFOKHRpbWVvdXQpKXsgcmV0dXJuIGxvZ0Vycm9yKGBpbnZhbGlkIHRocm90dGxlL2RlYm91bmNlIHZhbHVlOiAke3ZhbHVlfWApIH1cbiAgICAgICAgaWYodGhyb3R0bGUpe1xuICAgICAgICAgIGxldCBuZXdLZXlEb3duID0gZmFsc2VcbiAgICAgICAgICBpZihldmVudC50eXBlID09PSBcImtleWRvd25cIil7XG4gICAgICAgICAgICBsZXQgcHJldktleSA9IHRoaXMucHJpdmF0ZShlbCwgREVCT1VOQ0VfUFJFVl9LRVkpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZLCBldmVudC5rZXkpXG4gICAgICAgICAgICBuZXdLZXlEb3duID0gcHJldktleSAhPT0gZXZlbnQua2V5XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIW5ld0tleURvd24gJiYgdGhpcy5wcml2YXRlKGVsLCBUSFJPVFRMRUQpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdHJ1ZSlcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZihhc3luY0ZpbHRlcigpKXsgdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpIH1cbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCBjdXJyZW50Q3ljbGUpIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm0gPSBlbC5mb3JtXG4gICAgICAgIGlmKGZvcm0gJiYgdGhpcy5vbmNlKGZvcm0sIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsICgpID0+IHtcbiAgICAgICAgICAgIEFycmF5LmZyb20oKG5ldyBGb3JtRGF0YShmb3JtKSkuZW50cmllcygpLCAoW25hbWVdKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBpbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke25hbWV9XCJdYClcbiAgICAgICAgICAgICAgdGhpcy5pbmNDeWNsZShpbnB1dCwgREVCT1VOQ0VfVFJJR0dFUilcbiAgICAgICAgICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBUSFJPVFRMRUQpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImJpbmQtZGVib3VuY2VcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSKSlcbiAgICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB0cmlnZ2VyQ3ljbGUoZWwsIGtleSwgY3VycmVudEN5Y2xlKXtcbiAgICBsZXQgW2N5Y2xlLCB0cmlnZ2VyXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KVxuICAgIGlmKCFjdXJyZW50Q3ljbGUpeyBjdXJyZW50Q3ljbGUgPSBjeWNsZSB9XG4gICAgaWYoY3VycmVudEN5Y2xlID09PSBjeWNsZSl7XG4gICAgICB0aGlzLmluY0N5Y2xlKGVsLCBrZXkpXG4gICAgICB0cmlnZ2VyKClcbiAgICB9XG4gIH0sXG5cbiAgb25jZShlbCwga2V5KXtcbiAgICBpZih0aGlzLnByaXZhdGUoZWwsIGtleSkgPT09IHRydWUpeyByZXR1cm4gZmFsc2UgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB0cnVlKVxuICAgIHJldHVybiB0cnVlXG4gIH0sXG5cbiAgaW5jQ3ljbGUoZWwsIGtleSwgdHJpZ2dlciA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICBsZXQgW2N1cnJlbnRDeWNsZV0gPSB0aGlzLnByaXZhdGUoZWwsIGtleSkgfHwgWzAsIHRyaWdnZXJdXG4gICAgY3VycmVudEN5Y2xlKytcbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgW2N1cnJlbnRDeWNsZSwgdHJpZ2dlcl0pXG4gICAgcmV0dXJuIGN1cnJlbnRDeWNsZVxuICB9LFxuXG4gIGRpc2NhcmRFcnJvcihjb250YWluZXIsIGVsLCBwaHhGZWVkYmFja0Zvcil7XG4gICAgbGV0IGZpZWxkID0gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShwaHhGZWVkYmFja0ZvcilcbiAgICAvLyBUT0RPOiBSZW1vdmUgaWQgbG9va3VwIGFmdGVyIHdlIHVwZGF0ZSBQaG9lbml4IHRvIHVzZSBpbnB1dF9uYW1lIGluc3RlYWQgb2YgaW5wdXRfaWRcbiAgICBsZXQgaW5wdXQgPSBmaWVsZCAmJiBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtmaWVsZH1cIl0sIFtuYW1lPVwiJHtmaWVsZH1cIl0sIFtuYW1lPVwiJHtmaWVsZH1bXVwiXWApXG4gICAgaWYoIWlucHV0KXsgcmV0dXJuIH1cblxuICAgIGlmKCEodGhpcy5wcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IHRoaXMucHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQpKSl7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKFBIWF9OT19GRUVEQkFDS19DTEFTUylcbiAgICB9XG4gIH0sXG5cbiAgcmVzZXRGb3JtKGZvcm0sIHBoeEZlZWRiYWNrRm9yKXtcbiAgICBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgbGV0IHF1ZXJ5ID0gYFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXQuaWR9XCJdLFxuICAgICAgICAgICAgICAgICAgIFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXQubmFtZX1cIl0sXG4gICAgICAgICAgICAgICAgICAgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dC5uYW1lLnJlcGxhY2UoL1xcW1xcXSQvLCBcIlwiKX1cIl1gXG5cbiAgICAgIHRoaXMuZGVsZXRlUHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VEKVxuICAgICAgdGhpcy5kZWxldGVQcml2YXRlKGlucHV0LCBQSFhfSEFTX1NVQk1JVFRFRClcbiAgICAgIHRoaXMuYWxsKGRvY3VtZW50LCBxdWVyeSwgZmVlZGJhY2tFbCA9PiB7XG4gICAgICAgIGZlZWRiYWNrRWwuY2xhc3NMaXN0LmFkZChQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2hvd0Vycm9yKGlucHV0RWwsIHBoeEZlZWRiYWNrRm9yKXtcbiAgICBpZihpbnB1dEVsLmlkIHx8IGlucHV0RWwubmFtZSl7XG4gICAgICB0aGlzLmFsbChpbnB1dEVsLmZvcm0sIGBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0RWwuaWR9XCJdLCBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0RWwubmFtZX1cIl1gLCAoZWwpID0+IHtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhlbCwgUEhYX05PX0ZFRURCQUNLX0NMQVNTKVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgaXNQaHhDaGlsZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRClcbiAgfSxcblxuICBpc1BoeFN0aWNreShub2RlKXtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NUSUNLWSkgIT09IG51bGxcbiAgfSxcblxuICBmaXJzdFBoeENoaWxkKGVsKXtcbiAgICByZXR1cm4gdGhpcy5pc1BoeENoaWxkKGVsKSA/IGVsIDogdGhpcy5hbGwoZWwsIGBbJHtQSFhfUEFSRU5UX0lEfV1gKVswXVxuICB9LFxuXG4gIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCBuYW1lLCBvcHRzID0ge30pe1xuICAgIGxldCBidWJibGVzID0gb3B0cy5idWJibGVzID09PSB1bmRlZmluZWQgPyB0cnVlIDogISFvcHRzLmJ1YmJsZXNcbiAgICBsZXQgZXZlbnRPcHRzID0ge2J1YmJsZXM6IGJ1YmJsZXMsIGNhbmNlbGFibGU6IHRydWUsIGRldGFpbDogb3B0cy5kZXRhaWwgfHwge319XG4gICAgbGV0IGV2ZW50ID0gbmFtZSA9PT0gXCJjbGlja1wiID8gbmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiLCBldmVudE9wdHMpIDogbmV3IEN1c3RvbUV2ZW50KG5hbWUsIGV2ZW50T3B0cylcbiAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudClcbiAgfSxcblxuICBjbG9uZU5vZGUobm9kZSwgaHRtbCl7XG4gICAgaWYodHlwZW9mIChodG1sKSA9PT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUodHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNsb25lZCA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKVxuICAgICAgY2xvbmVkLmlubmVySFRNTCA9IGh0bWxcbiAgICAgIHJldHVybiBjbG9uZWRcbiAgICB9XG4gIH0sXG5cbiAgbWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZXhjbHVkZSA9IG9wdHMuZXhjbHVkZSB8fCBbXVxuICAgIGxldCBpc0lnbm9yZWQgPSBvcHRzLmlzSWdub3JlZFxuICAgIGxldCBzb3VyY2VBdHRycyA9IHNvdXJjZS5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gc291cmNlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSBzb3VyY2VBdHRyc1tpXS5uYW1lXG4gICAgICBpZihleGNsdWRlLmluZGV4T2YobmFtZSkgPCAwKXsgdGFyZ2V0LnNldEF0dHJpYnV0ZShuYW1lLCBzb3VyY2UuZ2V0QXR0cmlidXRlKG5hbWUpKSB9XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldEF0dHJzID0gdGFyZ2V0LmF0dHJpYnV0ZXNcbiAgICBmb3IobGV0IGkgPSB0YXJnZXRBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICBsZXQgbmFtZSA9IHRhcmdldEF0dHJzW2ldLm5hbWVcbiAgICAgIGlmKGlzSWdub3JlZCl7XG4gICAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChcImRhdGEtXCIpICYmICFzb3VyY2UuaGFzQXR0cmlidXRlKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZighc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBtZXJnZUZvY3VzZWRJbnB1dCh0YXJnZXQsIHNvdXJjZSl7XG4gICAgLy8gc2tpcCBzZWxlY3RzIGJlY2F1c2UgRkYgd2lsbCByZXNldCBoaWdobGlnaHRlZCBpbmRleCBmb3IgYW55IHNldEF0dHJpYnV0ZVxuICAgIGlmKCEodGFyZ2V0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpKXsgRE9NLm1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIHtleGNsdWRlOiBbXCJ2YWx1ZVwiXX0pIH1cbiAgICBpZihzb3VyY2UucmVhZE9ubHkpe1xuICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJyZWFkb25seVwiKVxuICAgIH1cbiAgfSxcblxuICBoYXNTZWxlY3Rpb25SYW5nZShlbCl7XG4gICAgcmV0dXJuIGVsLnNldFNlbGVjdGlvblJhbmdlICYmIChlbC50eXBlID09PSBcInRleHRcIiB8fCBlbC50eXBlID09PSBcInRleHRhcmVhXCIpXG4gIH0sXG5cbiAgcmVzdG9yZUZvY3VzKGZvY3VzZWQsIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpe1xuICAgIGlmKCFET00uaXNUZXh0dWFsSW5wdXQoZm9jdXNlZCkpeyByZXR1cm4gfVxuICAgIGxldCB3YXNGb2N1c2VkID0gZm9jdXNlZC5tYXRjaGVzKFwiOmZvY3VzXCIpXG4gICAgaWYoZm9jdXNlZC5yZWFkT25seSl7IGZvY3VzZWQuYmx1cigpIH1cbiAgICBpZighd2FzRm9jdXNlZCl7IGZvY3VzZWQuZm9jdXMoKSB9XG4gICAgaWYodGhpcy5oYXNTZWxlY3Rpb25SYW5nZShmb2N1c2VkKSl7XG4gICAgICBmb2N1c2VkLnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpXG4gICAgfVxuICB9LFxuXG4gIGlzRm9ybUlucHV0KGVsKXsgcmV0dXJuIC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaS50ZXN0KGVsLnRhZ05hbWUpICYmIGVsLnR5cGUgIT09IFwiYnV0dG9uXCIgfSxcblxuICBzeW5jQXR0cnNUb1Byb3BzKGVsKXtcbiAgICBpZihlbCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSkgPj0gMCl7XG4gICAgICBlbC5jaGVja2VkID0gZWwuZ2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiKSAhPT0gbnVsbFxuICAgIH1cbiAgfSxcblxuICBpc1RleHR1YWxJbnB1dChlbCl7IHJldHVybiBGT0NVU0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZSkgPj0gMCB9LFxuXG4gIGlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKXtcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShwaHhUcmlnZ2VyRXh0ZXJuYWwpICE9PSBudWxsXG4gIH0sXG5cbiAgc3luY1BlbmRpbmdSZWYoZnJvbUVsLCB0b0VsLCBkaXNhYmxlV2l0aCl7XG4gICAgbGV0IHJlZiA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICBpZihyZWYgPT09IG51bGwpeyByZXR1cm4gdHJ1ZSB9XG4gICAgbGV0IHJlZlNyYyA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpXG5cbiAgICBpZihET00uaXNGb3JtSW5wdXQoZnJvbUVsKSB8fCBmcm9tRWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKSAhPT0gbnVsbCl7XG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXsgRE9NLm1lcmdlQXR0cnMoZnJvbUVsLCB0b0VsLCB7aXNJZ25vcmVkOiB0cnVlfSkgfVxuICAgICAgRE9NLnB1dFByaXZhdGUoZnJvbUVsLCBQSFhfUkVGLCB0b0VsKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IHtcbiAgICAgICAgZnJvbUVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpICYmIHRvRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpXG4gICAgICB9KVxuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRiwgcmVmKVxuICAgICAgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHJlZlNyYylcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGNsZWFuQ2hpbGROb2Rlcyhjb250YWluZXIsIHBoeFVwZGF0ZSl7XG4gICAgaWYoRE9NLmlzUGh4VXBkYXRlKGNvbnRhaW5lciwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICBsZXQgdG9SZW1vdmUgPSBbXVxuICAgICAgY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChjaGlsZE5vZGUgPT4ge1xuICAgICAgICBpZighY2hpbGROb2RlLmlkKXtcbiAgICAgICAgICAvLyBTa2lwIHdhcm5pbmcgaWYgaXQncyBhbiBlbXB0eSB0ZXh0IG5vZGUgKGUuZy4gYSBuZXctbGluZSlcbiAgICAgICAgICBsZXQgaXNFbXB0eVRleHROb2RlID0gY2hpbGROb2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBjaGlsZE5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gXCJcIlxuICAgICAgICAgIGlmKCFpc0VtcHR5VGV4dE5vZGUpe1xuICAgICAgICAgICAgbG9nRXJyb3IoXCJvbmx5IEhUTUwgZWxlbWVudCB0YWdzIHdpdGggYW4gaWQgYXJlIGFsbG93ZWQgaW5zaWRlIGNvbnRhaW5lcnMgd2l0aCBwaHgtdXBkYXRlLlxcblxcblwiICtcbiAgICAgICAgICAgICAgYHJlbW92aW5nIGlsbGVnYWwgbm9kZTogXCIkeyhjaGlsZE5vZGUub3V0ZXJIVE1MIHx8IGNoaWxkTm9kZS5ub2RlVmFsdWUpLnRyaW0oKX1cIlxcblxcbmApXG4gICAgICAgICAgfVxuICAgICAgICAgIHRvUmVtb3ZlLnB1c2goY2hpbGROb2RlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdG9SZW1vdmUuZm9yRWFjaChjaGlsZE5vZGUgPT4gY2hpbGROb2RlLnJlbW92ZSgpKVxuICAgIH1cbiAgfSxcblxuICByZXBsYWNlUm9vdENvbnRhaW5lcihjb250YWluZXIsIHRhZ05hbWUsIGF0dHJzKXtcbiAgICBsZXQgcmV0YWluZWRBdHRycyA9IG5ldyBTZXQoW1wiaWRcIiwgUEhYX1NFU1NJT04sIFBIWF9TVEFUSUMsIFBIWF9NQUlOLCBQSFhfUk9PVF9JRF0pXG4gICAgaWYoY29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpKXtcbiAgICAgIEFycmF5LmZyb20oY29udGFpbmVyLmF0dHJpYnV0ZXMpXG4gICAgICAgIC5maWx0ZXIoYXR0ciA9PiAhcmV0YWluZWRBdHRycy5oYXMoYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgICAuZm9yRWFjaChhdHRyID0+IGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKSlcblxuICAgICAgT2JqZWN0LmtleXMoYXR0cnMpXG4gICAgICAgIC5maWx0ZXIobmFtZSA9PiAhcmV0YWluZWRBdHRycy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLmZvckVhY2goYXR0ciA9PiBjb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKSlcblxuICAgICAgcmV0dXJuIGNvbnRhaW5lclxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZXdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpXG4gICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChhdHRyID0+IG5ld0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cnNbYXR0cl0pKVxuICAgICAgcmV0YWluZWRBdHRycy5mb3JFYWNoKGF0dHIgPT4gbmV3Q29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBjb250YWluZXIuZ2V0QXR0cmlidXRlKGF0dHIpKSlcbiAgICAgIG5ld0NvbnRhaW5lci5pbm5lckhUTUwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICBjb250YWluZXIucmVwbGFjZVdpdGgobmV3Q29udGFpbmVyKVxuICAgICAgcmV0dXJuIG5ld0NvbnRhaW5lclxuICAgIH1cbiAgfSxcblxuICBnZXRTdGlja3koZWwsIG5hbWUsIGRlZmF1bHRWYWwpe1xuICAgIGxldCBvcCA9IChET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIikgfHwgW10pLmZpbmQoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICBpZihvcCl7XG4gICAgICBsZXQgW19uYW1lLCBfb3AsIHN0YXNoZWRSZXN1bHRdID0gb3BcbiAgICAgIHJldHVybiBzdGFzaGVkUmVzdWx0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0eXBlb2YoZGVmYXVsdFZhbCkgPT09IFwiZnVuY3Rpb25cIiA/IGRlZmF1bHRWYWwoKSA6IGRlZmF1bHRWYWxcbiAgICB9XG4gIH0sXG5cbiAgZGVsZXRlU3RpY2t5KGVsLCBuYW1lKXtcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgcmV0dXJuIG9wcy5maWx0ZXIoKFtleGlzdGluZ05hbWUsIF9dKSA9PiBleGlzdGluZ05hbWUgIT09IG5hbWUpXG4gICAgfSlcbiAgfSxcblxuICBwdXRTdGlja3koZWwsIG5hbWUsIG9wKXtcbiAgICBsZXQgc3Rhc2hlZFJlc3VsdCA9IG9wKGVsKVxuICAgIHRoaXMudXBkYXRlUHJpdmF0ZShlbCwgXCJzdGlja3lcIiwgW10sIG9wcyA9PiB7XG4gICAgICBsZXQgZXhpc3RpbmdJbmRleCA9IG9wcy5maW5kSW5kZXgoKFtleGlzdGluZ05hbWUsIF0pID0+IG5hbWUgPT09IGV4aXN0aW5nTmFtZSlcbiAgICAgIGlmKGV4aXN0aW5nSW5kZXggPj0gMCl7XG4gICAgICAgIG9wc1tleGlzdGluZ0luZGV4XSA9IFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wcy5wdXNoKFtuYW1lLCBvcCwgc3Rhc2hlZFJlc3VsdF0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb3BzXG4gICAgfSlcbiAgfSxcblxuICBhcHBseVN0aWNreU9wZXJhdGlvbnMoZWwpe1xuICAgIGxldCBvcHMgPSBET00ucHJpdmF0ZShlbCwgXCJzdGlja3lcIilcbiAgICBpZighb3BzKXsgcmV0dXJuIH1cblxuICAgIG9wcy5mb3JFYWNoKChbbmFtZSwgb3AsIF9zdGFzaGVkXSkgPT4gdGhpcy5wdXRTdGlja3koZWwsIG5hbWUsIG9wKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBET00iLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNoYW5uZWxVcGxvYWRlcixcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVcGxvYWRFbnRyeSB7XG4gIHN0YXRpYyBpc0FjdGl2ZShmaWxlRWwsIGZpbGUpe1xuICAgIGxldCBpc05ldyA9IGZpbGUuX3BoeFJlZiA9PT0gdW5kZWZpbmVkXG4gICAgbGV0IGFjdGl2ZVJlZnMgPSBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzQWN0aXZlID0gYWN0aXZlUmVmcy5pbmRleE9mKExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpKSA+PSAwXG4gICAgcmV0dXJuIGZpbGUuc2l6ZSA+IDAgJiYgKGlzTmV3IHx8IGlzQWN0aXZlKVxuICB9XG5cbiAgc3RhdGljIGlzUHJlZmxpZ2h0ZWQoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgcHJlZmxpZ2h0ZWRSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzUHJlZmxpZ2h0ZWQgPSBwcmVmbGlnaHRlZFJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBpc1ByZWZsaWdodGVkICYmIHRoaXMuaXNBY3RpdmUoZmlsZUVsLCBmaWxlKVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZUVsLCBmaWxlLCB2aWV3KXtcbiAgICB0aGlzLnJlZiA9IExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpXG4gICAgdGhpcy5maWxlRWwgPSBmaWxlRWxcbiAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubWV0YSA9IG51bGxcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2VcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDBcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gLTFcbiAgICB0aGlzLl9vbkRvbmUgPSBmdW5jdGlvbiAoKXsgfVxuICAgIHRoaXMuX29uRWxVcGRhdGVkID0gdGhpcy5vbkVsVXBkYXRlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5maWxlRWwuYWRkRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICB9XG5cbiAgbWV0YWRhdGEoKXsgcmV0dXJuIHRoaXMubWV0YSB9XG5cbiAgcHJvZ3Jlc3MocHJvZ3Jlc3Mpe1xuICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5mbG9vcihwcm9ncmVzcylcbiAgICBpZih0aGlzLl9wcm9ncmVzcyA+IHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQpe1xuICAgICAgaWYodGhpcy5fcHJvZ3Jlc3MgPj0gMTAwKXtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAxMDBcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IDEwMFxuICAgICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwgMTAwLCAoKSA9PiB7XG4gICAgICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICAgICAgdGhpcy5fb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSB0aGlzLl9wcm9ncmVzc1xuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHRoaXMuX3Byb2dyZXNzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZVxuICAgIHRoaXMuX2lzRG9uZSA9IHRydWVcbiAgICB0aGlzLl9vbkRvbmUoKVxuICB9XG5cbiAgaXNEb25lKCl7IHJldHVybiB0aGlzLl9pc0RvbmUgfVxuXG4gIGVycm9yKHJlYXNvbiA9IFwiZmFpbGVkXCIpe1xuICAgIHRoaXMuZmlsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHtlcnJvcjogcmVhc29ufSlcbiAgICBMaXZlVXBsb2FkZXIuY2xlYXJGaWxlcyh0aGlzLmZpbGVFbClcbiAgfVxuXG4gIC8vcHJpdmF0ZVxuXG4gIG9uRG9uZShjYWxsYmFjayl7XG4gICAgdGhpcy5fb25Eb25lID0gKCkgPT4ge1xuICAgICAgdGhpcy5maWxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIG9uRWxVcGRhdGVkKCl7XG4gICAgbGV0IGFjdGl2ZVJlZnMgPSB0aGlzLmZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKS5zcGxpdChcIixcIilcbiAgICBpZihhY3RpdmVSZWZzLmluZGV4T2YodGhpcy5yZWYpID09PSAtMSl7IHRoaXMuY2FuY2VsKCkgfVxuICB9XG5cbiAgdG9QcmVmbGlnaHRQYXlsb2FkKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3RfbW9kaWZpZWQ6IHRoaXMuZmlsZS5sYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lOiB0aGlzLmZpbGUubmFtZSxcbiAgICAgIHJlbGF0aXZlX3BhdGg6IHRoaXMuZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGgsXG4gICAgICBzaXplOiB0aGlzLmZpbGUuc2l6ZSxcbiAgICAgIHR5cGU6IHRoaXMuZmlsZS50eXBlLFxuICAgICAgcmVmOiB0aGlzLnJlZlxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZGVyKHVwbG9hZGVycyl7XG4gICAgaWYodGhpcy5tZXRhLnVwbG9hZGVyKXtcbiAgICAgIGxldCBjYWxsYmFjayA9IHVwbG9hZGVyc1t0aGlzLm1ldGEudXBsb2FkZXJdIHx8IGxvZ0Vycm9yKGBubyB1cGxvYWRlciBjb25maWd1cmVkIGZvciAke3RoaXMubWV0YS51cGxvYWRlcn1gKVxuICAgICAgcmV0dXJuIHtuYW1lOiB0aGlzLm1ldGEudXBsb2FkZXIsIGNhbGxiYWNrOiBjYWxsYmFja31cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtuYW1lOiBcImNoYW5uZWxcIiwgY2FsbGJhY2s6IGNoYW5uZWxVcGxvYWRlcn1cbiAgICB9XG4gIH1cblxuICB6aXBQb3N0RmxpZ2h0KHJlc3Ape1xuICAgIHRoaXMubWV0YSA9IHJlc3AuZW50cmllc1t0aGlzLnJlZl1cbiAgICBpZighdGhpcy5tZXRhKXsgbG9nRXJyb3IoYG5vIHByZWZsaWdodCB1cGxvYWQgcmVzcG9uc2UgcmV0dXJuZWQgd2l0aCByZWYgJHt0aGlzLnJlZn1gLCB7aW5wdXQ6IHRoaXMuZmlsZUVsLCByZXNwb25zZTogcmVzcH0pIH1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFBIWF9ET05FX1JFRlMsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBVcGxvYWRFbnRyeSBmcm9tIFwiLi91cGxvYWRfZW50cnlcIlxuXG5sZXQgbGl2ZVVwbG9hZGVyRmlsZVJlZiA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVVwbG9hZGVyIHtcbiAgc3RhdGljIGdlbkZpbGVSZWYoZmlsZSl7XG4gICAgbGV0IHJlZiA9IGZpbGUuX3BoeFJlZlxuICAgIGlmKHJlZiAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiByZWZcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZS5fcGh4UmVmID0gKGxpdmVVcGxvYWRlckZpbGVSZWYrKykudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIGZpbGUuX3BoeFJlZlxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRFbnRyeURhdGFVUkwoaW5wdXRFbCwgcmVmLCBjYWxsYmFjayl7XG4gICAgbGV0IGZpbGUgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpLmZpbmQoZmlsZSA9PiB0aGlzLmdlbkZpbGVSZWYoZmlsZSkgPT09IHJlZilcbiAgICBjYWxsYmFjayhVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpKVxuICB9XG5cbiAgc3RhdGljIGhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCl7XG4gICAgbGV0IGFjdGl2ZSA9IDBcbiAgICBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaWYoaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFBIWF9ET05FX1JFRlMpKXtcbiAgICAgICAgYWN0aXZlKytcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBhY3RpdmUgPiAwXG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKXtcbiAgICBsZXQgZmlsZXMgPSB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0RWwpXG4gICAgbGV0IGZpbGVEYXRhID0ge31cbiAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgbGV0IGVudHJ5ID0ge3BhdGg6IGlucHV0RWwubmFtZX1cbiAgICAgIGxldCB1cGxvYWRSZWYgPSBpbnB1dEVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRilcbiAgICAgIGZpbGVEYXRhW3VwbG9hZFJlZl0gPSBmaWxlRGF0YVt1cGxvYWRSZWZdIHx8IFtdXG4gICAgICBlbnRyeS5yZWYgPSB0aGlzLmdlbkZpbGVSZWYoZmlsZSlcbiAgICAgIGVudHJ5Lmxhc3RfbW9kaWZpZWQgPSBmaWxlLmxhc3RNb2RpZmllZFxuICAgICAgZW50cnkubmFtZSA9IGZpbGUubmFtZSB8fCBlbnRyeS5yZWZcbiAgICAgIGVudHJ5LnJlbGF0aXZlX3BhdGggPSBmaWxlLndlYmtpdFJlbGF0aXZlUGF0aFxuICAgICAgZW50cnkudHlwZSA9IGZpbGUudHlwZVxuICAgICAgZW50cnkuc2l6ZSA9IGZpbGUuc2l6ZVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMsIGRhdGFUcmFuc2Zlcil7XG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiKSAhPT0gbnVsbCl7XG4gICAgICBsZXQgbmV3RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiAhdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGYgPT4gT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5jb25jYXQobmV3RmlsZXMpKVxuICAgICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgaW5wdXRFbCBmaWxlcyB0byBhbGlnbiBvdXRwdXQgd2l0aCBwcm9ncmFtbWF0aWMgY2hhbmdlcyAoaS5lLiBkcmFnIGFuZCBkcm9wKVxuICAgICAgaWYoZGF0YVRyYW5zZmVyICYmIGRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGggPiAwKXsgaW5wdXRFbC5maWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcyB9XG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIGZpbGVzKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlSW5wdXRzKGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGVsID0+IGVsLmZpbGVzICYmIHRoaXMuYWN0aXZlRmlsZXMoZWwpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZXMoaW5wdXQpe1xuICAgIHJldHVybiAoRE9NLnByaXZhdGUoaW5wdXQsIFwiZmlsZXNcIikgfHwgW10pLmZpbHRlcihmID0+IFVwbG9hZEVudHJ5LmlzQWN0aXZlKGlucHV0LCBmKSlcbiAgfVxuXG4gIHN0YXRpYyBpbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihpbnB1dCA9PiB0aGlzLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpLmxlbmd0aCA+IDApXG4gIH1cblxuICBzdGF0aWMgZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCl7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXQpLmZpbHRlcihmID0+ICFVcGxvYWRFbnRyeS5pc1ByZWZsaWdodGVkKGlucHV0LCBmKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGlucHV0RWwsIHZpZXcsIG9uQ29tcGxldGUpe1xuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgdGhpcy5fZW50cmllcyA9XG4gICAgICBBcnJheS5mcm9tKExpdmVVcGxvYWRlci5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0RWwpIHx8IFtdKVxuICAgICAgICAubWFwKGZpbGUgPT4gbmV3IFVwbG9hZEVudHJ5KGlucHV0RWwsIGZpbGUsIHZpZXcpKVxuXG4gICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9IHRoaXMuX2VudHJpZXMubGVuZ3RoXG4gIH1cblxuICBlbnRyaWVzKCl7IHJldHVybiB0aGlzLl9lbnRyaWVzIH1cblxuICBpbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCBsaXZlU29ja2V0KXtcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIHRoaXMuX2VudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgZW50cnkuemlwUG9zdEZsaWdodChyZXNwKVxuICAgICAgICBlbnRyeS5vbkRvbmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MtLVxuICAgICAgICAgIGlmKHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPT09IDApeyB0aGlzLm9uQ29tcGxldGUoKSB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfSlcblxuICAgIGxldCBncm91cGVkRW50cmllcyA9IHRoaXMuX2VudHJpZXMucmVkdWNlKChhY2MsIGVudHJ5KSA9PiB7XG4gICAgICBsZXQge25hbWUsIGNhbGxiYWNrfSA9IGVudHJ5LnVwbG9hZGVyKGxpdmVTb2NrZXQudXBsb2FkZXJzKVxuICAgICAgYWNjW25hbWVdID0gYWNjW25hbWVdIHx8IHtjYWxsYmFjazogY2FsbGJhY2ssIGVudHJpZXM6IFtdfVxuICAgICAgYWNjW25hbWVdLmVudHJpZXMucHVzaChlbnRyeSlcbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCB7fSlcblxuICAgIGZvcihsZXQgbmFtZSBpbiBncm91cGVkRW50cmllcyl7XG4gICAgICBsZXQge2NhbGxiYWNrLCBlbnRyaWVzfSA9IGdyb3VwZWRFbnRyaWVzW25hbWVdXG4gICAgICBjYWxsYmFjayhlbnRyaWVzLCBvbkVycm9yLCByZXNwLCBsaXZlU29ja2V0KVxuICAgIH1cbiAgfVxufVxuIiwgImxldCBBUklBID0ge1xuICBmb2N1c01haW4oKXtcbiAgICBsZXQgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW4gaDEsIG1haW4sIGgxXCIpXG4gICAgaWYodGFyZ2V0KXtcbiAgICAgIGxldCBvcmlnVGFiSW5kZXggPSB0YXJnZXQudGFiSW5kZXhcbiAgICAgIHRhcmdldC50YWJJbmRleCA9IC0xXG4gICAgICB0YXJnZXQuZm9jdXMoKVxuICAgICAgdGFyZ2V0LnRhYkluZGV4ID0gb3JpZ1RhYkluZGV4XG4gICAgfVxuICB9LFxuXG4gIGFueU9mKGluc3RhbmNlLCBjbGFzc2VzKXsgcmV0dXJuIGNsYXNzZXMuZmluZChuYW1lID0+IGluc3RhbmNlIGluc3RhbmNlb2YgbmFtZSkgfSxcblxuICBpc0ZvY3VzYWJsZShlbCwgaW50ZXJhY3RpdmVPbmx5KXtcbiAgICByZXR1cm4oXG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCAmJiBlbC5yZWwgIT09IFwiaWdub3JlXCIpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MQXJlYUVsZW1lbnQgJiYgZWwuaHJlZiAhPT0gdW5kZWZpbmVkKSB8fFxuICAgICAgKCFlbC5kaXNhYmxlZCAmJiAodGhpcy5hbnlPZihlbCwgW0hUTUxJbnB1dEVsZW1lbnQsIEhUTUxTZWxlY3RFbGVtZW50LCBIVE1MVGV4dEFyZWFFbGVtZW50LCBIVE1MQnV0dG9uRWxlbWVudF0pKSkgfHxcbiAgICAgIChlbCBpbnN0YW5jZW9mIEhUTUxJRnJhbWVFbGVtZW50KSB8fFxuICAgICAgKGVsLnRhYkluZGV4ID4gMCB8fCAoIWludGVyYWN0aXZlT25seSAmJiBlbC50YWJJbmRleCA9PT0gMCAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSAhPT0gbnVsbCAmJiBlbC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSAhPT0gXCJ0cnVlXCIpKVxuICAgIClcbiAgfSxcblxuICBhdHRlbXB0Rm9jdXMoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgaWYodGhpcy5pc0ZvY3VzYWJsZShlbCwgaW50ZXJhY3RpdmVPbmx5KSl7IHRyeXsgZWwuZm9jdXMoKSB9IGNhdGNoKGUpe30gfVxuICAgIHJldHVybiAhIWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5pc1NhbWVOb2RlKGVsKVxuICB9LFxuXG4gIGZvY3VzRmlyc3RJbnRlcmFjdGl2ZShlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICB3aGlsZShjaGlsZCl7XG4gICAgICBpZih0aGlzLmF0dGVtcHRGb2N1cyhjaGlsZCwgdHJ1ZSkgfHwgdGhpcy5mb2N1c0ZpcnN0SW50ZXJhY3RpdmUoY2hpbGQsIHRydWUpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzRmlyc3QoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQpIHx8IHRoaXMuZm9jdXNGaXJzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH0sXG5cbiAgZm9jdXNMYXN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5sYXN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQpIHx8IHRoaXMuZm9jdXNMYXN0KGNoaWxkKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmdcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEFSSUEiLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IEFSSUEgZnJvbSBcIi4vYXJpYVwiXG5cbmxldCBIb29rcyA9IHtcbiAgTGl2ZUZpbGVVcGxvYWQ6IHtcbiAgICBhY3RpdmVSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpIH0sXG5cbiAgICBwcmVmbGlnaHRlZFJlZnMoKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9QUkVGTElHSFRFRF9SRUZTKSB9LFxuXG4gICAgbW91bnRlZCgpeyB0aGlzLnByZWZsaWdodGVkV2FzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKSB9LFxuXG4gICAgdXBkYXRlZCgpe1xuICAgICAgbGV0IG5ld1ByZWZsaWdodHMgPSB0aGlzLnByZWZsaWdodGVkUmVmcygpXG4gICAgICBpZih0aGlzLnByZWZsaWdodGVkV2FzICE9PSBuZXdQcmVmbGlnaHRzKXtcbiAgICAgICAgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IG5ld1ByZWZsaWdodHNcbiAgICAgICAgaWYobmV3UHJlZmxpZ2h0cyA9PT0gXCJcIil7XG4gICAgICAgICAgdGhpcy5fX3ZpZXcuY2FuY2VsU3VibWl0KHRoaXMuZWwuZm9ybSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmFjdGl2ZVJlZnMoKSA9PT0gXCJcIil7IHRoaXMuZWwudmFsdWUgPSBudWxsIH1cbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoUEhYX0xJVkVfRklMRV9VUERBVEVEKSlcbiAgICB9XG4gIH0sXG5cbiAgTGl2ZUltZ1ByZXZpZXc6IHtcbiAgICBtb3VudGVkKCl7XG4gICAgICB0aGlzLnJlZiA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtZW50cnktcmVmXCIpXG4gICAgICB0aGlzLmlucHV0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRikpXG4gICAgICBMaXZlVXBsb2FkZXIuZ2V0RW50cnlEYXRhVVJMKHRoaXMuaW5wdXRFbCwgdGhpcy5yZWYsIHVybCA9PiB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsXG4gICAgICAgIHRoaXMuZWwuc3JjID0gdXJsXG4gICAgICB9KVxuICAgIH0sXG4gICAgZGVzdHJveWVkKCl7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMudXJsKVxuICAgIH1cbiAgfSxcbiAgRm9jdXNXcmFwOiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5mb2N1c1N0YXJ0ID0gdGhpcy5lbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c0VuZCA9IHRoaXMuZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgICAgdGhpcy5mb2N1c1N0YXJ0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzTGFzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZm9jdXNFbmQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKSlcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpzaG93LWVuZFwiLCAoKSA9PiB0aGlzLmVsLmZvY3VzKCkpXG4gICAgICBpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5ICE9PSBcIm5vbmVcIil7XG4gICAgICAgIEFSSUEuZm9jdXNGaXJzdCh0aGlzLmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb29rc1xuIiwgImltcG9ydCB7XG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBET01Qb3N0TW9ycGhSZXN0b3JlciB7XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lckJlZm9yZSwgY29udGFpbmVyQWZ0ZXIsIHVwZGF0ZVR5cGUpe1xuICAgIGxldCBpZHNCZWZvcmUgPSBuZXcgU2V0KClcbiAgICBsZXQgaWRzQWZ0ZXIgPSBuZXcgU2V0KFsuLi5jb250YWluZXJBZnRlci5jaGlsZHJlbl0ubWFwKGNoaWxkID0+IGNoaWxkLmlkKSlcblxuICAgIGxldCBlbGVtZW50c1RvTW9kaWZ5ID0gW11cblxuICAgIEFycmF5LmZyb20oY29udGFpbmVyQmVmb3JlLmNoaWxkcmVuKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmKGNoaWxkLmlkKXsgLy8gYWxsIG9mIG91ciBjaGlsZHJlbiBzaG91bGQgYmUgZWxlbWVudHMgd2l0aCBpZHNcbiAgICAgICAgaWRzQmVmb3JlLmFkZChjaGlsZC5pZClcbiAgICAgICAgaWYoaWRzQWZ0ZXIuaGFzKGNoaWxkLmlkKSl7XG4gICAgICAgICAgbGV0IHByZXZpb3VzRWxlbWVudElkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkXG4gICAgICAgICAgZWxlbWVudHNUb01vZGlmeS5wdXNoKHtlbGVtZW50SWQ6IGNoaWxkLmlkLCBwcmV2aW91c0VsZW1lbnRJZDogcHJldmlvdXNFbGVtZW50SWR9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJBZnRlci5pZFxuICAgIHRoaXMudXBkYXRlVHlwZSA9IHVwZGF0ZVR5cGVcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkgPSBlbGVtZW50c1RvTW9kaWZ5XG4gICAgdGhpcy5lbGVtZW50SWRzVG9BZGQgPSBbLi4uaWRzQWZ0ZXJdLmZpbHRlcihpZCA9PiAhaWRzQmVmb3JlLmhhcyhpZCkpXG4gIH1cblxuICAvLyBXZSBkbyB0aGUgZm9sbG93aW5nIHRvIG9wdGltaXplIGFwcGVuZC9wcmVwZW5kIG9wZXJhdGlvbnM6XG4gIC8vICAgMSkgVHJhY2sgaWRzIG9mIG1vZGlmaWVkIGVsZW1lbnRzICYgb2YgbmV3IGVsZW1lbnRzXG4gIC8vICAgMikgQWxsIHRoZSBtb2RpZmllZCBlbGVtZW50cyBhcmUgcHV0IGJhY2sgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIERPTSB0cmVlXG4gIC8vICAgICAgYnkgc3RvcmluZyB0aGUgaWQgb2YgdGhlaXIgcHJldmlvdXMgc2libGluZ1xuICAvLyAgIDMpIE5ldyBlbGVtZW50cyBhcmUgZ29pbmcgdG8gYmUgcHV0IGluIHRoZSByaWdodCBwbGFjZSBieSBtb3JwaGRvbSBkdXJpbmcgYXBwZW5kLlxuICAvLyAgICAgIEZvciBwcmVwZW5kLCB3ZSBtb3ZlIHRoZW0gdG8gdGhlIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBjb250YWluZXJcbiAgcGVyZm9ybSgpe1xuICAgIGxldCBjb250YWluZXIgPSBET00uYnlJZCh0aGlzLmNvbnRhaW5lcklkKVxuICAgIHRoaXMuZWxlbWVudHNUb01vZGlmeS5mb3JFYWNoKGVsZW1lbnRUb01vZGlmeSA9PiB7XG4gICAgICBpZihlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpe1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkucHJldmlvdXNFbGVtZW50SWQpLCBwcmV2aW91c0VsZW0gPT4ge1xuICAgICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICAgIGxldCBpc0luUmlnaHRQbGFjZSA9IGVsZW0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuaWQgPT0gcHJldmlvdXNFbGVtLmlkXG4gICAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW0uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJlbmRcIiwgZWxlbSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgY29udGFpbmVyXG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRUb01vZGlmeS5lbGVtZW50SWQpLCBlbGVtID0+IHtcbiAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgPT0gbnVsbFxuICAgICAgICAgIGlmKCFpc0luUmlnaHRQbGFjZSl7XG4gICAgICAgICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBlbGVtKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYodGhpcy51cGRhdGVUeXBlID09IFwicHJlcGVuZFwiKXtcbiAgICAgIHRoaXMuZWxlbWVudElkc1RvQWRkLnJldmVyc2UoKS5mb3JFYWNoKGVsZW1JZCA9PiB7XG4gICAgICAgIG1heWJlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1JZCksIGVsZW0gPT4gY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSkpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwgInZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFID0gMTE7XG5cbmZ1bmN0aW9uIG1vcnBoQXR0cnMoZnJvbU5vZGUsIHRvTm9kZSkge1xuICAgIHZhciB0b05vZGVBdHRycyA9IHRvTm9kZS5hdHRyaWJ1dGVzO1xuICAgIHZhciBhdHRyO1xuICAgIHZhciBhdHRyTmFtZTtcbiAgICB2YXIgYXR0ck5hbWVzcGFjZVVSSTtcbiAgICB2YXIgYXR0clZhbHVlO1xuICAgIHZhciBmcm9tVmFsdWU7XG5cbiAgICAvLyBkb2N1bWVudC1mcmFnbWVudHMgZG9udCBoYXZlIGF0dHJpYnV0ZXMgc28gbGV0cyBub3QgZG8gYW55dGhpbmdcbiAgICBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IGZyb21Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnRcbiAgICBmb3IgKHZhciBpID0gdG9Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXR0ciA9IHRvTm9kZUF0dHJzW2ldO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgICAgICBhdHRyVmFsdWUgPSBhdHRyLnZhbHVlO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlTlMoYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5wcmVmaXggPT09ICd4bWxucycpe1xuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTsgLy8gSXQncyBub3QgYWxsb3dlZCB0byBzZXQgYW4gYXR0cmlidXRlIHdpdGggdGhlIFhNTE5TIG5hbWVzcGFjZSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIGB4bWxuc2AgcHJlZml4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbVZhbHVlID0gZnJvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSBleHRyYSBhdHRyaWJ1dGVzIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBET00gZWxlbWVudCB0aGF0XG4gICAgLy8gd2VyZW4ndCBmb3VuZCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAgdmFyIGZyb21Ob2RlQXR0cnMgPSBmcm9tTm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgZm9yICh2YXIgZCA9IGZyb21Ob2RlQXR0cnMubGVuZ3RoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgYXR0ciA9IGZyb21Ob2RlQXR0cnNbZF07XG4gICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICBhdHRyTmFtZXNwYWNlVVJJID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5sb2NhbE5hbWUgfHwgYXR0ck5hbWU7XG5cbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdG9Ob2RlLmhhc0F0dHJpYnV0ZShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgcmFuZ2U7IC8vIENyZWF0ZSBhIHJhbmdlIG9iamVjdCBmb3IgZWZmaWNlbnRseSByZW5kZXJpbmcgc3RyaW5ncyB0byBlbGVtZW50cy5cbnZhciBOU19YSFRNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcblxudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBkb2N1bWVudDtcbnZhciBIQVNfVEVNUExBVEVfU1VQUE9SVCA9ICEhZG9jICYmICdjb250ZW50JyBpbiBkb2MuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnZhciBIQVNfUkFOR0VfU1VQUE9SVCA9ICEhZG9jICYmIGRvYy5jcmVhdGVSYW5nZSAmJiAnY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50JyBpbiBkb2MuY3JlYXRlUmFuZ2UoKTtcblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cikge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2MuYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cik7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBzdHI7XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbi8qKlxuICogVGhpcyBpcyBhYm91dCB0aGUgc2FtZVxuICogdmFyIGh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHN0ciwgJ3RleHQvaHRtbCcpO1xuICogcmV0dXJuIGh0bWwuYm9keS5maXJzdENoaWxkO1xuICpcbiAqIEBtZXRob2QgdG9FbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKi9cbmZ1bmN0aW9uIHRvRWxlbWVudChzdHIpIHtcbiAgICBzdHIgPSBzdHIudHJpbSgpO1xuICAgIGlmIChIQVNfVEVNUExBVEVfU1VQUE9SVCkge1xuICAgICAgLy8gYXZvaWQgcmVzdHJpY3Rpb25zIG9uIGNvbnRlbnQgZm9yIHRoaW5ncyBsaWtlIGA8dHI+PHRoPkhpPC90aD48L3RyPmAgd2hpY2hcbiAgICAgIC8vIGNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBkb2Vzbid0IHN1cHBvcnRcbiAgICAgIC8vIDx0ZW1wbGF0ZT4gc3VwcG9ydCBub3QgYXZhaWxhYmxlIGluIElFXG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tVGVtcGxhdGUoc3RyKTtcbiAgICB9IGVsc2UgaWYgKEhBU19SQU5HRV9TVVBQT1JUKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tUmFuZ2Uoc3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRnJhZ21lbnRGcm9tV3JhcChzdHIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gbm9kZSdzIG5hbWVzIGFyZSB0aGUgc2FtZS5cbiAqXG4gKiBOT1RFOiBXZSBkb24ndCBib3RoZXIgY2hlY2tpbmcgYG5hbWVzcGFjZVVSSWAgYmVjYXVzZSB5b3Ugd2lsbCBuZXZlciBmaW5kIHR3byBIVE1MIGVsZW1lbnRzIHdpdGggdGhlIHNhbWVcbiAqICAgICAgIG5vZGVOYW1lIGFuZCBkaWZmZXJlbnQgbmFtZXNwYWNlIFVSSXMuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGIgVGhlIHRhcmdldCBlbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjb21wYXJlTm9kZU5hbWVzKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBmcm9tTm9kZU5hbWUgPSBmcm9tRWwubm9kZU5hbWU7XG4gICAgdmFyIHRvTm9kZU5hbWUgPSB0b0VsLm5vZGVOYW1lO1xuICAgIHZhciBmcm9tQ29kZVN0YXJ0LCB0b0NvZGVTdGFydDtcblxuICAgIGlmIChmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnJvbUNvZGVTdGFydCA9IGZyb21Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuICAgIHRvQ29kZVN0YXJ0ID0gdG9Ob2RlTmFtZS5jaGFyQ29kZUF0KDApO1xuXG4gICAgLy8gSWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGEgdmlydHVhbCBET00gbm9kZSBvciBTVkcgbm9kZSB0aGVuIHdlIG1heVxuICAgIC8vIG5lZWQgdG8gbm9ybWFsaXplIHRoZSB0YWcgbmFtZSBiZWZvcmUgY29tcGFyaW5nLiBOb3JtYWwgSFRNTCBlbGVtZW50cyB0aGF0IGFyZVxuICAgIC8vIGluIHRoZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICAgIC8vIGFyZSBjb252ZXJ0ZWQgdG8gdXBwZXIgY2FzZVxuICAgIGlmIChmcm9tQ29kZVN0YXJ0IDw9IDkwICYmIHRvQ29kZVN0YXJ0ID49IDk3KSB7IC8vIGZyb20gaXMgdXBwZXIgYW5kIHRvIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2UgaWYgKHRvQ29kZVN0YXJ0IDw9IDkwICYmIGZyb21Db2RlU3RhcnQgPj0gOTcpIHsgLy8gdG8gaXMgdXBwZXIgYW5kIGZyb20gaXMgbG93ZXJcbiAgICAgICAgcmV0dXJuIHRvTm9kZU5hbWUgPT09IGZyb21Ob2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVsZW1lbnQsIG9wdGlvbmFsbHkgd2l0aCBhIGtub3duIG5hbWVzcGFjZSBVUkkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIGVsZW1lbnQgbmFtZSwgZS5nLiAnZGl2JyBvciAnc3ZnJ1xuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lc3BhY2VVUkldIHRoZSBlbGVtZW50J3MgbmFtZXNwYWNlIFVSSSwgaS5lLiB0aGUgdmFsdWUgb2ZcbiAqIGl0cyBgeG1sbnNgIGF0dHJpYnV0ZSBvciBpdHMgaW5mZXJyZWQgbmFtZXNwYWNlLlxuICpcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lLCBuYW1lc3BhY2VVUkkpIHtcbiAgICByZXR1cm4gIW5hbWVzcGFjZVVSSSB8fCBuYW1lc3BhY2VVUkkgPT09IE5TX1hIVE1MID9cbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnQobmFtZSkgOlxuICAgICAgICBkb2MuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgbmFtZSk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSBjaGlsZHJlbiBvZiBvbmUgRE9NIGVsZW1lbnQgdG8gYW5vdGhlciBET00gZWxlbWVudFxuICovXG5mdW5jdGlvbiBtb3ZlQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgdG9FbC5hcHBlbmRDaGlsZChjdXJDaGlsZCk7XG4gICAgICAgIGN1ckNoaWxkID0gbmV4dENoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gdG9FbDtcbn1cblxuZnVuY3Rpb24gc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsIG5hbWUpIHtcbiAgICBpZiAoZnJvbUVsW25hbWVdICE9PSB0b0VsW25hbWVdKSB7XG4gICAgICAgIGZyb21FbFtuYW1lXSA9IHRvRWxbbmFtZV07XG4gICAgICAgIGlmIChmcm9tRWxbbmFtZV0pIHtcbiAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHNwZWNpYWxFbEhhbmRsZXJzID0ge1xuICAgIE9QVElPTjogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gZnJvbUVsLnBhcmVudE5vZGU7XG4gICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnROYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBwYXJlbnROYW1lID0gcGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ1NFTEVDVCcgJiYgIXBhcmVudE5vZGUuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyb21FbC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykgJiYgIXRvRWwuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgTVMgRWRnZSBidWcgd2hlcmUgdGhlICdzZWxlY3RlZCcgYXR0cmlidXRlIGNhbiBvbmx5IGJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZWQgaWYgc2V0IHRvIGEgbm9uLWVtcHR5IHZhbHVlOlxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMjA4NzY3OS9cbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLnJlbW92ZUF0dHJpYnV0ZSgnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byByZXNldCBzZWxlY3QgZWxlbWVudCdzIHNlbGVjdGVkSW5kZXggdG8gLTEsIG90aGVyd2lzZSBzZXR0aW5nXG4gICAgICAgICAgICAgICAgLy8gZnJvbUVsLnNlbGVjdGVkIHVzaW5nIHRoZSBzeW5jQm9vbGVhbkF0dHJQcm9wIGJlbG93IGhhcyBubyBlZmZlY3QuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvcnJlY3Qgc2VsZWN0ZWRJbmRleCB3aWxsIGJlIHNldCBpbiB0aGUgU0VMRUNUIHNwZWNpYWwgaGFuZGxlciBiZWxvdy5cbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ3NlbGVjdGVkJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGZvciB0aGUgPGlucHV0PiBlbGVtZW50IHNpbmNlIGl0IHNldHNcbiAgICAgKiB0aGUgaW5pdGlhbCB2YWx1ZS4gQ2hhbmdpbmcgdGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGVcbiAgICAgKiBcInZhbHVlXCIgcHJvcGVydHkgd2lsbCBoYXZlIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGVcbiAgICAgKiBpbml0aWFsIHZhbHVlLiAgU2ltaWxhciBmb3IgdGhlIFwiY2hlY2tlZFwiIGF0dHJpYnV0ZSwgYW5kIFwiZGlzYWJsZWRcIi5cbiAgICAgKi9cbiAgICBJTlBVVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnY2hlY2tlZCcpO1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gdG9FbC52YWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVEVYVEFSRUE6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgLy8gTmVlZGVkIGZvciBJRS4gQXBwYXJlbnRseSBJRSBzZXRzIHRoZSBwbGFjZWhvbGRlciBhcyB0aGVcbiAgICAgICAgICAgIC8vIG5vZGUgdmFsdWUgYW5kIHZpc2UgdmVyc2EuIFRoaXMgaWdub3JlcyBhbiBlbXB0eSB1cGRhdGUuXG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBmaXJzdENoaWxkLm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09IG5ld1ZhbHVlIHx8ICghbmV3VmFsdWUgJiYgb2xkVmFsdWUgPT0gZnJvbUVsLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgU0VMRUNUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIG9mIGZyb21FbCwgbm90IHRvRWwgc2luY2Ugbm9kZXMgY2FuIGJlIG1vdmVkXG4gICAgICAgICAgICAvLyBmcm9tIHRvRWwgdG8gZnJvbUVsIGRpcmVjdGx5IHdoZW4gbW9ycGhpbmcuXG4gICAgICAgICAgICAvLyBBdCB0aGUgdGltZSB0aGlzIHNwZWNpYWwgaGFuZGxlciBpcyBpbnZva2VkLCBhbGwgY2hpbGRyZW4gaGF2ZSBhbHJlYWR5IGJlZW4gbW9ycGhlZFxuICAgICAgICAgICAgLy8gYW5kIGFwcGVuZGVkIHRvIC8gcmVtb3ZlZCBmcm9tIGZyb21FbCwgc28gdXNpbmcgZnJvbUVsIGhlcmUgaXMgc2FmZSBhbmQgY29ycmVjdC5cbiAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgdmFyIG9wdGdyb3VwO1xuICAgICAgICAgICAgdmFyIG5vZGVOYW1lO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICBub2RlTmFtZSA9IGN1ckNoaWxkLm5vZGVOYW1lICYmIGN1ckNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUR1JPVVAnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gY3VyQ2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZU5hbWUgPT09ICdPUFRJT04nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ2hpbGQuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJDaGlsZCAmJiBvcHRncm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBvcHRncm91cC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbUVsLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSQxID0gMTE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gZGVmYXVsdEdldE5vZGVLZXkobm9kZSkge1xuICBpZiAobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHx8IG5vZGUuaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpIHtcblxuICByZXR1cm4gZnVuY3Rpb24gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9Ob2RlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGZyb21Ob2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50JyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgdmFyIHRvTm9kZUh0bWwgPSB0b05vZGU7XG4gICAgICAgIHRvTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICAgIHRvTm9kZS5pbm5lckhUTUwgPSB0b05vZGVIdG1sO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9Ob2RlID0gdG9FbGVtZW50KHRvTm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b05vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgdG9Ob2RlID0gdG9Ob2RlLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIH1cblxuICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5O1xuICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlQWRkZWQgPSBvcHRpb25zLm9uTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxVcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVOb2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbk5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBza2lwRnJvbUNoaWxkcmVuID0gb3B0aW9ucy5za2lwRnJvbUNoaWxkcmVuIHx8IG5vb3A7XG4gICAgdmFyIGFkZENoaWxkID0gb3B0aW9ucy5hZGRDaGlsZCB8fCBmdW5jdGlvbihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7IH07XG4gICAgdmFyIGNoaWxkcmVuT25seSA9IG9wdGlvbnMuY2hpbGRyZW5Pbmx5ID09PSB0cnVlO1xuXG4gICAgLy8gVGhpcyBvYmplY3QgaXMgdXNlZCBhcyBhIGxvb2t1cCB0byBxdWlja2x5IGZpbmQgYWxsIGtleWVkIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICB2YXIgZnJvbU5vZGVzTG9va3VwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5ZWRSZW1vdmFsTGlzdCA9IFtdO1xuXG4gICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgIHZhciBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoc2tpcEtleWVkTm9kZXMgJiYgKGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpKSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIHNraXBwaW5nIGtleWVkIG5vZGVzIHRoZW4gd2UgYWRkIHRoZSBrZXlcbiAgICAgICAgICAgIC8vIHRvIGEgbGlzdCBzbyB0aGF0IGl0IGNhbiBiZSBoYW5kbGVkIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPbmx5IHJlcG9ydCB0aGUgbm9kZSBhcyBkaXNjYXJkZWQgaWYgaXQgaXMgbm90IGtleWVkLiBXZSBkbyB0aGlzIGJlY2F1c2VcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgd2UgbG9vcCB0aHJvdWdoIGFsbCBrZXllZCBlbGVtZW50cyB0aGF0IHdlcmUgdW5tYXRjaGVkXG4gICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMoY3VyQ2hpbGQsIHNraXBLZXllZE5vZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZW1vdmVzIGEgRE9NIG5vZGUgb3V0IG9mIHRoZSBvcmlnaW5hbCBET01cbiAgICAqXG4gICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIFRoZSBub2RlIHRvIHJlbW92ZVxuICAgICogQHBhcmFtICB7Tm9kZX0gcGFyZW50Tm9kZSBUaGUgbm9kZXMgcGFyZW50XG4gICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUobm9kZSwgcGFyZW50Tm9kZSwgc2tpcEtleWVkTm9kZXMpIHtcbiAgICAgIGlmIChvbkJlZm9yZU5vZGVEaXNjYXJkZWQobm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgIH1cblxuICAgICAgb25Ob2RlRGlzY2FyZGVkKG5vZGUpO1xuICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpO1xuICAgIH1cblxuICAgIC8vIC8vIFRyZWVXYWxrZXIgaW1wbGVtZW50YXRpb24gaXMgbm8gZmFzdGVyLCBidXQga2VlcGluZyB0aGlzIGFyb3VuZCBpbiBjYXNlIHRoaXMgY2hhbmdlcyBpbiB0aGUgZnV0dXJlXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKHJvb3QpIHtcbiAgICAvLyAgICAgdmFyIHRyZWVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgIC8vICAgICAgICAgcm9vdCxcbiAgICAvLyAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAvL1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IHRyZWVXYWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAvLyAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGVsKTtcbiAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gLy8gTm9kZUl0ZXJhdG9yIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAvLyAgICAgdmFyIG5vZGVJdGVyYXRvciA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihub2RlLCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy8gICAgIHZhciBlbDtcbiAgICAvLyAgICAgd2hpbGUoKGVsID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSkge1xuICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGN1ckNoaWxkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICBpbmRleFRyZWUoY3VyQ2hpbGQpO1xuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVOb2RlQWRkZWQoZWwpIHtcbiAgICAgIG9uTm9kZUFkZGVkKGVsKTtcblxuICAgICAgdmFyIGN1ckNoaWxkID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07XG4gICAgICAgICAgLy8gaWYgd2UgZmluZCBhIGR1cGxpY2F0ZSAjaWQgbm9kZSBpbiBjYWNoZSwgcmVwbGFjZSBgZWxgIHdpdGggY2FjaGUgdmFsdWVcbiAgICAgICAgICAvLyBhbmQgbW9ycGggaXQgdG8gdGhlIGNoaWxkIG5vZGUuXG4gICAgICAgICAgaWYgKHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpKSB7XG4gICAgICAgICAgICBjdXJDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgIG1vcnBoRWwodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgZm9yIGN1ckNoaWxkIGFuZCBpdCdzIGNoaWxkcmVuIHRvIHNlZSBpZiB3ZSBmaW5kIHNvbWV0aGluZyBpblxuICAgICAgICAgIC8vIGZyb21Ob2Rlc0xvb2t1cFxuICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJDaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJDaGlsZCA9IG5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG9mIHRoZSBcInRvIG5vZGVzXCIuIElmIGN1ckZyb21Ob2RlQ2hpbGQgaXNcbiAgICAgIC8vIG5vbi1udWxsIHRoZW4gd2Ugc3RpbGwgaGF2ZSBzb21lIGZyb20gbm9kZXMgbGVmdCBvdmVyIHRoYXQgbmVlZFxuICAgICAgLy8gdG8gYmUgcmVtb3ZlZFxuICAgICAgd2hpbGUgKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICgoY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpKSkge1xuICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaEVsKGZyb21FbCwgdG9FbCwgY2hpbGRyZW5Pbmx5KSB7XG4gICAgICB2YXIgdG9FbEtleSA9IGdldE5vZGVLZXkodG9FbCk7XG5cbiAgICAgIGlmICh0b0VsS2V5KSB7XG4gICAgICAgIC8vIElmIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBpcyBiZWluZyBtb3JwaGVkIHRoZW4gaXQgd2lsbCBiZSBpbiB0aGUgZmluYWxcbiAgICAgICAgLy8gRE9NIHNvIGNsZWFyIGl0IG91dCBvZiB0aGUgc2F2ZWQgZWxlbWVudHMgY29sbGVjdGlvblxuICAgICAgICBkZWxldGUgZnJvbU5vZGVzTG9va3VwW3RvRWxLZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBpZiAob25CZWZvcmVFbFVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgYXR0cmlidXRlcyBvbiBvcmlnaW5hbCBET00gZWxlbWVudCBmaXJzdFxuICAgICAgICBtb3JwaEF0dHJzKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIG9uRWxVcGRhdGVkKGZyb21FbCk7XG5cbiAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZyb21FbC5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVycy5URVhUQVJFQShmcm9tRWwsIHRvRWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcnBoQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgICB2YXIgc2tpcEZyb20gPSBza2lwRnJvbUNoaWxkcmVuKGZyb21FbCk7XG4gICAgICB2YXIgY3VyVG9Ob2RlQ2hpbGQgPSB0b0VsLmZpcnN0Q2hpbGQ7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1clRvTm9kZUtleTtcbiAgICAgIHZhciBjdXJGcm9tTm9kZUtleTtcblxuICAgICAgdmFyIGZyb21OZXh0U2libGluZztcbiAgICAgIHZhciB0b05leHRTaWJsaW5nO1xuICAgICAgdmFyIG1hdGNoaW5nRnJvbUVsO1xuXG4gICAgICAvLyB3YWxrIHRoZSBjaGlsZHJlblxuICAgICAgb3V0ZXI6IHdoaWxlIChjdXJUb05vZGVDaGlsZCkge1xuICAgICAgICB0b05leHRTaWJsaW5nID0gY3VyVG9Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgIC8vIHdhbGsgdGhlIGZyb21Ob2RlIGNoaWxkcmVuIGFsbCB0aGUgd2F5IHRocm91Z2hcbiAgICAgICAgd2hpbGUgKCFza2lwRnJvbSAmJiBjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlICYmIGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCkpIHtcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVUeXBlID0gY3VyRnJvbU5vZGVDaGlsZC5ub2RlVHlwZTtcblxuICAgICAgICAgIC8vIHRoaXMgbWVhbnMgaWYgdGhlIGN1ckZyb21Ob2RlQ2hpbGQgZG9lc250IGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJUb05vZGVDaGlsZFxuICAgICAgICAgIHZhciBpc0NvbXBhdGlibGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIEVsZW1lbnQgbm9kZXNcblxuICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBub2RlIGhhcyBhIGtleSBzbyB3ZSB3YW50IHRvIG1hdGNoIGl0IHVwIHdpdGggdGhlIGNvcnJlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZVxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgIT09IGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBET00gdHJlZSBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcga2V5IHNvXG4gICAgICAgICAgICAgICAgICAvLyBsZXQncyBjaGVjayBvdXIgbG9va3VwIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoaW5nIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAvLyBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgaWYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnJvbU5leHRTaWJsaW5nID09PSBtYXRjaGluZ0Zyb21FbCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsZW1lbnQgcmVtb3ZhbHMuIFRvIGF2b2lkIHJlbW92aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgIC8vIERPTSBub2RlIG91dCBvZiB0aGUgdHJlZSAoc2luY2UgdGhhdCBjYW4gYnJlYWsgQ1NTIHRyYW5zaXRpb25zLCBldGMuKSxcbiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB3aWxsIGluc3RlYWQgZGlzY2FyZCB0aGUgY3VycmVudCBub2RlIGFuZCB3YWl0IHVudGlsIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uIHRvIHByb3Blcmx5IG1hdGNoIHVwIHRoZSBrZXllZCB0YXJnZXQgZWxlbWVudCB3aXRoIGl0cyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIG1hdGNoaW5nIGtleWVkIGVsZW1lbnQgc29tZXdoZXJlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZSBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBtb3JwaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0LlxuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgdXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIHJlcGxhY2VDaGlsZCBiZWNhdXNlIHdlIHdhbnQgdG8gZ28gdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBgcmVtb3ZlTm9kZSgpYCBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBiZWluZyBkaXNjYXJkZWQgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBsaWZlY3ljbGUgaG9va3MgYXJlIGNvcnJlY3RseSBpbnZva2VkXG4gICAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmluc2VydEJlZm9yZShtYXRjaGluZ0Zyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBtYXRjaGluZ0Zyb21FbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG5vZGVzIGFyZSBub3QgY29tcGF0aWJsZSBzaW5jZSB0aGUgXCJ0b1wiIG5vZGUgaGFzIGEga2V5IGFuZCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyBtYXRjaGluZyBrZXllZCBub2RlIGluIHRoZSBzb3VyY2UgdHJlZVxuICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgaGFzIGEga2V5XG4gICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBpc0NvbXBhdGlibGUgIT09IGZhbHNlICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgY29tcGF0aWJsZSBET00gZWxlbWVudHMgc28gdHJhbnNmb3JtXG4gICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgXCJmcm9tXCIgbm9kZSB0byBtYXRjaCB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBET00gbm9kZS5cbiAgICAgICAgICAgICAgICAvLyBNT1JQSFxuICAgICAgICAgICAgICAgIG1vcnBoRWwoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBURVhUX05PREUgfHwgY3VyRnJvbU5vZGVUeXBlID09IENPTU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBUZXh0IG9yIENvbW1lbnQgbm9kZXNcbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgLy8gU2ltcGx5IHVwZGF0ZSBub2RlVmFsdWUgb24gdGhlIG9yaWdpbmFsIG5vZGUgdG9cbiAgICAgICAgICAgICAgLy8gY2hhbmdlIHRoZSB0ZXh0IHZhbHVlXG4gICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSAhPT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgPSBjdXJUb05vZGVDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgIC8vIEFkdmFuY2UgYm90aCB0aGUgXCJ0b1wiIGNoaWxkIGFuZCB0aGUgXCJmcm9tXCIgY2hpbGQgc2luY2Ugd2UgZm91bmQgYSBtYXRjaFxuICAgICAgICAgICAgLy8gTm90aGluZyBlbHNlIHRvIGRvIGFzIHdlIGFscmVhZHkgcmVjdXJzaXZlbHkgY2FsbGVkIG1vcnBoQ2hpbGRyZW4gYWJvdmVcbiAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBObyBjb21wYXRpYmxlIG1hdGNoIHNvIHJlbW92ZSB0aGUgb2xkIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhXG4gICAgICAgICAgLy8gbWF0Y2ggaW4gdGhlIG9yaWdpbmFsIERPTS4gSG93ZXZlciwgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSBmcm9tIG5vZGUgaXMgbm90IGtleWVkXG4gICAgICAgICAgLy8gc2luY2UgaXQgaXMgcG9zc2libGUgdGhhdCBhIGtleWVkIG5vZGUgbWlnaHQgbWF0Y2ggdXAgd2l0aCBhIG5vZGUgc29tZXdoZXJlIGVsc2UgaW4gdGhlXG4gICAgICAgICAgLy8gdGFyZ2V0IHRyZWUgYW5kIHdlIGRvbid0IHdhbnQgdG8gZGlzY2FyZCBpdCBqdXN0IHlldCBzaW5jZSBpdCBzdGlsbCBtaWdodCBmaW5kIGFcbiAgICAgICAgICAvLyBob21lIGluIHRoZSBmaW5hbCBET00gdHJlZS4gQWZ0ZXIgZXZlcnl0aGluZyBpcyBkb25lIHdlIHdpbGwgcmVtb3ZlIGFueSBrZXllZCBub2Rlc1xuICAgICAgICAgIC8vIHRoYXQgZGlkbid0IGZpbmQgYSBob21lXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgIH0gLy8gRU5EOiB3aGlsZShjdXJGcm9tTm9kZUNoaWxkKSB7fVxuXG4gICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIHdlIGRpZCBub3QgZmluZCBhIGNhbmRpZGF0ZSBtYXRjaCBmb3JcbiAgICAgICAgLy8gb3VyIFwidG8gbm9kZVwiIGFuZCB3ZSBleGhhdXN0ZWQgYWxsIG9mIHRoZSBjaGlsZHJlbiBcImZyb21cIlxuICAgICAgICAvLyBub2Rlcy4gVGhlcmVmb3JlLCB3ZSB3aWxsIGp1c3QgYXBwZW5kIHRoZSBjdXJyZW50IFwidG9cIiBub2RlXG4gICAgICAgIC8vIHRvIHRoZSBlbmRcbiAgICAgICAgaWYgKGN1clRvTm9kZUtleSAmJiAobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkgJiYgY29tcGFyZU5vZGVOYW1lcyhtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICBpZighc2tpcEZyb20peyBhZGRDaGlsZChmcm9tRWwsIG1hdGNoaW5nRnJvbUVsKTsgfVxuICAgICAgICAgIG1vcnBoRWwobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgPSBvbkJlZm9yZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gb25CZWZvcmVOb2RlQWRkZWRSZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUpIHtcbiAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUoZnJvbUVsLm93bmVyRG9jdW1lbnQgfHwgZG9jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZENoaWxkKGZyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIGNsZWFudXBGcm9tRWwoZnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkLCBjdXJGcm9tTm9kZUtleSk7XG5cbiAgICAgIHZhciBzcGVjaWFsRWxIYW5kbGVyID0gc3BlY2lhbEVsSGFuZGxlcnNbZnJvbUVsLm5vZGVOYW1lXTtcbiAgICAgIGlmIChzcGVjaWFsRWxIYW5kbGVyKSB7XG4gICAgICAgIHNwZWNpYWxFbEhhbmRsZXIoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9IC8vIEVORDogbW9ycGhDaGlsZHJlbiguLi4pXG5cbiAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZTtcbiAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgdmFyIHRvTm9kZVR5cGUgPSB0b05vZGUubm9kZVR5cGU7XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgLy8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGFyZSBnaXZlbiB0d28gRE9NIG5vZGVzIHRoYXQgYXJlIG5vdFxuICAgICAgLy8gY29tcGF0aWJsZSAoZS5nLiA8ZGl2PiAtLT4gPHNwYW4+IG9yIDxkaXY+IC0tPiBURVhUKVxuICAgICAgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICBpZiAoIWNvbXBhcmVOb2RlTmFtZXMoZnJvbU5vZGUsIHRvTm9kZSkpIHtcbiAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZSA9IG1vdmVDaGlsZHJlbihmcm9tTm9kZSwgY3JlYXRlRWxlbWVudE5TKHRvTm9kZS5ub2RlTmFtZSwgdG9Ob2RlLm5hbWVzcGFjZVVSSSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHb2luZyBmcm9tIGFuIGVsZW1lbnQgbm9kZSB0byBhIHRleHQgbm9kZVxuICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG1vcnBoZWROb2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7IC8vIFRleHQgb3IgY29tbWVudCBub2RlXG4gICAgICAgIGlmICh0b05vZGVUeXBlID09PSBtb3JwaGVkTm9kZVR5cGUpIHtcbiAgICAgICAgICBpZiAobW9ycGhlZE5vZGUubm9kZVZhbHVlICE9PSB0b05vZGUubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUZXh0IG5vZGUgdG8gc29tZXRoaW5nIGVsc2VcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb3JwaGVkTm9kZSA9PT0gdG9Ob2RlKSB7XG4gICAgICAvLyBUaGUgXCJ0byBub2RlXCIgd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIFwiZnJvbSBub2RlXCIgc28gd2UgaGFkIHRvXG4gICAgICAvLyB0b3NzIG91dCB0aGUgXCJmcm9tIG5vZGVcIiBhbmQgdXNlIHRoZSBcInRvIG5vZGVcIlxuICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRvTm9kZS5pc1NhbWVOb2RlICYmIHRvTm9kZS5pc1NhbWVOb2RlKG1vcnBoZWROb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG1vcnBoRWwobW9ycGhlZE5vZGUsIHRvTm9kZSwgY2hpbGRyZW5Pbmx5KTtcblxuICAgICAgLy8gV2Ugbm93IG5lZWQgdG8gbG9vcCBvdmVyIGFueSBrZXllZCBub2RlcyB0aGF0IG1pZ2h0IG5lZWQgdG8gYmVcbiAgICAgIC8vIHJlbW92ZWQuIFdlIG9ubHkgZG8gdGhlIHJlbW92YWwgaWYgd2Uga25vdyB0aGF0IHRoZSBrZXllZCBub2RlXG4gICAgICAvLyBuZXZlciBmb3VuZCBhIG1hdGNoLiBXaGVuIGEga2V5ZWQgbm9kZSBpcyBtYXRjaGVkIHVwIHdlIHJlbW92ZVxuICAgICAgLy8gaXQgb3V0IG9mIGZyb21Ob2Rlc0xvb2t1cCBhbmQgd2UgdXNlIGZyb21Ob2Rlc0xvb2t1cCB0byBkZXRlcm1pbmVcbiAgICAgIC8vIGlmIGEga2V5ZWQgbm9kZSBoYXMgYmVlbiBtYXRjaGVkIHVwIG9yIG5vdFxuICAgICAgaWYgKGtleWVkUmVtb3ZhbExpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaT0wLCBsZW49a2V5ZWRSZW1vdmFsTGlzdC5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgZWxUb1JlbW92ZSA9IGZyb21Ob2Rlc0xvb2t1cFtrZXllZFJlbW92YWxMaXN0W2ldXTtcbiAgICAgICAgICBpZiAoZWxUb1JlbW92ZSkge1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShlbFRvUmVtb3ZlLCBlbFRvUmVtb3ZlLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSAmJiBtb3JwaGVkTm9kZSAhPT0gZnJvbU5vZGUgJiYgZnJvbU5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKG1vcnBoZWROb2RlLmFjdHVhbGl6ZSkge1xuICAgICAgICBtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSBoYWQgdG8gc3dhcCBvdXQgdGhlIGZyb20gbm9kZSB3aXRoIGEgbmV3IG5vZGUgYmVjYXVzZSB0aGUgb2xkXG4gICAgICAvLyBub2RlIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB0YXJnZXQgbm9kZSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgIC8vIHJlcGxhY2UgdGhlIG9sZCBET00gbm9kZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuIFRoaXMgaXMgb25seVxuICAgICAgLy8gcG9zc2libGUgaWYgdGhlIG9yaWdpbmFsIERPTSBub2RlIHdhcyBwYXJ0IG9mIGEgRE9NIHRyZWUgd2hpY2hcbiAgICAgIC8vIHdlIGtub3cgaXMgdGhlIGNhc2UgaWYgaXQgaGFzIGEgcGFyZW50IG5vZGUuXG4gICAgICBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgfTtcbn1cblxudmFyIG1vcnBoZG9tID0gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpO1xuXG5leHBvcnQgZGVmYXVsdCBtb3JwaGRvbTtcbiIsICJpbXBvcnQge1xuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBQSFhfUFJVTkUsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NLSVAsXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9UUklHR0VSX0FDVElPTixcbiAgUEhYX1VQREFURSxcbiAgUEhYX1NUUkVBTSxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgZGV0ZWN0RHVwbGljYXRlSWRzLFxuICBpc0NpZFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01Qb3N0TW9ycGhSZXN0b3JlciBmcm9tIFwiLi9kb21fcG9zdF9tb3JwaF9yZXN0b3JlclwiXG5pbXBvcnQgbW9ycGhkb20gZnJvbSBcIm1vcnBoZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUGF0Y2gge1xuICBzdGF0aWMgcGF0Y2hFbChmcm9tRWwsIHRvRWwsIGFjdGl2ZUVsZW1lbnQpe1xuICAgIG1vcnBoZG9tKGZyb21FbCwgdG9FbCwge1xuICAgICAgY2hpbGRyZW5Pbmx5OiBmYWxzZSxcbiAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgIGlmKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5pc1NhbWVOb2RlKGZyb21FbCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbCkpe1xuICAgICAgICAgIERPTS5tZXJnZUZvY3VzZWRJbnB1dChmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY29uc3RydWN0b3IodmlldywgY29udGFpbmVyLCBpZCwgaHRtbCwgc3RyZWFtcywgdGFyZ2V0Q0lEKXtcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnJvb3RJRCA9IHZpZXcucm9vdC5pZFxuICAgIHRoaXMuaHRtbCA9IGh0bWxcbiAgICB0aGlzLnN0cmVhbXMgPSBzdHJlYW1zXG4gICAgdGhpcy5zdHJlYW1JbnNlcnRzID0ge31cbiAgICB0aGlzLnRhcmdldENJRCA9IHRhcmdldENJRFxuICAgIHRoaXMuY2lkUGF0Y2ggPSBpc0NpZCh0aGlzLnRhcmdldENJRClcbiAgICB0aGlzLnBlbmRpbmdSZW1vdmVzID0gW11cbiAgICB0aGlzLnBoeFJlbW92ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgdGhpcy5jYWxsYmFja3MgPSB7XG4gICAgICBiZWZvcmVhZGRlZDogW10sIGJlZm9yZXVwZGF0ZWQ6IFtdLCBiZWZvcmVwaHhDaGlsZEFkZGVkOiBbXSxcbiAgICAgIGFmdGVyYWRkZWQ6IFtdLCBhZnRlcnVwZGF0ZWQ6IFtdLCBhZnRlcmRpc2NhcmRlZDogW10sIGFmdGVycGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcnRyYW5zaXRpb25zRGlzY2FyZGVkOiBbXVxuICAgIH1cbiAgfVxuXG4gIGJlZm9yZShraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuICBhZnRlcihraW5kLCBjYWxsYmFjayl7IHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG5cbiAgdHJhY2tCZWZvcmUoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgdHJhY2tBZnRlcihraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIG1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKCl7XG4gICAgbGV0IHBoeFVwZGF0ZSA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgRE9NLmFsbCh0aGlzLmNvbnRhaW5lciwgYFske3BoeFVwZGF0ZX09JHtQSFhfU1RSRUFNfV1gLCBlbCA9PiBlbC5pbm5lckhUTUwgPSBcIlwiKVxuICAgIERPTS5hbGwodGhpcy5jb250YWluZXIsIGBbJHtwaHhVcGRhdGV9PWFwcGVuZF0gPiAqLCBbJHtwaHhVcGRhdGV9PXByZXBlbmRdID4gKmAsIGVsID0+IHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUFJVTkUsIFwiXCIpXG4gICAgfSlcbiAgfVxuXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQge3ZpZXcsIGxpdmVTb2NrZXQsIGNvbnRhaW5lciwgaHRtbH0gPSB0aGlzXG4gICAgbGV0IHRhcmdldENvbnRhaW5lciA9IHRoaXMuaXNDSURQYXRjaCgpID8gdGhpcy50YXJnZXRDSURDb250YWluZXIoaHRtbCkgOiBjb250YWluZXJcbiAgICBpZih0aGlzLmlzQ0lEUGF0Y2goKSAmJiAhdGFyZ2V0Q29udGFpbmVyKXsgcmV0dXJuIH1cblxuICAgIGxldCBmb2N1c2VkID0gbGl2ZVNvY2tldC5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBsZXQge3NlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmR9ID0gZm9jdXNlZCAmJiBET00uaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkgPyBmb2N1c2VkIDoge31cbiAgICBsZXQgcGh4VXBkYXRlID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9VUERBVEUpXG4gICAgbGV0IHBoeEZlZWRiYWNrRm9yID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpXG4gICAgbGV0IGRpc2FibGVXaXRoID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpXG4gICAgbGV0IHBoeFRyaWdnZXJFeHRlcm5hbCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVFJJR0dFUl9BQ1RJT04pXG4gICAgbGV0IGFkZGVkID0gW11cbiAgICBsZXQgdXBkYXRlcyA9IFtdXG4gICAgbGV0IGFwcGVuZFByZXBlbmRVcGRhdGVzID0gW11cblxuICAgIGxldCBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBudWxsXG5cbiAgICBsZXQgZGlmZkhUTUwgPSBsaXZlU29ja2V0LnRpbWUoXCJwcmVtb3JwaCBjb250YWluZXIgcHJlcFwiLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZERpZmZIVE1MKGNvbnRhaW5lciwgaHRtbCwgcGh4VXBkYXRlLCB0YXJnZXRDb250YWluZXIpXG4gICAgfSlcblxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBjb250YWluZXIpXG4gICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgY29udGFpbmVyLCBjb250YWluZXIpXG5cbiAgICBsaXZlU29ja2V0LnRpbWUoXCJtb3JwaGRvbVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0cmVhbXMuZm9yRWFjaCgoW2luc2VydHMsIGRlbGV0ZUlkc10pID0+IHtcbiAgICAgICAgdGhpcy5zdHJlYW1JbnNlcnRzID0gT2JqZWN0LmFzc2lnbih0aGlzLnN0cmVhbUluc2VydHMsIGluc2VydHMpXG4gICAgICAgIGRlbGV0ZUlkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtpZH1cIl1gKVxuICAgICAgICAgIGlmKGNoaWxkKXtcbiAgICAgICAgICAgIGlmKCF0aGlzLm1heWJlUGVuZGluZ1JlbW92ZShjaGlsZCkpe1xuICAgICAgICAgICAgICBjaGlsZC5yZW1vdmUoKVxuICAgICAgICAgICAgICB0aGlzLm9uTm9kZURpc2NhcmRlZChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBtb3JwaGRvbSh0YXJnZXRDb250YWluZXIsIGRpZmZIVE1MLCB7XG4gICAgICAgIGNoaWxkcmVuT25seTogdGFyZ2V0Q29udGFpbmVyLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSA9PT0gbnVsbCxcbiAgICAgICAgZ2V0Tm9kZUtleTogKG5vZGUpID0+IHtcbiAgICAgICAgICByZXR1cm4gRE9NLmlzUGh4RGVzdHJveWVkKG5vZGUpID8gbnVsbCA6IG5vZGUuaWRcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2tpcCBpbmRleGluZyBmcm9tIGNoaWxkcmVuIHdoZW4gY29udGFpbmVyIGlzIHN0cmVhbVxuICAgICAgICBza2lwRnJvbUNoaWxkcmVuOiAoZnJvbSkgPT4geyByZXR1cm4gZnJvbS5nZXRBdHRyaWJ1dGUocGh4VXBkYXRlKSA9PT0gUEhYX1NUUkVBTSB9LFxuICAgICAgICAvLyB0ZWxsIG1vcnBoZG9tIGhvdyB0byBhZGQgYSBjaGlsZFxuICAgICAgICBhZGRDaGlsZDogKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICAgICAgICBsZXQgc3RyZWFtQXQgPSBjaGlsZC5pZCA/IHRoaXMuc3RyZWFtSW5zZXJ0c1tjaGlsZC5pZF0gOiB1bmRlZmluZWRcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpIH1cblxuICAgICAgICAgIC8vIHN0cmVhbWluZ1xuICAgICAgICAgIGlmKHN0cmVhbUF0ID09PSAwKXtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGNoaWxkKVxuICAgICAgICAgIH0gZWxzZSBpZihzdHJlYW1BdCA9PT0gLTEpe1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKVxuICAgICAgICAgIH0gZWxzZSBpZihzdHJlYW1BdCA+IDApe1xuICAgICAgICAgICAgbGV0IHNpYmxpbmcgPSBBcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbilbc3RyZWFtQXRdXG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBzaWJsaW5nKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVOb2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcbiAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgfSxcbiAgICAgICAgb25Ob2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIC8vIGhhY2sgdG8gZml4IFNhZmFyaSBoYW5kbGluZyBvZiBpbWcgc3Jjc2V0IGFuZCB2aWRlbyB0YWdzXG4gICAgICAgICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICYmIGVsLnNyY3NldCl7XG4gICAgICAgICAgICBlbC5zcmNzZXQgPSBlbC5zcmNzZXRcbiAgICAgICAgICB9IGVsc2UgaWYoZWwgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50ICYmIGVsLmF1dG9wbGF5KXtcbiAgICAgICAgICAgIGVsLnBsYXkoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihET00uaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpKXtcbiAgICAgICAgICAgIGV4dGVybmFsRm9ybVRyaWdnZXJlZCA9IGVsXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaW5wdXQgaGFuZGxpbmdcbiAgICAgICAgICBET00uZGlzY2FyZEVycm9yKHRhcmdldENvbnRhaW5lciwgZWwsIHBoeEZlZWRiYWNrRm9yKVxuICAgICAgICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgICAgICAgaWYoKERPTS5pc1BoeENoaWxkKGVsKSAmJiB2aWV3Lm93bnNFbGVtZW50KGVsKSkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSAmJiB2aWV3Lm93bnNFbGVtZW50KGVsLnBhcmVudE5vZGUpKXtcbiAgICAgICAgICAgIHRoaXMudHJhY2tBZnRlcihcInBoeENoaWxkQWRkZWRcIiwgZWwpXG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZGVkLnB1c2goZWwpXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZURpc2NhcmRlZDogKGVsKSA9PiB0aGlzLm9uTm9kZURpc2NhcmRlZChlbCksXG4gICAgICAgIG9uQmVmb3JlTm9kZURpc2NhcmRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfUFJVTkUpICE9PSBudWxsKXsgcmV0dXJuIHRydWUgfVxuICAgICAgICAgIGlmKGVsLnBhcmVudEVsZW1lbnQgIT09IG51bGwgJiYgZWwuaWQgJiZcbiAgICAgICAgICAgICBET00uaXNQaHhVcGRhdGUoZWwucGFyZW50RWxlbWVudCwgcGh4VXBkYXRlLCBbUEhYX1NUUkVBTSwgXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYodGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoZWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBvbkVsVXBkYXRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzLnB1c2goZWwpXG4gICAgICAgICAgdGhpcy5tYXliZVJlT3JkZXJTdHJlYW0oZWwpXG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgICAgRE9NLmNsZWFuQ2hpbGROb2Rlcyh0b0VsLCBwaHhVcGRhdGUpXG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyh0b0VsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYoRE9NLmlzUGh4U3RpY2t5KGZyb21FbCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKERPTS5pc0lnbm9yZWQoZnJvbUVsLCBwaHhVcGRhdGUpIHx8IChmcm9tRWwuZm9ybSAmJiBmcm9tRWwuZm9ybS5pc1NhbWVOb2RlKGV4dGVybmFsRm9ybVRyaWdnZXJlZCkpKXtcbiAgICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2lzSWdub3JlZDogdHJ1ZX0pXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZnJvbUVsLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGZyb21FbC52YWxpZGl0eSAmJiBmcm9tRWwudmFsaWRpdHkuYmFkSW5wdXQpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZighRE9NLnN5bmNQZW5kaW5nUmVmKGZyb21FbCwgdG9FbCwgZGlzYWJsZVdpdGgpKXtcbiAgICAgICAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGZyb21FbCkpe1xuICAgICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgICAgICAgaWYoRE9NLmlzUGh4Q2hpbGQodG9FbCkpe1xuICAgICAgICAgICAgbGV0IHByZXZTZXNzaW9uID0gZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTilcbiAgICAgICAgICAgIERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2V4Y2x1ZGU6IFtQSFhfU1RBVElDXX0pXG4gICAgICAgICAgICBpZihwcmV2U2Vzc2lvbiAhPT0gXCJcIil7IGZyb21FbC5zZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04sIHByZXZTZXNzaW9uKSB9XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9ST09UX0lELCB0aGlzLnJvb3RJRClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaW5wdXQgaGFuZGxpbmdcbiAgICAgICAgICBET00uY29weVByaXZhdGVzKHRvRWwsIGZyb21FbClcbiAgICAgICAgICBET00uZGlzY2FyZEVycm9yKHRhcmdldENvbnRhaW5lciwgdG9FbCwgcGh4RmVlZGJhY2tGb3IpXG5cbiAgICAgICAgICBsZXQgaXNGb2N1c2VkRm9ybUVsID0gZm9jdXNlZCAmJiBmcm9tRWwuaXNTYW1lTm9kZShmb2N1c2VkKSAmJiBET00uaXNGb3JtSW5wdXQoZnJvbUVsKVxuICAgICAgICAgIGlmKGlzRm9jdXNlZEZvcm1FbCAmJiBmcm9tRWwudHlwZSAhPT0gXCJoaWRkZW5cIil7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLnN5bmNBdHRyc1RvUHJvcHMoZnJvbUVsKVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmKERPTS5pc1BoeFVwZGF0ZSh0b0VsLCBwaHhVcGRhdGUsIFtcImFwcGVuZFwiLCBcInByZXBlbmRcIl0pKXtcbiAgICAgICAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMucHVzaChuZXcgRE9NUG9zdE1vcnBoUmVzdG9yZXIoZnJvbUVsLCB0b0VsLCB0b0VsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKHRvRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKHRvRWwpXG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaWYobGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKXsgZGV0ZWN0RHVwbGljYXRlSWRzKCkgfVxuXG4gICAgaWYoYXBwZW5kUHJlcGVuZFVwZGF0ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRpbWUoXCJwb3N0LW1vcnBoIGFwcGVuZC9wcmVwZW5kIHJlc3RvcmF0aW9uXCIsICgpID0+IHtcbiAgICAgICAgYXBwZW5kUHJlcGVuZFVwZGF0ZXMuZm9yRWFjaCh1cGRhdGUgPT4gdXBkYXRlLnBlcmZvcm0oKSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgbGl2ZVNvY2tldC5zaWxlbmNlRXZlbnRzKCgpID0+IERPTS5yZXN0b3JlRm9jdXMoZm9jdXNlZCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkpXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZG9jdW1lbnQsIFwicGh4OnVwZGF0ZVwiKVxuICAgIGFkZGVkLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwiYWRkZWRcIiwgZWwpKVxuICAgIHVwZGF0ZXMuZm9yRWFjaChlbCA9PiB0aGlzLnRyYWNrQWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsKSlcblxuICAgIHRoaXMudHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKClcblxuICAgIGlmKGV4dGVybmFsRm9ybVRyaWdnZXJlZCl7XG4gICAgICBsaXZlU29ja2V0LnVubG9hZCgpXG4gICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQuc3VibWl0KClcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG9uTm9kZURpc2NhcmRlZChlbCl7XG4gICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICBpZihET00uaXNQaHhDaGlsZChlbCkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSl7IHRoaXMubGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoZWwpIH1cbiAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJkaXNjYXJkZWRcIiwgZWwpXG4gIH1cblxuICBtYXliZVBlbmRpbmdSZW1vdmUobm9kZSl7XG4gICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUodGhpcy5waHhSZW1vdmUpICE9PSBudWxsKXtcbiAgICAgIHRoaXMucGVuZGluZ1JlbW92ZXMucHVzaChub2RlKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgbWF5YmVSZU9yZGVyU3RyZWFtKGVsKXtcbiAgICBsZXQgc3RyZWFtQXQgPSBlbC5pZCA/IHRoaXMuc3RyZWFtSW5zZXJ0c1tlbC5pZF0gOiB1bmRlZmluZWRcbiAgICBpZihzdHJlYW1BdCA9PT0gdW5kZWZpbmVkKXsgcmV0dXJuIH1cblxuICAgIGlmKHN0cmVhbUF0ID09PSAwKXtcbiAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBlbC5wYXJlbnRFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKVxuICAgIH0gZWxzZSBpZihzdHJlYW1BdCA+IDApe1xuICAgICAgbGV0IGNoaWxkcmVuID0gQXJyYXkuZnJvbShlbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuKVxuICAgICAgbGV0IG9sZEluZGV4ID0gY2hpbGRyZW4uaW5kZXhPZihlbClcbiAgICAgIGlmKHN0cmVhbUF0ID49IGNoaWxkcmVuLmxlbmd0aCAtIDEpe1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNpYmxpbmcgPSBjaGlsZHJlbltzdHJlYW1BdF1cbiAgICAgICAgaWYob2xkSW5kZXggPiBzdHJlYW1BdCl7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoZWwsIHNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdHJhbnNpdGlvblBlbmRpbmdSZW1vdmVzKCl7XG4gICAgbGV0IHtwZW5kaW5nUmVtb3ZlcywgbGl2ZVNvY2tldH0gPSB0aGlzXG4gICAgaWYocGVuZGluZ1JlbW92ZXMubGVuZ3RoID4gMCl7XG4gICAgICBsaXZlU29ja2V0LnRyYW5zaXRpb25SZW1vdmVzKHBlbmRpbmdSZW1vdmVzKVxuICAgICAgbGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgcGVuZGluZ1JlbW92ZXMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgbGV0IGNoaWxkID0gRE9NLmZpcnN0UGh4Q2hpbGQoZWwpXG4gICAgICAgICAgaWYoY2hpbGQpeyBsaXZlU29ja2V0LmRlc3Ryb3lWaWV3QnlFbChjaGlsZCkgfVxuICAgICAgICAgIGVsLnJlbW92ZSgpXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMudHJhY2tBZnRlcihcInRyYW5zaXRpb25zRGlzY2FyZGVkXCIsIHBlbmRpbmdSZW1vdmVzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBpc0NJRFBhdGNoKCl7IHJldHVybiB0aGlzLmNpZFBhdGNoIH1cblxuICBza2lwQ0lEU2libGluZyhlbCl7XG4gICAgcmV0dXJuIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1NLSVApICE9PSBudWxsXG4gIH1cblxuICB0YXJnZXRDSURDb250YWluZXIoaHRtbCl7XG4gICAgaWYoIXRoaXMuaXNDSURQYXRjaCgpKXsgcmV0dXJuIH1cbiAgICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5jb250YWluZXIsIHRoaXMudGFyZ2V0Q0lEKVxuICAgIGlmKHJlc3QubGVuZ3RoID09PSAwICYmIERPTS5jaGlsZE5vZGVMZW5ndGgoaHRtbCkgPT09IDEpe1xuICAgICAgcmV0dXJuIGZpcnN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgLy8gYnVpbGRzIEhUTUwgZm9yIG1vcnBoZG9tIHBhdGNoXG4gIC8vIC0gZm9yIGZ1bGwgcGF0Y2hlcyBvZiBMaXZlVmlldyBvciBhIGNvbXBvbmVudCB3aXRoIGEgc2luZ2xlXG4gIC8vICAgcm9vdCBub2RlLCBzaW1wbHkgcmV0dXJucyB0aGUgSFRNTFxuICAvLyAtIGZvciBwYXRjaGVzIG9mIGEgY29tcG9uZW50IHdpdGggbXVsdGlwbGUgcm9vdCBub2RlcywgdGhlXG4gIC8vICAgcGFyZW50IG5vZGUgYmVjb21lcyB0aGUgdGFyZ2V0IGNvbnRhaW5lciBhbmQgbm9uLWNvbXBvbmVudFxuICAvLyAgIHNpYmxpbmdzIGFyZSBtYXJrZWQgYXMgc2tpcC5cbiAgYnVpbGREaWZmSFRNTChjb250YWluZXIsIGh0bWwsIHBoeFVwZGF0ZSwgdGFyZ2V0Q29udGFpbmVyKXtcbiAgICBsZXQgaXNDSURQYXRjaCA9IHRoaXMuaXNDSURQYXRjaCgpXG4gICAgbGV0IGlzQ0lEV2l0aFNpbmdsZVJvb3QgPSBpc0NJRFBhdGNoICYmIHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IHRoaXMudGFyZ2V0Q0lELnRvU3RyaW5nKClcbiAgICBpZighaXNDSURQYXRjaCB8fCBpc0NJRFdpdGhTaW5nbGVSb290KXtcbiAgICAgIHJldHVybiBodG1sXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbXBvbmVudCBwYXRjaCB3aXRoIG11bHRpcGxlIENJRCByb290c1xuICAgICAgbGV0IGRpZmZDb250YWluZXIgPSBudWxsXG4gICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICAgIGRpZmZDb250YWluZXIgPSBET00uY2xvbmVOb2RlKHRhcmdldENvbnRhaW5lcilcbiAgICAgIGxldCBbZmlyc3RDb21wb25lbnQsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdChkaWZmQ29udGFpbmVyLCB0aGlzLnRhcmdldENJRClcbiAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICAgIHJlc3QuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSlcbiAgICAgIEFycmF5LmZyb20oZGlmZkNvbnRhaW5lci5jaGlsZE5vZGVzKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgLy8gd2UgY2FuIG9ubHkgc2tpcCB0cmFja2FibGUgbm9kZXMgd2l0aCBhbiBJRFxuICAgICAgICBpZihjaGlsZC5pZCAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpICE9PSB0aGlzLnRhcmdldENJRC50b1N0cmluZygpKXtcbiAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoUEhYX1NLSVAsIFwiXCIpXG4gICAgICAgICAgY2hpbGQuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgQXJyYXkuZnJvbSh0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXMpLmZvckVhY2goZWwgPT4gZGlmZkNvbnRhaW5lci5pbnNlcnRCZWZvcmUoZWwsIGZpcnN0Q29tcG9uZW50KSlcbiAgICAgIGZpcnN0Q29tcG9uZW50LnJlbW92ZSgpXG4gICAgICByZXR1cm4gZGlmZkNvbnRhaW5lci5vdXRlckhUTUxcbiAgICB9XG4gIH1cblxuICBpbmRleE9mKHBhcmVudCwgY2hpbGQpeyByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pLmluZGV4T2YoY2hpbGQpIH1cbn1cbiIsICJpbXBvcnQge1xuICBDT01QT05FTlRTLFxuICBEWU5BTUlDUyxcbiAgVEVNUExBVEVTLFxuICBFVkVOVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9TS0lQLFxuICBSRVBMWSxcbiAgU1RBVElDLFxuICBUSVRMRSxcbiAgU1RSRUFNLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBpc09iamVjdCxcbiAgbG9nRXJyb3IsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVkIHtcbiAgc3RhdGljIGV4dHJhY3QoZGlmZil7XG4gICAgbGV0IHtbUkVQTFldOiByZXBseSwgW0VWRU5UU106IGV2ZW50cywgW1RJVExFXTogdGl0bGV9ID0gZGlmZlxuICAgIGRlbGV0ZSBkaWZmW1JFUExZXVxuICAgIGRlbGV0ZSBkaWZmW0VWRU5UU11cbiAgICBkZWxldGUgZGlmZltUSVRMRV1cbiAgICByZXR1cm4ge2RpZmYsIHRpdGxlLCByZXBseTogcmVwbHkgfHwgbnVsbCwgZXZlbnRzOiBldmVudHMgfHwgW119XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3SWQsIHJlbmRlcmVkKXtcbiAgICB0aGlzLnZpZXdJZCA9IHZpZXdJZFxuICAgIHRoaXMucmVuZGVyZWQgPSB7fVxuICAgIHRoaXMubWVyZ2VEaWZmKHJlbmRlcmVkKVxuICB9XG5cbiAgcGFyZW50Vmlld0lkKCl7IHJldHVybiB0aGlzLnZpZXdJZCB9XG5cbiAgdG9TdHJpbmcob25seUNpZHMpe1xuICAgIGxldCBbc3RyLCBzdHJlYW1zXSA9IHRoaXMucmVjdXJzaXZlVG9TdHJpbmcodGhpcy5yZW5kZXJlZCwgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMpXG4gICAgcmV0dXJuIFtzdHIsIHN0cmVhbXNdXG4gIH1cblxuICByZWN1cnNpdmVUb1N0cmluZyhyZW5kZXJlZCwgY29tcG9uZW50cyA9IHJlbmRlcmVkW0NPTVBPTkVOVFNdLCBvbmx5Q2lkcyl7XG4gICAgb25seUNpZHMgPSBvbmx5Q2lkcyA/IG5ldyBTZXQob25seUNpZHMpIDogbnVsbFxuICAgIGxldCBvdXRwdXQgPSB7YnVmZmVyOiBcIlwiLCBjb21wb25lbnRzOiBjb21wb25lbnRzLCBvbmx5Q2lkczogb25seUNpZHMsIHN0cmVhbXM6IG5ldyBTZXQoKX1cbiAgICB0aGlzLnRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCBudWxsLCBvdXRwdXQpXG4gICAgcmV0dXJuIFtvdXRwdXQuYnVmZmVyLCBvdXRwdXQuc3RyZWFtc11cbiAgfVxuXG4gIGNvbXBvbmVudENJRHMoZGlmZil7IHJldHVybiBPYmplY3Qua2V5cyhkaWZmW0NPTVBPTkVOVFNdIHx8IHt9KS5tYXAoaSA9PiBwYXJzZUludChpKSkgfVxuXG4gIGlzQ29tcG9uZW50T25seURpZmYoZGlmZil7XG4gICAgaWYoIWRpZmZbQ09NUE9ORU5UU10peyByZXR1cm4gZmFsc2UgfVxuICAgIHJldHVybiBPYmplY3Qua2V5cyhkaWZmKS5sZW5ndGggPT09IDFcbiAgfVxuXG4gIGdldENvbXBvbmVudChkaWZmLCBjaWQpeyByZXR1cm4gZGlmZltDT01QT05FTlRTXVtjaWRdIH1cblxuICBtZXJnZURpZmYoZGlmZil7XG4gICAgbGV0IG5ld2MgPSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgbGV0IGNhY2hlID0ge31cbiAgICBkZWxldGUgZGlmZltDT01QT05FTlRTXVxuICAgIHRoaXMucmVuZGVyZWQgPSB0aGlzLm11dGFibGVNZXJnZSh0aGlzLnJlbmRlcmVkLCBkaWZmKVxuICAgIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdIHx8IHt9XG5cbiAgICBpZihuZXdjKXtcbiAgICAgIGxldCBvbGRjID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXtcbiAgICAgICAgbmV3Y1tjaWRdID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgbmV3Y1tjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgIH1cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7IG9sZGNbY2lkXSA9IG5ld2NbY2lkXSB9XG4gICAgICBkaWZmW0NPTVBPTkVOVFNdID0gbmV3Y1xuICAgIH1cbiAgfVxuXG4gIGNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBjZGlmZiwgb2xkYywgbmV3YywgY2FjaGUpe1xuICAgIGlmKGNhY2hlW2NpZF0pe1xuICAgICAgcmV0dXJuIGNhY2hlW2NpZF1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5kaWZmLCBzdGF0LCBzY2lkID0gY2RpZmZbU1RBVElDXVxuXG4gICAgICBpZihpc0NpZChzY2lkKSl7XG4gICAgICAgIGxldCB0ZGlmZlxuXG4gICAgICAgIGlmKHNjaWQgPiAwKXtcbiAgICAgICAgICB0ZGlmZiA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChzY2lkLCBuZXdjW3NjaWRdLCBvbGRjLCBuZXdjLCBjYWNoZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZGlmZiA9IG9sZGNbLXNjaWRdXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ID0gdGRpZmZbU1RBVElDXVxuICAgICAgICBuZGlmZiA9IHRoaXMuY2xvbmVNZXJnZSh0ZGlmZiwgY2RpZmYpXG4gICAgICAgIG5kaWZmW1NUQVRJQ10gPSBzdGF0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZGlmZiA9IGNkaWZmW1NUQVRJQ10gIT09IHVuZGVmaW5lZCA/IGNkaWZmIDogdGhpcy5jbG9uZU1lcmdlKG9sZGNbY2lkXSB8fCB7fSwgY2RpZmYpXG4gICAgICB9XG5cbiAgICAgIGNhY2hlW2NpZF0gPSBuZGlmZlxuICAgICAgcmV0dXJuIG5kaWZmXG4gICAgfVxuICB9XG5cbiAgbXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBpZihzb3VyY2VbU1RBVElDXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHJldHVybiBzb3VyY2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSlcbiAgICAgIHJldHVybiB0YXJnZXRcbiAgICB9XG4gIH1cblxuICBkb011dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgZm9yKGxldCBrZXkgaW4gc291cmNlKXtcbiAgICAgIGxldCB2YWwgPSBzb3VyY2Vba2V5XVxuICAgICAgbGV0IHRhcmdldFZhbCA9IHRhcmdldFtrZXldXG4gICAgICBsZXQgaXNPYmpWYWwgPSBpc09iamVjdCh2YWwpXG4gICAgICBpZihpc09ialZhbCAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldFZhbCwgdmFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjbG9uZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBsZXQgbWVyZ2VkID0gey4uLnRhcmdldCwgLi4uc291cmNlfVxuICAgIGZvcihsZXQga2V5IGluIG1lcmdlZCl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgaWYoaXNPYmplY3QodmFsKSAmJiB2YWxbU1RBVElDXSA9PT0gdW5kZWZpbmVkICYmIGlzT2JqZWN0KHRhcmdldFZhbCkpe1xuICAgICAgICBtZXJnZWRba2V5XSA9IHRoaXMuY2xvbmVNZXJnZSh0YXJnZXRWYWwsIHZhbClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFxuICB9XG5cbiAgY29tcG9uZW50VG9TdHJpbmcoY2lkKXtcbiAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIGNpZClcbiAgICByZXR1cm4gW3N0ciwgc3RyZWFtc11cbiAgfVxuXG4gIHBydW5lQ0lEcyhjaWRzKXtcbiAgICBjaWRzLmZvckVhY2goY2lkID0+IGRlbGV0ZSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZ2V0KCl7IHJldHVybiB0aGlzLnJlbmRlcmVkIH1cblxuICBpc05ld0ZpbmdlcnByaW50KGRpZmYgPSB7fSl7IHJldHVybiAhIWRpZmZbU1RBVElDXSB9XG5cbiAgdGVtcGxhdGVTdGF0aWMocGFydCwgdGVtcGxhdGVzKXtcbiAgICBpZih0eXBlb2YgKHBhcnQpID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVzW3BhcnRdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJ0XG4gICAgfVxuICB9XG5cbiAgdG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBpZihyZW5kZXJlZFtEWU5BTUlDU10peyByZXR1cm4gdGhpcy5jb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KSB9XG4gICAgbGV0IHtbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcblxuICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCBzdGF0aWNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkW2kgLSAxXSwgdGVtcGxhdGVzLCBvdXRwdXQpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICB9XG4gIH1cblxuICBjb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBsZXQge1tEWU5BTUlDU106IGR5bmFtaWNzLCBbU1RBVElDXTogc3RhdGljcywgW1NUUkVBTV06IHN0cmVhbX0gPSByZW5kZXJlZFxuICAgIGxldCBbX2luc2VydHMsIGRlbGV0ZUlkc10gPSBzdHJlYW0gfHwgW3t9LCBbXV1cbiAgICBzdGF0aWNzID0gdGhpcy50ZW1wbGF0ZVN0YXRpYyhzdGF0aWNzLCB0ZW1wbGF0ZXMpXG4gICAgbGV0IGNvbXBUZW1wbGF0ZXMgPSB0ZW1wbGF0ZXMgfHwgcmVuZGVyZWRbVEVNUExBVEVTXVxuICAgIGZvcihsZXQgZCA9IDA7IGQgPCBkeW5hbWljcy5sZW5ndGg7IGQrKyl7XG4gICAgICBsZXQgZHluYW1pYyA9IGR5bmFtaWNzW2RdXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbMF1cbiAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBzdGF0aWNzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdGhpcy5keW5hbWljVG9CdWZmZXIoZHluYW1pY1tpIC0gMV0sIGNvbXBUZW1wbGF0ZXMsIG91dHB1dClcbiAgICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzW2ldXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoc3RyZWFtICE9PSB1bmRlZmluZWQgJiYgKHJlbmRlcmVkW0RZTkFNSUNTXS5sZW5ndGggPiAwIHx8IGRlbGV0ZUlkcy5sZW5ndGggPiAwKSl7XG4gICAgICByZW5kZXJlZFtEWU5BTUlDU10gPSBbXVxuICAgICAgb3V0cHV0LnN0cmVhbXMuYWRkKHN0cmVhbSlcbiAgICB9XG4gIH1cblxuICBkeW5hbWljVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBpZih0eXBlb2YgKHJlbmRlcmVkKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKG91dHB1dC5jb21wb25lbnRzLCByZW5kZXJlZCwgb3V0cHV0Lm9ubHlDaWRzKVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdHJcbiAgICAgIG91dHB1dC5zdHJlYW1zID0gbmV3IFNldChbLi4ub3V0cHV0LnN0cmVhbXMsIC4uLnN0cmVhbXNdKVxuICAgIH0gZWxzZSBpZihpc09iamVjdChyZW5kZXJlZCkpe1xuICAgICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gcmVuZGVyZWRcbiAgICB9XG4gIH1cblxuICByZWN1cnNpdmVDSURUb1N0cmluZyhjb21wb25lbnRzLCBjaWQsIG9ubHlDaWRzKXtcbiAgICBsZXQgY29tcG9uZW50ID0gY29tcG9uZW50c1tjaWRdIHx8IGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm9yIENJRCAke2NpZH1gLCBjb21wb25lbnRzKVxuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZVRvU3RyaW5nKGNvbXBvbmVudCwgY29tcG9uZW50cywgb25seUNpZHMpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIGxldCBjb250YWluZXIgPSB0ZW1wbGF0ZS5jb250ZW50XG4gICAgbGV0IHNraXAgPSBvbmx5Q2lkcyAmJiAhb25seUNpZHMuaGFzKGNpZClcblxuICAgIGxldCBbaGFzQ2hpbGROb2RlcywgaGFzQ2hpbGRDb21wb25lbnRzXSA9XG4gICAgICBBcnJheS5mcm9tKGNvbnRhaW5lci5jaGlsZE5vZGVzKS5yZWR1Y2UoKFtoYXNOb2RlcywgaGFzQ29tcG9uZW50c10sIGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGlmKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSl7XG4gICAgICAgICAgaWYoY2hpbGQuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpKXtcbiAgICAgICAgICAgIHJldHVybiBbaGFzTm9kZXMsIHRydWVdXG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5ULCBjaWQpXG4gICAgICAgICAgaWYoIWNoaWxkLmlkKXsgY2hpbGQuaWQgPSBgJHt0aGlzLnBhcmVudFZpZXdJZCgpfS0ke2NpZH0tJHtpfWAgfVxuICAgICAgICAgIGlmKHNraXApe1xuICAgICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFBIWF9TS0lQLCBcIlwiKVxuICAgICAgICAgICAgY2hpbGQuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW3RydWUsIGhhc0NvbXBvbmVudHNdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYoY2hpbGQubm9kZVZhbHVlLnRyaW0oKSAhPT0gXCJcIil7XG4gICAgICAgICAgICBsb2dFcnJvcihcIm9ubHkgSFRNTCBlbGVtZW50IHRhZ3MgYXJlIGFsbG93ZWQgYXQgdGhlIHJvb3Qgb2YgY29tcG9uZW50cy5cXG5cXG5cIiArXG4gICAgICAgICAgICAgIGBnb3Q6IFwiJHtjaGlsZC5ub2RlVmFsdWUudHJpbSgpfVwiXFxuXFxuYCArXG4gICAgICAgICAgICAgIFwid2l0aGluOlxcblwiLCB0ZW1wbGF0ZS5pbm5lckhUTUwudHJpbSgpKVxuICAgICAgICAgICAgY2hpbGQucmVwbGFjZVdpdGgodGhpcy5jcmVhdGVTcGFuKGNoaWxkLm5vZGVWYWx1ZSwgY2lkKSlcbiAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgaGFzQ29tcG9uZW50c11cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hpbGQucmVtb3ZlKClcbiAgICAgICAgICAgIHJldHVybiBbaGFzTm9kZXMsIGhhc0NvbXBvbmVudHNdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBbZmFsc2UsIGZhbHNlXSlcblxuICAgIGlmKCFoYXNDaGlsZE5vZGVzICYmICFoYXNDaGlsZENvbXBvbmVudHMpe1xuICAgICAgbG9nRXJyb3IoXCJleHBlY3RlZCBhdCBsZWFzdCBvbmUgSFRNTCBlbGVtZW50IHRhZyBpbnNpZGUgYSBjb21wb25lbnQsIGJ1dCB0aGUgY29tcG9uZW50IGlzIGVtcHR5OlxcblwiLFxuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwudHJpbSgpKVxuICAgICAgcmV0dXJuIFt0aGlzLmNyZWF0ZVNwYW4oXCJcIiwgY2lkKS5vdXRlckhUTUwsIHN0cmVhbXNdXG4gICAgfSBlbHNlIGlmKCFoYXNDaGlsZE5vZGVzICYmIGhhc0NoaWxkQ29tcG9uZW50cyl7XG4gICAgICBsb2dFcnJvcihcImV4cGVjdGVkIGF0IGxlYXN0IG9uZSBIVE1MIGVsZW1lbnQgdGFnIGRpcmVjdGx5IGluc2lkZSBhIGNvbXBvbmVudCwgYnV0IG9ubHkgc3ViY29tcG9uZW50cyB3ZXJlIGZvdW5kLiBBIGNvbXBvbmVudCBtdXN0IHJlbmRlciBhdCBsZWFzdCBvbmUgSFRNTCB0YWcgZGlyZWN0bHkgaW5zaWRlIGl0c2VsZi5cIixcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MLnRyaW0oKSlcbiAgICAgIHJldHVybiBbdGVtcGxhdGUuaW5uZXJIVE1MLCBzdHJlYW1zXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3RlbXBsYXRlLmlubmVySFRNTCwgc3RyZWFtc11cbiAgICB9XG4gIH1cblxuICBjcmVhdGVTcGFuKHRleHQsIGNpZCl7XG4gICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgIHNwYW4uaW5uZXJUZXh0ID0gdGV4dFxuICAgIHNwYW4uc2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQsIGNpZClcbiAgICByZXR1cm4gc3BhblxuICB9XG59XG4iLCAibGV0IHZpZXdIb29rSUQgPSAxXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3SG9vayB7XG4gIHN0YXRpYyBtYWtlSUQoKXsgcmV0dXJuIHZpZXdIb29rSUQrKyB9XG4gIHN0YXRpYyBlbGVtZW50SUQoZWwpeyByZXR1cm4gZWwucGh4SG9va0lkIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3LCBlbCwgY2FsbGJhY2tzKXtcbiAgICB0aGlzLl9fdmlldyA9IHZpZXdcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSB2aWV3LmxpdmVTb2NrZXRcbiAgICB0aGlzLl9fY2FsbGJhY2tzID0gY2FsbGJhY2tzXG4gICAgdGhpcy5fX2xpc3RlbmVycyA9IG5ldyBTZXQoKVxuICAgIHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5lbC5waHhIb29rSWQgPSB0aGlzLmNvbnN0cnVjdG9yLm1ha2VJRCgpXG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcy5fX2NhbGxiYWNrcyl7IHRoaXNba2V5XSA9IHRoaXMuX19jYWxsYmFja3Nba2V5XSB9XG4gIH1cblxuICBfX21vdW50ZWQoKXsgdGhpcy5tb3VudGVkICYmIHRoaXMubW91bnRlZCgpIH1cbiAgX191cGRhdGVkKCl7IHRoaXMudXBkYXRlZCAmJiB0aGlzLnVwZGF0ZWQoKSB9XG4gIF9fYmVmb3JlVXBkYXRlKCl7IHRoaXMuYmVmb3JlVXBkYXRlICYmIHRoaXMuYmVmb3JlVXBkYXRlKCkgfVxuICBfX2Rlc3Ryb3llZCgpeyB0aGlzLmRlc3Ryb3llZCAmJiB0aGlzLmRlc3Ryb3llZCgpIH1cbiAgX19yZWNvbm5lY3RlZCgpe1xuICAgIGlmKHRoaXMuX19pc0Rpc2Nvbm5lY3RlZCl7XG4gICAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgICAgdGhpcy5yZWNvbm5lY3RlZCAmJiB0aGlzLnJlY29ubmVjdGVkKClcbiAgICB9XG4gIH1cbiAgX19kaXNjb25uZWN0ZWQoKXtcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSB0cnVlXG4gICAgdGhpcy5kaXNjb25uZWN0ZWQgJiYgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICB9XG5cbiAgcHVzaEV2ZW50KGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3LnB1c2hIb29rRXZlbnQobnVsbCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpXG4gIH1cblxuICBwdXNoRXZlbnRUbyhwaHhUYXJnZXQsIGV2ZW50LCBwYXlsb2FkID0ge30sIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICByZXR1cm4gdmlldy5wdXNoSG9va0V2ZW50KHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpXG4gICAgfSlcbiAgfVxuXG4gIGhhbmRsZUV2ZW50KGV2ZW50LCBjYWxsYmFjayl7XG4gICAgbGV0IGNhbGxiYWNrUmVmID0gKGN1c3RvbUV2ZW50LCBieXBhc3MpID0+IGJ5cGFzcyA/IGV2ZW50IDogY2FsbGJhY2soY3VzdG9tRXZlbnQuZGV0YWlsKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGBwaHg6JHtldmVudH1gLCBjYWxsYmFja1JlZilcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmFkZChjYWxsYmFja1JlZilcbiAgICByZXR1cm4gY2FsbGJhY2tSZWZcbiAgfVxuXG4gIHJlbW92ZUhhbmRsZUV2ZW50KGNhbGxiYWNrUmVmKXtcbiAgICBsZXQgZXZlbnQgPSBjYWxsYmFja1JlZihudWxsLCB0cnVlKVxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGBwaHg6JHtldmVudH1gLCBjYWxsYmFja1JlZilcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmRlbGV0ZShjYWxsYmFja1JlZilcbiAgfVxuXG4gIHVwbG9hZChuYW1lLCBmaWxlcyl7XG4gICAgcmV0dXJuIHRoaXMuX192aWV3LmRpc3BhdGNoVXBsb2FkcyhuYW1lLCBmaWxlcylcbiAgfVxuXG4gIHVwbG9hZFRvKHBoeFRhcmdldCwgbmFtZSwgZmlsZXMpe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgdmlldyA9PiB2aWV3LmRpc3BhdGNoVXBsb2FkcyhuYW1lLCBmaWxlcykpXG4gIH1cblxuICBfX2NsZWFudXBfXygpe1xuICAgIHRoaXMuX19saXN0ZW5lcnMuZm9yRWFjaChjYWxsYmFja1JlZiA9PiB0aGlzLnJlbW92ZUhhbmRsZUV2ZW50KGNhbGxiYWNrUmVmKSlcbiAgfVxufVxuIiwgImltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgZm9jdXNTdGFjayA9IG51bGxcblxubGV0IEpTID0ge1xuICBleGVjKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBkZWZhdWx0cyl7XG4gICAgbGV0IFtkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdID0gZGVmYXVsdHMgfHwgW251bGwsIHt9XVxuICAgIGxldCBjb21tYW5kcyA9IHBoeEV2ZW50LmNoYXJBdCgwKSA9PT0gXCJbXCIgP1xuICAgICAgSlNPTi5wYXJzZShwaHhFdmVudCkgOiBbW2RlZmF1bHRLaW5kLCBkZWZhdWx0QXJnc11dXG5cbiAgICBjb21tYW5kcy5mb3JFYWNoKChba2luZCwgYXJnc10pID0+IHtcbiAgICAgIGlmKGtpbmQgPT09IGRlZmF1bHRLaW5kICYmIGRlZmF1bHRBcmdzLmRhdGEpe1xuICAgICAgICBhcmdzLmRhdGEgPSBPYmplY3QuYXNzaWduKGFyZ3MuZGF0YSB8fCB7fSwgZGVmYXVsdEFyZ3MuZGF0YSlcbiAgICAgIH1cbiAgICAgIHRoaXMuZmlsdGVyVG9FbHMoc291cmNlRWwsIGFyZ3MpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICB0aGlzW2BleGVjXyR7a2luZH1gXShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3MpXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgaXNWaXNpYmxlKGVsKXtcbiAgICByZXR1cm4gISEoZWwub2Zmc2V0V2lkdGggfHwgZWwub2Zmc2V0SGVpZ2h0IHx8IGVsLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMClcbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgLy8gY29tbWFuZHNcblxuICBleGVjX2V4ZWMoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBbYXR0ciwgdG9dKXtcbiAgICBsZXQgbm9kZXMgPSB0byA/IERPTS5hbGwoZG9jdW1lbnQsIHRvKSA6IFtzb3VyY2VFbF1cbiAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgbGV0IGVuY29kZWRKUyA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHIpXG4gICAgICBpZighZW5jb2RlZEpTKXsgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke2F0dHJ9IHRvIGNvbnRhaW4gSlMgY29tbWFuZCBvbiBcIiR7dG99XCJgKSB9XG4gICAgICB2aWV3LmxpdmVTb2NrZXQuZXhlY0pTKG5vZGUsIGVuY29kZWRKUywgZXZlbnRUeXBlKVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19kaXNwYXRjaChldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0bywgZXZlbnQsIGRldGFpbCwgYnViYmxlc30pe1xuICAgIGRldGFpbCA9IGRldGFpbCB8fCB7fVxuICAgIGRldGFpbC5kaXNwYXRjaGVyID0gc291cmNlRWxcbiAgICBET00uZGlzcGF0Y2hFdmVudChlbCwgZXZlbnQsIHtkZXRhaWwsIGJ1YmJsZXN9KVxuICB9LFxuXG4gIGV4ZWNfcHVzaChldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3Mpe1xuICAgIGlmKCF2aWV3LmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuXG4gICAgbGV0IHtldmVudCwgZGF0YSwgdGFyZ2V0LCBwYWdlX2xvYWRpbmcsIGxvYWRpbmcsIHZhbHVlLCBkaXNwYXRjaGVyfSA9IGFyZ3NcbiAgICBsZXQgcHVzaE9wdHMgPSB7bG9hZGluZywgdmFsdWUsIHRhcmdldCwgcGFnZV9sb2FkaW5nOiAhIXBhZ2VfbG9hZGluZ31cbiAgICBsZXQgdGFyZ2V0U3JjID0gZXZlbnRUeXBlID09PSBcImNoYW5nZVwiICYmIGRpc3BhdGNoZXIgPyBkaXNwYXRjaGVyIDogc291cmNlRWxcbiAgICBsZXQgcGh4VGFyZ2V0ID0gdGFyZ2V0IHx8IHRhcmdldFNyYy5nZXRBdHRyaWJ1dGUodmlldy5iaW5kaW5nKFwidGFyZ2V0XCIpKSB8fCB0YXJnZXRTcmNcbiAgICB2aWV3LndpdGhpblRhcmdldHMocGh4VGFyZ2V0LCAodGFyZ2V0VmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICBpZihldmVudFR5cGUgPT09IFwiY2hhbmdlXCIpe1xuICAgICAgICBsZXQge25ld0NpZCwgX3RhcmdldCwgY2FsbGJhY2t9ID0gYXJnc1xuICAgICAgICBfdGFyZ2V0ID0gX3RhcmdldCB8fCAoRE9NLmlzRm9ybUlucHV0KHNvdXJjZUVsKSA/IHNvdXJjZUVsLm5hbWUgOiB1bmRlZmluZWQpXG4gICAgICAgIGlmKF90YXJnZXQpeyBwdXNoT3B0cy5fdGFyZ2V0ID0gX3RhcmdldCB9XG4gICAgICAgIHRhcmdldFZpZXcucHVzaElucHV0KHNvdXJjZUVsLCB0YXJnZXRDdHgsIG5ld0NpZCwgZXZlbnQgfHwgcGh4RXZlbnQsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSBpZihldmVudFR5cGUgPT09IFwic3VibWl0XCIpe1xuICAgICAgICBsZXQge3N1Ym1pdHRlcn0gPSBhcmdzXG4gICAgICAgIHRhcmdldFZpZXcuc3VibWl0Rm9ybShzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBldmVudCB8fCBwaHhFdmVudCwgc3VibWl0dGVyLCBwdXNoT3B0cylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFZpZXcucHVzaEV2ZW50KGV2ZW50VHlwZSwgc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIGRhdGEsIHB1c2hPcHRzKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19uYXZpZ2F0ZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0Lmhpc3RvcnlSZWRpcmVjdChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIilcbiAgfSxcblxuICBleGVjX3BhdGNoKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2hyZWYsIHJlcGxhY2V9KXtcbiAgICB2aWV3LmxpdmVTb2NrZXQucHVzaEhpc3RvcnlQYXRjaChocmVmLCByZXBsYWNlID8gXCJyZXBsYWNlXCIgOiBcInB1c2hcIiwgc291cmNlRWwpXG4gIH0sXG5cbiAgZXhlY19mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gQVJJQS5hdHRlbXB0Rm9jdXMoZWwpKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXNfZmlyc3QoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuZm9jdXNGaXJzdEludGVyYWN0aXZlKGVsKSB8fCBBUklBLmZvY3VzRmlyc3QoZWwpKVxuICB9LFxuXG4gIGV4ZWNfcHVzaF9mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZm9jdXNTdGFjayA9IGVsIHx8IHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfcG9wX2ZvY3VzKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZihmb2N1c1N0YWNrKXsgZm9jdXNTdGFjay5mb2N1cygpIH1cbiAgICAgIGZvY3VzU3RhY2sgPSBudWxsXG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuYW1lcywgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpXG4gIH0sXG5cbiAgZXhlY19yZW1vdmVfY2xhc3MoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KVxuICB9LFxuXG4gIGV4ZWNfdHJhbnNpdGlvbihldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0aW1lLCB0cmFuc2l0aW9ufSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBbXSwgdHJhbnNpdGlvbiwgdGltZSwgdmlldylcbiAgfSxcblxuICBleGVjX3RvZ2dsZShldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWV9KXtcbiAgICB0aGlzLnRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUpXG4gIH0sXG5cbiAgZXhlY19zaG93KGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLnNob3coZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSlcbiAgfSxcblxuICBleGVjX2hpZGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKVxuICB9LFxuXG4gIGV4ZWNfc2V0X2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cjogW2F0dHIsIHZhbF19KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtbYXR0ciwgdmFsXV0sIFtdKVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2F0dHIoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7YXR0cn0pe1xuICAgIHRoaXMuc2V0T3JSZW1vdmVBdHRycyhlbCwgW10sIFthdHRyXSlcbiAgfSxcblxuICAvLyB1dGlscyBmb3IgY29tbWFuZHNcblxuICBzaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUpe1xuICAgIGlmKCF0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgbnVsbCwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgaGlkZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKXtcbiAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgbnVsbCwgdHJhbnNpdGlvbiwgdGltZSlcbiAgICB9XG4gIH0sXG5cbiAgdG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIGlucywgb3V0cywgdGltZSl7XG4gICAgbGV0IFtpbkNsYXNzZXMsIGluU3RhcnRDbGFzc2VzLCBpbkVuZENsYXNzZXNdID0gaW5zIHx8IFtbXSwgW10sIFtdXVxuICAgIGxldCBbb3V0Q2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzLCBvdXRFbmRDbGFzc2VzXSA9IG91dHMgfHwgW1tdLCBbXSwgW11dXG4gICAgaWYoaW5DbGFzc2VzLmxlbmd0aCA+IDAgfHwgb3V0Q2xhc3Nlcy5sZW5ndGggPiAwKXtcbiAgICAgIGlmKHRoaXMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRTdGFydENsYXNzZXMsIGluQ2xhc3Nlcy5jb25jYXQoaW5TdGFydENsYXNzZXMpLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dENsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0RW5kQ2xhc3Nlcywgb3V0U3RhcnRDbGFzc2VzKSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtc3RhcnRcIikpXG4gICAgICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBvdXRDbGFzc2VzLmNvbmNhdChvdXRFbmRDbGFzc2VzKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJyZW1vdmVcIil7IHJldHVybiB9XG4gICAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpblN0YXJ0Q2xhc3Nlcywgb3V0Q2xhc3Nlcy5jb25jYXQob3V0U3RhcnRDbGFzc2VzKS5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBpbkNsYXNzZXMsIFtdKVxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5FbmRDbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LXN0YXJ0XCIpKVxuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgaW5DbGFzc2VzLmNvbmNhdChpbkVuZENsYXNzZXMpKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OmhpZGUtZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1zdGFydFwiKSlcbiAgICAgICAgICBsZXQgc3RpY2t5RGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5kZWZhdWx0RGlzcGxheShlbClcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBzdGlja3lEaXNwbGF5KVxuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctZW5kXCIpKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMsIHJlbW92ZXMsIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpe1xuICAgIGxldCBbdHJhbnNpdGlvbl9ydW4sIHRyYW5zaXRpb25fc3RhcnQsIHRyYW5zaXRpb25fZW5kXSA9IHRyYW5zaXRpb24gfHwgW1tdLCBbXSwgW11dXG4gICAgaWYodHJhbnNpdGlvbl9ydW4ubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgb25TdGFydCA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCB0cmFuc2l0aW9uX3N0YXJ0LmNvbmNhdCh0cmFuc2l0aW9uX3J1biksIFtdKVxuICAgICAgbGV0IG9uRG9uZSA9ICgpID0+IHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLmNvbmNhdCh0cmFuc2l0aW9uX2VuZCksIHJlbW92ZXMuY29uY2F0KHRyYW5zaXRpb25fcnVuKS5jb25jYXQodHJhbnNpdGlvbl9zdGFydCkpXG4gICAgICByZXR1cm4gdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBsZXQgW3ByZXZBZGRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgW1tdLCBbXV0pXG4gICAgICBsZXQga2VlcEFkZHMgPSBhZGRzLmZpbHRlcihuYW1lID0+IHByZXZBZGRzLmluZGV4T2YobmFtZSkgPCAwICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQga2VlcFJlbW92ZXMgPSByZW1vdmVzLmZpbHRlcihuYW1lID0+IHByZXZSZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBuZXdBZGRzID0gcHJldkFkZHMuZmlsdGVyKG5hbWUgPT4gcmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBBZGRzKVxuICAgICAgbGV0IG5ld1JlbW92ZXMgPSBwcmV2UmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBhZGRzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICAgIERPTS5wdXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5uZXdSZW1vdmVzKVxuICAgICAgICBjdXJyZW50RWwuY2xhc3NMaXN0LmFkZCguLi5uZXdBZGRzKVxuICAgICAgICByZXR1cm4gW25ld0FkZHMsIG5ld1JlbW92ZXNdXG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG5cbiAgc2V0T3JSZW1vdmVBdHRycyhlbCwgc2V0cywgcmVtb3Zlcyl7XG4gICAgbGV0IFtwcmV2U2V0cywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJhdHRyc1wiLCBbW10sIFtdXSlcblxuICAgIGxldCBhbHRlcmVkQXR0cnMgPSBzZXRzLm1hcCgoW2F0dHIsIF92YWxdKSA9PiBhdHRyKS5jb25jYXQocmVtb3Zlcyk7XG4gICAgbGV0IG5ld1NldHMgPSBwcmV2U2V0cy5maWx0ZXIoKFthdHRyLCBfdmFsXSkgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHNldHMpO1xuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKChhdHRyKSA9PiAhYWx0ZXJlZEF0dHJzLmluY2x1ZGVzKGF0dHIpKS5jb25jYXQocmVtb3Zlcyk7XG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzQWxsQ2xhc3NlcyhlbCwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmV2ZXJ5KG5hbWUgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKSB9LFxuXG4gIGlzVG9nZ2xlZE91dChlbCwgb3V0Q2xhc3Nlcyl7XG4gICAgcmV0dXJuICF0aGlzLmlzVmlzaWJsZShlbCkgfHwgdGhpcy5oYXNBbGxDbGFzc2VzKGVsLCBvdXRDbGFzc2VzKVxuICB9LFxuXG4gIGZpbHRlclRvRWxzKHNvdXJjZUVsLCB7dG99KXtcbiAgICByZXR1cm4gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gIH0sXG5cbiAgZGVmYXVsdERpc3BsYXkoZWwpe1xuICAgIHJldHVybiB7dHI6IFwidGFibGUtcm93XCIsIHRkOiBcInRhYmxlLWNlbGxcIn1bZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXSB8fCBcImJsb2NrXCJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKU1xuIiwgImltcG9ydCB7XG4gIEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQsXG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIFBIWF9BVVRPX1JFQ09WRVIsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gIFBIWF9ESVNBQkxFX1dJVEgsXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfRElTQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0VSUk9SX0NMQVNTLFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX0hPT0ssXG4gIFBIWF9QQUdFX0xPQURJTkcsXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUk9HUkVTUyxcbiAgUEhYX1JFQURPTkxZLFxuICBQSFhfUkVGLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJBQ0tfU1RBVElDLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1VQREFURSxcbiAgUEhYX1VQTE9BRF9SRUYsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQSFhfTUFJTixcbiAgUEhYX01PVU5URUQsXG4gIFBVU0hfVElNRU9VVCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvbmUsXG4gIGNsb3Nlc3RQaHhCaW5kaW5nLFxuICBpc0VtcHR5LFxuICBpc0VxdWFsT2JqLFxuICBsb2dFcnJvcixcbiAgbWF5YmUsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IERPTVBhdGNoIGZyb20gXCIuL2RvbV9wYXRjaFwiXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IFJlbmRlcmVkIGZyb20gXCIuL3JlbmRlcmVkXCJcbmltcG9ydCBWaWV3SG9vayBmcm9tIFwiLi92aWV3X2hvb2tcIlxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxubGV0IHNlcmlhbGl6ZUZvcm0gPSAoZm9ybSwgbWV0YWRhdGEsIG9ubHlOYW1lcyA9IFtdKSA9PiB7XG4gIGxldCB7c3VibWl0dGVyLCAuLi5tZXRhfSA9IG1ldGFkYXRhXG5cbiAgLy8gVE9ETzogUmVwbGFjZSB3aXRoIGBuZXcgRm9ybURhdGEoZm9ybSwgc3VibWl0dGVyKWAgd2hlbiBzdXBwb3J0ZWQgYnkgbGF0ZXN0IGJyb3dzZXJzLFxuICAvLyAgICAgICBhbmQgbWVudGlvbiBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBpbiB0aGUgZG9jcy5cbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pXG5cbiAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gRm9ybURhdGEgY29uc3RydWN0b3Igc3VwcG9ydHMgdGhlIHN1Ym1pdHRlciBhcmd1bWVudC5cbiAgaWYgKHN1Ym1pdHRlciAmJiBzdWJtaXR0ZXIuaGFzQXR0cmlidXRlKFwibmFtZVwiKSAmJiBzdWJtaXR0ZXIuZm9ybSAmJiBzdWJtaXR0ZXIuZm9ybSA9PT0gZm9ybSl7XG4gICAgZm9ybURhdGEuYXBwZW5kKHN1Ym1pdHRlci5uYW1lLCBzdWJtaXR0ZXIudmFsdWUpXG4gIH1cblxuICBsZXQgdG9SZW1vdmUgPSBbXVxuXG4gIGZvcm1EYXRhLmZvckVhY2goKHZhbCwga2V5LCBfaW5kZXgpID0+IHtcbiAgICBpZih2YWwgaW5zdGFuY2VvZiBGaWxlKXsgdG9SZW1vdmUucHVzaChrZXkpIH1cbiAgfSlcblxuICAvLyBDbGVhbnVwIGFmdGVyIGJ1aWxkaW5nIGZpbGVEYXRhXG4gIHRvUmVtb3ZlLmZvckVhY2goa2V5ID0+IGZvcm1EYXRhLmRlbGV0ZShrZXkpKVxuXG4gIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgZm9yKGxldCBba2V5LCB2YWxdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSl7XG4gICAgaWYob25seU5hbWVzLmxlbmd0aCA9PT0gMCB8fCBvbmx5TmFtZXMuaW5kZXhPZihrZXkpID49IDApe1xuICAgICAgcGFyYW1zLmFwcGVuZChrZXksIHZhbClcbiAgICB9XG4gIH1cbiAgZm9yKGxldCBtZXRhS2V5IGluIG1ldGEpeyBwYXJhbXMuYXBwZW5kKG1ldGFLZXksIG1ldGFbbWV0YUtleV0pIH1cblxuICByZXR1cm4gcGFyYW1zLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlldyB7XG4gIGNvbnN0cnVjdG9yKGVsLCBsaXZlU29ja2V0LCBwYXJlbnRWaWV3LCBmbGFzaCwgbGl2ZVJlZmVyZXIpe1xuICAgIHRoaXMuaXNEZWFkID0gZmFsc2VcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG4gICAgdGhpcy5mbGFzaCA9IGZsYXNoXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRWaWV3XG4gICAgdGhpcy5yb290ID0gcGFyZW50VmlldyA/IHBhcmVudFZpZXcucm9vdCA6IHRoaXNcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmlkID0gdGhpcy5lbC5pZFxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmxvYWRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLnBydW5pbmdDSURzID0gW11cbiAgICB0aGlzLnJlZGlyZWN0ID0gZmFsc2VcbiAgICB0aGlzLmhyZWYgPSBudWxsXG4gICAgdGhpcy5qb2luQ291bnQgPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmpvaW5Db3VudCAtIDEgOiAwXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IHRydWVcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSBmdW5jdGlvbihvbkRvbmUpeyBvbkRvbmUgJiYgb25Eb25lKCkgfVxuICAgIHRoaXMuc3RvcENhbGxiYWNrID0gZnVuY3Rpb24oKXsgfVxuICAgIHRoaXMucGVuZGluZ0pvaW5PcHMgPSB0aGlzLnBhcmVudCA/IG51bGwgOiBbXVxuICAgIHRoaXMudmlld0hvb2tzID0ge31cbiAgICB0aGlzLnVwbG9hZGVycyA9IHt9XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IFtdXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMucGFyZW50ID8gbnVsbCA6IHt9XG4gICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdID0ge31cbiAgICB0aGlzLmNoYW5uZWwgPSB0aGlzLmxpdmVTb2NrZXQuY2hhbm5lbChgbHY6JHt0aGlzLmlkfWAsICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZGlyZWN0OiB0aGlzLnJlZGlyZWN0ID8gdGhpcy5ocmVmIDogdW5kZWZpbmVkLFxuICAgICAgICB1cmw6IHRoaXMucmVkaXJlY3QgPyB1bmRlZmluZWQgOiB0aGlzLmhyZWYgfHwgdW5kZWZpbmVkLFxuICAgICAgICBwYXJhbXM6IHRoaXMuY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlciksXG4gICAgICAgIHNlc3Npb246IHRoaXMuZ2V0U2Vzc2lvbigpLFxuICAgICAgICBzdGF0aWM6IHRoaXMuZ2V0U3RhdGljKCksXG4gICAgICAgIGZsYXNoOiB0aGlzLmZsYXNoLFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzZXRIcmVmKGhyZWYpeyB0aGlzLmhyZWYgPSBocmVmIH1cblxuICBzZXRSZWRpcmVjdChocmVmKXtcbiAgICB0aGlzLnJlZGlyZWN0ID0gdHJ1ZVxuICAgIHRoaXMuaHJlZiA9IGhyZWZcbiAgfVxuXG4gIGlzTWFpbigpeyByZXR1cm4gdGhpcy5lbC5oYXNBdHRyaWJ1dGUoUEhYX01BSU4pIH1cblxuICBjb25uZWN0UGFyYW1zKGxpdmVSZWZlcmVyKXtcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5saXZlU29ja2V0LnBhcmFtcyh0aGlzLmVsKVxuICAgIGxldCBtYW5pZmVzdCA9XG4gICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9UUkFDS19TVEFUSUMpfV1gKVxuICAgICAgICAubWFwKG5vZGUgPT4gbm9kZS5zcmMgfHwgbm9kZS5ocmVmKS5maWx0ZXIodXJsID0+IHR5cGVvZiAodXJsKSA9PT0gXCJzdHJpbmdcIilcblxuICAgIGlmKG1hbmlmZXN0Lmxlbmd0aCA+IDApeyBwYXJhbXNbXCJfdHJhY2tfc3RhdGljXCJdID0gbWFuaWZlc3QgfVxuICAgIHBhcmFtc1tcIl9tb3VudHNcIl0gPSB0aGlzLmpvaW5Db3VudFxuICAgIHBhcmFtc1tcIl9saXZlX3JlZmVyZXJcIl0gPSBsaXZlUmVmZXJlclxuXG4gICAgcmV0dXJuIHBhcmFtc1xuICB9XG5cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuY2hhbm5lbC5jYW5QdXNoKCkgfVxuXG4gIGdldFNlc3Npb24oKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSB9XG5cbiAgZ2V0U3RhdGljKCl7XG4gICAgbGV0IHZhbCA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9TVEFUSUMpXG4gICAgcmV0dXJuIHZhbCA9PT0gXCJcIiA/IG51bGwgOiB2YWxcbiAgfVxuXG4gIGRlc3Ryb3koY2FsbGJhY2sgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuICAgIGRlbGV0ZSB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1cbiAgICBpZih0aGlzLnBhcmVudCl7IGRlbGV0ZSB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5wYXJlbnQuaWRdW3RoaXMuaWRdIH1cbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICBsZXQgb25GaW5pc2hlZCA9ICgpID0+IHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3Mpe1xuICAgICAgICB0aGlzLmRlc3Ryb3lIb29rKHRoaXMudmlld0hvb2tzW2lkXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBET00ubWFya1BoeENoaWxkRGVzdHJveWVkKHRoaXMuZWwpXG5cbiAgICB0aGlzLmxvZyhcImRlc3Ryb3llZFwiLCAoKSA9PiBbXCJ0aGUgY2hpbGQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnRcIl0pXG4gICAgdGhpcy5jaGFubmVsLmxlYXZlKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgb25GaW5pc2hlZClcbiAgICAgIC5yZWNlaXZlKFwiZXJyb3JcIiwgb25GaW5pc2hlZClcbiAgICAgIC5yZWNlaXZlKFwidGltZW91dFwiLCBvbkZpbmlzaGVkKVxuICB9XG5cbiAgc2V0Q29udGFpbmVyQ2xhc3NlcyguLi5jbGFzc2VzKXtcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoXG4gICAgICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICAgICAgUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUyxcbiAgICAgIFBIWF9FUlJPUl9DTEFTU1xuICAgIClcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NlcylcbiAgfVxuXG4gIHNob3dMb2FkZXIodGltZW91dCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgaWYodGltZW91dCl7XG4gICAgICB0aGlzLmxvYWRlclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnNob3dMb2FkZXIoKSwgdGltZW91dClcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7IHRoaXMudmlld0hvb2tzW2lkXS5fX2Rpc2Nvbm5lY3RlZCgpIH1cbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfRElTQ09OTkVDVEVEX0NMQVNTKVxuICAgIH1cbiAgfVxuXG4gIGV4ZWNBbGwoYmluZGluZyl7XG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7YmluZGluZ31dYCwgZWwgPT4gdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgZWwuZ2V0QXR0cmlidXRlKGJpbmRpbmcpKSlcbiAgfVxuXG4gIGhpZGVMb2FkZXIoKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0NPTk5FQ1RFRF9DTEFTUylcbiAgICB0aGlzLmV4ZWNBbGwodGhpcy5iaW5kaW5nKFwiY29ubmVjdGVkXCIpKVxuICB9XG5cbiAgdHJpZ2dlclJlY29ubmVjdGVkKCl7XG4gICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7IHRoaXMudmlld0hvb2tzW2lkXS5fX3JlY29ubmVjdGVkKCkgfVxuICB9XG5cbiAgbG9nKGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQubG9nKHRoaXMsIGtpbmQsIG1zZ0NhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIHdpdGhpblRhcmdldHMocGh4VGFyZ2V0LCBjYWxsYmFjayl7XG4gICAgaWYocGh4VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgcGh4VGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHBoeFRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBwaHhUYXJnZXQpKVxuICAgIH1cblxuICAgIGlmKGlzQ2lkKHBoeFRhcmdldCkpe1xuICAgICAgbGV0IHRhcmdldHMgPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIHBoeFRhcmdldClcbiAgICAgIGlmKHRhcmdldHMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgbG9nRXJyb3IoYG5vIGNvbXBvbmVudCBmb3VuZCBtYXRjaGluZyBwaHgtdGFyZ2V0IG9mICR7cGh4VGFyZ2V0fWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0aGlzLCBwYXJzZUludChwaHhUYXJnZXQpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFyZ2V0cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwaHhUYXJnZXQpKVxuICAgICAgaWYodGFyZ2V0cy5sZW5ndGggPT09IDApeyBsb2dFcnJvcihgbm90aGluZyBmb3VuZCBtYXRjaGluZyB0aGUgcGh4LXRhcmdldCBzZWxlY3RvciBcIiR7cGh4VGFyZ2V0fVwiYCkgfVxuICAgICAgdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB0aGlzLmxpdmVTb2NrZXQub3duZXIodGFyZ2V0LCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIHRhcmdldCkpKVxuICAgIH1cbiAgfVxuXG4gIGFwcGx5RGlmZih0eXBlLCByYXdEaWZmLCBjYWxsYmFjayl7XG4gICAgdGhpcy5sb2codHlwZSwgKCkgPT4gW1wiXCIsIGNsb25lKHJhd0RpZmYpXSlcbiAgICBsZXQge2RpZmYsIHJlcGx5LCBldmVudHMsIHRpdGxlfSA9IFJlbmRlcmVkLmV4dHJhY3QocmF3RGlmZilcbiAgICBjYWxsYmFjayh7ZGlmZiwgcmVwbHksIGV2ZW50c30pXG4gICAgaWYodGl0bGUpeyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IERPTS5wdXRUaXRsZSh0aXRsZSkpIH1cbiAgfVxuXG4gIG9uSm9pbihyZXNwKXtcbiAgICBsZXQge3JlbmRlcmVkLCBjb250YWluZXJ9ID0gcmVzcFxuICAgIGlmKGNvbnRhaW5lcil7XG4gICAgICBsZXQgW3RhZywgYXR0cnNdID0gY29udGFpbmVyXG4gICAgICB0aGlzLmVsID0gRE9NLnJlcGxhY2VSb290Q29udGFpbmVyKHRoaXMuZWwsIHRhZywgYXR0cnMpXG4gICAgfVxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gdHJ1ZVxuICAgIHRoaXMuZmxhc2ggPSBudWxsXG5cbiAgICBCcm93c2VyLmRyb3BMb2NhbCh0aGlzLmxpdmVTb2NrZXQubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMpXG4gICAgdGhpcy5hcHBseURpZmYoXCJtb3VudFwiLCByZW5kZXJlZCwgKHtkaWZmLCBldmVudHN9KSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcmVkID0gbmV3IFJlbmRlcmVkKHRoaXMuaWQsIGRpZmYpXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIobnVsbCwgXCJqb2luXCIpXG4gICAgICB0aGlzLmRyb3BQZW5kaW5nUmVmcygpXG4gICAgICBsZXQgZm9ybXMgPSB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkoaHRtbClcbiAgICAgIHRoaXMuam9pbkNvdW50KytcblxuICAgICAgaWYoZm9ybXMubGVuZ3RoID4gMCl7XG4gICAgICAgIGZvcm1zLmZvckVhY2goKFtmb3JtLCBuZXdGb3JtLCBuZXdDaWRdLCBpKSA9PiB7XG4gICAgICAgICAgdGhpcy5wdXNoRm9ybVJlY292ZXJ5KGZvcm0sIG5ld0NpZCwgcmVzcCA9PiB7XG4gICAgICAgICAgICBpZihpID09PSBmb3Jtcy5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgICAgdGhpcy5vbkpvaW5Db21wbGV0ZShyZXNwLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkcm9wUGVuZGluZ1JlZnMoKXtcbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7UEhYX1JFRl9TUkN9PVwiJHt0aGlzLmlkfVwiXVske1BIWF9SRUZ9XWAsIGVsID0+IHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW5Db21wbGV0ZSh7bGl2ZV9wYXRjaH0sIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyl7XG4gICAgLy8gSW4gb3JkZXIgdG8gcHJvdmlkZSBhIGJldHRlciBleHBlcmllbmNlLCB3ZSB3YW50IHRvIGpvaW5cbiAgICAvLyBhbGwgTGl2ZVZpZXdzIGZpcnN0IGFuZCBvbmx5IHRoZW4gYXBwbHkgdGhlaXIgcGF0Y2hlcy5cbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEgfHwgKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5pc0pvaW5QZW5kaW5nKCkpKXtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICB9XG5cbiAgICAvLyBPbmUgZG93bnNpZGUgb2YgdGhpcyBhcHByb2FjaCBpcyB0aGF0IHdlIG5lZWQgdG8gZmluZCBwaHhDaGlsZHJlblxuICAgIC8vIGluIHRoZSBodG1sIGZyYWdtZW50LCBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBET00uIFRoZSBmcmFnbWVudFxuICAgIC8vIGFsc28gZG9lcyBub3QgaW5jbHVkZSBQSFhfU1RBVElDLCBzbyB3ZSBuZWVkIHRvIGNvcHkgaXQgb3ZlciBmcm9tXG4gICAgLy8gdGhlIERPTS5cbiAgICBsZXQgbmV3Q2hpbGRyZW4gPSBET00uZmluZFBoeENoaWxkcmVuSW5GcmFnbWVudChodG1sLCB0aGlzLmlkKS5maWx0ZXIodG9FbCA9PiB7XG4gICAgICBsZXQgZnJvbUVsID0gdG9FbC5pZCAmJiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7dG9FbC5pZH1cIl1gKVxuICAgICAgbGV0IHBoeFN0YXRpYyA9IGZyb21FbCAmJiBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TVEFUSUMpXG4gICAgICBpZihwaHhTdGF0aWMpeyB0b0VsLnNldEF0dHJpYnV0ZShQSFhfU1RBVElDLCBwaHhTdGF0aWMpIH1cbiAgICAgIHJldHVybiB0aGlzLmpvaW5DaGlsZCh0b0VsKVxuICAgIH0pXG5cbiAgICBpZihuZXdDaGlsZHJlbi5sZW5ndGggPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICAgICAgdGhpcy5wYXJlbnQuYWNrSm9pbih0aGlzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpXG4gICAgICAgIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXSlcbiAgICB9XG4gIH1cblxuICBhdHRhY2hUcnVlRG9jRWwoKXtcbiAgICB0aGlzLmVsID0gRE9NLmJ5SWQodGhpcy5pZClcbiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICB9XG5cbiAgZXhlY05ld01vdW50ZWQoKXtcbiAgICBET00uYWxsKHRoaXMuZWwsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX0hPT0spfV0sIFtkYXRhLXBoeC0ke1BIWF9IT09LfV1gLCBob29rRWwgPT4ge1xuICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soaG9va0VsKVxuICAgIH0pXG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9NT1VOVEVEKX1dYCwgZWwgPT4gdGhpcy5tYXliZU1vdW50ZWQoZWwpKVxuICB9XG5cbiAgYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKXtcbiAgICB0aGlzLmF0dGFjaFRydWVEb2NFbCgpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgcGF0Y2gubWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKVxuICAgIHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCBmYWxzZSlcbiAgICB0aGlzLmpvaW5OZXdDaGlsZHJlbigpXG4gICAgdGhpcy5leGVjTmV3TW91bnRlZCgpXG5cbiAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG5cbiAgICBpZihsaXZlX3BhdGNoKXtcbiAgICAgIGxldCB7a2luZCwgdG99ID0gbGl2ZV9wYXRjaFxuICAgICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgICB9XG4gICAgdGhpcy5oaWRlTG9hZGVyKClcbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEpeyB0aGlzLnRyaWdnZXJSZWNvbm5lY3RlZCgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjaygpXG4gIH1cblxuICB0cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25CZWZvcmVFbFVwZGF0ZWRcIiwgW2Zyb21FbCwgdG9FbF0pXG4gICAgbGV0IGhvb2sgPSB0aGlzLmdldEhvb2soZnJvbUVsKVxuICAgIGxldCBpc0lnbm9yZWQgPSBob29rICYmIERPTS5pc0lnbm9yZWQoZnJvbUVsLCB0aGlzLmJpbmRpbmcoUEhYX1VQREFURSkpXG4gICAgaWYoaG9vayAmJiAhZnJvbUVsLmlzRXF1YWxOb2RlKHRvRWwpICYmICEoaXNJZ25vcmVkICYmIGlzRXF1YWxPYmooZnJvbUVsLmRhdGFzZXQsIHRvRWwuZGF0YXNldCkpKXtcbiAgICAgIGhvb2suX19iZWZvcmVVcGRhdGUoKVxuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9XG4gIH1cblxuICBtYXliZU1vdW50ZWQoZWwpe1xuICAgIGxldCBwaHhNb3VudGVkID0gZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfTU9VTlRFRCkpXG4gICAgbGV0IGhhc0JlZW5JbnZva2VkID0gcGh4TW91bnRlZCAmJiBET00ucHJpdmF0ZShlbCwgXCJtb3VudGVkXCIpXG4gICAgaWYocGh4TW91bnRlZCAmJiAhaGFzQmVlbkludm9rZWQpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LmV4ZWNKUyhlbCwgcGh4TW91bnRlZClcbiAgICAgIERPTS5wdXRQcml2YXRlKGVsLCBcIm1vdW50ZWRcIiwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBtYXliZUFkZE5ld0hvb2soZWwsIGZvcmNlKXtcbiAgICBsZXQgbmV3SG9vayA9IHRoaXMuYWRkSG9vayhlbClcbiAgICBpZihuZXdIb29rKXsgbmV3SG9vay5fX21vdW50ZWQoKSB9XG4gIH1cblxuICBwZXJmb3JtUGF0Y2gocGF0Y2gsIHBydW5lQ2lkcyl7XG4gICAgbGV0IHJlbW92ZWRFbHMgPSBbXVxuICAgIGxldCBwaHhDaGlsZHJlbkFkZGVkID0gZmFsc2VcbiAgICBsZXQgdXBkYXRlZEhvb2tJZHMgPSBuZXcgU2V0KClcblxuICAgIHBhdGNoLmFmdGVyKFwiYWRkZWRcIiwgZWwgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRyaWdnZXJET00oXCJvbk5vZGVBZGRlZFwiLCBbZWxdKVxuICAgICAgdGhpcy5tYXliZUFkZE5ld0hvb2soZWwpXG4gICAgICBpZihlbC5nZXRBdHRyaWJ1dGUpeyB0aGlzLm1heWJlTW91bnRlZChlbCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInBoeENoaWxkQWRkZWRcIiwgZWwgPT4ge1xuICAgICAgaWYoRE9NLmlzUGh4U3RpY2t5KGVsKSl7XG4gICAgICAgIHRoaXMubGl2ZVNvY2tldC5qb2luUm9vdFZpZXdzKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBoeENoaWxkcmVuQWRkZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcblxuICAgIHBhdGNoLmJlZm9yZShcInVwZGF0ZWRcIiwgKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgbGV0IGhvb2sgPSB0aGlzLnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGZyb21FbCwgdG9FbClcbiAgICAgIGlmKGhvb2speyB1cGRhdGVkSG9va0lkcy5hZGQoZnJvbUVsLmlkKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwidXBkYXRlZFwiLCBlbCA9PiB7XG4gICAgICBpZih1cGRhdGVkSG9va0lkcy5oYXMoZWwuaWQpKXsgdGhpcy5nZXRIb29rKGVsKS5fX3VwZGF0ZWQoKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwiZGlzY2FyZGVkXCIsIChlbCkgPT4ge1xuICAgICAgaWYoZWwubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKXsgcmVtb3ZlZEVscy5wdXNoKGVsKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgZWxzID0+IHRoaXMuYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxzLCBwcnVuZUNpZHMpKVxuICAgIHBhdGNoLnBlcmZvcm0oKVxuICAgIHRoaXMuYWZ0ZXJFbGVtZW50c1JlbW92ZWQocmVtb3ZlZEVscywgcHJ1bmVDaWRzKVxuXG4gICAgcmV0dXJuIHBoeENoaWxkcmVuQWRkZWRcbiAgfVxuXG4gIGFmdGVyRWxlbWVudHNSZW1vdmVkKGVsZW1lbnRzLCBwcnVuZUNpZHMpe1xuICAgIGxldCBkZXN0cm95ZWRDSURzID0gW11cbiAgICBlbGVtZW50cy5mb3JFYWNoKHBhcmVudCA9PiB7XG4gICAgICBsZXQgY29tcG9uZW50cyA9IERPTS5hbGwocGFyZW50LCBgWyR7UEhYX0NPTVBPTkVOVH1dYClcbiAgICAgIGxldCBob29rcyA9IERPTS5hbGwocGFyZW50LCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9IT09LKX1dYClcbiAgICAgIGNvbXBvbmVudHMuY29uY2F0KHBhcmVudCkuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGxldCBjaWQgPSB0aGlzLmNvbXBvbmVudElEKGVsKVxuICAgICAgICBpZihpc0NpZChjaWQpICYmIGRlc3Ryb3llZENJRHMuaW5kZXhPZihjaWQpID09PSAtMSl7IGRlc3Ryb3llZENJRHMucHVzaChjaWQpIH1cbiAgICAgIH0pXG4gICAgICBob29rcy5jb25jYXQocGFyZW50KS5mb3JFYWNoKGhvb2tFbCA9PiB7XG4gICAgICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGhvb2tFbClcbiAgICAgICAgaG9vayAmJiB0aGlzLmRlc3Ryb3lIb29rKGhvb2spXG4gICAgICB9KVxuICAgIH0pXG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBwcnVuZUNpZHMgb24gam9pbnMuIE90aGVyd2lzZSwgaW4gY2FzZSBvZlxuICAgIC8vIHJlam9pbnMsIHdlIG1heSBub3RpZnkgY2lkcyB0aGF0IG5vIGxvbmdlciBiZWxvbmcgdG8gdGhlXG4gICAgLy8gY3VycmVudCBMaXZlVmlldyB0byBiZSByZW1vdmVkLlxuICAgIGlmKHBydW5lQ2lkcyl7XG4gICAgICB0aGlzLm1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcylcbiAgICB9XG4gIH1cblxuICBqb2luTmV3Q2hpbGRyZW4oKXtcbiAgICBET00uZmluZFBoeENoaWxkcmVuKHRoaXMuZWwsIHRoaXMuaWQpLmZvckVhY2goZWwgPT4gdGhpcy5qb2luQ2hpbGQoZWwpKVxuICB9XG5cbiAgZ2V0Q2hpbGRCeUlkKGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVtpZF0gfVxuXG4gIGdldERlc2NlbmRlbnRCeUVsKGVsKXtcbiAgICBpZihlbC5pZCA9PT0gdGhpcy5pZCl7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltlbC5nZXRBdHRyaWJ1dGUoUEhYX1BBUkVOVF9JRCldW2VsLmlkXVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lEZXNjZW5kZW50KGlkKXtcbiAgICBmb3IobGV0IHBhcmVudElkIGluIHRoaXMucm9vdC5jaGlsZHJlbil7XG4gICAgICBmb3IobGV0IGNoaWxkSWQgaW4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXSl7XG4gICAgICAgIGlmKGNoaWxkSWQgPT09IGlkKXsgcmV0dXJuIHRoaXMucm9vdC5jaGlsZHJlbltwYXJlbnRJZF1bY2hpbGRJZF0uZGVzdHJveSgpIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBqb2luQ2hpbGQoZWwpe1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZ2V0Q2hpbGRCeUlkKGVsLmlkKVxuICAgIGlmKCFjaGlsZCl7XG4gICAgICBsZXQgdmlldyA9IG5ldyBWaWV3KGVsLCB0aGlzLmxpdmVTb2NrZXQsIHRoaXMpXG4gICAgICB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1bdmlldy5pZF0gPSB2aWV3XG4gICAgICB2aWV3LmpvaW4oKVxuICAgICAgdGhpcy5jaGlsZEpvaW5zKytcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgaXNKb2luUGVuZGluZygpeyByZXR1cm4gdGhpcy5qb2luUGVuZGluZyB9XG5cbiAgYWNrSm9pbihfY2hpbGQpe1xuICAgIHRoaXMuY2hpbGRKb2lucy0tXG5cbiAgICBpZih0aGlzLmNoaWxkSm9pbnMgPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnBhcmVudC5hY2tKb2luKHRoaXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpe1xuICAgIHRoaXMuam9pbkNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZ0pvaW5PcHMuZm9yRWFjaCgoW3ZpZXcsIG9wXSkgPT4ge1xuICAgICAgICBpZighdmlldy5pc0Rlc3Ryb3llZCgpKXsgb3AoKSB9XG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcyA9IFtdXG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZShkaWZmLCBldmVudHMpe1xuICAgIGlmKHRoaXMuaXNKb2luUGVuZGluZygpIHx8ICh0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiB0aGlzLnJvb3QuaXNNYWluKCkpKXtcbiAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdEaWZmcy5wdXNoKHtkaWZmLCBldmVudHN9KVxuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWQubWVyZ2VEaWZmKGRpZmYpXG4gICAgbGV0IHBoeENoaWxkcmVuQWRkZWQgPSBmYWxzZVxuXG4gICAgLy8gV2hlbiB0aGUgZGlmZiBvbmx5IGNvbnRhaW5zIGNvbXBvbmVudCBkaWZmcywgdGhlbiB3YWxrIGNvbXBvbmVudHNcbiAgICAvLyBhbmQgcGF0Y2ggb25seSB0aGUgcGFyZW50IGNvbXBvbmVudCBjb250YWluZXJzIGZvdW5kIGluIHRoZSBkaWZmLlxuICAgIC8vIE90aGVyd2lzZSwgcGF0Y2ggZW50aXJlIExWIGNvbnRhaW5lci5cbiAgICBpZih0aGlzLnJlbmRlcmVkLmlzQ29tcG9uZW50T25seURpZmYoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJjb21wb25lbnQgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgcGFyZW50Q2lkcyA9IERPTS5maW5kUGFyZW50Q0lEcyh0aGlzLmVsLCB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudENJRHMoZGlmZikpXG4gICAgICAgIHBhcmVudENpZHMuZm9yRWFjaChwYXJlbnRDSUQgPT4ge1xuICAgICAgICAgIGlmKHRoaXMuY29tcG9uZW50UGF0Y2godGhpcy5yZW5kZXJlZC5nZXRDb21wb25lbnQoZGlmZiwgcGFyZW50Q0lEKSwgcGFyZW50Q0lEKSl7IHBoeENoaWxkcmVuQWRkZWQgPSB0cnVlIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmKCFpc0VtcHR5KGRpZmYpKXtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50aW1lKFwiZnVsbCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlckNvbnRhaW5lcihkaWZmLCBcInVwZGF0ZVwiKVxuICAgICAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgbnVsbClcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCB0cnVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIGlmKHBoeENoaWxkcmVuQWRkZWQpeyB0aGlzLmpvaW5OZXdDaGlsZHJlbigpIH1cbiAgfVxuXG4gIHJlbmRlckNvbnRhaW5lcihkaWZmLCBraW5kKXtcbiAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0LnRpbWUoYHRvU3RyaW5nIGRpZmYgKCR7a2luZH0pYCwgKCkgPT4ge1xuICAgICAgbGV0IHRhZyA9IHRoaXMuZWwudGFnTmFtZVxuICAgICAgLy8gRG9uJ3Qgc2tpcCBhbnkgY29tcG9uZW50IGluIHRoZSBkaWZmIG5vciBhbnkgbWFya2VkIGFzIHBydW5lZFxuICAgICAgLy8gKGFzIHRoZXkgbWF5IGhhdmUgYmVlbiBhZGRlZCBiYWNrKVxuICAgICAgbGV0IGNpZHMgPSBkaWZmID8gdGhpcy5yZW5kZXJlZC5jb21wb25lbnRDSURzKGRpZmYpLmNvbmNhdCh0aGlzLnBydW5pbmdDSURzKSA6IG51bGxcbiAgICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLnRvU3RyaW5nKGNpZHMpXG4gICAgICByZXR1cm4gW2A8JHt0YWd9PiR7aHRtbH08LyR7dGFnfT5gLCBzdHJlYW1zXVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnRQYXRjaChkaWZmLCBjaWQpe1xuICAgIGlmKGlzRW1wdHkoZGlmZikpIHJldHVybiBmYWxzZVxuICAgIGxldCBbaHRtbCwgc3RyZWFtc10gPSB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudFRvU3RyaW5nKGNpZClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgc3RyZWFtcywgY2lkKVxuICAgIGxldCBjaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgcmV0dXJuIGNoaWxkcmVuQWRkZWRcbiAgfVxuXG4gIGdldEhvb2soZWwpeyByZXR1cm4gdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGVsKV0gfVxuXG4gIGFkZEhvb2soZWwpe1xuICAgIGlmKFZpZXdIb29rLmVsZW1lbnRJRChlbCkgfHwgIWVsLmdldEF0dHJpYnV0ZSl7IHJldHVybiB9XG4gICAgbGV0IGhvb2tOYW1lID0gZWwuZ2V0QXR0cmlidXRlKGBkYXRhLXBoeC0ke1BIWF9IT09LfWApIHx8IGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0hPT0spKVxuICAgIGlmKGhvb2tOYW1lICYmICF0aGlzLm93bnNFbGVtZW50KGVsKSl7IHJldHVybiB9XG4gICAgbGV0IGNhbGxiYWNrcyA9IHRoaXMubGl2ZVNvY2tldC5nZXRIb29rQ2FsbGJhY2tzKGhvb2tOYW1lKVxuXG4gICAgaWYoY2FsbGJhY2tzKXtcbiAgICAgIGlmKCFlbC5pZCl7IGxvZ0Vycm9yKGBubyBET00gSUQgZm9yIGhvb2sgXCIke2hvb2tOYW1lfVwiLiBIb29rcyByZXF1aXJlIGEgdW5pcXVlIElEIG9uIGVhY2ggZWxlbWVudC5gLCBlbCkgfVxuICAgICAgbGV0IGhvb2sgPSBuZXcgVmlld0hvb2sodGhpcywgZWwsIGNhbGxiYWNrcylcbiAgICAgIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV0gPSBob29rXG4gICAgICByZXR1cm4gaG9va1xuICAgIH0gZWxzZSBpZihob29rTmFtZSAhPT0gbnVsbCl7XG4gICAgICBsb2dFcnJvcihgdW5rbm93biBob29rIGZvdW5kIGZvciBcIiR7aG9va05hbWV9XCJgLCBlbClcbiAgICB9XG4gIH1cblxuICBkZXN0cm95SG9vayhob29rKXtcbiAgICBob29rLl9fZGVzdHJveWVkKClcbiAgICBob29rLl9fY2xlYW51cF9fKClcbiAgICBkZWxldGUgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXVxuICB9XG5cbiAgYXBwbHlQZW5kaW5nVXBkYXRlcygpe1xuICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiBjaGlsZC5hcHBseVBlbmRpbmdVcGRhdGVzKCkpXG4gIH1cblxuICBlYWNoQ2hpbGQoY2FsbGJhY2spe1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSB8fCB7fVxuICAgIGZvcihsZXQgaWQgaW4gY2hpbGRyZW4peyBjYWxsYmFjayh0aGlzLmdldENoaWxkQnlJZChpZCkpIH1cbiAgfVxuXG4gIG9uQ2hhbm5lbChldmVudCwgY2Ipe1xuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBldmVudCwgcmVzcCA9PiB7XG4gICAgICBpZih0aGlzLmlzSm9pblBlbmRpbmcoKSl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiBjYihyZXNwKV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiBjYihyZXNwKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZENoYW5uZWwoKXtcbiAgICAvLyBUaGUgZGlmZiBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgcmVndWxhciB1cGRhdGUgb3BlcmF0aW9ucy5cbiAgICAvLyBBbGwgb3RoZXIgb3BlcmF0aW9ucyBhcmUgcXVldWVkIHRvIGJlIGFwcGxpZWQgb25seSBhZnRlciBqb2luLlxuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBcImRpZmZcIiwgKHJhd0RpZmYpID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmF3RGlmZiwgKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMub25DaGFubmVsKFwicmVkaXJlY3RcIiwgKHt0bywgZmxhc2h9KSA9PiB0aGlzLm9uUmVkaXJlY3Qoe3RvLCBmbGFzaH0pKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9wYXRjaFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUGF0Y2gocmVkaXIpKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9yZWRpcmVjdFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUmVkaXJlY3QocmVkaXIpKVxuICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLm9uRXJyb3IocmVhc29uKSlcbiAgICB0aGlzLmNoYW5uZWwub25DbG9zZShyZWFzb24gPT4gdGhpcy5vbkNsb3NlKHJlYXNvbikpXG4gIH1cblxuICBkZXN0cm95QWxsQ2hpbGRyZW4oKXsgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4gY2hpbGQuZGVzdHJveSgpKSB9XG5cbiAgb25MaXZlUmVkaXJlY3QocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmQsIGZsYXNofSA9IHJlZGlyXG4gICAgbGV0IHVybCA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QodXJsLCBraW5kLCBmbGFzaClcbiAgfVxuXG4gIG9uTGl2ZVBhdGNoKHJlZGlyKXtcbiAgICBsZXQge3RvLCBraW5kfSA9IHJlZGlyXG4gICAgdGhpcy5ocmVmID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgfVxuXG4gIGV4cGFuZFVSTCh0byl7XG4gICAgcmV0dXJuIHRvLnN0YXJ0c1dpdGgoXCIvXCIpID8gYCR7d2luZG93LmxvY2F0aW9uLnByb3RvY29sfS8vJHt3aW5kb3cubG9jYXRpb24uaG9zdH0ke3RvfWAgOiB0b1xuICB9XG5cbiAgb25SZWRpcmVjdCh7dG8sIGZsYXNofSl7IHRoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh0bywgZmxhc2gpIH1cblxuICBpc0Rlc3Ryb3llZCgpeyByZXR1cm4gdGhpcy5kZXN0cm95ZWQgfVxuXG4gIGpvaW5EZWFkKCl7IHRoaXMuaXNEZWFkID0gdHJ1ZSB9XG5cbiAgam9pbihjYWxsYmFjayl7XG4gICAgdGhpcy5zaG93TG9hZGVyKHRoaXMubGl2ZVNvY2tldC5sb2FkZXJUaW1lb3V0KVxuICAgIHRoaXMuYmluZENoYW5uZWwoKVxuICAgIGlmKHRoaXMuaXNNYWluKCkpe1xuICAgICAgdGhpcy5zdG9wQ2FsbGJhY2sgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImluaXRpYWxcIn0pXG4gICAgfVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gKG9uRG9uZSkgPT4ge1xuICAgICAgb25Eb25lID0gb25Eb25lIHx8IGZ1bmN0aW9uKCl7fVxuICAgICAgY2FsbGJhY2sgPyBjYWxsYmFjayh0aGlzLmpvaW5Db3VudCwgb25Eb25lKSA6IG9uRG9uZSgpXG4gICAgfVxuICAgIHRoaXMubGl2ZVNvY2tldC53cmFwUHVzaCh0aGlzLCB7dGltZW91dDogZmFsc2V9LCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFubmVsLmpvaW4oKVxuICAgICAgICAucmVjZWl2ZShcIm9rXCIsIGRhdGEgPT4ge1xuICAgICAgICAgIGlmKCF0aGlzLmlzRGVzdHJveWVkKCkpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5vbkpvaW4oZGF0YSkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlc3AgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiB0aGlzLm9uSm9pbkVycm9yKHJlc3ApKVxuICAgICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiB0aGlzLm9uSm9pbkVycm9yKHtyZWFzb246IFwidGltZW91dFwifSkpXG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbkVycm9yKHJlc3Ape1xuICAgIGlmKHJlc3AucmVhc29uID09PSBcInJlbG9hZFwiKXtcbiAgICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW2BmYWlsZWQgbW91bnQgd2l0aCAke3Jlc3Auc3RhdHVzfS4gRmFsbGluZyBiYWNrIHRvIHBhZ2UgcmVxdWVzdGAsIHJlc3BdKVxuICAgICAgcmV0dXJuIHRoaXMub25SZWRpcmVjdCh7dG86IHRoaXMuaHJlZn0pXG4gICAgfSBlbHNlIGlmKHJlc3AucmVhc29uID09PSBcInVuYXV0aG9yaXplZFwiIHx8IHJlc3AucmVhc29uID09PSBcInN0YWxlXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmF1dGhvcml6ZWQgbGl2ZV9yZWRpcmVjdC4gRmFsbGluZyBiYWNrIHRvIHBhZ2UgcmVxdWVzdFwiLCByZXNwXSlcbiAgICAgIHJldHVybiB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLmhyZWZ9KVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0IHx8IHJlc3AubGl2ZV9yZWRpcmVjdCl7XG4gICAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICAgIGlmKHJlc3AucmVkaXJlY3QpeyByZXR1cm4gdGhpcy5vblJlZGlyZWN0KHJlc3AucmVkaXJlY3QpIH1cbiAgICBpZihyZXNwLmxpdmVfcmVkaXJlY3QpeyByZXR1cm4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZXNwLmxpdmVfcmVkaXJlY3QpIH1cbiAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInVuYWJsZSB0byBqb2luXCIsIHJlc3BdKVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcykgfVxuICB9XG5cbiAgb25DbG9zZShyZWFzb24pe1xuICAgIGlmKHRoaXMuaXNEZXN0cm95ZWQoKSl7IHJldHVybiB9XG4gICAgaWYodGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkgJiYgcmVhc29uICE9PSBcImxlYXZlXCIpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpXG4gICAgfVxuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmxpdmVTb2NrZXQuZHJvcEFjdGl2ZUVsZW1lbnQodGhpcylcbiAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiBiZSBudWxsIGluIEludGVybmV0IEV4cGxvcmVyIDExXG4gICAgaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCl7IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpIH1cbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXtcbiAgICAgIHRoaXMuc2hvd0xvYWRlcihCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUKVxuICAgIH1cbiAgfVxuXG4gIG9uRXJyb3IocmVhc29uKXtcbiAgICB0aGlzLm9uQ2xvc2UocmVhc29uKVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ2aWV3IGNyYXNoZWRcIiwgcmVhc29uXSkgfVxuICAgIGlmKCF0aGlzLmxpdmVTb2NrZXQuaXNVbmxvYWRlZCgpKXsgdGhpcy5kaXNwbGF5RXJyb3IoKSB9XG4gIH1cblxuICBkaXNwbGF5RXJyb3IoKXtcbiAgICBpZih0aGlzLmlzTWFpbigpKXsgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwge2RldGFpbDoge3RvOiB0aGlzLmhyZWYsIGtpbmQ6IFwiZXJyb3JcIn19KSB9XG4gICAgdGhpcy5zaG93TG9hZGVyKClcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUywgUEhYX0VSUk9SX0NMQVNTKVxuICAgIHRoaXMuZXhlY0FsbCh0aGlzLmJpbmRpbmcoXCJkaXNjb25uZWN0ZWRcIikpXG4gIH1cblxuICBwdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9XG5cbiAgICBsZXQgW3JlZiwgW2VsXSwgb3B0c10gPSByZWZHZW5lcmF0b3IgPyByZWZHZW5lcmF0b3IoKSA6IFtudWxsLCBbXSwge31dXG4gICAgbGV0IG9uTG9hZGluZ0RvbmUgPSBmdW5jdGlvbigpeyB9XG4gICAgaWYob3B0cy5wYWdlX2xvYWRpbmcgfHwgKGVsICYmIChlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9QQUdFX0xPQURJTkcpKSAhPT0gbnVsbCkpKXtcbiAgICAgIG9uTG9hZGluZ0RvbmUgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHtraW5kOiBcImVsZW1lbnRcIiwgdGFyZ2V0OiBlbH0pXG4gICAgfVxuXG4gICAgaWYodHlwZW9mIChwYXlsb2FkLmNpZCkgIT09IFwibnVtYmVyXCIpeyBkZWxldGUgcGF5bG9hZC5jaWQgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxpdmVTb2NrZXQud3JhcFB1c2godGhpcywge3RpbWVvdXQ6IHRydWV9LCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWwucHVzaChldmVudCwgcGF5bG9hZCwgUFVTSF9USU1FT1VUKS5yZWNlaXZlKFwib2tcIiwgcmVzcCA9PiB7XG4gICAgICAgICAgbGV0IGZpbmlzaCA9IChob29rUmVwbHkpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3AucmVkaXJlY3QpeyB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3BhdGNoKXsgdGhpcy5vbkxpdmVQYXRjaChyZXNwLmxpdmVfcGF0Y2gpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgICAgICAgICBpZihyZWYgIT09IG51bGwpeyB0aGlzLnVuZG9SZWZzKHJlZikgfVxuICAgICAgICAgICAgb25Mb2FkaW5nRG9uZSgpXG4gICAgICAgICAgICBvblJlcGx5KHJlc3AsIGhvb2tSZXBseSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzcC5kaWZmKXtcbiAgICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmVzcC5kaWZmLCAoe2RpZmYsIHJlcGx5LCBldmVudHN9KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoZGlmZiwgZXZlbnRzKVxuICAgICAgICAgICAgICAgIGZpbmlzaChyZXBseSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbmlzaChudWxsKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgdW5kb1JlZnMocmVmKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH0gLy8gZXhpdCBpZiBleHRlcm5hbCBmb3JtIHRyaWdnZXJlZFxuXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5pZH1cIl1bJHtQSFhfUkVGfT1cIiR7cmVmfVwiXWAsIGVsID0+IHtcbiAgICAgIGxldCBkaXNhYmxlZFZhbCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICAvLyByZW1vdmUgcmVmc1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUYpXG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpXG4gICAgICAvLyByZXN0b3JlIGlucHV0c1xuICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSkgIT09IG51bGwpe1xuICAgICAgICBlbC5yZWFkT25seSA9IGZhbHNlXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVBRE9OTFkpXG4gICAgICB9XG4gICAgICBpZihkaXNhYmxlZFZhbCAhPT0gbnVsbCl7XG4gICAgICAgIGVsLmRpc2FibGVkID0gZGlzYWJsZWRWYWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgY2xhc3Nlc1xuICAgICAgUEhYX0VWRU5UX0NMQVNTRVMuZm9yRWFjaChjbGFzc05hbWUgPT4gRE9NLnJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpKVxuICAgICAgLy8gcmVzdG9yZSBkaXNhYmxlc1xuICAgICAgbGV0IGRpc2FibGVSZXN0b3JlID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIGlmKGRpc2FibGVSZXN0b3JlICE9PSBudWxsKXtcbiAgICAgICAgZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVJlc3RvcmVcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIH1cbiAgICAgIGxldCB0b0VsID0gRE9NLnByaXZhdGUoZWwsIFBIWF9SRUYpXG4gICAgICBpZih0b0VsKXtcbiAgICAgICAgbGV0IGhvb2sgPSB0aGlzLnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGVsLCB0b0VsKVxuICAgICAgICBET01QYXRjaC5wYXRjaEVsKGVsLCB0b0VsLCB0aGlzLmxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpKVxuICAgICAgICBpZihob29rKXsgaG9vay5fX3VwZGF0ZWQoKSB9XG4gICAgICAgIERPTS5kZWxldGVQcml2YXRlKGVsLCBQSFhfUkVGKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwdXRSZWYoZWxlbWVudHMsIGV2ZW50LCBvcHRzID0ge30pe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZisrXG4gICAgbGV0IGRpc2FibGVXaXRoID0gdGhpcy5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpXG4gICAgaWYob3B0cy5sb2FkaW5nKXsgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQoRE9NLmFsbChkb2N1bWVudCwgb3B0cy5sb2FkaW5nKSl9XG5cbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYHBoeC0ke2V2ZW50fS1sb2FkaW5nYClcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGLCBuZXdSZWYpXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHRoaXMuZWwuaWQpXG4gICAgICBsZXQgZGlzYWJsZVRleHQgPSBlbC5nZXRBdHRyaWJ1dGUoZGlzYWJsZVdpdGgpXG4gICAgICBpZihkaXNhYmxlVGV4dCAhPT0gbnVsbCl7XG4gICAgICAgIGlmKCFlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKSl7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSwgZWwuaW5uZXJUZXh0KVxuICAgICAgICB9XG4gICAgICAgIGlmKGRpc2FibGVUZXh0ICE9PSBcIlwiKXsgZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVRleHQgfVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIFtuZXdSZWYsIGVsZW1lbnRzLCBvcHRzXVxuICB9XG5cbiAgY29tcG9uZW50SUQoZWwpe1xuICAgIGxldCBjaWQgPSBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpXG4gICAgcmV0dXJuIGNpZCA/IHBhcnNlSW50KGNpZCkgOiBudWxsXG4gIH1cblxuICB0YXJnZXRDb21wb25lbnRJRCh0YXJnZXQsIHRhcmdldEN0eCwgb3B0cyA9IHt9KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXsgcmV0dXJuIHRhcmdldEN0eCB9XG5cbiAgICBsZXQgY2lkT3JTZWxlY3RvciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwidGFyZ2V0XCIpKVxuICAgIGlmKGlzQ2lkKGNpZE9yU2VsZWN0b3IpKXtcbiAgICAgIHJldHVybiBwYXJzZUludChjaWRPclNlbGVjdG9yKVxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHggJiYgKGNpZE9yU2VsZWN0b3IgIT09IG51bGwgfHwgb3B0cy50YXJnZXQpKXtcbiAgICAgIHJldHVybiB0aGlzLmNsb3Nlc3RDb21wb25lbnRJRCh0YXJnZXRDdHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eCl7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCl7XG4gICAgICByZXR1cm4gbWF5YmUodGFyZ2V0Q3R4LmNsb3Nlc3QoYFske1BIWF9DT01QT05FTlR9XWApLCBlbCA9PiB0aGlzLm93bnNFbGVtZW50KGVsKSAmJiB0aGlzLmNvbXBvbmVudElEKGVsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBwdXNoSG9va0V2ZW50KHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW10sIFwiaG9va1wiKVxuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiBbcmVmLCBlbHMsIG9wdHNdLCBcImV2ZW50XCIsIHtcbiAgICAgIHR5cGU6IFwiaG9va1wiLFxuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgdmFsdWU6IHBheWxvYWQsXG4gICAgICBjaWQ6IHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9LCAocmVzcCwgcmVwbHkpID0+IG9uUmVwbHkocmVwbHksIHJlZikpXG5cbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICBleHRyYWN0TWV0YShlbCwgbWV0YSwgdmFsdWUpe1xuICAgIGxldCBwcmVmaXggPSB0aGlzLmJpbmRpbmcoXCJ2YWx1ZS1cIilcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBsZXQgbmFtZSA9IGVsLmF0dHJpYnV0ZXNbaV0ubmFtZVxuICAgICAgaWYobmFtZS5zdGFydHNXaXRoKHByZWZpeCkpeyBtZXRhW25hbWUucmVwbGFjZShwcmVmaXgsIFwiXCIpXSA9IGVsLmdldEF0dHJpYnV0ZShuYW1lKSB9XG4gICAgfVxuICAgIGlmKGVsLnZhbHVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbWV0YS52YWx1ZSA9IGVsLnZhbHVlXG5cbiAgICAgIGlmKGVsLnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiBDSEVDS0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZSkgPj0gMCAmJiAhZWwuY2hlY2tlZCl7XG4gICAgICAgIGRlbGV0ZSBtZXRhLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHZhbHVlKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIGZvcihsZXQga2V5IGluIHZhbHVlKXsgbWV0YVtrZXldID0gdmFsdWVba2V5XSB9XG4gICAgfVxuICAgIHJldHVybiBtZXRhXG4gIH1cblxuICBwdXNoRXZlbnQodHlwZSwgZWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIG1ldGEsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IHRoaXMucHV0UmVmKFtlbF0sIHR5cGUsIG9wdHMpLCBcImV2ZW50XCIsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogdGhpcy5leHRyYWN0TWV0YShlbCwgbWV0YSwgb3B0cy52YWx1ZSksXG4gICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZWwsIHRhcmdldEN0eCwgb3B0cylcbiAgICB9KVxuICB9XG5cbiAgcHVzaEZpbGVQcm9ncmVzcyhmaWxlRWwsIGVudHJ5UmVmLCBwcm9ncmVzcywgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZpbGVFbC5mb3JtLCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICB2aWV3LnB1c2hXaXRoUmVwbHkobnVsbCwgXCJwcm9ncmVzc1wiLCB7XG4gICAgICAgIGV2ZW50OiBmaWxlRWwuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhQSFhfUFJPR1JFU1MpKSxcbiAgICAgICAgcmVmOiBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cnlfcmVmOiBlbnRyeVJlZixcbiAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgICBjaWQ6IHZpZXcudGFyZ2V0Q29tcG9uZW50SUQoZmlsZUVsLmZvcm0sIHRhcmdldEN0eClcbiAgICAgIH0sIG9uUmVwbHkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eClcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5wdXRSZWYoW2lucHV0RWwsIGlucHV0RWwuZm9ybV0sIFwiY2hhbmdlXCIsIG9wdHMpXG4gICAgbGV0IGZvcm1EYXRhXG4gICAgaWYoaW5wdXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKSl7XG4gICAgICBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oaW5wdXRFbC5mb3JtLCB7X3RhcmdldDogb3B0cy5fdGFyZ2V0fSwgW2lucHV0RWwubmFtZV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXR9KVxuICAgIH1cbiAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBpbnB1dEVsLmZpbGVzICYmIGlucHV0RWwuZmlsZXMubGVuZ3RoID4gMCl7XG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhpbnB1dEVsLCBBcnJheS5mcm9tKGlucHV0RWwuZmlsZXMpKVxuICAgIH1cbiAgICB1cGxvYWRzID0gTGl2ZVVwbG9hZGVyLnNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbClcbiAgICBsZXQgZXZlbnQgPSB7XG4gICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgIHVwbG9hZHM6IHVwbG9hZHMsXG4gICAgICBjaWQ6IGNpZFxuICAgIH1cbiAgICB0aGlzLnB1c2hXaXRoUmVwbHkocmVmR2VuZXJhdG9yLCBcImV2ZW50XCIsIGV2ZW50LCByZXNwID0+IHtcbiAgICAgIERPTS5zaG93RXJyb3IoaW5wdXRFbCwgdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoUEhYX0ZFRURCQUNLX0ZPUikpXG4gICAgICBpZihET00uaXNVcGxvYWRJbnB1dChpbnB1dEVsKSAmJiBpbnB1dEVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWF1dG8tdXBsb2FkXCIpICE9PSBudWxsKXtcbiAgICAgICAgaWYoTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkubGVuZ3RoID4gMCl7XG4gICAgICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgICAgICB0aGlzLnVwbG9hZEZpbGVzKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyQXdhaXRpbmdTdWJtaXQoaW5wdXRFbC5mb3JtKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3ApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyaWdnZXJBd2FpdGluZ1N1Ym1pdChmb3JtRWwpe1xuICAgIGxldCBhd2FpdGluZ1N1Ym1pdCA9IHRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbClcbiAgICBpZihhd2FpdGluZ1N1Ym1pdCl7XG4gICAgICBsZXQgW19lbCwgX3JlZiwgX29wdHMsIGNhbGxiYWNrXSA9IGF3YWl0aW5nU3VibWl0XG4gICAgICB0aGlzLmNhbmNlbFN1Ym1pdChmb3JtRWwpXG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbCl7XG4gICAgcmV0dXJuIHRoaXMuZm9ybVN1Ym1pdHMuZmluZCgoW2VsLCBfcmVmLCBfb3B0cywgX2NhbGxiYWNrXSkgPT4gZWwuaXNTYW1lTm9kZShmb3JtRWwpKVxuICB9XG5cbiAgc2NoZWR1bGVTdWJtaXQoZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpKXsgcmV0dXJuIHRydWUgfVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMucHVzaChbZm9ybUVsLCByZWYsIG9wdHMsIGNhbGxiYWNrXSlcbiAgfVxuXG4gIGNhbmNlbFN1Ym1pdChmb3JtRWwpe1xuICAgIHRoaXMuZm9ybVN1Ym1pdHMgPSB0aGlzLmZvcm1TdWJtaXRzLmZpbHRlcigoW2VsLCByZWYsIF9jYWxsYmFja10pID0+IHtcbiAgICAgIGlmKGVsLmlzU2FtZU5vZGUoZm9ybUVsKSl7XG4gICAgICAgIHRoaXMudW5kb1JlZnMocmVmKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGRpc2FibGVGb3JtKGZvcm1FbCwgb3B0cyA9IHt9KXtcbiAgICBsZXQgZmlsdGVySWdub3JlZCA9IGVsID0+IHtcbiAgICAgIGxldCB1c2VySWdub3JlZCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGVsLCBgJHt0aGlzLmJpbmRpbmcoUEhYX1VQREFURSl9PWlnbm9yZWAsIGVsLmZvcm0pXG4gICAgICByZXR1cm4gISh1c2VySWdub3JlZCB8fCBjbG9zZXN0UGh4QmluZGluZyhlbCwgXCJkYXRhLXBoeC11cGRhdGU9aWdub3JlXCIsIGVsLmZvcm0pKVxuICAgIH1cbiAgICBsZXQgZmlsdGVyRGlzYWJsZXMgPSBlbCA9PiB7XG4gICAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckJ1dHRvbiA9IGVsID0+IGVsLnRhZ05hbWUgPT0gXCJCVVRUT05cIlxuXG4gICAgbGV0IGZpbHRlcklucHV0ID0gZWwgPT4gW1wiSU5QVVRcIiwgXCJURVhUQVJFQVwiLCBcIlNFTEVDVFwiXS5pbmNsdWRlcyhlbC50YWdOYW1lKVxuXG4gICAgbGV0IGZvcm1FbGVtZW50cyA9IEFycmF5LmZyb20oZm9ybUVsLmVsZW1lbnRzKVxuICAgIGxldCBkaXNhYmxlcyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyRGlzYWJsZXMpXG4gICAgbGV0IGJ1dHRvbnMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckJ1dHRvbikuZmlsdGVyKGZpbHRlcklnbm9yZWQpXG4gICAgbGV0IGlucHV0cyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVySW5wdXQpLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuXG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRCwgYnV0dG9uLmRpc2FibGVkKVxuICAgICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZVxuICAgIH0pXG4gICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSwgaW5wdXQucmVhZE9ubHkpXG4gICAgICBpbnB1dC5yZWFkT25seSA9IHRydWVcbiAgICAgIGlmKGlucHV0LmZpbGVzKXtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFRCwgaW5wdXQuZGlzYWJsZWQpXG4gICAgICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gICAgZm9ybUVsLnNldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX1BBR0VfTE9BRElORyksIFwiXCIpXG4gICAgcmV0dXJuIHRoaXMucHV0UmVmKFtmb3JtRWxdLmNvbmNhdChkaXNhYmxlcykuY29uY2F0KGJ1dHRvbnMpLmNvbmNhdChpbnB1dHMpLCBcInN1Ym1pdFwiLCBvcHRzKVxuICB9XG5cbiAgcHVzaEZvcm1TdWJtaXQoZm9ybUVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMsIG9uUmVwbHkpe1xuICAgIGxldCByZWZHZW5lcmF0b3IgPSAoKSA9PiB0aGlzLmRpc2FibGVGb3JtKGZvcm1FbCwgb3B0cylcbiAgICBsZXQgY2lkID0gdGhpcy50YXJnZXRDb21wb25lbnRJRChmb3JtRWwsIHRhcmdldEN0eClcbiAgICBpZihMaXZlVXBsb2FkZXIuaGFzVXBsb2Fkc0luUHJvZ3Jlc3MoZm9ybUVsKSl7XG4gICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgbGV0IHB1c2ggPSAoKSA9PiB0aGlzLnB1c2hGb3JtU3VibWl0KGZvcm1FbCwgc3VibWl0dGVyLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBvcHRzLCBvblJlcGx5KVxuICAgICAgcmV0dXJuIHRoaXMuc2NoZWR1bGVTdWJtaXQoZm9ybUVsLCByZWYsIG9wdHMsIHB1c2gpXG4gICAgfSBlbHNlIGlmKExpdmVVcGxvYWRlci5pbnB1dHNBd2FpdGluZ1ByZWZsaWdodChmb3JtRWwpLmxlbmd0aCA+IDApe1xuICAgICAgbGV0IFtyZWYsIGVsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgbGV0IHByb3h5UmVmR2VuID0gKCkgPT4gW3JlZiwgZWxzLCBvcHRzXVxuICAgICAgdGhpcy51cGxvYWRGaWxlcyhmb3JtRWwsIHRhcmdldEN0eCwgcmVmLCBjaWQsIChfdXBsb2FkcykgPT4ge1xuICAgICAgICBsZXQgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGZvcm1FbCwge3N1Ym1pdHRlcn0pXG4gICAgICAgIHRoaXMucHVzaFdpdGhSZXBseShwcm94eVJlZkdlbiwgXCJldmVudFwiLCB7XG4gICAgICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgICBjaWQ6IGNpZFxuICAgICAgICB9LCBvblJlcGx5KVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXJ9KVxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCB7XG4gICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgIHZhbHVlOiBmb3JtRGF0YSxcbiAgICAgICAgY2lkOiBjaWRcbiAgICAgIH0sIG9uUmVwbHkpXG4gICAgfVxuICB9XG5cbiAgdXBsb2FkRmlsZXMoZm9ybUVsLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCBvbkNvbXBsZXRlKXtcbiAgICBsZXQgam9pbkNvdW50QXRVcGxvYWQgPSB0aGlzLmpvaW5Db3VudFxuICAgIGxldCBpbnB1dEVscyA9IExpdmVVcGxvYWRlci5hY3RpdmVGaWxlSW5wdXRzKGZvcm1FbClcbiAgICBsZXQgbnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPSBpbnB1dEVscy5sZW5ndGhcblxuICAgIC8vIGdldCBlYWNoIGZpbGUgaW5wdXRcbiAgICBpbnB1dEVscy5mb3JFYWNoKGlucHV0RWwgPT4ge1xuICAgICAgbGV0IHVwbG9hZGVyID0gbmV3IExpdmVVcGxvYWRlcihpbnB1dEVsLCB0aGlzLCAoKSA9PiB7XG4gICAgICAgIG51bUZpbGVJbnB1dHNJblByb2dyZXNzLS1cbiAgICAgICAgaWYobnVtRmlsZUlucHV0c0luUHJvZ3Jlc3MgPT09IDApeyBvbkNvbXBsZXRlKCkgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMudXBsb2FkZXJzW2lucHV0RWxdID0gdXBsb2FkZXJcbiAgICAgIGxldCBlbnRyaWVzID0gdXBsb2FkZXIuZW50cmllcygpLm1hcChlbnRyeSA9PiBlbnRyeS50b1ByZWZsaWdodFBheWxvYWQoKSlcblxuICAgICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICAgIHJlZjogaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpLFxuICAgICAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcInNlbmRpbmcgcHJlZmxpZ2h0IHJlcXVlc3RcIiwgcGF5bG9hZF0pXG5cbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShudWxsLCBcImFsbG93X3VwbG9hZFwiLCBwYXlsb2FkLCByZXNwID0+IHtcbiAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW1wiZ290IHByZWZsaWdodCByZXNwb25zZVwiLCByZXNwXSlcbiAgICAgICAgaWYocmVzcC5lcnJvcil7XG4gICAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYpXG4gICAgICAgICAgbGV0IFtlbnRyeV9yZWYsIHJlYXNvbl0gPSByZXNwLmVycm9yXG4gICAgICAgICAgdGhpcy5sb2coXCJ1cGxvYWRcIiwgKCkgPT4gW2BlcnJvciBmb3IgZW50cnkgJHtlbnRyeV9yZWZ9YCwgcmVhc29uXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgb25FcnJvciA9IChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsLm9uRXJyb3IoKCkgPT4ge1xuICAgICAgICAgICAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gam9pbkNvdW50QXRVcGxvYWQpeyBjYWxsYmFjaygpIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHVwbG9hZGVyLmluaXRBZGFwdGVyVXBsb2FkKHJlc3AsIG9uRXJyb3IsIHRoaXMubGl2ZVNvY2tldClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZGlzcGF0Y2hVcGxvYWRzKG5hbWUsIGZpbGVzT3JCbG9icyl7XG4gICAgbGV0IGlucHV0cyA9IERPTS5maW5kVXBsb2FkSW5wdXRzKHRoaXMuZWwpLmZpbHRlcihlbCA9PiBlbC5uYW1lID09PSBuYW1lKVxuICAgIGlmKGlucHV0cy5sZW5ndGggPT09IDApeyBsb2dFcnJvcihgbm8gbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIGlmKGlucHV0cy5sZW5ndGggPiAxKXsgbG9nRXJyb3IoYGR1cGxpY2F0ZSBsaXZlIGZpbGUgaW5wdXRzIGZvdW5kIG1hdGNoaW5nIHRoZSBuYW1lIFwiJHtuYW1lfVwiYCkgfVxuICAgIGVsc2UgeyBET00uZGlzcGF0Y2hFdmVudChpbnB1dHNbMF0sIFBIWF9UUkFDS19VUExPQURTLCB7ZGV0YWlsOiB7ZmlsZXM6IGZpbGVzT3JCbG9ic319KSB9XG4gIH1cblxuICBwdXNoRm9ybVJlY292ZXJ5KGZvcm0sIG5ld0NpZCwgY2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC53aXRoaW5Pd25lcnMoZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgbGV0IGlucHV0ID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5maW5kKGVsID0+IHtcbiAgICAgICAgcmV0dXJuIERPTS5pc0Zvcm1JbnB1dChlbCkgJiYgZWwudHlwZSAhPT0gXCJoaWRkZW5cIiAmJiAhZWwuaGFzQXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICAgIH0pXG4gICAgICBsZXQgcGh4RXZlbnQgPSBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcblxuICAgICAgSlMuZXhlYyhcImNoYW5nZVwiLCBwaHhFdmVudCwgdmlldywgaW5wdXQsIFtcInB1c2hcIiwge190YXJnZXQ6IGlucHV0Lm5hbWUsIG5ld0NpZDogbmV3Q2lkLCBjYWxsYmFjazogY2FsbGJhY2t9XSlcbiAgICB9KVxuICB9XG5cbiAgcHVzaExpbmtQYXRjaChocmVmLCB0YXJnZXRFbCwgY2FsbGJhY2spe1xuICAgIGxldCBsaW5rUmVmID0gdGhpcy5saXZlU29ja2V0LnNldFBlbmRpbmdMaW5rKGhyZWYpXG4gICAgbGV0IHJlZkdlbiA9IHRhcmdldEVsID8gKCkgPT4gdGhpcy5wdXRSZWYoW3RhcmdldEVsXSwgXCJjbGlja1wiKSA6IG51bGxcbiAgICBsZXQgZmFsbGJhY2sgPSAoKSA9PiB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3Qod2luZG93LmxvY2F0aW9uLmhyZWYpXG5cbiAgICBsZXQgcHVzaCA9IHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW4sIFwibGl2ZV9wYXRjaFwiLCB7dXJsOiBocmVmfSwgcmVzcCA9PiB7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHJlc3AubGlua19yZWRpcmVjdCl7XG4gICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcGxhY2VNYWluKGhyZWYsIG51bGwsIGNhbGxiYWNrLCBsaW5rUmVmKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmKHRoaXMubGl2ZVNvY2tldC5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgICAgICB0aGlzLmhyZWYgPSBocmVmXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYXBwbHlQZW5kaW5nVXBkYXRlcygpXG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobGlua1JlZilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaWYocHVzaCl7XG4gICAgICBwdXNoLnJlY2VpdmUoXCJ0aW1lb3V0XCIsIGZhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBmYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgZm9ybXNGb3JSZWNvdmVyeShodG1sKXtcbiAgICBpZih0aGlzLmpvaW5Db3VudCA9PT0gMCl7IHJldHVybiBbXSB9XG5cbiAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuXG4gICAgcmV0dXJuIChcbiAgICAgIERPTS5hbGwodGhpcy5lbCwgYGZvcm1bJHtwaHhDaGFuZ2V9XWApXG4gICAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmlkICYmIHRoaXMub3duc0VsZW1lbnQoZm9ybSkpXG4gICAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmVsZW1lbnRzLmxlbmd0aCA+IDApXG4gICAgICAgIC5maWx0ZXIoZm9ybSA9PiBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0FVVE9fUkVDT1ZFUikpICE9PSBcImlnbm9yZVwiKVxuICAgICAgICAubWFwKGZvcm0gPT4ge1xuICAgICAgICAgIGxldCBuZXdGb3JtID0gdGVtcGxhdGUuY29udGVudC5xdWVyeVNlbGVjdG9yKGBmb3JtW2lkPVwiJHtmb3JtLmlkfVwiXVske3BoeENoYW5nZX09XCIke2Zvcm0uZ2V0QXR0cmlidXRlKHBoeENoYW5nZSl9XCJdYClcbiAgICAgICAgICBpZihuZXdGb3JtKXtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybSwgbmV3Rm9ybSwgdGhpcy50YXJnZXRDb21wb25lbnRJRChuZXdGb3JtKV1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtmb3JtLCBudWxsLCBudWxsXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcigoW2Zvcm0sIG5ld0Zvcm0sIG5ld0NpZF0pID0+IG5ld0Zvcm0pXG4gICAgKVxuICB9XG5cbiAgbWF5YmVQdXNoQ29tcG9uZW50c0Rlc3Ryb3llZChkZXN0cm95ZWRDSURzKXtcbiAgICBsZXQgd2lsbERlc3Ryb3lDSURzID0gZGVzdHJveWVkQ0lEcy5maWx0ZXIoY2lkID0+IHtcbiAgICAgIHJldHVybiBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIGNpZCkubGVuZ3RoID09PSAwXG4gICAgfSlcbiAgICBpZih3aWxsRGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICB0aGlzLnBydW5pbmdDSURzLnB1c2goLi4ud2lsbERlc3Ryb3lDSURzKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJjaWRzX3dpbGxfZGVzdHJveVwiLCB7Y2lkczogd2lsbERlc3Ryb3lDSURzfSwgKCkgPT4ge1xuICAgICAgICAvLyBUaGUgY2lkcyBhcmUgZWl0aGVyIGJhY2sgb24gdGhlIHBhZ2Ugb3IgdGhleSB3aWxsIGJlIGZ1bGx5IHJlbW92ZWQsXG4gICAgICAgIC8vIHNvIHdlIGNhbiByZW1vdmUgdGhlbSBmcm9tIHRoZSBwcnVuaW5nQ0lEcy5cbiAgICAgICAgdGhpcy5wcnVuaW5nQ0lEcyA9IHRoaXMucHJ1bmluZ0NJRHMuZmlsdGVyKGNpZCA9PiB3aWxsRGVzdHJveUNJRHMuaW5kZXhPZihjaWQpICE9PSAtMSlcblxuICAgICAgICAvLyBTZWUgaWYgYW55IG9mIHRoZSBjaWRzIHdlIHdhbnRlZCB0byBkZXN0cm95IHdlcmUgYWRkZWQgYmFjayxcbiAgICAgICAgLy8gaWYgdGhleSB3ZXJlIGFkZGVkIGJhY2ssIHdlIGRvbid0IGFjdHVhbGx5IGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgbGV0IGNvbXBsZXRlbHlEZXN0cm95Q0lEcyA9IHdpbGxEZXN0cm95Q0lEcy5maWx0ZXIoY2lkID0+IHtcbiAgICAgICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgICAgICB9KVxuXG4gICAgICAgIGlmKGNvbXBsZXRlbHlEZXN0cm95Q0lEcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJjaWRzX2Rlc3Ryb3llZFwiLCB7Y2lkczogY29tcGxldGVseURlc3Ryb3lDSURzfSwgKHJlc3ApID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWQucHJ1bmVDSURzKHJlc3AuY2lkcylcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIG93bnNFbGVtZW50KGVsKXtcbiAgICBsZXQgcGFyZW50Vmlld0VsID0gZWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUilcbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpID09PSB0aGlzLmlkIHx8XG4gICAgICAocGFyZW50Vmlld0VsICYmIHBhcmVudFZpZXdFbC5pZCA9PT0gdGhpcy5pZCkgfHxcbiAgICAgICghcGFyZW50Vmlld0VsICYmIHRoaXMuaXNEZWFkKVxuICB9XG5cbiAgc3VibWl0Rm9ybShmb3JtLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMgPSB7fSl7XG4gICAgRE9NLnB1dFByaXZhdGUoZm9ybSwgUEhYX0hBU19TVUJNSVRURUQsIHRydWUpXG4gICAgbGV0IHBoeEZlZWRiYWNrID0gdGhpcy5saXZlU29ja2V0LmJpbmRpbmcoUEhYX0ZFRURCQUNLX0ZPUilcbiAgICBsZXQgaW5wdXRzID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSkpXG4gICAgdGhpcy5saXZlU29ja2V0LmJsdXJBY3RpdmVFbGVtZW50KHRoaXMpXG4gICAgdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBzdWJtaXR0ZXIsIG9wdHMsICgpID0+IHtcbiAgICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IERPTS5zaG93RXJyb3IoaW5wdXQsIHBoeEZlZWRiYWNrKSlcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXN0b3JlUHJldmlvdXNseUFjdGl2ZUZvY3VzKClcbiAgICB9KVxuICB9XG5cbiAgYmluZGluZyhraW5kKXsgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKGtpbmQpIH1cbn1cbiIsICIvKiogSW5pdGlhbGl6ZXMgdGhlIExpdmVTb2NrZXRcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVuZFBvaW50IC0gVGhlIHN0cmluZyBXZWJTb2NrZXQgZW5kcG9pbnQsIGllLCBgXCJ3c3M6Ly9leGFtcGxlLmNvbS9saXZlXCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIi9saXZlXCJgIChpbmhlcml0ZWQgaG9zdCAmIHByb3RvY29sKVxuICogQHBhcmFtIHtQaG9lbml4LlNvY2tldH0gc29ja2V0IC0gdGhlIHJlcXVpcmVkIFBob2VuaXggU29ja2V0IGNsYXNzIGltcG9ydGVkIGZyb20gXCJwaG9lbml4XCIuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuICogICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbiAqICAgICBsZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7Li4ufSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHNdIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbi4gT3V0c2lkZSBvZiBrZXlzIGxpc3RlZCBiZWxvdywgYWxsXG4gKiBjb25maWd1cmF0aW9uIGlzIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgUGhvZW5peCBTb2NrZXQgY29uc3RydWN0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuZGVmYXVsdHNdIC0gVGhlIG9wdGlvbmFsIGRlZmF1bHRzIHRvIHVzZSBmb3IgdmFyaW91cyBiaW5kaW5ncyxcbiAqIHN1Y2ggYXMgYHBoeC1kZWJvdW5jZWAuIFN1cHBvcnRzIHRoZSBmb2xsb3dpbmcga2V5czpcbiAqXG4gKiAgIC0gZGVib3VuY2UgLSB0aGUgbWlsbGlzZWNvbmQgcGh4LWRlYm91bmNlIHRpbWUuIERlZmF1bHRzIDMwMFxuICogICAtIHRocm90dGxlIC0gdGhlIG1pbGxpc2Vjb25kIHBoeC10aHJvdHRsZSB0aW1lLiBEZWZhdWx0cyAzMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5wYXJhbXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIGZvciBwYXNzaW5nIGNvbm5lY3QgcGFyYW1zLlxuICogVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIExpdmVWaWV3LiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgKGVsKSA9PiB7dmlldzogZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1teS12aWV3LW5hbWVcIiwgdG9rZW46IHdpbmRvdy5teVRva2VufVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iaW5kaW5nUHJlZml4XSAtIFRoZSBvcHRpb25hbCBwcmVmaXggdG8gdXNlIGZvciBhbGwgcGh4IERPTSBhbm5vdGF0aW9ucy5cbiAqIERlZmF1bHRzIHRvIFwicGh4LVwiLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmhvb2tzXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgZm9yIHJlZmVyZW5jaW5nIExpdmVWaWV3IGhvb2sgY2FsbGJhY2tzLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnVwbG9hZGVyc10gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IGZvciByZWZlcmVuY2luZyBMaXZlVmlldyB1cGxvYWRlciBjYWxsYmFja3MuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLmxvYWRlclRpbWVvdXRdIC0gVGhlIG9wdGlvbmFsIGRlbGF5IGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBhcHBseVxuICogbG9hZGluZyBzdGF0ZXMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLm1heFJlbG9hZHNdIC0gVGhlIG1heGltdW0gcmVsb2FkcyBiZWZvcmUgZW50ZXJpbmcgZmFpbHNhZmUgbW9kZS5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMucmVsb2FkSml0dGVyTWluXSAtIFRoZSBtaW5pbXVtIHRpbWUgYmV0d2VlbiBub3JtYWwgcmVsb2FkIGF0dGVtcHRzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5yZWxvYWRKaXR0ZXJNYXhdIC0gVGhlIG1heGltdW0gdGltZSBiZXR3ZWVuIG5vcm1hbCByZWxvYWQgYXR0ZW1wdHMuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLmZhaWxzYWZlSml0dGVyXSAtIFRoZSB0aW1lIGJldHdlZW4gcmVsb2FkIGF0dGVtcHRzIGluIGZhaWxzYWZlIG1vZGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy52aWV3TG9nZ2VyXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0byBsb2cgZGVidWcgaW5mb3JtYXRpb24uIEZvciBleGFtcGxlOlxuICpcbiAqICAgICAodmlldywga2luZCwgbXNnLCBvYmopID0+IGNvbnNvbGUubG9nKGAke3ZpZXcuaWR9ICR7a2luZH06ICR7bXNnfSAtIGAsIG9iailcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubWV0YWRhdGFdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBtYXBwaW5nIGV2ZW50IG5hbWVzIHRvIGZ1bmN0aW9ucyBmb3JcbiAqIHBvcHVsYXRpbmcgZXZlbnQgbWV0YWRhdGEuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBtZXRhZGF0YToge1xuICogICAgICAgY2xpY2s6IChlLCBlbCkgPT4ge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGN0cmxLZXk6IGUuY3RybEtleSxcbiAqICAgICAgICAgICBtZXRhS2V5OiBlLm1ldGFLZXksXG4gKiAgICAgICAgICAgZGV0YWlsOiBlLmRldGFpbCB8fCAxLFxuICogICAgICAgICB9XG4gKiAgICAgICB9LFxuICogICAgICAga2V5ZG93bjogKGUsIGVsKSA9PiB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAga2V5OiBlLmtleSxcbiAqICAgICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gKiAgICAgICAgICAgbWV0YUtleTogZS5tZXRhS2V5LFxuICogICAgICAgICAgIHNoaWZ0S2V5OiBlLnNoaWZ0S2V5XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMuc2Vzc2lvblN0b3JhZ2VdIC0gQW4gb3B0aW9uYWwgU3RvcmFnZSBjb21wYXRpYmxlIG9iamVjdFxuICogVXNlZnVsIHdoZW4gTGl2ZVZpZXcgd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYHNlc3Npb25TdG9yYWdlYC4gIEZvciBleGFtcGxlLCBUaGlzIGNvdWxkXG4gKiBoYXBwZW4gaWYgYSBzaXRlIGxvYWRzIGEgY3Jvc3MtZG9tYWluIExpdmVWaWV3IGluIGFuIGlmcmFtZS4gIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICAgIGNsYXNzIEluTWVtb3J5U3RvcmFnZSB7XG4gKiAgICAgICBjb25zdHJ1Y3RvcigpIHsgdGhpcy5zdG9yYWdlID0ge30gfVxuICogICAgICAgZ2V0SXRlbShrZXlOYW1lKSB7IHJldHVybiB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfHwgbnVsbCB9XG4gKiAgICAgICByZW1vdmVJdGVtKGtleU5hbWUpIHsgZGVsZXRlIHRoaXMuc3RvcmFnZVtrZXlOYW1lXSB9XG4gKiAgICAgICBzZXRJdGVtKGtleU5hbWUsIGtleVZhbHVlKSB7IHRoaXMuc3RvcmFnZVtrZXlOYW1lXSA9IGtleVZhbHVlIH1cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmxvY2FsU3RvcmFnZV0gLSBBbiBvcHRpb25hbCBTdG9yYWdlIGNvbXBhdGlibGUgb2JqZWN0XG4gKiBVc2VmdWwgZm9yIHdoZW4gTGl2ZVZpZXcgd29uJ3QgaGF2ZSBhY2Nlc3MgdG8gYGxvY2FsU3RvcmFnZWAuXG4gKiBTZWUgYG9wdHMuc2Vzc2lvblN0b3JhZ2VgIGZvciBleGFtcGxlcy5cbiovXG5cbmltcG9ydCB7XG4gIEJJTkRJTkdfUFJFRklYLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBERUZBVUxUUyxcbiAgRkFJTFNBRkVfSklUVEVSLFxuICBMT0FERVJfVElNRU9VVCxcbiAgTUFYX1JFTE9BRFMsXG4gIFBIWF9ERUJPVU5DRSxcbiAgUEhYX0RST1BfVEFSR0VULFxuICBQSFhfSEFTX0ZPQ1VTRUQsXG4gIFBIWF9LRVksXG4gIFBIWF9MSU5LX1NUQVRFLFxuICBQSFhfTElWRV9MSU5LLFxuICBQSFhfTFZfREVCVUcsXG4gIFBIWF9MVl9MQVRFTkNZX1NJTSxcbiAgUEhYX0xWX1BST0ZJTEUsXG4gIFBIWF9NQUlOLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9USFJPVFRMRSxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBSRUxPQURfSklUVEVSX01JTixcbiAgUkVMT0FEX0pJVFRFUl9NQVgsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgY2xvc3VyZSxcbiAgZGVidWcsXG4gIGlzT2JqZWN0LFxuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBCcm93c2VyIGZyb20gXCIuL2Jyb3dzZXJcIlxuaW1wb3J0IERPTSBmcm9tIFwiLi9kb21cIlxuaW1wb3J0IEhvb2tzIGZyb20gXCIuL2hvb2tzXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgVmlldyBmcm9tIFwiLi92aWV3XCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVTb2NrZXQge1xuICBjb25zdHJ1Y3Rvcih1cmwsIHBoeFNvY2tldCwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnVubG9hZGVkID0gZmFsc2VcbiAgICBpZighcGh4U29ja2V0IHx8IHBoeFNvY2tldC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIk9iamVjdFwiKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXG4gICAgICBhIHBob2VuaXggU29ja2V0IG11c3QgYmUgcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB0aGUgTGl2ZVNvY2tldCBjb25zdHJ1Y3Rvci4gRm9yIGV4YW1wbGU6XG5cbiAgICAgICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuICAgICAgICAgIGltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbiAgICAgICAgICBsZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7Li4ufSlcbiAgICAgIGApXG4gICAgfVxuICAgIHRoaXMuc29ja2V0ID0gbmV3IHBoeFNvY2tldCh1cmwsIG9wdHMpXG4gICAgdGhpcy5iaW5kaW5nUHJlZml4ID0gb3B0cy5iaW5kaW5nUHJlZml4IHx8IEJJTkRJTkdfUFJFRklYXG4gICAgdGhpcy5vcHRzID0gb3B0c1xuICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShvcHRzLnBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnZpZXdMb2dnZXIgPSBvcHRzLnZpZXdMb2dnZXJcbiAgICB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzID0gb3B0cy5tZXRhZGF0YSB8fCB7fVxuICAgIHRoaXMuZGVmYXVsdHMgPSBPYmplY3QuYXNzaWduKGNsb25lKERFRkFVTFRTKSwgb3B0cy5kZWZhdWx0cyB8fCB7fSlcbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSBudWxsXG4gICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIHRoaXMuc2lsZW5jZWQgPSBmYWxzZVxuICAgIHRoaXMubWFpbiA9IG51bGxcbiAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgdGhpcy5saW5rUmVmID0gMVxuICAgIHRoaXMucm9vdHMgPSB7fVxuICAgIHRoaXMuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKHdpbmRvdy5sb2NhdGlvbilcbiAgICB0aGlzLmhvb2tzID0gb3B0cy5ob29rcyB8fCB7fVxuICAgIHRoaXMudXBsb2FkZXJzID0gb3B0cy51cGxvYWRlcnMgfHwge31cbiAgICB0aGlzLmxvYWRlclRpbWVvdXQgPSBvcHRzLmxvYWRlclRpbWVvdXQgfHwgTE9BREVSX1RJTUVPVVRcbiAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lciA9IG51bGxcbiAgICB0aGlzLm1heFJlbG9hZHMgPSBvcHRzLm1heFJlbG9hZHMgfHwgTUFYX1JFTE9BRFNcbiAgICB0aGlzLnJlbG9hZEppdHRlck1pbiA9IG9wdHMucmVsb2FkSml0dGVyTWluIHx8IFJFTE9BRF9KSVRURVJfTUlOXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNYXggPSBvcHRzLnJlbG9hZEppdHRlck1heCB8fCBSRUxPQURfSklUVEVSX01BWFxuICAgIHRoaXMuZmFpbHNhZmVKaXR0ZXIgPSBvcHRzLmZhaWxzYWZlSml0dGVyIHx8IEZBSUxTQUZFX0pJVFRFUlxuICAgIHRoaXMubG9jYWxTdG9yYWdlID0gb3B0cy5sb2NhbFN0b3JhZ2UgfHwgd2luZG93LmxvY2FsU3RvcmFnZVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2UgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZVxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IGZhbHNlXG4gICAgdGhpcy5kb21DYWxsYmFja3MgPSBPYmplY3QuYXNzaWduKHtvbk5vZGVBZGRlZDogY2xvc3VyZSgpLCBvbkJlZm9yZUVsVXBkYXRlZDogY2xvc3VyZSgpfSwgb3B0cy5kb20gfHwge30pXG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBUcmFuc2l0aW9uU2V0KClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgfSlcbiAgICB0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgaWYodGhpcy5pc1VubG9hZGVkKCkpe1xuICAgICAgICAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZSBhbmQgYnJvd3NlciBkb2VzIG5vdCBlbWl0IFwicGFnZXNob3dcIlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gcHVibGljXG5cbiAgaXNQcm9maWxlRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9QUk9GSUxFKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGlzRGVidWdFbmFibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0RFQlVHKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGlzRGVidWdEaXNhYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwiZmFsc2VcIiB9XG5cbiAgZW5hYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJ0cnVlXCIpIH1cblxuICBlbmFibGVQcm9maWxpbmcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9QUk9GSUxFLCBcInRydWVcIikgfVxuXG4gIGRpc2FibGVEZWJ1ZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0RFQlVHLCBcImZhbHNlXCIpIH1cblxuICBkaXNhYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfUFJPRklMRSkgfVxuXG4gIGVuYWJsZUxhdGVuY3lTaW0odXBwZXJCb3VuZE1zKXtcbiAgICB0aGlzLmVuYWJsZURlYnVnKClcbiAgICBjb25zb2xlLmxvZyhcImxhdGVuY3kgc2ltdWxhdG9yIGVuYWJsZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGlzIGJyb3dzZXIgc2Vzc2lvbi4gQ2FsbCBkaXNhYmxlTGF0ZW5jeVNpbSgpIHRvIGRpc2FibGVcIilcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNLCB1cHBlckJvdW5kTXMpXG4gIH1cblxuICBkaXNhYmxlTGF0ZW5jeVNpbSgpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNKSB9XG5cbiAgZ2V0TGF0ZW5jeVNpbSgpe1xuICAgIGxldCBzdHIgPSB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNKVxuICAgIHJldHVybiBzdHIgPyBwYXJzZUludChzdHIpIDogbnVsbFxuICB9XG5cbiAgZ2V0U29ja2V0KCl7IHJldHVybiB0aGlzLnNvY2tldCB9XG5cbiAgY29ubmVjdCgpe1xuICAgIC8vIGVuYWJsZSBkZWJ1ZyBieSBkZWZhdWx0IGlmIG9uIGxvY2FsaG9zdCBhbmQgbm90IGV4cGxpY2l0bHkgZGlzYWJsZWRcbiAgICBpZih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09IFwibG9jYWxob3N0XCIgJiYgIXRoaXMuaXNEZWJ1Z0Rpc2FibGVkKCkpeyB0aGlzLmVuYWJsZURlYnVnKCkgfVxuICAgIGxldCBkb0Nvbm5lY3QgPSAoKSA9PiB7XG4gICAgICBpZih0aGlzLmpvaW5Sb290Vmlld3MoKSl7XG4gICAgICAgIHRoaXMuYmluZFRvcExldmVsRXZlbnRzKClcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2UgaWYodGhpcy5tYWluKXtcbiAgICAgICAgdGhpcy5zb2NrZXQuY29ubmVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZDogdHJ1ZX0pXG4gICAgICB9XG4gICAgICB0aGlzLmpvaW5EZWFkVmlldygpXG4gICAgfVxuICAgIGlmKFtcImNvbXBsZXRlXCIsIFwibG9hZGVkXCIsIFwiaW50ZXJhY3RpdmVcIl0uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKXtcbiAgICAgIGRvQ29ubmVjdCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IGRvQ29ubmVjdCgpKVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoY2FsbGJhY2spe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KGNhbGxiYWNrKVxuICB9XG5cbiAgcmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLnNvY2tldC5yZXBsYWNlVHJhbnNwb3J0KHRyYW5zcG9ydClcbiAgICB0aGlzLmNvbm5lY3QoKVxuICB9XG5cbiAgZXhlY0pTKGVsLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSA9IG51bGwpe1xuICAgIHRoaXMub3duZXIoZWwsIHZpZXcgPT4gSlMuZXhlYyhldmVudFR5cGUsIGVuY29kZWRKUywgdmlldywgZWwpKVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIHVubG9hZCgpe1xuICAgIGlmKHRoaXMudW5sb2FkZWQpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMubWFpbiAmJiB0aGlzLmlzQ29ubmVjdGVkKCkpeyB0aGlzLmxvZyh0aGlzLm1haW4sIFwic29ja2V0XCIsICgpID0+IFtcImRpc2Nvbm5lY3QgZm9yIHBhZ2UgbmF2XCJdKSB9XG4gICAgdGhpcy51bmxvYWRlZCA9IHRydWVcbiAgICB0aGlzLmRlc3Ryb3lBbGxWaWV3cygpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgfVxuXG4gIHRyaWdnZXJET00oa2luZCwgYXJncyl7IHRoaXMuZG9tQ2FsbGJhY2tzW2tpbmRdKC4uLmFyZ3MpIH1cblxuICB0aW1lKG5hbWUsIGZ1bmMpe1xuICAgIGlmKCF0aGlzLmlzUHJvZmlsZUVuYWJsZWQoKSB8fCAhY29uc29sZS50aW1lKXsgcmV0dXJuIGZ1bmMoKSB9XG4gICAgY29uc29sZS50aW1lKG5hbWUpXG4gICAgbGV0IHJlc3VsdCA9IGZ1bmMoKVxuICAgIGNvbnNvbGUudGltZUVuZChuYW1lKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGxvZyh2aWV3LCBraW5kLCBtc2dDYWxsYmFjayl7XG4gICAgaWYodGhpcy52aWV3TG9nZ2VyKXtcbiAgICAgIGxldCBbbXNnLCBvYmpdID0gbXNnQ2FsbGJhY2soKVxuICAgICAgdGhpcy52aWV3TG9nZ2VyKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH0gZWxzZSBpZih0aGlzLmlzRGVidWdFbmFibGVkKCkpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICBkZWJ1Zyh2aWV3LCBraW5kLCBtc2csIG9iailcbiAgICB9XG4gIH1cblxuICByZXF1ZXN0RE9NVXBkYXRlKGNhbGxiYWNrKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFmdGVyKGNhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH1cblxuICBvbkNoYW5uZWwoY2hhbm5lbCwgZXZlbnQsIGNiKXtcbiAgICBjaGFubmVsLm9uKGV2ZW50LCBkYXRhID0+IHtcbiAgICAgIGxldCBsYXRlbmN5ID0gdGhpcy5nZXRMYXRlbmN5U2ltKClcbiAgICAgIGlmKCFsYXRlbmN5KXtcbiAgICAgICAgY2IoZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gY2IoZGF0YSksIGxhdGVuY3kpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHdyYXBQdXNoKHZpZXcsIG9wdHMsIHB1c2gpe1xuICAgIGxldCBsYXRlbmN5ID0gdGhpcy5nZXRMYXRlbmN5U2ltKClcbiAgICBsZXQgb2xkSm9pbkNvdW50ID0gdmlldy5qb2luQ291bnRcbiAgICBpZighbGF0ZW5jeSl7XG4gICAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgb3B0cy50aW1lb3V0KXtcbiAgICAgICAgcmV0dXJuIHB1c2goKS5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICAgICAgaWYodmlldy5qb2luQ291bnQgPT09IG9sZEpvaW5Db3VudCAmJiAhdmlldy5pc0Rlc3Ryb3llZCgpKXtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkV2l0aEppdHRlcih2aWV3LCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMubG9nKHZpZXcsIFwidGltZW91dFwiLCAoKSA9PiBbXCJyZWNlaXZlZCB0aW1lb3V0IHdoaWxlIGNvbW11bmljYXRpbmcgd2l0aCBzZXJ2ZXIuIEZhbGxpbmcgYmFjayB0byBoYXJkIHJlZnJlc2ggZm9yIHJlY292ZXJ5XCJdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcHVzaCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGZha2VQdXNoID0ge1xuICAgICAgcmVjZWl2ZXM6IFtdLFxuICAgICAgcmVjZWl2ZShraW5kLCBjYil7IHRoaXMucmVjZWl2ZXMucHVzaChba2luZCwgY2JdKSB9XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYodmlldy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICAgIGZha2VQdXNoLnJlY2VpdmVzLnJlZHVjZSgoYWNjLCBba2luZCwgY2JdKSA9PiBhY2MucmVjZWl2ZShraW5kLCBjYiksIHB1c2goKSlcbiAgICB9LCBsYXRlbmN5KVxuICAgIHJldHVybiBmYWtlUHVzaFxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lcilcbiAgICB0aGlzLmRpc2Nvbm5lY3QoKVxuICAgIGxldCBtaW5NcyA9IHRoaXMucmVsb2FkSml0dGVyTWluXG4gICAgbGV0IG1heE1zID0gdGhpcy5yZWxvYWRKaXR0ZXJNYXhcbiAgICBsZXQgYWZ0ZXJNcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXhNcyAtIG1pbk1zICsgMSkpICsgbWluTXNcbiAgICBsZXQgdHJpZXMgPSBCcm93c2VyLnVwZGF0ZUxvY2FsKHRoaXMubG9jYWxTdG9yYWdlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsIENPTlNFQ1VUSVZFX1JFTE9BRFMsIDAsIGNvdW50ID0+IGNvdW50ICsgMSlcbiAgICBpZih0cmllcyA+IHRoaXMubWF4UmVsb2Fkcyl7XG4gICAgICBhZnRlck1zID0gdGhpcy5mYWlsc2FmZUppdHRlclxuICAgIH1cbiAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gaWYgdmlldyBoYXMgcmVjb3ZlcmVkLCBzdWNoIGFzIHRyYW5zcG9ydCByZXBsYWNlZCwgdGhlbiBjYW5jZWxcbiAgICAgIGlmKHZpZXcuaXNEZXN0cm95ZWQoKSB8fCB2aWV3LmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgICAgdmlldy5kZXN0cm95KClcbiAgICAgIGxvZyA/IGxvZygpIDogdGhpcy5sb2codmlldywgXCJqb2luXCIsICgpID0+IFtgZW5jb3VudGVyZWQgJHt0cmllc30gY29uc2VjdXRpdmUgcmVsb2Fkc2BdKVxuICAgICAgaWYodHJpZXMgPiB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgICB0aGlzLmxvZyh2aWV3LCBcImpvaW5cIiwgKCkgPT4gW2BleGNlZWRlZCAke3RoaXMubWF4UmVsb2Fkc30gY29uc2VjdXRpdmUgcmVsb2Fkcy4gRW50ZXJpbmcgZmFpbHNhZmUgbW9kZWBdKVxuICAgICAgfVxuICAgICAgaWYodGhpcy5oYXNQZW5kaW5nTGluaygpKXtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgYWZ0ZXJNcylcbiAgfVxuXG4gIGdldEhvb2tDYWxsYmFja3MobmFtZSl7XG4gICAgcmV0dXJuIG5hbWUgJiYgbmFtZS5zdGFydHNXaXRoKFwiUGhvZW5peC5cIikgPyBIb29rc1tuYW1lLnNwbGl0KFwiLlwiKVsxXV0gOiB0aGlzLmhvb2tzW25hbWVdXG4gIH1cblxuICBpc1VubG9hZGVkKCl7IHJldHVybiB0aGlzLnVubG9hZGVkIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSB9XG5cbiAgZ2V0QmluZGluZ1ByZWZpeCgpeyByZXR1cm4gdGhpcy5iaW5kaW5nUHJlZml4IH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gYCR7dGhpcy5nZXRCaW5kaW5nUHJlZml4KCl9JHtraW5kfWAgfVxuXG4gIGNoYW5uZWwodG9waWMsIHBhcmFtcyl7IHJldHVybiB0aGlzLnNvY2tldC5jaGFubmVsKHRvcGljLCBwYXJhbXMpIH1cblxuICBqb2luRGVhZFZpZXcoKXtcbiAgICBsZXQgYm9keSA9IGRvY3VtZW50LmJvZHlcbiAgICBpZihib2R5ICYmICF0aGlzLmlzUGh4Vmlldyhib2R5KSAmJiAhdGhpcy5pc1BoeFZpZXcoZG9jdW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpKXtcbiAgICAgIGxldCB2aWV3ID0gdGhpcy5uZXdSb290Vmlldyhib2R5KVxuICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgdmlldy5qb2luRGVhZCgpXG4gICAgICBpZighdGhpcy5tYWluKXsgdGhpcy5tYWluID0gdmlldyB9XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHZpZXcuZXhlY05ld01vdW50ZWQoKSlcbiAgICB9XG4gIH1cblxuICBqb2luUm9vdFZpZXdzKCl7XG4gICAgbGV0IHJvb3RzRm91bmQgPSBmYWxzZVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGAke1BIWF9WSUVXX1NFTEVDVE9SfTpub3QoWyR7UEhYX1BBUkVOVF9JRH1dKWAsIHJvb3RFbCA9PiB7XG4gICAgICBpZighdGhpcy5nZXRSb290QnlJZChyb290RWwuaWQpKXtcbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KHJvb3RFbClcbiAgICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgICB2aWV3LmpvaW4oKVxuICAgICAgICBpZihyb290RWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSl7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgfVxuICAgICAgcm9vdHNGb3VuZCA9IHRydWVcbiAgICB9KVxuICAgIHJldHVybiByb290c0ZvdW5kXG4gIH1cblxuICByZWRpcmVjdCh0bywgZmxhc2gpe1xuICAgIHRoaXMudW5sb2FkKClcbiAgICBCcm93c2VyLnJlZGlyZWN0KHRvLCBmbGFzaClcbiAgfVxuXG4gIHJlcGxhY2VNYWluKGhyZWYsIGZsYXNoLCBjYWxsYmFjayA9IG51bGwsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBsZXQgbGl2ZVJlZmVyZXIgPSB0aGlzLmN1cnJlbnRMb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IHRoaXMub3V0Z29pbmdNYWluRWwgfHwgdGhpcy5tYWluLmVsXG4gICAgbGV0IG5ld01haW5FbCA9IERPTS5jbG9uZU5vZGUodGhpcy5vdXRnb2luZ01haW5FbCwgXCJcIilcbiAgICB0aGlzLm1haW4uc2hvd0xvYWRlcih0aGlzLmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5tYWluLmRlc3Ryb3koKVxuXG4gICAgdGhpcy5tYWluID0gdGhpcy5uZXdSb290VmlldyhuZXdNYWluRWwsIGZsYXNoLCBsaXZlUmVmZXJlcilcbiAgICB0aGlzLm1haW4uc2V0UmVkaXJlY3QoaHJlZilcbiAgICB0aGlzLnRyYW5zaXRpb25SZW1vdmVzKClcbiAgICB0aGlzLm1haW4uam9pbigoam9pbkNvdW50LCBvbkRvbmUpID0+IHtcbiAgICAgIGlmKGpvaW5Db3VudCA9PT0gMSAmJiB0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgICBET00uZmluZFBoeFN0aWNreShkb2N1bWVudCkuZm9yRWFjaChlbCA9PiBuZXdNYWluRWwuYXBwZW5kQ2hpbGQoZWwpKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwucmVwbGFjZVdpdGgobmV3TWFpbkVsKVxuICAgICAgICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSBudWxsXG4gICAgICAgICAgY2FsbGJhY2sgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKVxuICAgICAgICAgIG9uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyYW5zaXRpb25SZW1vdmVzKGVsZW1lbnRzKXtcbiAgICBsZXQgcmVtb3ZlQXR0ciA9IHRoaXMuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIGVsZW1lbnRzID0gZWxlbWVudHMgfHwgRE9NLmFsbChkb2N1bWVudCwgYFske3JlbW92ZUF0dHJ9XWApXG4gICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBpZihkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKSl7IC8vIHNraXAgY2hpbGRyZW4gYWxyZWFkeSByZW1vdmVkXG4gICAgICAgIHRoaXMuZXhlY0pTKGVsLCBlbC5nZXRBdHRyaWJ1dGUocmVtb3ZlQXR0ciksIFwicmVtb3ZlXCIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlzUGh4VmlldyhlbCl7IHJldHVybiBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OKSAhPT0gbnVsbCB9XG5cbiAgbmV3Um9vdFZpZXcoZWwsIGZsYXNoLCBsaXZlUmVmZXJlcil7XG4gICAgbGV0IHZpZXcgPSBuZXcgVmlldyhlbCwgdGhpcywgbnVsbCwgZmxhc2gsIGxpdmVSZWZlcmVyKVxuICAgIHRoaXMucm9vdHNbdmlldy5pZF0gPSB2aWV3XG4gICAgcmV0dXJuIHZpZXdcbiAgfVxuXG4gIG93bmVyKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgdmlldyA9IG1heWJlKGNoaWxkRWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIGVsID0+IHRoaXMuZ2V0Vmlld0J5RWwoZWwpKSB8fCB0aGlzLm1haW5cbiAgICBpZih2aWV3KXsgY2FsbGJhY2sodmlldykgfVxuICB9XG5cbiAgd2l0aGluT3duZXJzKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICB0aGlzLm93bmVyKGNoaWxkRWwsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgY2hpbGRFbCkpXG4gIH1cblxuICBnZXRWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3RJZCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRClcbiAgICByZXR1cm4gbWF5YmUodGhpcy5nZXRSb290QnlJZChyb290SWQpLCByb290ID0+IHJvb3QuZ2V0RGVzY2VuZGVudEJ5RWwoZWwpKVxuICB9XG5cbiAgZ2V0Um9vdEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290c1tpZF0gfVxuXG4gIGRlc3Ryb3lBbGxWaWV3cygpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy5yb290cyl7XG4gICAgICB0aGlzLnJvb3RzW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW2lkXVxuICAgIH1cbiAgICB0aGlzLm1haW4gPSBudWxsXG4gIH1cblxuICBkZXN0cm95Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290ID0gdGhpcy5nZXRSb290QnlJZChlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpKVxuICAgIGlmKHJvb3QgJiYgcm9vdC5pZCA9PT0gZWwuaWQpe1xuICAgICAgcm9vdC5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW3Jvb3QuaWRdXG4gICAgfSBlbHNlIGlmKHJvb3Qpe1xuICAgICAgcm9vdC5kZXN0cm95RGVzY2VuZGVudChlbC5pZClcbiAgICB9XG4gIH1cblxuICBzZXRBY3RpdmVFbGVtZW50KHRhcmdldCl7XG4gICAgaWYodGhpcy5hY3RpdmVFbGVtZW50ID09PSB0YXJnZXQpeyByZXR1cm4gfVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IHRhcmdldFxuICAgIGxldCBjYW5jZWwgPSAoKSA9PiB7XG4gICAgICBpZih0YXJnZXQgPT09IHRoaXMuYWN0aXZlRWxlbWVudCl7IHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGwgfVxuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMpXG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIHRoaXMpXG4gICAgfVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBjYW5jZWwpXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBjYW5jZWwpXG4gIH1cblxuICBnZXRBY3RpdmVFbGVtZW50KCl7XG4gICAgaWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSl7XG4gICAgICByZXR1cm4gdGhpcy5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gYmUgbnVsbCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMVxuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keVxuICAgIH1cbiAgfVxuXG4gIGRyb3BBY3RpdmVFbGVtZW50KHZpZXcpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB2aWV3Lm93bnNFbGVtZW50KHRoaXMucHJldkFjdGl2ZSkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlID0gbnVsbFxuICAgIH1cbiAgfVxuXG4gIHJlc3RvcmVQcmV2aW91c2x5QWN0aXZlRm9jdXMoKXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZS5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgYmx1ckFjdGl2ZUVsZW1lbnQoKXtcbiAgICB0aGlzLnByZXZBY3RpdmUgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7IHRoaXMucHJldkFjdGl2ZS5ibHVyKCkgfVxuICB9XG5cbiAgYmluZFRvcExldmVsRXZlbnRzKHtkZWFkfSA9IHt9KXtcbiAgICBpZih0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMpeyByZXR1cm4gfVxuXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gdHJ1ZVxuICAgIC8vIGVudGVyIGZhaWxzYWZlIHJlbG9hZCBpZiBzZXJ2ZXIgaGFzIGdvbmUgYXdheSBpbnRlbnRpb25hbGx5LCBzdWNoIGFzIFwiZGlzY29ubmVjdFwiIGJyb2FkY2FzdFxuICAgIHRoaXMuc29ja2V0Lm9uQ2xvc2UoZXZlbnQgPT4ge1xuICAgICAgLy8gdW5sb2FkIHdoZW4gbmF2aWdhdGluZyBocmVmIG9yIGZvcm0gc3VibWl0IChzdWNoIGFzIGZvciBmaXJlZm94KVxuICAgICAgaWYoZXZlbnQgJiYgZXZlbnQuY29kZSA9PT0gMTAwMSl7IHJldHVybiB0aGlzLnVubG9hZCgpIH1cbiAgICAgIC8vIGZhaWxzYWZlIHJlbG9hZCBpZiBub3JtYWwgY2xvc3VyZSBhbmQgd2Ugc3RpbGwgaGF2ZSBhIG1haW4gTFZcbiAgICAgIGlmKGV2ZW50ICYmIGV2ZW50LmNvZGUgPT09IDEwMDAgJiYgdGhpcy5tYWluKXsgcmV0dXJuIHRoaXMucmVsb2FkV2l0aEppdHRlcih0aGlzLm1haW4pIH1cbiAgICB9KVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpeyB9KSAvLyBlbnN1cmUgYWxsIGNsaWNrIGV2ZW50cyBidWJibGUgZm9yIG1vYmlsZSBTYWZhcmlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIGUgPT4ge1xuICAgICAgaWYoZS5wZXJzaXN0ZWQpeyAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZVxuICAgICAgICB0aGlzLmdldFNvY2tldCgpLmRpc2Nvbm5lY3QoKVxuICAgICAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IHdpbmRvdy5sb2NhdGlvbi5ocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9KVxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9LCB0cnVlKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kTmF2KCkgfVxuICAgIHRoaXMuYmluZENsaWNrcygpXG4gICAgaWYoIWRlYWQpeyB0aGlzLmJpbmRGb3JtcygpIH1cbiAgICB0aGlzLmJpbmQoe2tleXVwOiBcImtleXVwXCIsIGtleWRvd246IFwia2V5ZG93blwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGxldCBtYXRjaEtleSA9IHRhcmdldEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0tFWSkpXG4gICAgICBsZXQgcHJlc3NlZEtleSA9IGUua2V5ICYmIGUua2V5LnRvTG93ZXJDYXNlKCkgLy8gY2hyb21lIGNsaWNrZWQgYXV0b2NvbXBsZXRlcyBzZW5kIGEga2V5ZG93biB3aXRob3V0IGtleVxuICAgICAgaWYobWF0Y2hLZXkgJiYgbWF0Y2hLZXkudG9Mb3dlckNhc2UoKSAhPT0gcHJlc3NlZEtleSl7IHJldHVybiB9XG5cbiAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiZm9jdXNvdXRcIiwgZm9jdXM6IFwiZm9jdXNpblwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFldmVudFRhcmdldCl7XG4gICAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgICAgSlMuZXhlYyh0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJibHVyXCIsIGZvY3VzOiBcImZvY3VzXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgLy8gYmx1ciBhbmQgZm9jdXMgYXJlIHRyaWdnZXJlZCBvbiBkb2N1bWVudCBhbmQgd2luZG93LiBEaXNjYXJkIG9uZSB0byBhdm9pZCBkdXBzXG4gICAgICBpZihwaHhUYXJnZXQgPT09IFwid2luZG93XCIpe1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKVxuICAgICAgICBKUy5leGVjKHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgICAgfVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGxldCBkcm9wVGFyZ2V0SWQgPSBtYXliZShjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgdGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpLCB0cnVlVGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWVUYXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKVxuICAgICAgfSlcbiAgICAgIGxldCBkcm9wVGFyZ2V0ID0gZHJvcFRhcmdldElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3BUYXJnZXRJZClcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuZmlsZXMgfHwgW10pXG4gICAgICBpZighZHJvcFRhcmdldCB8fCBkcm9wVGFyZ2V0LmRpc2FibGVkIHx8IGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAhKGRyb3BUYXJnZXQuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpeyByZXR1cm4gfVxuXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhkcm9wVGFyZ2V0LCBmaWxlcywgZS5kYXRhVHJhbnNmZXIpXG4gICAgICBkcm9wVGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWV9KSlcbiAgICB9KVxuICAgIHRoaXMub24oUEhYX1RSQUNLX1VQTE9BRFMsIGUgPT4ge1xuICAgICAgbGV0IHVwbG9hZFRhcmdldCA9IGUudGFyZ2V0XG4gICAgICBpZighRE9NLmlzVXBsb2FkSW5wdXQodXBsb2FkVGFyZ2V0KSl7IHJldHVybiB9XG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGUuZGV0YWlsLmZpbGVzIHx8IFtdKS5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgRmlsZSB8fCBmIGluc3RhbmNlb2YgQmxvYilcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKHVwbG9hZFRhcmdldCwgZmlsZXMpXG4gICAgICB1cGxvYWRUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gIH1cblxuICBldmVudE1ldGEoZXZlbnROYW1lLCBlLCB0YXJnZXRFbCl7XG4gICAgbGV0IGNhbGxiYWNrID0gdGhpcy5tZXRhZGF0YUNhbGxiYWNrc1tldmVudE5hbWVdXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZSwgdGFyZ2V0RWwpIDoge31cbiAgfVxuXG4gIHNldFBlbmRpbmdMaW5rKGhyZWYpe1xuICAgIHRoaXMubGlua1JlZisrXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IGhyZWZcbiAgICByZXR1cm4gdGhpcy5saW5rUmVmXG4gIH1cblxuICBjb21taXRQZW5kaW5nTGluayhsaW5rUmVmKXtcbiAgICBpZih0aGlzLmxpbmtSZWYgIT09IGxpbmtSZWYpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaHJlZiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGdldEhyZWYoKXsgcmV0dXJuIHRoaXMuaHJlZiB9XG5cbiAgaGFzUGVuZGluZ0xpbmsoKXsgcmV0dXJuICEhdGhpcy5wZW5kaW5nTGluayB9XG5cbiAgYmluZChldmVudHMsIGNhbGxiYWNrKXtcbiAgICBmb3IobGV0IGV2ZW50IGluIGV2ZW50cyl7XG4gICAgICBsZXQgYnJvd3NlckV2ZW50TmFtZSA9IGV2ZW50c1tldmVudF1cblxuICAgICAgdGhpcy5vbihicm93c2VyRXZlbnROYW1lLCBlID0+IHtcbiAgICAgICAgbGV0IGJpbmRpbmcgPSB0aGlzLmJpbmRpbmcoZXZlbnQpXG4gICAgICAgIGxldCB3aW5kb3dCaW5kaW5nID0gdGhpcy5iaW5kaW5nKGB3aW5kb3ctJHtldmVudH1gKVxuICAgICAgICBsZXQgdGFyZ2V0UGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgZS50YXJnZXQuZ2V0QXR0cmlidXRlKGJpbmRpbmcpXG4gICAgICAgIGlmKHRhcmdldFBoeEV2ZW50KXtcbiAgICAgICAgICB0aGlzLmRlYm91bmNlKGUudGFyZ2V0LCBlLCBicm93c2VyRXZlbnROYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGV2ZW50LCB2aWV3LCBlLnRhcmdldCwgdGFyZ2V0UGh4RXZlbnQsIG51bGwpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3dpbmRvd0JpbmRpbmd9XWAsIGVsID0+IHtcbiAgICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZSh3aW5kb3dCaW5kaW5nKVxuICAgICAgICAgICAgdGhpcy5kZWJvdW5jZShlbCwgZSwgYnJvd3NlckV2ZW50TmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlbCwgdmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGVsLCBwaHhFdmVudCwgXCJ3aW5kb3dcIilcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBiaW5kQ2xpY2tzKCl7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBlLnRhcmdldClcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIiwgZmFsc2UpXG4gICAgdGhpcy5iaW5kQ2xpY2soXCJtb3VzZWRvd25cIiwgXCJjYXB0dXJlLWNsaWNrXCIsIHRydWUpXG4gIH1cblxuICBiaW5kQ2xpY2soZXZlbnROYW1lLCBiaW5kaW5nTmFtZSwgY2FwdHVyZSl7XG4gICAgbGV0IGNsaWNrID0gdGhpcy5iaW5kaW5nKGJpbmRpbmdOYW1lKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gbnVsbFxuICAgICAgaWYoY2FwdHVyZSl7XG4gICAgICAgIHRhcmdldCA9IGUudGFyZ2V0Lm1hdGNoZXMoYFske2NsaWNrfV1gKSA/IGUudGFyZ2V0IDogZS50YXJnZXQucXVlcnlTZWxlY3RvcihgWyR7Y2xpY2t9XWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgY2xpY2tTdGFydGVkQXRUYXJnZXQgPSB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0IHx8IGUudGFyZ2V0XG4gICAgICAgIHRhcmdldCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGNsaWNrU3RhcnRlZEF0VGFyZ2V0LCBjbGljaylcbiAgICAgICAgdGhpcy5kaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdFRhcmdldClcbiAgICAgICAgdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCA9IG51bGxcbiAgICAgIH1cbiAgICAgIGxldCBwaHhFdmVudCA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKGNsaWNrKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgbGV0IGhyZWYgPSBlLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50ID8gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA6IG51bGxcbiAgICAgICAgaWYoIWNhcHR1cmUgJiYgaHJlZiAhPT0gbnVsbCAmJiAhRE9NLndhbnRzTmV3VGFiKGUpICYmIERPTS5pc05ld1BhZ2VIcmVmKGhyZWYsIHdpbmRvdy5sb2NhdGlvbikpe1xuICAgICAgICAgIHRoaXMudW5sb2FkKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIil7IGUucHJldmVudERlZmF1bHQoKSB9XG5cbiAgICAgIHRoaXMuZGVib3VuY2UodGFyZ2V0LCBlLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnModGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBKUy5leGVjKFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCB0YXJnZXQpfV0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIGNhcHR1cmUpXG4gIH1cblxuICBkaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1N0YXJ0ZWRBdCl7XG4gICAgbGV0IHBoeENsaWNrQXdheSA9IHRoaXMuYmluZGluZyhcImNsaWNrLWF3YXlcIilcbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7cGh4Q2xpY2tBd2F5fV1gLCBlbCA9PiB7XG4gICAgICBpZighKGVsLmlzU2FtZU5vZGUoY2xpY2tTdGFydGVkQXQpIHx8IGVsLmNvbnRhaW5zKGNsaWNrU3RhcnRlZEF0KSkpe1xuICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHBoeENsaWNrQXdheSlcbiAgICAgICAgICBpZihKUy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjbGlja1wiLCBwaHhFdmVudCwgdmlldywgZWwsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgZS50YXJnZXQpfV0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBiaW5kTmF2KCl7XG4gICAgaWYoIUJyb3dzZXIuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGlmKGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24peyBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIiB9XG4gICAgbGV0IHNjcm9sbFRpbWVyID0gbnVsbFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIF9lID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChzY3JvbGxUaW1lcilcbiAgICAgIHNjcm9sbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIEJyb3dzZXIudXBkYXRlQ3VycmVudFN0YXRlKHN0YXRlID0+IE9iamVjdC5hc3NpZ24oc3RhdGUsIHtzY3JvbGw6IHdpbmRvdy5zY3JvbGxZfSkpXG4gICAgICB9LCAxMDApXG4gICAgfSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGV2ZW50ID0+IHtcbiAgICAgIGlmKCF0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKSl7IHJldHVybiB9XG4gICAgICBsZXQge3R5cGUsIGlkLCByb290LCBzY3JvbGx9ID0gZXZlbnQuc3RhdGUgfHwge31cbiAgICAgIGxldCBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5tYWluLmlzQ29ubmVjdGVkKCkgJiYgKHR5cGUgPT09IFwicGF0Y2hcIiAmJiBpZCA9PT0gdGhpcy5tYWluLmlkKSl7XG4gICAgICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXliZVNjcm9sbChzY3JvbGwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VNYWluKGhyZWYsIG51bGwsICgpID0+IHtcbiAgICAgICAgICAgIGlmKHJvb3QpeyB0aGlzLnJlcGxhY2VSb290SGlzdG9yeSgpIH1cbiAgICAgICAgICAgIHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHtcbiAgICAgIGxldCB0YXJnZXQgPSBjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgUEhYX0xJVkVfTElOSylcbiAgICAgIGxldCB0eXBlID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJVkVfTElOSylcbiAgICAgIGlmKCF0eXBlIHx8ICF0aGlzLmlzQ29ubmVjdGVkKCkgfHwgIXRoaXMubWFpbiB8fCBET00ud2FudHNOZXdUYWIoZSkpeyByZXR1cm4gfVxuXG4gICAgICBsZXQgaHJlZiA9IHRhcmdldC5ocmVmXG4gICAgICBsZXQgbGlua1N0YXRlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShQSFhfTElOS19TVEFURSlcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSAvLyBkbyBub3QgYnViYmxlIGNsaWNrIHRvIHJlZ3VsYXIgcGh4LWNsaWNrIGJpbmRpbmdzXG4gICAgICBpZih0aGlzLnBlbmRpbmdMaW5rID09PSBocmVmKXsgcmV0dXJuIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgaWYodHlwZSA9PT0gXCJwYXRjaFwiKXtcbiAgICAgICAgICB0aGlzLnB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCB0YXJnZXQpXG4gICAgICAgIH0gZWxzZSBpZih0eXBlID09PSBcInJlZGlyZWN0XCIpe1xuICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZGlyZWN0KGhyZWYsIGxpbmtTdGF0ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGV4cGVjdGVkICR7UEhYX0xJVkVfTElOS30gdG8gYmUgXCJwYXRjaFwiIG9yIFwicmVkaXJlY3RcIiwgZ290OiAke3R5cGV9YClcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGh4Q2xpY2sgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNsaWNrXCIpKVxuICAgICAgICBpZihwaHhDbGljayl7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHRoaXMuZXhlY0pTKHRhcmdldCwgcGh4Q2xpY2ssIFwiY2xpY2tcIikpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG4gIH1cblxuICBtYXliZVNjcm9sbChzY3JvbGwpIHtcbiAgICBpZih0eXBlb2Yoc2Nyb2xsKSA9PT0gXCJudW1iZXJcIil7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsKVxuICAgICAgfSkgLy8gdGhlIGJvZHkgbmVlZHMgdG8gcmVuZGVyIGJlZm9yZSB3ZSBzY3JvbGwuXG4gICAgfVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9KXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIGBwaHg6JHtldmVudH1gLCB7ZGV0YWlsOiBwYXlsb2FkfSlcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnRzKGV2ZW50cyl7XG4gICAgZXZlbnRzLmZvckVhY2goKFtldmVudCwgcGF5bG9hZF0pID0+IHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCkpXG4gIH1cblxuICB3aXRoUGFnZUxvYWRpbmcoaW5mbywgY2FsbGJhY2spe1xuICAgIERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IGluZm99KVxuICAgIGxldCBkb25lID0gKCkgPT4gRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RvcFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhkb25lKSA6IGRvbmVcbiAgfVxuXG4gIHB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCB0YXJnZXRFbCl7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYpIH1cblxuICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogaHJlZiwga2luZDogXCJwYXRjaFwifSwgZG9uZSA9PiB7XG4gICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChocmVmLCB0YXJnZXRFbCwgbGlua1JlZiA9PiB7XG4gICAgICAgIHRoaXMuaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBoaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgaWYoIXRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpeyByZXR1cm4gfVxuXG4gICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJwYXRjaFwiLCBpZDogdGhpcy5tYWluLmlkfSwgaHJlZilcbiAgICB0aGlzLnJlZ2lzdGVyTmV3TG9jYXRpb24od2luZG93LmxvY2F0aW9uKVxuICB9XG5cbiAgaGlzdG9yeVJlZGlyZWN0KGhyZWYsIGxpbmtTdGF0ZSwgZmxhc2gpe1xuICAgIC8vIGNvbnZlcnQgdG8gZnVsbCBocmVmIGlmIG9ubHkgcGF0aCBwcmVmaXhcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIEJyb3dzZXIucmVkaXJlY3QoaHJlZiwgZmxhc2gpIH1cbiAgICBpZigvXlxcLyR8XlxcL1teXFwvXSsuKiQvLnRlc3QoaHJlZikpe1xuICAgICAgbGV0IHtwcm90b2NvbCwgaG9zdH0gPSB3aW5kb3cubG9jYXRpb25cbiAgICAgIGhyZWYgPSBgJHtwcm90b2NvbH0vLyR7aG9zdH0ke2hyZWZ9YFxuICAgIH1cbiAgICBsZXQgc2Nyb2xsID0gd2luZG93LnNjcm9sbFlcbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicmVkaXJlY3RcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5yZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgKCkgPT4ge1xuICAgICAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHt0eXBlOiBcInJlZGlyZWN0XCIsIGlkOiB0aGlzLm1haW4uaWQsIHNjcm9sbDogc2Nyb2xsfSwgaHJlZilcbiAgICAgICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgICAgICAgZG9uZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICByZXBsYWNlUm9vdEhpc3RvcnkoKXtcbiAgICBCcm93c2VyLnB1c2hTdGF0ZShcInJlcGxhY2VcIiwge3Jvb3Q6IHRydWUsIHR5cGU6IFwicGF0Y2hcIiwgaWQ6IHRoaXMubWFpbi5pZH0pXG4gIH1cblxuICByZWdpc3Rlck5ld0xvY2F0aW9uKG5ld0xvY2F0aW9uKXtcbiAgICBsZXQge3BhdGhuYW1lLCBzZWFyY2h9ID0gdGhpcy5jdXJyZW50TG9jYXRpb25cbiAgICBpZihwYXRobmFtZSArIHNlYXJjaCA9PT0gbmV3TG9jYXRpb24ucGF0aG5hbWUgKyBuZXdMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gY2xvbmUobmV3TG9jYXRpb24pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGJpbmRGb3Jtcygpe1xuICAgIGxldCBpdGVyYXRpb25zID0gMFxuICAgIGxldCBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSBmYWxzZVxuXG4gICAgLy8gZGlzYWJsZSBmb3JtcyBvbiBzdWJtaXQgdGhhdCB0cmFjayBwaHgtY2hhbmdlIGJ1dCBwZXJmb3JtIGV4dGVybmFsIHN1Ym1pdFxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4U3VibWl0ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGxldCBwaHhDaGFuZ2UgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgICAgaWYoIWV4dGVybmFsRm9ybVN1Ym1pdHRlZCAmJiBwaHhDaGFuZ2UgJiYgIXBoeFN1Ym1pdCl7XG4gICAgICAgIGV4dGVybmFsRm9ybVN1Ym1pdHRlZCA9IHRydWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICB2aWV3LmRpc2FibGVGb3JtKGUudGFyZ2V0KVxuICAgICAgICAgIC8vIHNhZmFyaSBuZWVkcyBuZXh0IHRpY2tcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgICAgICBlLnRhcmdldC5zdWJtaXQoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSwgdHJ1ZSlcblxuICAgIHRoaXMub24oXCJzdWJtaXRcIiwgZSA9PiB7XG4gICAgICBsZXQgcGh4RXZlbnQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwic3VibWl0XCIpKVxuICAgICAgaWYoIXBoeEV2ZW50KXtcbiAgICAgICAgaWYoRE9NLmlzVW5sb2FkYWJsZUZvcm1TdWJtaXQoZSkpeyB0aGlzLnVubG9hZCgpIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUudGFyZ2V0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICBKUy5leGVjKFwic3VibWl0XCIsIHBoeEV2ZW50LCB2aWV3LCBlLnRhcmdldCwgW1wicHVzaFwiLCB7c3VibWl0dGVyOiBlLnN1Ym1pdHRlcn1dKVxuICAgICAgfSlcbiAgICB9LCBmYWxzZSlcblxuICAgIGZvcihsZXQgdHlwZSBvZiBbXCJjaGFuZ2VcIiwgXCJpbnB1dFwiXSl7XG4gICAgICB0aGlzLm9uKHR5cGUsIGUgPT4ge1xuICAgICAgICBsZXQgcGh4Q2hhbmdlID0gdGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpXG4gICAgICAgIGxldCBpbnB1dCA9IGUudGFyZ2V0XG4gICAgICAgIGxldCBpbnB1dEV2ZW50ID0gaW5wdXQuZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IGZvcm1FdmVudCA9IGlucHV0LmZvcm0gJiYgaW5wdXQuZm9ybS5nZXRBdHRyaWJ1dGUocGh4Q2hhbmdlKVxuICAgICAgICBsZXQgcGh4RXZlbnQgPSBpbnB1dEV2ZW50IHx8IGZvcm1FdmVudFxuICAgICAgICBpZighcGh4RXZlbnQpeyByZXR1cm4gfVxuICAgICAgICBpZihpbnB1dC50eXBlID09PSBcIm51bWJlclwiICYmIGlucHV0LnZhbGlkaXR5ICYmIGlucHV0LnZhbGlkaXR5LmJhZElucHV0KXsgcmV0dXJuIH1cblxuICAgICAgICBsZXQgZGlzcGF0Y2hlciA9IGlucHV0RXZlbnQgPyBpbnB1dCA6IGlucHV0LmZvcm1cbiAgICAgICAgbGV0IGN1cnJlbnRJdGVyYXRpb25zID0gaXRlcmF0aW9uc1xuICAgICAgICBpdGVyYXRpb25zKytcbiAgICAgICAgbGV0IHthdDogYXQsIHR5cGU6IGxhc3RUeXBlfSA9IERPTS5wcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIpIHx8IHt9XG4gICAgICAgIC8vIGRldGVjdCBkdXAgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRpc3BhdGNoIGJvdGggXCJpbnB1dFwiIGFuZCBcImNoYW5nZVwiXG4gICAgICAgIGlmKGF0ID09PSBjdXJyZW50SXRlcmF0aW9ucyAtIDEgJiYgdHlwZSAhPT0gbGFzdFR5cGUpeyByZXR1cm4gfVxuXG4gICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIsIHthdDogY3VycmVudEl0ZXJhdGlvbnMsIHR5cGU6IHR5cGV9KVxuXG4gICAgICAgIHRoaXMuZGVib3VuY2UoaW5wdXQsIGUsIHR5cGUsICgpID0+IHtcbiAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhkaXNwYXRjaGVyLCB2aWV3ID0+IHtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQsIHRydWUpXG4gICAgICAgICAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGlucHV0KSl7XG4gICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlRWxlbWVudChpbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBlLnRhcmdldC5uYW1lLCBkaXNwYXRjaGVyOiBkaXNwYXRjaGVyfV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sIGZhbHNlKVxuICAgIH1cbiAgICB0aGlzLm9uKFwicmVzZXRcIiwgKGUpID0+IHtcbiAgICAgIGxldCBmb3JtID0gZS50YXJnZXRcbiAgICAgIERPTS5yZXNldEZvcm0oZm9ybSwgdGhpcy5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpKVxuICAgICAgbGV0IGlucHV0ID0gQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5maW5kKGVsID0+IGVsLnR5cGUgPT09IFwicmVzZXRcIilcbiAgICAgIC8vIHdhaXQgdW50aWwgbmV4dCB0aWNrIHRvIGdldCB1cGRhdGVkIGlucHV0IHZhbHVlXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogZmFsc2V9KSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgZXZlbnRUeXBlLCBjYWxsYmFjayl7XG4gICAgaWYoZXZlbnRUeXBlID09PSBcImJsdXJcIiB8fCBldmVudFR5cGUgPT09IFwiZm9jdXNvdXRcIil7IHJldHVybiBjYWxsYmFjaygpIH1cblxuICAgIGxldCBwaHhEZWJvdW5jZSA9IHRoaXMuYmluZGluZyhQSFhfREVCT1VOQ0UpXG4gICAgbGV0IHBoeFRocm90dGxlID0gdGhpcy5iaW5kaW5nKFBIWF9USFJPVFRMRSlcbiAgICBsZXQgZGVmYXVsdERlYm91bmNlID0gdGhpcy5kZWZhdWx0cy5kZWJvdW5jZS50b1N0cmluZygpXG4gICAgbGV0IGRlZmF1bHRUaHJvdHRsZSA9IHRoaXMuZGVmYXVsdHMudGhyb3R0bGUudG9TdHJpbmcoKVxuXG4gICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgbGV0IGFzeW5jRmlsdGVyID0gKCkgPT4gIXZpZXcuaXNEZXN0cm95ZWQoKSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKVxuICAgICAgRE9NLmRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsICgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgc2lsZW5jZUV2ZW50cyhjYWxsYmFjayl7XG4gICAgdGhpcy5zaWxlbmNlZCA9IHRydWVcbiAgICBjYWxsYmFjaygpXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gIH1cblxuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+IHtcbiAgICAgIGlmKCF0aGlzLnNpbGVuY2VkKXsgY2FsbGJhY2soZSkgfVxuICAgIH0pXG4gIH1cbn1cblxuY2xhc3MgVHJhbnNpdGlvblNldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBTZXQoKVxuICAgIHRoaXMucGVuZGluZ09wcyA9IFtdXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuZm9yRWFjaCh0aW1lciA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICB9KVxuICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgfVxuXG4gIGFmdGVyKGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLnNpemUoKSA9PT0gMCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaFBlbmRpbmdPcChjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBhZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSl7XG4gICAgb25TdGFydCgpXG4gICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25zLmRlbGV0ZSh0aW1lcilcbiAgICAgIG9uRG9uZSgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfSwgdGltZSlcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFkZCh0aW1lcilcbiAgfVxuXG4gIHB1c2hQZW5kaW5nT3Aob3ApeyB0aGlzLnBlbmRpbmdPcHMucHVzaChvcCkgfVxuXG4gIHNpemUoKXsgcmV0dXJuIHRoaXMudHJhbnNpdGlvbnMuc2l6ZSB9XG5cbiAgZmx1c2hQZW5kaW5nT3BzKCl7XG4gICAgaWYodGhpcy5zaXplKCkgPiAwKXsgcmV0dXJuIH1cbiAgICBsZXQgb3AgPSB0aGlzLnBlbmRpbmdPcHMuc2hpZnQoKVxuICAgIGlmKG9wKXtcbiAgICAgIG9wKClcbiAgICAgIHRoaXMuZmx1c2hQZW5kaW5nT3BzKClcbiAgICB9XG4gIH1cbn1cbiIsICIvLyBJZiB5b3Ugd2FudCB0byB1c2UgUGhvZW5peCBjaGFubmVscywgcnVuIGBtaXggaGVscCBwaHguZ2VuLmNoYW5uZWxgXG4vLyB0byBnZXQgc3RhcnRlZCBhbmQgdGhlbiB1bmNvbW1lbnQgdGhlIGxpbmUgYmVsb3cuXG4vLyBpbXBvcnQgXCIuL3VzZXJfc29ja2V0LmpzXCJcblxuLy8gWW91IGNhbiBpbmNsdWRlIGRlcGVuZGVuY2llcyBpbiB0d28gd2F5cy5cbi8vXG4vLyBUaGUgc2ltcGxlc3Qgb3B0aW9uIGlzIHRvIHB1dCB0aGVtIGluIGFzc2V0cy92ZW5kb3IgYW5kXG4vLyBpbXBvcnQgdGhlbSB1c2luZyByZWxhdGl2ZSBwYXRoczpcbi8vXG4vLyAgICAgaW1wb3J0IFwiLi4vdmVuZG9yL3NvbWUtcGFja2FnZS5qc1wiXG4vL1xuLy8gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBgbnBtIGluc3RhbGwgc29tZS1wYWNrYWdlIC0tcHJlZml4IGFzc2V0c2AgYW5kIGltcG9ydFxuLy8gdGhlbSB1c2luZyBhIHBhdGggc3RhcnRpbmcgd2l0aCB0aGUgcGFja2FnZSBuYW1lOlxuLy9cbi8vICAgICBpbXBvcnQgXCJzb21lLXBhY2thZ2VcIlxuLy9cblxuLy8gSW5jbHVkZSBwaG9lbml4X2h0bWwgdG8gaGFuZGxlIG1ldGhvZD1QVVQvREVMRVRFIGluIGZvcm1zIGFuZCBidXR0b25zLlxuaW1wb3J0IFwicGhvZW5peF9odG1sXCJcbi8vIEVzdGFibGlzaCBQaG9lbml4IFNvY2tldCBhbmQgTGl2ZVZpZXcgY29uZmlndXJhdGlvbi5cbmltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG5pbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG5pbXBvcnQgdG9wYmFyIGZyb20gXCIuLi92ZW5kb3IvdG9wYmFyXCJcbmltcG9ydCB7TWV0YW1hc2t9IGZyb20gXCIuL2hvb2tzL21ldGFtYXNrXCJcblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50XG4gIC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdjc3JmLXRva2VuJ11cIilcbiAgLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG5cbmxldCBIb29rcyA9IHt9XG5Ib29rcy5NZXRhbWFzayA9IE1ldGFtYXNrXG5cbmxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHtcbiAgcGFyYW1zOiB7IF9jc3JmX3Rva2VuOiBjc3JmVG9rZW4gfSxcbiAgaG9va3M6IEhvb2tzXG59KTtcblxuLy8gU2hvdyBwcm9ncmVzcyBiYXIgb24gbGl2ZSBuYXZpZ2F0aW9uIGFuZCBmb3JtIHN1Ym1pdHNcbnRvcGJhci5jb25maWcoe2JhckNvbG9yczogezA6IFwiIzI5ZFwifSwgc2hhZG93Q29sb3I6IFwicmdiYSgwLCAwLCAwLCAuMylcIn0pXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgX2luZm8gPT4gdG9wYmFyLnNob3coMzAwKSlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGh4OnBhZ2UtbG9hZGluZy1zdG9wXCIsIF9pbmZvID0+IHRvcGJhci5oaWRlKCkpXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZG9yYTpjbGlwY29weVwiLCAoZXZlbnQpID0+IHtcbiAgaWYgKFwiY2xpcGJvYXJkXCIgaW4gbmF2aWdhdG9yKSB7XG4gICAgY29uc3QgdGV4dCA9IGV2ZW50LnRhcmdldC50ZXh0Q29udGVudC50cmltKCk7XG4gICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgYWxlcnQoXCJTb3JyeSwgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY2xpcGJvYXJkIGNvcHkuXCIpO1xuICB9XG59KTtcblxuLy8gY29ubmVjdCBpZiB0aGVyZSBhcmUgYW55IExpdmVWaWV3cyBvbiB0aGUgcGFnZVxubGl2ZVNvY2tldC5jb25uZWN0KClcblxuLy8gZXhwb3NlIGxpdmVTb2NrZXQgb24gd2luZG93IGZvciB3ZWIgY29uc29sZSBkZWJ1ZyBsb2dzIGFuZCBsYXRlbmN5IHNpbXVsYXRpb246XG4vLyA+PiBsaXZlU29ja2V0LmVuYWJsZURlYnVnKClcbi8vID4+IGxpdmVTb2NrZXQuZW5hYmxlTGF0ZW5jeVNpbSgxMDAwKSAgLy8gZW5hYmxlZCBmb3IgZHVyYXRpb24gb2YgYnJvd3NlciBzZXNzaW9uXG4vLyA+PiBsaXZlU29ja2V0LmRpc2FibGVMYXRlbmN5U2ltKClcbndpbmRvdy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuIiwgInZhciBjb21tb25qc0dsb2JhbD10eXBlb2YgZ2xvYmFsVGhpcyE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIj93aW5kb3c6dHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCI/Z2xvYmFsOnR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIj9zZWxmOnt9O2Z1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzKHgpe3JldHVybiB4JiZ4Ll9fZXNNb2R1bGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LFwiZGVmYXVsdFwiKT94W1wiZGVmYXVsdFwiXTp4fWZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLGJhc2VkaXIsbW9kdWxlKXtyZXR1cm4gbW9kdWxlPXtwYXRoOmJhc2VkaXIsZXhwb3J0czp7fSxyZXF1aXJlOmZ1bmN0aW9uKHBhdGgsYmFzZSl7cmV0dXJuIGNvbW1vbmpzUmVxdWlyZShwYXRoLGJhc2U9PT11bmRlZmluZWR8fGJhc2U9PT1udWxsP21vZHVsZS5wYXRoOmJhc2UpfX0sZm4obW9kdWxlLG1vZHVsZS5leHBvcnRzKSxtb2R1bGUuZXhwb3J0c31mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbU5hbWVzcGFjZUlmUHJlc2VudChuKXtyZXR1cm4gbiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJkZWZhdWx0XCIpP25bXCJkZWZhdWx0XCJdOm59ZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21OYW1lc3BhY2VJZk5vdE5hbWVkKG4pe3JldHVybiBuJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcImRlZmF1bHRcIikmJk9iamVjdC5rZXlzKG4pLmxlbmd0aD09PTE/bltcImRlZmF1bHRcIl06bn1mdW5jdGlvbiBnZXRBdWdtZW50ZWROYW1lc3BhY2Uobil7aWYobi5fX2VzTW9kdWxlKXJldHVybiBuO3ZhciBhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO09iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24oayl7dmFyIGQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLGspO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGssZC5nZXQ/ZDp7ZW51bWVyYWJsZTp0cnVlLGdldDpmdW5jdGlvbigpe3JldHVybiBuW2tdfX0pfSk7cmV0dXJuIGF9ZnVuY3Rpb24gY29tbW9uanNSZXF1aXJlKCl7dGhyb3cgbmV3IEVycm9yKFwiRHluYW1pYyByZXF1aXJlcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIil9dmFyIGJuPWNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSl7KGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhc3NlcnQodmFsLG1zZyl7aWYoIXZhbCl0aHJvdyBuZXcgRXJyb3IobXNnfHxcIkFzc2VydGlvbiBmYWlsZWRcIil9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3Rvcjt2YXIgVGVtcEN0b3I9ZnVuY3Rpb24oKXt9O1RlbXBDdG9yLnByb3RvdHlwZT1zdXBlckN0b3IucHJvdG90eXBlO2N0b3IucHJvdG90eXBlPW5ldyBUZW1wQ3RvcjtjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jdG9yfWZ1bmN0aW9uIEJOKG51bWJlcixiYXNlLGVuZGlhbil7aWYoQk4uaXNCTihudW1iZXIpKXtyZXR1cm4gbnVtYmVyfXRoaXMubmVnYXRpdmU9MDt0aGlzLndvcmRzPW51bGw7dGhpcy5sZW5ndGg9MDt0aGlzLnJlZD1udWxsO2lmKG51bWJlciE9PW51bGwpe2lmKGJhc2U9PT1cImxlXCJ8fGJhc2U9PT1cImJlXCIpe2VuZGlhbj1iYXNlO2Jhc2U9MTB9dGhpcy5faW5pdChudW1iZXJ8fDAsYmFzZXx8MTAsZW5kaWFufHxcImJlXCIpfX1pZih0eXBlb2YgbW9kdWxlPT09XCJvYmplY3RcIil7bW9kdWxlLmV4cG9ydHM9Qk59ZWxzZXtleHBvcnRzLkJOPUJOfUJOLkJOPUJOO0JOLndvcmRTaXplPTI2O3ZhciBCdWZmZXI7dHJ5e2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiJiZ0eXBlb2Ygd2luZG93LkJ1ZmZlciE9PVwidW5kZWZpbmVkXCIpe0J1ZmZlcj13aW5kb3cuQnVmZmVyfWVsc2V7QnVmZmVyPW51bGwuQnVmZmVyfX1jYXRjaChlKXt9Qk4uaXNCTj1mdW5jdGlvbiBpc0JOKG51bSl7aWYobnVtIGluc3RhbmNlb2YgQk4pe3JldHVybiB0cnVlfXJldHVybiBudW0hPT1udWxsJiZ0eXBlb2YgbnVtPT09XCJvYmplY3RcIiYmbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplPT09Qk4ud29yZFNpemUmJkFycmF5LmlzQXJyYXkobnVtLndvcmRzKX07Qk4ubWF4PWZ1bmN0aW9uIG1heChsZWZ0LHJpZ2h0KXtpZihsZWZ0LmNtcChyaWdodCk+MClyZXR1cm4gbGVmdDtyZXR1cm4gcmlnaHR9O0JOLm1pbj1mdW5jdGlvbiBtaW4obGVmdCxyaWdodCl7aWYobGVmdC5jbXAocmlnaHQpPDApcmV0dXJuIGxlZnQ7cmV0dXJuIHJpZ2h0fTtCTi5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24gaW5pdChudW1iZXIsYmFzZSxlbmRpYW4pe2lmKHR5cGVvZiBudW1iZXI9PT1cIm51bWJlclwiKXtyZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsYmFzZSxlbmRpYW4pfWlmKHR5cGVvZiBudW1iZXI9PT1cIm9iamVjdFwiKXtyZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlcixiYXNlLGVuZGlhbil9aWYoYmFzZT09PVwiaGV4XCIpe2Jhc2U9MTZ9YXNzZXJ0KGJhc2U9PT0oYmFzZXwwKSYmYmFzZT49MiYmYmFzZTw9MzYpO251bWJlcj1udW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csXCJcIik7dmFyIHN0YXJ0PTA7aWYobnVtYmVyWzBdPT09XCItXCIpe3N0YXJ0Kys7dGhpcy5uZWdhdGl2ZT0xfWlmKHN0YXJ0PG51bWJlci5sZW5ndGgpe2lmKGJhc2U9PT0xNil7dGhpcy5fcGFyc2VIZXgobnVtYmVyLHN0YXJ0LGVuZGlhbil9ZWxzZXt0aGlzLl9wYXJzZUJhc2UobnVtYmVyLGJhc2Usc3RhcnQpO2lmKGVuZGlhbj09PVwibGVcIil7dGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLGJhc2UsZW5kaWFuKX19fX07Qk4ucHJvdG90eXBlLl9pbml0TnVtYmVyPWZ1bmN0aW9uIF9pbml0TnVtYmVyKG51bWJlcixiYXNlLGVuZGlhbil7aWYobnVtYmVyPDApe3RoaXMubmVnYXRpdmU9MTtudW1iZXI9LW51bWJlcn1pZihudW1iZXI8NjcxMDg4NjQpe3RoaXMud29yZHM9W251bWJlciY2NzEwODg2M107dGhpcy5sZW5ndGg9MX1lbHNlIGlmKG51bWJlcjw0NTAzNTk5NjI3MzcwNDk2KXt0aGlzLndvcmRzPVtudW1iZXImNjcxMDg4NjMsbnVtYmVyLzY3MTA4ODY0JjY3MTA4ODYzXTt0aGlzLmxlbmd0aD0yfWVsc2V7YXNzZXJ0KG51bWJlcjw5MDA3MTk5MjU0NzQwOTkyKTt0aGlzLndvcmRzPVtudW1iZXImNjcxMDg4NjMsbnVtYmVyLzY3MTA4ODY0JjY3MTA4ODYzLDFdO3RoaXMubGVuZ3RoPTN9aWYoZW5kaWFuIT09XCJsZVwiKXJldHVybjt0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksYmFzZSxlbmRpYW4pfTtCTi5wcm90b3R5cGUuX2luaXRBcnJheT1mdW5jdGlvbiBfaW5pdEFycmF5KG51bWJlcixiYXNlLGVuZGlhbil7YXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoPT09XCJudW1iZXJcIik7aWYobnVtYmVyLmxlbmd0aDw9MCl7dGhpcy53b3Jkcz1bMF07dGhpcy5sZW5ndGg9MTtyZXR1cm4gdGhpc310aGlzLmxlbmd0aD1NYXRoLmNlaWwobnVtYmVyLmxlbmd0aC8zKTt0aGlzLndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3RoaXMud29yZHNbaV09MH12YXIgaix3O3ZhciBvZmY9MDtpZihlbmRpYW49PT1cImJlXCIpe2ZvcihpPW51bWJlci5sZW5ndGgtMSxqPTA7aT49MDtpLT0zKXt3PW51bWJlcltpXXxudW1iZXJbaS0xXTw8OHxudW1iZXJbaS0yXTw8MTY7dGhpcy53b3Jkc1tqXXw9dzw8b2ZmJjY3MTA4ODYzO3RoaXMud29yZHNbaisxXT13Pj4+MjYtb2ZmJjY3MTA4ODYzO29mZis9MjQ7aWYob2ZmPj0yNil7b2ZmLT0yNjtqKyt9fX1lbHNlIGlmKGVuZGlhbj09PVwibGVcIil7Zm9yKGk9MCxqPTA7aTxudW1iZXIubGVuZ3RoO2krPTMpe3c9bnVtYmVyW2ldfG51bWJlcltpKzFdPDw4fG51bWJlcltpKzJdPDwxNjt0aGlzLndvcmRzW2pdfD13PDxvZmYmNjcxMDg4NjM7dGhpcy53b3Jkc1tqKzFdPXc+Pj4yNi1vZmYmNjcxMDg4NjM7b2ZmKz0yNDtpZihvZmY+PTI2KXtvZmYtPTI2O2orK319fXJldHVybiB0aGlzLnN0cmlwKCl9O2Z1bmN0aW9uIHBhcnNlSGV4NEJpdHMoc3RyaW5nLGluZGV4KXt2YXIgYz1zdHJpbmcuY2hhckNvZGVBdChpbmRleCk7aWYoYz49NjUmJmM8PTcwKXtyZXR1cm4gYy01NX1lbHNlIGlmKGM+PTk3JiZjPD0xMDIpe3JldHVybiBjLTg3fWVsc2V7cmV0dXJuIGMtNDgmMTV9fWZ1bmN0aW9uIHBhcnNlSGV4Qnl0ZShzdHJpbmcsbG93ZXJCb3VuZCxpbmRleCl7dmFyIHI9cGFyc2VIZXg0Qml0cyhzdHJpbmcsaW5kZXgpO2lmKGluZGV4LTE+PWxvd2VyQm91bmQpe3J8PXBhcnNlSGV4NEJpdHMoc3RyaW5nLGluZGV4LTEpPDw0fXJldHVybiByfUJOLnByb3RvdHlwZS5fcGFyc2VIZXg9ZnVuY3Rpb24gX3BhcnNlSGV4KG51bWJlcixzdGFydCxlbmRpYW4pe3RoaXMubGVuZ3RoPU1hdGguY2VpbCgobnVtYmVyLmxlbmd0aC1zdGFydCkvNik7dGhpcy53b3Jkcz1uZXcgQXJyYXkodGhpcy5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPTB9dmFyIG9mZj0wO3ZhciBqPTA7dmFyIHc7aWYoZW5kaWFuPT09XCJiZVwiKXtmb3IoaT1udW1iZXIubGVuZ3RoLTE7aT49c3RhcnQ7aS09Mil7dz1wYXJzZUhleEJ5dGUobnVtYmVyLHN0YXJ0LGkpPDxvZmY7dGhpcy53b3Jkc1tqXXw9dyY2NzEwODg2MztpZihvZmY+PTE4KXtvZmYtPTE4O2orPTE7dGhpcy53b3Jkc1tqXXw9dz4+PjI2fWVsc2V7b2ZmKz04fX19ZWxzZXt2YXIgcGFyc2VMZW5ndGg9bnVtYmVyLmxlbmd0aC1zdGFydDtmb3IoaT1wYXJzZUxlbmd0aCUyPT09MD9zdGFydCsxOnN0YXJ0O2k8bnVtYmVyLmxlbmd0aDtpKz0yKXt3PXBhcnNlSGV4Qnl0ZShudW1iZXIsc3RhcnQsaSk8PG9mZjt0aGlzLndvcmRzW2pdfD13JjY3MTA4ODYzO2lmKG9mZj49MTgpe29mZi09MTg7ais9MTt0aGlzLndvcmRzW2pdfD13Pj4+MjZ9ZWxzZXtvZmYrPTh9fX10aGlzLnN0cmlwKCl9O2Z1bmN0aW9uIHBhcnNlQmFzZShzdHIsc3RhcnQsZW5kLG11bCl7dmFyIHI9MDt2YXIgbGVuPU1hdGgubWluKHN0ci5sZW5ndGgsZW5kKTtmb3IodmFyIGk9c3RhcnQ7aTxsZW47aSsrKXt2YXIgYz1zdHIuY2hhckNvZGVBdChpKS00ODtyKj1tdWw7aWYoYz49NDkpe3IrPWMtNDkrMTB9ZWxzZSBpZihjPj0xNyl7cis9Yy0xNysxMH1lbHNle3IrPWN9fXJldHVybiByfUJOLnByb3RvdHlwZS5fcGFyc2VCYXNlPWZ1bmN0aW9uIF9wYXJzZUJhc2UobnVtYmVyLGJhc2Usc3RhcnQpe3RoaXMud29yZHM9WzBdO3RoaXMubGVuZ3RoPTE7Zm9yKHZhciBsaW1iTGVuPTAsbGltYlBvdz0xO2xpbWJQb3c8PTY3MTA4ODYzO2xpbWJQb3cqPWJhc2Upe2xpbWJMZW4rK31saW1iTGVuLS07bGltYlBvdz1saW1iUG93L2Jhc2V8MDt2YXIgdG90YWw9bnVtYmVyLmxlbmd0aC1zdGFydDt2YXIgbW9kPXRvdGFsJWxpbWJMZW47dmFyIGVuZD1NYXRoLm1pbih0b3RhbCx0b3RhbC1tb2QpK3N0YXJ0O3ZhciB3b3JkPTA7Zm9yKHZhciBpPXN0YXJ0O2k8ZW5kO2krPWxpbWJMZW4pe3dvcmQ9cGFyc2VCYXNlKG51bWJlcixpLGkrbGltYkxlbixiYXNlKTt0aGlzLmltdWxuKGxpbWJQb3cpO2lmKHRoaXMud29yZHNbMF0rd29yZDw2NzEwODg2NCl7dGhpcy53b3Jkc1swXSs9d29yZH1lbHNle3RoaXMuX2lhZGRuKHdvcmQpfX1pZihtb2QhPT0wKXt2YXIgcG93PTE7d29yZD1wYXJzZUJhc2UobnVtYmVyLGksbnVtYmVyLmxlbmd0aCxiYXNlKTtmb3IoaT0wO2k8bW9kO2krKyl7cG93Kj1iYXNlfXRoaXMuaW11bG4ocG93KTtpZih0aGlzLndvcmRzWzBdK3dvcmQ8NjcxMDg4NjQpe3RoaXMud29yZHNbMF0rPXdvcmR9ZWxzZXt0aGlzLl9pYWRkbih3b3JkKX19dGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuY29weT1mdW5jdGlvbiBjb3B5KGRlc3Qpe2Rlc3Qud29yZHM9bmV3IEFycmF5KHRoaXMubGVuZ3RoKTtmb3IodmFyIGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7ZGVzdC53b3Jkc1tpXT10aGlzLndvcmRzW2ldfWRlc3QubGVuZ3RoPXRoaXMubGVuZ3RoO2Rlc3QubmVnYXRpdmU9dGhpcy5uZWdhdGl2ZTtkZXN0LnJlZD10aGlzLnJlZH07Qk4ucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uIGNsb25lKCl7dmFyIHI9bmV3IEJOKG51bGwpO3RoaXMuY29weShyKTtyZXR1cm4gcn07Qk4ucHJvdG90eXBlLl9leHBhbmQ9ZnVuY3Rpb24gX2V4cGFuZChzaXplKXt3aGlsZSh0aGlzLmxlbmd0aDxzaXplKXt0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdPTB9cmV0dXJuIHRoaXN9O0JOLnByb3RvdHlwZS5zdHJpcD1mdW5jdGlvbiBzdHJpcCgpe3doaWxlKHRoaXMubGVuZ3RoPjEmJnRoaXMud29yZHNbdGhpcy5sZW5ndGgtMV09PT0wKXt0aGlzLmxlbmd0aC0tfXJldHVybiB0aGlzLl9ub3JtU2lnbigpfTtCTi5wcm90b3R5cGUuX25vcm1TaWduPWZ1bmN0aW9uIF9ub3JtU2lnbigpe2lmKHRoaXMubGVuZ3RoPT09MSYmdGhpcy53b3Jkc1swXT09PTApe3RoaXMubmVnYXRpdmU9MH1yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24gaW5zcGVjdCgpe3JldHVybih0aGlzLnJlZD9cIjxCTi1SOiBcIjpcIjxCTjogXCIpK3RoaXMudG9TdHJpbmcoMTYpK1wiPlwifTt2YXIgemVyb3M9W1wiXCIsXCIwXCIsXCIwMFwiLFwiMDAwXCIsXCIwMDAwXCIsXCIwMDAwMFwiLFwiMDAwMDAwXCIsXCIwMDAwMDAwXCIsXCIwMDAwMDAwMFwiLFwiMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCJdO3ZhciBncm91cFNpemVzPVswLDAsMjUsMTYsMTIsMTEsMTAsOSw4LDgsNyw3LDcsNyw2LDYsNiw2LDYsNiw2LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDVdO3ZhciBncm91cEJhc2VzPVswLDAsMzM1NTQ0MzIsNDMwNDY3MjEsMTY3NzcyMTYsNDg4MjgxMjUsNjA0NjYxNzYsNDAzNTM2MDcsMTY3NzcyMTYsNDMwNDY3MjEsMWU3LDE5NDg3MTcxLDM1ODMxODA4LDYyNzQ4NTE3LDc1Mjk1MzYsMTEzOTA2MjUsMTY3NzcyMTYsMjQxMzc1NjksMzQwMTIyMjQsNDcwNDU4ODEsNjRlNiw0MDg0MTAxLDUxNTM2MzIsNjQzNjM0Myw3OTYyNjI0LDk3NjU2MjUsMTE4ODEzNzYsMTQzNDg5MDcsMTcyMTAzNjgsMjA1MTExNDksMjQzZTUsMjg2MjkxNTEsMzM1NTQ0MzIsMzkxMzUzOTMsNDU0MzU0MjQsNTI1MjE4NzUsNjA0NjYxNzZdO0JOLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbiB0b1N0cmluZyhiYXNlLHBhZGRpbmcpe2Jhc2U9YmFzZXx8MTA7cGFkZGluZz1wYWRkaW5nfDB8fDE7dmFyIG91dDtpZihiYXNlPT09MTZ8fGJhc2U9PT1cImhleFwiKXtvdXQ9XCJcIjt2YXIgb2ZmPTA7dmFyIGNhcnJ5PTA7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciB3PXRoaXMud29yZHNbaV07dmFyIHdvcmQ9KCh3PDxvZmZ8Y2FycnkpJjE2Nzc3MjE1KS50b1N0cmluZygxNik7Y2Fycnk9dz4+PjI0LW9mZiYxNjc3NzIxNTtpZihjYXJyeSE9PTB8fGkhPT10aGlzLmxlbmd0aC0xKXtvdXQ9emVyb3NbNi13b3JkLmxlbmd0aF0rd29yZCtvdXR9ZWxzZXtvdXQ9d29yZCtvdXR9b2ZmKz0yO2lmKG9mZj49MjYpe29mZi09MjY7aS0tfX1pZihjYXJyeSE9PTApe291dD1jYXJyeS50b1N0cmluZygxNikrb3V0fXdoaWxlKG91dC5sZW5ndGglcGFkZGluZyE9PTApe291dD1cIjBcIitvdXR9aWYodGhpcy5uZWdhdGl2ZSE9PTApe291dD1cIi1cIitvdXR9cmV0dXJuIG91dH1pZihiYXNlPT09KGJhc2V8MCkmJmJhc2U+PTImJmJhc2U8PTM2KXt2YXIgZ3JvdXBTaXplPWdyb3VwU2l6ZXNbYmFzZV07dmFyIGdyb3VwQmFzZT1ncm91cEJhc2VzW2Jhc2VdO291dD1cIlwiO3ZhciBjPXRoaXMuY2xvbmUoKTtjLm5lZ2F0aXZlPTA7d2hpbGUoIWMuaXNaZXJvKCkpe3ZhciByPWMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO2M9Yy5pZGl2bihncm91cEJhc2UpO2lmKCFjLmlzWmVybygpKXtvdXQ9emVyb3NbZ3JvdXBTaXplLXIubGVuZ3RoXStyK291dH1lbHNle291dD1yK291dH19aWYodGhpcy5pc1plcm8oKSl7b3V0PVwiMFwiK291dH13aGlsZShvdXQubGVuZ3RoJXBhZGRpbmchPT0wKXtvdXQ9XCIwXCIrb3V0fWlmKHRoaXMubmVnYXRpdmUhPT0wKXtvdXQ9XCItXCIrb3V0fXJldHVybiBvdXR9YXNzZXJ0KGZhbHNlLFwiQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNlwiKX07Qk4ucHJvdG90eXBlLnRvTnVtYmVyPWZ1bmN0aW9uIHRvTnVtYmVyKCl7dmFyIHJldD10aGlzLndvcmRzWzBdO2lmKHRoaXMubGVuZ3RoPT09Mil7cmV0Kz10aGlzLndvcmRzWzFdKjY3MTA4ODY0fWVsc2UgaWYodGhpcy5sZW5ndGg9PT0zJiZ0aGlzLndvcmRzWzJdPT09MSl7cmV0Kz00NTAzNTk5NjI3MzcwNDk2K3RoaXMud29yZHNbMV0qNjcxMDg4NjR9ZWxzZSBpZih0aGlzLmxlbmd0aD4yKXthc3NlcnQoZmFsc2UsXCJOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHNcIil9cmV0dXJuIHRoaXMubmVnYXRpdmUhPT0wPy1yZXQ6cmV0fTtCTi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uIHRvSlNPTigpe3JldHVybiB0aGlzLnRvU3RyaW5nKDE2KX07Qk4ucHJvdG90eXBlLnRvQnVmZmVyPWZ1bmN0aW9uIHRvQnVmZmVyKGVuZGlhbixsZW5ndGgpe2Fzc2VydCh0eXBlb2YgQnVmZmVyIT09XCJ1bmRlZmluZWRcIik7cmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLGVuZGlhbixsZW5ndGgpfTtCTi5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbiB0b0FycmF5KGVuZGlhbixsZW5ndGgpe3JldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LGVuZGlhbixsZW5ndGgpfTtCTi5wcm90b3R5cGUudG9BcnJheUxpa2U9ZnVuY3Rpb24gdG9BcnJheUxpa2UoQXJyYXlUeXBlLGVuZGlhbixsZW5ndGgpe3ZhciBieXRlTGVuZ3RoPXRoaXMuYnl0ZUxlbmd0aCgpO3ZhciByZXFMZW5ndGg9bGVuZ3RofHxNYXRoLm1heCgxLGJ5dGVMZW5ndGgpO2Fzc2VydChieXRlTGVuZ3RoPD1yZXFMZW5ndGgsXCJieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoXCIpO2Fzc2VydChyZXFMZW5ndGg+MCxcIlJlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMFwiKTt0aGlzLnN0cmlwKCk7dmFyIGxpdHRsZUVuZGlhbj1lbmRpYW49PT1cImxlXCI7dmFyIHJlcz1uZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7dmFyIGIsaTt2YXIgcT10aGlzLmNsb25lKCk7aWYoIWxpdHRsZUVuZGlhbil7Zm9yKGk9MDtpPHJlcUxlbmd0aC1ieXRlTGVuZ3RoO2krKyl7cmVzW2ldPTB9Zm9yKGk9MDshcS5pc1plcm8oKTtpKyspe2I9cS5hbmRsbigyNTUpO3EuaXVzaHJuKDgpO3Jlc1tyZXFMZW5ndGgtaS0xXT1ifX1lbHNle2ZvcihpPTA7IXEuaXNaZXJvKCk7aSsrKXtiPXEuYW5kbG4oMjU1KTtxLml1c2hybig4KTtyZXNbaV09Yn1mb3IoO2k8cmVxTGVuZ3RoO2krKyl7cmVzW2ldPTB9fXJldHVybiByZXN9O2lmKE1hdGguY2x6MzIpe0JOLnByb3RvdHlwZS5fY291bnRCaXRzPWZ1bmN0aW9uIF9jb3VudEJpdHModyl7cmV0dXJuIDMyLU1hdGguY2x6MzIodyl9fWVsc2V7Qk4ucHJvdG90eXBlLl9jb3VudEJpdHM9ZnVuY3Rpb24gX2NvdW50Qml0cyh3KXt2YXIgdD13O3ZhciByPTA7aWYodD49NDA5Nil7cis9MTM7dD4+Pj0xM31pZih0Pj02NCl7cis9Nzt0Pj4+PTd9aWYodD49OCl7cis9NDt0Pj4+PTR9aWYodD49Mil7cis9Mjt0Pj4+PTJ9cmV0dXJuIHIrdH19Qk4ucHJvdG90eXBlLl96ZXJvQml0cz1mdW5jdGlvbiBfemVyb0JpdHModyl7aWYodz09PTApcmV0dXJuIDI2O3ZhciB0PXc7dmFyIHI9MDtpZigodCY4MTkxKT09PTApe3IrPTEzO3Q+Pj49MTN9aWYoKHQmMTI3KT09PTApe3IrPTc7dD4+Pj03fWlmKCh0JjE1KT09PTApe3IrPTQ7dD4+Pj00fWlmKCh0JjMpPT09MCl7cis9Mjt0Pj4+PTJ9aWYoKHQmMSk9PT0wKXtyKyt9cmV0dXJuIHJ9O0JOLnByb3RvdHlwZS5iaXRMZW5ndGg9ZnVuY3Rpb24gYml0TGVuZ3RoKCl7dmFyIHc9dGhpcy53b3Jkc1t0aGlzLmxlbmd0aC0xXTt2YXIgaGk9dGhpcy5fY291bnRCaXRzKHcpO3JldHVybih0aGlzLmxlbmd0aC0xKSoyNitoaX07ZnVuY3Rpb24gdG9CaXRBcnJheShudW0pe3ZhciB3PW5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO2Zvcih2YXIgYml0PTA7Yml0PHcubGVuZ3RoO2JpdCsrKXt2YXIgb2ZmPWJpdC8yNnwwO3ZhciB3Yml0PWJpdCUyNjt3W2JpdF09KG51bS53b3Jkc1tvZmZdJjE8PHdiaXQpPj4+d2JpdH1yZXR1cm4gd31CTi5wcm90b3R5cGUuemVyb0JpdHM9ZnVuY3Rpb24gemVyb0JpdHMoKXtpZih0aGlzLmlzWmVybygpKXJldHVybiAwO3ZhciByPTA7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciBiPXRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO3IrPWI7aWYoYiE9PTI2KWJyZWFrfXJldHVybiByfTtCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aD1mdW5jdGlvbiBieXRlTGVuZ3RoKCl7cmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpLzgpfTtCTi5wcm90b3R5cGUudG9Ud29zPWZ1bmN0aW9uIHRvVHdvcyh3aWR0aCl7aWYodGhpcy5uZWdhdGl2ZSE9PTApe3JldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKX1yZXR1cm4gdGhpcy5jbG9uZSgpfTtCTi5wcm90b3R5cGUuZnJvbVR3b3M9ZnVuY3Rpb24gZnJvbVR3b3Mod2lkdGgpe2lmKHRoaXMudGVzdG4od2lkdGgtMSkpe3JldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKX1yZXR1cm4gdGhpcy5jbG9uZSgpfTtCTi5wcm90b3R5cGUuaXNOZWc9ZnVuY3Rpb24gaXNOZWcoKXtyZXR1cm4gdGhpcy5uZWdhdGl2ZSE9PTB9O0JOLnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24gbmVnKCl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCl9O0JOLnByb3RvdHlwZS5pbmVnPWZ1bmN0aW9uIGluZWcoKXtpZighdGhpcy5pc1plcm8oKSl7dGhpcy5uZWdhdGl2ZV49MX1yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLml1b3I9ZnVuY3Rpb24gaXVvcihudW0pe3doaWxlKHRoaXMubGVuZ3RoPG51bS5sZW5ndGgpe3RoaXMud29yZHNbdGhpcy5sZW5ndGgrK109MH1mb3IodmFyIGk9MDtpPG51bS5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPXRoaXMud29yZHNbaV18bnVtLndvcmRzW2ldfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5pb3I9ZnVuY3Rpb24gaW9yKG51bSl7YXNzZXJ0KCh0aGlzLm5lZ2F0aXZlfG51bS5uZWdhdGl2ZSk9PT0wKTtyZXR1cm4gdGhpcy5pdW9yKG51bSl9O0JOLnByb3RvdHlwZS5vcj1mdW5jdGlvbiBvcihudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpfTtCTi5wcm90b3R5cGUudW9yPWZ1bmN0aW9uIHVvcihudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7cmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyl9O0JOLnByb3RvdHlwZS5pdWFuZD1mdW5jdGlvbiBpdWFuZChudW0pe3ZhciBiO2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpe2I9bnVtfWVsc2V7Yj10aGlzfWZvcih2YXIgaT0wO2k8Yi5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPXRoaXMud29yZHNbaV0mbnVtLndvcmRzW2ldfXRoaXMubGVuZ3RoPWIubGVuZ3RoO3JldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5pYW5kPWZ1bmN0aW9uIGlhbmQobnVtKXthc3NlcnQoKHRoaXMubmVnYXRpdmV8bnVtLm5lZ2F0aXZlKT09PTApO3JldHVybiB0aGlzLml1YW5kKG51bSl9O0JOLnByb3RvdHlwZS5hbmQ9ZnVuY3Rpb24gYW5kKG51bSl7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKX07Qk4ucHJvdG90eXBlLnVhbmQ9ZnVuY3Rpb24gdWFuZChudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO3JldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKX07Qk4ucHJvdG90eXBlLml1eG9yPWZ1bmN0aW9uIGl1eG9yKG51bSl7dmFyIGE7dmFyIGI7aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aCl7YT10aGlzO2I9bnVtfWVsc2V7YT1udW07Yj10aGlzfWZvcih2YXIgaT0wO2k8Yi5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPWEud29yZHNbaV1eYi53b3Jkc1tpXX1pZih0aGlzIT09YSl7Zm9yKDtpPGEubGVuZ3RoO2krKyl7dGhpcy53b3Jkc1tpXT1hLndvcmRzW2ldfX10aGlzLmxlbmd0aD1hLmxlbmd0aDtyZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuaXhvcj1mdW5jdGlvbiBpeG9yKG51bSl7YXNzZXJ0KCh0aGlzLm5lZ2F0aXZlfG51bS5uZWdhdGl2ZSk9PT0wKTtyZXR1cm4gdGhpcy5pdXhvcihudW0pfTtCTi5wcm90b3R5cGUueG9yPWZ1bmN0aW9uIHhvcihudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7cmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyl9O0JOLnByb3RvdHlwZS51eG9yPWZ1bmN0aW9uIHV4b3IobnVtKXtpZih0aGlzLmxlbmd0aD5udW0ubGVuZ3RoKXJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyl9O0JOLnByb3RvdHlwZS5pbm90bj1mdW5jdGlvbiBpbm90bih3aWR0aCl7YXNzZXJ0KHR5cGVvZiB3aWR0aD09PVwibnVtYmVyXCImJndpZHRoPj0wKTt2YXIgYnl0ZXNOZWVkZWQ9TWF0aC5jZWlsKHdpZHRoLzI2KXwwO3ZhciBiaXRzTGVmdD13aWR0aCUyNjt0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO2lmKGJpdHNMZWZ0PjApe2J5dGVzTmVlZGVkLS19Zm9yKHZhciBpPTA7aTxieXRlc05lZWRlZDtpKyspe3RoaXMud29yZHNbaV09fnRoaXMud29yZHNbaV0mNjcxMDg4NjN9aWYoYml0c0xlZnQ+MCl7dGhpcy53b3Jkc1tpXT1+dGhpcy53b3Jkc1tpXSY2NzEwODg2Mz4+MjYtYml0c0xlZnR9cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLm5vdG49ZnVuY3Rpb24gbm90bih3aWR0aCl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCl9O0JOLnByb3RvdHlwZS5zZXRuPWZ1bmN0aW9uIHNldG4oYml0LHZhbCl7YXNzZXJ0KHR5cGVvZiBiaXQ9PT1cIm51bWJlclwiJiZiaXQ+PTApO3ZhciBvZmY9Yml0LzI2fDA7dmFyIHdiaXQ9Yml0JTI2O3RoaXMuX2V4cGFuZChvZmYrMSk7aWYodmFsKXt0aGlzLndvcmRzW29mZl09dGhpcy53b3Jkc1tvZmZdfDE8PHdiaXR9ZWxzZXt0aGlzLndvcmRzW29mZl09dGhpcy53b3Jkc1tvZmZdJn4oMTw8d2JpdCl9cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLmlhZGQ9ZnVuY3Rpb24gaWFkZChudW0pe3ZhciByO2lmKHRoaXMubmVnYXRpdmUhPT0wJiZudW0ubmVnYXRpdmU9PT0wKXt0aGlzLm5lZ2F0aXZlPTA7cj10aGlzLmlzdWIobnVtKTt0aGlzLm5lZ2F0aXZlXj0xO3JldHVybiB0aGlzLl9ub3JtU2lnbigpfWVsc2UgaWYodGhpcy5uZWdhdGl2ZT09PTAmJm51bS5uZWdhdGl2ZSE9PTApe251bS5uZWdhdGl2ZT0wO3I9dGhpcy5pc3ViKG51bSk7bnVtLm5lZ2F0aXZlPTE7cmV0dXJuIHIuX25vcm1TaWduKCl9dmFyIGEsYjtpZih0aGlzLmxlbmd0aD5udW0ubGVuZ3RoKXthPXRoaXM7Yj1udW19ZWxzZXthPW51bTtiPXRoaXN9dmFyIGNhcnJ5PTA7Zm9yKHZhciBpPTA7aTxiLmxlbmd0aDtpKyspe3I9KGEud29yZHNbaV18MCkrKGIud29yZHNbaV18MCkrY2Fycnk7dGhpcy53b3Jkc1tpXT1yJjY3MTA4ODYzO2NhcnJ5PXI+Pj4yNn1mb3IoO2NhcnJ5IT09MCYmaTxhLmxlbmd0aDtpKyspe3I9KGEud29yZHNbaV18MCkrY2Fycnk7dGhpcy53b3Jkc1tpXT1yJjY3MTA4ODYzO2NhcnJ5PXI+Pj4yNn10aGlzLmxlbmd0aD1hLmxlbmd0aDtpZihjYXJyeSE9PTApe3RoaXMud29yZHNbdGhpcy5sZW5ndGhdPWNhcnJ5O3RoaXMubGVuZ3RoKyt9ZWxzZSBpZihhIT09dGhpcyl7Zm9yKDtpPGEubGVuZ3RoO2krKyl7dGhpcy53b3Jkc1tpXT1hLndvcmRzW2ldfX1yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmFkZD1mdW5jdGlvbiBhZGQobnVtKXt2YXIgcmVzO2lmKG51bS5uZWdhdGl2ZSE9PTAmJnRoaXMubmVnYXRpdmU9PT0wKXtudW0ubmVnYXRpdmU9MDtyZXM9dGhpcy5zdWIobnVtKTtudW0ubmVnYXRpdmVePTE7cmV0dXJuIHJlc31lbHNlIGlmKG51bS5uZWdhdGl2ZT09PTAmJnRoaXMubmVnYXRpdmUhPT0wKXt0aGlzLm5lZ2F0aXZlPTA7cmVzPW51bS5zdWIodGhpcyk7dGhpcy5uZWdhdGl2ZT0xO3JldHVybiByZXN9aWYodGhpcy5sZW5ndGg+bnVtLmxlbmd0aClyZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtyZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKX07Qk4ucHJvdG90eXBlLmlzdWI9ZnVuY3Rpb24gaXN1YihudW0pe2lmKG51bS5uZWdhdGl2ZSE9PTApe251bS5uZWdhdGl2ZT0wO3ZhciByPXRoaXMuaWFkZChudW0pO251bS5uZWdhdGl2ZT0xO3JldHVybiByLl9ub3JtU2lnbigpfWVsc2UgaWYodGhpcy5uZWdhdGl2ZSE9PTApe3RoaXMubmVnYXRpdmU9MDt0aGlzLmlhZGQobnVtKTt0aGlzLm5lZ2F0aXZlPTE7cmV0dXJuIHRoaXMuX25vcm1TaWduKCl9dmFyIGNtcD10aGlzLmNtcChudW0pO2lmKGNtcD09PTApe3RoaXMubmVnYXRpdmU9MDt0aGlzLmxlbmd0aD0xO3RoaXMud29yZHNbMF09MDtyZXR1cm4gdGhpc312YXIgYSxiO2lmKGNtcD4wKXthPXRoaXM7Yj1udW19ZWxzZXthPW51bTtiPXRoaXN9dmFyIGNhcnJ5PTA7Zm9yKHZhciBpPTA7aTxiLmxlbmd0aDtpKyspe3I9KGEud29yZHNbaV18MCktKGIud29yZHNbaV18MCkrY2Fycnk7Y2Fycnk9cj4+MjY7dGhpcy53b3Jkc1tpXT1yJjY3MTA4ODYzfWZvcig7Y2FycnkhPT0wJiZpPGEubGVuZ3RoO2krKyl7cj0oYS53b3Jkc1tpXXwwKStjYXJyeTtjYXJyeT1yPj4yNjt0aGlzLndvcmRzW2ldPXImNjcxMDg4NjN9aWYoY2Fycnk9PT0wJiZpPGEubGVuZ3RoJiZhIT09dGhpcyl7Zm9yKDtpPGEubGVuZ3RoO2krKyl7dGhpcy53b3Jkc1tpXT1hLndvcmRzW2ldfX10aGlzLmxlbmd0aD1NYXRoLm1heCh0aGlzLmxlbmd0aCxpKTtpZihhIT09dGhpcyl7dGhpcy5uZWdhdGl2ZT0xfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24gc3ViKG51bSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSl9O2Z1bmN0aW9uIHNtYWxsTXVsVG8oc2VsZixudW0sb3V0KXtvdXQubmVnYXRpdmU9bnVtLm5lZ2F0aXZlXnNlbGYubmVnYXRpdmU7dmFyIGxlbj1zZWxmLmxlbmd0aCtudW0ubGVuZ3RofDA7b3V0Lmxlbmd0aD1sZW47bGVuPWxlbi0xfDA7dmFyIGE9c2VsZi53b3Jkc1swXXwwO3ZhciBiPW51bS53b3Jkc1swXXwwO3ZhciByPWEqYjt2YXIgbG89ciY2NzEwODg2Mzt2YXIgY2Fycnk9ci82NzEwODg2NHwwO291dC53b3Jkc1swXT1sbztmb3IodmFyIGs9MTtrPGxlbjtrKyspe3ZhciBuY2Fycnk9Y2Fycnk+Pj4yNjt2YXIgcndvcmQ9Y2FycnkmNjcxMDg4NjM7dmFyIG1heEo9TWF0aC5taW4oayxudW0ubGVuZ3RoLTEpO2Zvcih2YXIgaj1NYXRoLm1heCgwLGstc2VsZi5sZW5ndGgrMSk7ajw9bWF4SjtqKyspe3ZhciBpPWstanwwO2E9c2VsZi53b3Jkc1tpXXwwO2I9bnVtLndvcmRzW2pdfDA7cj1hKmIrcndvcmQ7bmNhcnJ5Kz1yLzY3MTA4ODY0fDA7cndvcmQ9ciY2NzEwODg2M31vdXQud29yZHNba109cndvcmR8MDtjYXJyeT1uY2Fycnl8MH1pZihjYXJyeSE9PTApe291dC53b3Jkc1trXT1jYXJyeXwwfWVsc2V7b3V0Lmxlbmd0aC0tfXJldHVybiBvdXQuc3RyaXAoKX12YXIgY29tYjEwTXVsVG89ZnVuY3Rpb24gY29tYjEwTXVsVG8oc2VsZixudW0sb3V0KXt2YXIgYT1zZWxmLndvcmRzO3ZhciBiPW51bS53b3Jkczt2YXIgbz1vdXQud29yZHM7dmFyIGM9MDt2YXIgbG87dmFyIG1pZDt2YXIgaGk7dmFyIGEwPWFbMF18MDt2YXIgYWwwPWEwJjgxOTE7dmFyIGFoMD1hMD4+PjEzO3ZhciBhMT1hWzFdfDA7dmFyIGFsMT1hMSY4MTkxO3ZhciBhaDE9YTE+Pj4xMzt2YXIgYTI9YVsyXXwwO3ZhciBhbDI9YTImODE5MTt2YXIgYWgyPWEyPj4+MTM7dmFyIGEzPWFbM118MDt2YXIgYWwzPWEzJjgxOTE7dmFyIGFoMz1hMz4+PjEzO3ZhciBhND1hWzRdfDA7dmFyIGFsND1hNCY4MTkxO3ZhciBhaDQ9YTQ+Pj4xMzt2YXIgYTU9YVs1XXwwO3ZhciBhbDU9YTUmODE5MTt2YXIgYWg1PWE1Pj4+MTM7dmFyIGE2PWFbNl18MDt2YXIgYWw2PWE2JjgxOTE7dmFyIGFoNj1hNj4+PjEzO3ZhciBhNz1hWzddfDA7dmFyIGFsNz1hNyY4MTkxO3ZhciBhaDc9YTc+Pj4xMzt2YXIgYTg9YVs4XXwwO3ZhciBhbDg9YTgmODE5MTt2YXIgYWg4PWE4Pj4+MTM7dmFyIGE5PWFbOV18MDt2YXIgYWw5PWE5JjgxOTE7dmFyIGFoOT1hOT4+PjEzO3ZhciBiMD1iWzBdfDA7dmFyIGJsMD1iMCY4MTkxO3ZhciBiaDA9YjA+Pj4xMzt2YXIgYjE9YlsxXXwwO3ZhciBibDE9YjEmODE5MTt2YXIgYmgxPWIxPj4+MTM7dmFyIGIyPWJbMl18MDt2YXIgYmwyPWIyJjgxOTE7dmFyIGJoMj1iMj4+PjEzO3ZhciBiMz1iWzNdfDA7dmFyIGJsMz1iMyY4MTkxO3ZhciBiaDM9YjM+Pj4xMzt2YXIgYjQ9Yls0XXwwO3ZhciBibDQ9YjQmODE5MTt2YXIgYmg0PWI0Pj4+MTM7dmFyIGI1PWJbNV18MDt2YXIgYmw1PWI1JjgxOTE7dmFyIGJoNT1iNT4+PjEzO3ZhciBiNj1iWzZdfDA7dmFyIGJsNj1iNiY4MTkxO3ZhciBiaDY9YjY+Pj4xMzt2YXIgYjc9Yls3XXwwO3ZhciBibDc9YjcmODE5MTt2YXIgYmg3PWI3Pj4+MTM7dmFyIGI4PWJbOF18MDt2YXIgYmw4PWI4JjgxOTE7dmFyIGJoOD1iOD4+PjEzO3ZhciBiOT1iWzldfDA7dmFyIGJsOT1iOSY4MTkxO3ZhciBiaDk9Yjk+Pj4xMztvdXQubmVnYXRpdmU9c2VsZi5uZWdhdGl2ZV5udW0ubmVnYXRpdmU7b3V0Lmxlbmd0aD0xOTtsbz1NYXRoLmltdWwoYWwwLGJsMCk7bWlkPU1hdGguaW11bChhbDAsYmgwKTttaWQ9bWlkK01hdGguaW11bChhaDAsYmwwKXwwO2hpPU1hdGguaW11bChhaDAsYmgwKTt2YXIgdzA9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcwPj4+MjYpfDA7dzAmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDEsYmwwKTttaWQ9TWF0aC5pbXVsKGFsMSxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDApfDA7aGk9TWF0aC5pbXVsKGFoMSxiaDApO2xvPWxvK01hdGguaW11bChhbDAsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoMSl8MDt2YXIgdzE9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHcxPj4+MjYpfDA7dzEmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDIsYmwwKTttaWQ9TWF0aC5pbXVsKGFsMixiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDApfDA7aGk9TWF0aC5pbXVsKGFoMixiaDApO2xvPWxvK01hdGguaW11bChhbDEsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMSxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgxLGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWgxLGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWwwLGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDAsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMCxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMCxiaDIpfDA7dmFyIHcyPShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3Mj4+PjI2KXwwO3cyJj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWwzLGJsMCk7bWlkPU1hdGguaW11bChhbDMsYmgwKTttaWQ9bWlkK01hdGguaW11bChhaDMsYmwwKXwwO2hpPU1hdGguaW11bChhaDMsYmgwKTtsbz1sbytNYXRoLmltdWwoYWwyLGJsMSl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmgxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDEpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDEpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoMil8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmwyKXwwO2hpPWhpK01hdGguaW11bChhaDEsYmgyKXwwO2xvPWxvK01hdGguaW11bChhbDAsYmwzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsMyl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoMyl8MDt2YXIgdzM9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHczPj4+MjYpfDA7dzMmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDQsYmwwKTttaWQ9TWF0aC5pbXVsKGFsNCxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDApfDA7aGk9TWF0aC5pbXVsKGFoNCxiaDApO2xvPWxvK01hdGguaW11bChhbDMsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDEsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoNCl8MDt2YXIgdzQ9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc0Pj4+MjYpfDA7dzQmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDUsYmwwKTttaWQ9TWF0aC5pbXVsKGFsNSxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDApfDA7aGk9TWF0aC5pbXVsKGFoNSxiaDApO2xvPWxvK01hdGguaW11bChhbDQsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNCxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg0LGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWg0LGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWwzLGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDMsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMyxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMyxiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsMixibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwyLGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDIsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDIsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDEsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMSxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgxLGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWgxLGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWwwLGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDAsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMCxibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMCxiaDUpfDA7dmFyIHc1PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3NT4+PjI2KXwwO3c1Jj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw2LGJsMCk7bWlkPU1hdGguaW11bChhbDYsYmgwKTttaWQ9bWlkK01hdGguaW11bChhaDYsYmwwKXwwO2hpPU1hdGguaW11bChhaDYsYmgwKTtsbz1sbytNYXRoLmltdWwoYWw1LGJsMSl8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmgxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDEpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDEpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoMil8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmwyKXwwO2hpPWhpK01hdGguaW11bChhaDQsYmgyKXwwO2xvPWxvK01hdGguaW11bChhbDMsYmwzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsMyl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoMyl8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsNCl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmg0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDQpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDQpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDEsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoNil8MDt2YXIgdzY9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc2Pj4+MjYpfDA7dzYmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDcsYmwwKTttaWQ9TWF0aC5pbXVsKGFsNyxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDApfDA7aGk9TWF0aC5pbXVsKGFoNyxiaDApO2xvPWxvK01hdGguaW11bChhbDYsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDQsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDMsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDUpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoNil8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmw2KXwwO2hpPWhpK01hdGguaW11bChhaDEsYmg2KXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsNyl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoNyl8MDt2YXIgdzc9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc3Pj4+MjYpfDA7dzcmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDgsYmwwKTttaWQ9TWF0aC5pbXVsKGFsOCxiaDApO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDApfDA7aGk9TWF0aC5pbXVsKGFoOCxiaDApO2xvPWxvK01hdGguaW11bChhbDcsYmwxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNyxiaDEpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg3LGJsMSl8MDtoaT1oaStNYXRoLmltdWwoYWg3LGJoMSl8MDtsbz1sbytNYXRoLmltdWwoYWw2LGJsMil8MDttaWQ9bWlkK01hdGguaW11bChhbDYsYmgyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNixibDIpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNixiaDIpfDA7bG89bG8rTWF0aC5pbXVsKGFsNSxibDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw1LGJoMyl8MDttaWQ9bWlkK01hdGguaW11bChhaDUsYmwzKXwwO2hpPWhpK01hdGguaW11bChhaDUsYmgzKXwwO2xvPWxvK01hdGguaW11bChhbDQsYmw0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNCxiaDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg0LGJsNCl8MDtoaT1oaStNYXRoLmltdWwoYWg0LGJoNCl8MDtsbz1sbytNYXRoLmltdWwoYWwzLGJsNSl8MDttaWQ9bWlkK01hdGguaW11bChhbDMsYmg1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMyxibDUpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMyxiaDUpfDA7bG89bG8rTWF0aC5pbXVsKGFsMixibDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwyLGJoNil8MDttaWQ9bWlkK01hdGguaW11bChhaDIsYmw2KXwwO2hpPWhpK01hdGguaW11bChhaDIsYmg2KXwwO2xvPWxvK01hdGguaW11bChhbDEsYmw3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMSxiaDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgxLGJsNyl8MDtoaT1oaStNYXRoLmltdWwoYWgxLGJoNyl8MDtsbz1sbytNYXRoLmltdWwoYWwwLGJsOCl8MDttaWQ9bWlkK01hdGguaW11bChhbDAsYmg4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMCxibDgpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMCxiaDgpfDA7dmFyIHc4PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3OD4+PjI2KXwwO3c4Jj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsMCk7bWlkPU1hdGguaW11bChhbDksYmgwKTttaWQ9bWlkK01hdGguaW11bChhaDksYmwwKXwwO2hpPU1hdGguaW11bChhaDksYmgwKTtsbz1sbytNYXRoLmltdWwoYWw4LGJsMSl8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmgxKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDEpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDEpfDA7bG89bG8rTWF0aC5pbXVsKGFsNyxibDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoMil8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmwyKXwwO2hpPWhpK01hdGguaW11bChhaDcsYmgyKXwwO2xvPWxvK01hdGguaW11bChhbDYsYmwzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDMpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsMyl8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoMyl8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsNCl8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmg0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDQpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDQpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDQsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDMsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsMSxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwxLGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDEsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDEsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDAsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMCxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgwLGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWgwLGJoOSl8MDt2YXIgdzk9KGMrbG98MCkrKChtaWQmODE5MSk8PDEzKXwwO2M9KGhpKyhtaWQ+Pj4xMyl8MCkrKHc5Pj4+MjYpfDA7dzkmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmwxKTttaWQ9TWF0aC5pbXVsKGFsOSxiaDEpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDEpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDEpO2xvPWxvK01hdGguaW11bChhbDgsYmwyKXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDIpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsMil8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoMil8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg0KXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoNSl8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsMyxibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWwzLGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDMsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDMsYmg3KXwwO2xvPWxvK01hdGguaW11bChhbDIsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMixiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgyLGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWgyLGJoOCl8MDtsbz1sbytNYXRoLmltdWwoYWwxLGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDEsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMSxibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMSxiaDkpfDA7dmFyIHcxMD0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzEwPj4+MjYpfDA7dzEwJj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsMik7bWlkPU1hdGguaW11bChhbDksYmgyKTttaWQ9bWlkK01hdGguaW11bChhaDksYmwyKXwwO2hpPU1hdGguaW11bChhaDksYmgyKTtsbz1sbytNYXRoLmltdWwoYWw4LGJsMyl8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmgzKXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDMpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDMpfDA7bG89bG8rTWF0aC5pbXVsKGFsNyxibDQpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoNCl8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmw0KXwwO2hpPWhpK01hdGguaW11bChhaDcsYmg0KXwwO2xvPWxvK01hdGguaW11bChhbDYsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoNSl8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDQsYmg3KXwwO2xvPWxvK01hdGguaW11bChhbDMsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoOCl8MDtsbz1sbytNYXRoLmltdWwoYWwyLGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDIsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoMixibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoMixiaDkpfDA7dmFyIHcxMT0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzExPj4+MjYpfDA7dzExJj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsMyk7bWlkPU1hdGguaW11bChhbDksYmgzKTttaWQ9bWlkK01hdGguaW11bChhaDksYmwzKXwwO2hpPU1hdGguaW11bChhaDksYmgzKTtsbz1sbytNYXRoLmltdWwoYWw4LGJsNCl8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmg0KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDQpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDQpfDA7bG89bG8rTWF0aC5pbXVsKGFsNyxibDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoNSl8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmw1KXwwO2hpPWhpK01hdGguaW11bChhaDcsYmg1KXwwO2xvPWxvK01hdGguaW11bChhbDYsYmw2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDYpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsNil8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoNil8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsNCxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw0LGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDQsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDQsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDMsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsMyxiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWgzLGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWgzLGJoOSl8MDt2YXIgdzEyPShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTI+Pj4yNil8MDt3MTImPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw0KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDQpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDQpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDQpO2xvPWxvK01hdGguaW11bChhbDgsYmw1KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDUpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsNSl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoNSl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsNixibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw2LGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDYsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDYsYmg3KXwwO2xvPWxvK01hdGguaW11bChhbDUsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNSxiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg1LGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWg1LGJoOCl8MDtsbz1sbytNYXRoLmltdWwoYWw0LGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDQsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNCxibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNCxiaDkpfDA7dmFyIHcxMz0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzEzPj4+MjYpfDA7dzEzJj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsNSk7bWlkPU1hdGguaW11bChhbDksYmg1KTttaWQ9bWlkK01hdGguaW11bChhaDksYmw1KXwwO2hpPU1hdGguaW11bChhaDksYmg1KTtsbz1sbytNYXRoLmltdWwoYWw4LGJsNil8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmg2KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDYpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDYpfDA7bG89bG8rTWF0aC5pbXVsKGFsNyxibDcpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoNyl8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmw3KXwwO2hpPWhpK01hdGguaW11bChhaDcsYmg3KXwwO2xvPWxvK01hdGguaW11bChhbDYsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoOCl8MDtsbz1sbytNYXRoLmltdWwoYWw1LGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDUsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNSxibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNSxiaDkpfDA7dmFyIHcxND0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzE0Pj4+MjYpfDA7dzE0Jj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsNik7bWlkPU1hdGguaW11bChhbDksYmg2KTttaWQ9bWlkK01hdGguaW11bChhaDksYmw2KXwwO2hpPU1hdGguaW11bChhaDksYmg2KTtsbz1sbytNYXRoLmltdWwoYWw4LGJsNyl8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmg3KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDcpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDcpfDA7bG89bG8rTWF0aC5pbXVsKGFsNyxibDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWw3LGJoOCl8MDttaWQ9bWlkK01hdGguaW11bChhaDcsYmw4KXwwO2hpPWhpK01hdGguaW11bChhaDcsYmg4KXwwO2xvPWxvK01hdGguaW11bChhbDYsYmw5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsNixiaDkpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg2LGJsOSl8MDtoaT1oaStNYXRoLmltdWwoYWg2LGJoOSl8MDt2YXIgdzE1PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTU+Pj4yNil8MDt3MTUmPTY3MTA4ODYzO2xvPU1hdGguaW11bChhbDksYmw3KTttaWQ9TWF0aC5pbXVsKGFsOSxiaDcpO21pZD1taWQrTWF0aC5pbXVsKGFoOSxibDcpfDA7aGk9TWF0aC5pbXVsKGFoOSxiaDcpO2xvPWxvK01hdGguaW11bChhbDgsYmw4KXwwO21pZD1taWQrTWF0aC5pbXVsKGFsOCxiaDgpfDA7bWlkPW1pZCtNYXRoLmltdWwoYWg4LGJsOCl8MDtoaT1oaStNYXRoLmltdWwoYWg4LGJoOCl8MDtsbz1sbytNYXRoLmltdWwoYWw3LGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDcsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoNyxibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoNyxiaDkpfDA7dmFyIHcxNj0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzE2Pj4+MjYpfDA7dzE2Jj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsOCk7bWlkPU1hdGguaW11bChhbDksYmg4KTttaWQ9bWlkK01hdGguaW11bChhaDksYmw4KXwwO2hpPU1hdGguaW11bChhaDksYmg4KTtsbz1sbytNYXRoLmltdWwoYWw4LGJsOSl8MDttaWQ9bWlkK01hdGguaW11bChhbDgsYmg5KXwwO21pZD1taWQrTWF0aC5pbXVsKGFoOCxibDkpfDA7aGk9aGkrTWF0aC5pbXVsKGFoOCxiaDkpfDA7dmFyIHcxNz0oYytsb3wwKSsoKG1pZCY4MTkxKTw8MTMpfDA7Yz0oaGkrKG1pZD4+PjEzKXwwKSsodzE3Pj4+MjYpfDA7dzE3Jj02NzEwODg2Mztsbz1NYXRoLmltdWwoYWw5LGJsOSk7bWlkPU1hdGguaW11bChhbDksYmg5KTttaWQ9bWlkK01hdGguaW11bChhaDksYmw5KXwwO2hpPU1hdGguaW11bChhaDksYmg5KTt2YXIgdzE4PShjK2xvfDApKygobWlkJjgxOTEpPDwxMyl8MDtjPShoaSsobWlkPj4+MTMpfDApKyh3MTg+Pj4yNil8MDt3MTgmPTY3MTA4ODYzO29bMF09dzA7b1sxXT13MTtvWzJdPXcyO29bM109dzM7b1s0XT13NDtvWzVdPXc1O29bNl09dzY7b1s3XT13NztvWzhdPXc4O29bOV09dzk7b1sxMF09dzEwO29bMTFdPXcxMTtvWzEyXT13MTI7b1sxM109dzEzO29bMTRdPXcxNDtvWzE1XT13MTU7b1sxNl09dzE2O29bMTddPXcxNztvWzE4XT13MTg7aWYoYyE9PTApe29bMTldPWM7b3V0Lmxlbmd0aCsrfXJldHVybiBvdXR9O2lmKCFNYXRoLmltdWwpe2NvbWIxME11bFRvPXNtYWxsTXVsVG99ZnVuY3Rpb24gYmlnTXVsVG8oc2VsZixudW0sb3V0KXtvdXQubmVnYXRpdmU9bnVtLm5lZ2F0aXZlXnNlbGYubmVnYXRpdmU7b3V0Lmxlbmd0aD1zZWxmLmxlbmd0aCtudW0ubGVuZ3RoO3ZhciBjYXJyeT0wO3ZhciBobmNhcnJ5PTA7Zm9yKHZhciBrPTA7azxvdXQubGVuZ3RoLTE7aysrKXt2YXIgbmNhcnJ5PWhuY2Fycnk7aG5jYXJyeT0wO3ZhciByd29yZD1jYXJyeSY2NzEwODg2Mzt2YXIgbWF4Sj1NYXRoLm1pbihrLG51bS5sZW5ndGgtMSk7Zm9yKHZhciBqPU1hdGgubWF4KDAsay1zZWxmLmxlbmd0aCsxKTtqPD1tYXhKO2orKyl7dmFyIGk9ay1qO3ZhciBhPXNlbGYud29yZHNbaV18MDt2YXIgYj1udW0ud29yZHNbal18MDt2YXIgcj1hKmI7dmFyIGxvPXImNjcxMDg4NjM7bmNhcnJ5PW5jYXJyeSsoci82NzEwODg2NHwwKXwwO2xvPWxvK3J3b3JkfDA7cndvcmQ9bG8mNjcxMDg4NjM7bmNhcnJ5PW5jYXJyeSsobG8+Pj4yNil8MDtobmNhcnJ5Kz1uY2Fycnk+Pj4yNjtuY2FycnkmPTY3MTA4ODYzfW91dC53b3Jkc1trXT1yd29yZDtjYXJyeT1uY2Fycnk7bmNhcnJ5PWhuY2Fycnl9aWYoY2FycnkhPT0wKXtvdXQud29yZHNba109Y2Fycnl9ZWxzZXtvdXQubGVuZ3RoLS19cmV0dXJuIG91dC5zdHJpcCgpfWZ1bmN0aW9uIGp1bWJvTXVsVG8oc2VsZixudW0sb3V0KXt2YXIgZmZ0bT1uZXcgRkZUTTtyZXR1cm4gZmZ0bS5tdWxwKHNlbGYsbnVtLG91dCl9Qk4ucHJvdG90eXBlLm11bFRvPWZ1bmN0aW9uIG11bFRvKG51bSxvdXQpe3ZhciByZXM7dmFyIGxlbj10aGlzLmxlbmd0aCtudW0ubGVuZ3RoO2lmKHRoaXMubGVuZ3RoPT09MTAmJm51bS5sZW5ndGg9PT0xMCl7cmVzPWNvbWIxME11bFRvKHRoaXMsbnVtLG91dCl9ZWxzZSBpZihsZW48NjMpe3Jlcz1zbWFsbE11bFRvKHRoaXMsbnVtLG91dCl9ZWxzZSBpZihsZW48MTAyNCl7cmVzPWJpZ011bFRvKHRoaXMsbnVtLG91dCl9ZWxzZXtyZXM9anVtYm9NdWxUbyh0aGlzLG51bSxvdXQpfXJldHVybiByZXN9O2Z1bmN0aW9uIEZGVE0oeCx5KXt0aGlzLng9eDt0aGlzLnk9eX1GRlRNLnByb3RvdHlwZS5tYWtlUkJUPWZ1bmN0aW9uIG1ha2VSQlQoTil7dmFyIHQ9bmV3IEFycmF5KE4pO3ZhciBsPUJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pLTE7Zm9yKHZhciBpPTA7aTxOO2krKyl7dFtpXT10aGlzLnJldkJpbihpLGwsTil9cmV0dXJuIHR9O0ZGVE0ucHJvdG90eXBlLnJldkJpbj1mdW5jdGlvbiByZXZCaW4oeCxsLE4pe2lmKHg9PT0wfHx4PT09Ti0xKXJldHVybiB4O3ZhciByYj0wO2Zvcih2YXIgaT0wO2k8bDtpKyspe3JifD0oeCYxKTw8bC1pLTE7eD4+PTF9cmV0dXJuIHJifTtGRlRNLnByb3RvdHlwZS5wZXJtdXRlPWZ1bmN0aW9uIHBlcm11dGUocmJ0LHJ3cyxpd3MscnR3cyxpdHdzLE4pe2Zvcih2YXIgaT0wO2k8TjtpKyspe3J0d3NbaV09cndzW3JidFtpXV07aXR3c1tpXT1pd3NbcmJ0W2ldXX19O0ZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybT1mdW5jdGlvbiB0cmFuc2Zvcm0ocndzLGl3cyxydHdzLGl0d3MsTixyYnQpe3RoaXMucGVybXV0ZShyYnQscndzLGl3cyxydHdzLGl0d3MsTik7Zm9yKHZhciBzPTE7czxOO3M8PD0xKXt2YXIgbD1zPDwxO3ZhciBydHdkZj1NYXRoLmNvcygyKk1hdGguUEkvbCk7dmFyIGl0d2RmPU1hdGguc2luKDIqTWF0aC5QSS9sKTtmb3IodmFyIHA9MDtwPE47cCs9bCl7dmFyIHJ0d2RmXz1ydHdkZjt2YXIgaXR3ZGZfPWl0d2RmO2Zvcih2YXIgaj0wO2o8cztqKyspe3ZhciByZT1ydHdzW3Aral07dmFyIGllPWl0d3NbcCtqXTt2YXIgcm89cnR3c1twK2orc107dmFyIGlvPWl0d3NbcCtqK3NdO3ZhciByeD1ydHdkZl8qcm8taXR3ZGZfKmlvO2lvPXJ0d2RmXyppbytpdHdkZl8qcm87cm89cng7cnR3c1twK2pdPXJlK3JvO2l0d3NbcCtqXT1pZStpbztydHdzW3AraitzXT1yZS1ybztpdHdzW3AraitzXT1pZS1pbztpZihqIT09bCl7cng9cnR3ZGYqcnR3ZGZfLWl0d2RmKml0d2RmXztpdHdkZl89cnR3ZGYqaXR3ZGZfK2l0d2RmKnJ0d2RmXztydHdkZl89cnh9fX19fTtGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYj1mdW5jdGlvbiBndWVzc0xlbjEzYihuLG0pe3ZhciBOPU1hdGgubWF4KG0sbil8MTt2YXIgb2RkPU4mMTt2YXIgaT0wO2ZvcihOPU4vMnwwO047Tj1OPj4+MSl7aSsrfXJldHVybiAxPDxpKzErb2RkfTtGRlRNLnByb3RvdHlwZS5jb25qdWdhdGU9ZnVuY3Rpb24gY29uanVnYXRlKHJ3cyxpd3MsTil7aWYoTjw9MSlyZXR1cm47Zm9yKHZhciBpPTA7aTxOLzI7aSsrKXt2YXIgdD1yd3NbaV07cndzW2ldPXJ3c1tOLWktMV07cndzW04taS0xXT10O3Q9aXdzW2ldO2l3c1tpXT0taXdzW04taS0xXTtpd3NbTi1pLTFdPS10fX07RkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiPWZ1bmN0aW9uIG5vcm1hbGl6ZTEzYih3cyxOKXt2YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPE4vMjtpKyspe3ZhciB3PU1hdGgucm91bmQod3NbMippKzFdL04pKjgxOTIrTWF0aC5yb3VuZCh3c1syKmldL04pK2NhcnJ5O3dzW2ldPXcmNjcxMDg4NjM7aWYodzw2NzEwODg2NCl7Y2Fycnk9MH1lbHNle2NhcnJ5PXcvNjcxMDg4NjR8MH19cmV0dXJuIHdzfTtGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiPWZ1bmN0aW9uIGNvbnZlcnQxM2Iod3MsbGVuLHJ3cyxOKXt2YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPGxlbjtpKyspe2NhcnJ5PWNhcnJ5Kyh3c1tpXXwwKTtyd3NbMippXT1jYXJyeSY4MTkxO2NhcnJ5PWNhcnJ5Pj4+MTM7cndzWzIqaSsxXT1jYXJyeSY4MTkxO2NhcnJ5PWNhcnJ5Pj4+MTN9Zm9yKGk9MipsZW47aTxOOysraSl7cndzW2ldPTB9YXNzZXJ0KGNhcnJ5PT09MCk7YXNzZXJ0KChjYXJyeSZ+ODE5MSk9PT0wKX07RkZUTS5wcm90b3R5cGUuc3R1Yj1mdW5jdGlvbiBzdHViKE4pe3ZhciBwaD1uZXcgQXJyYXkoTik7Zm9yKHZhciBpPTA7aTxOO2krKyl7cGhbaV09MH1yZXR1cm4gcGh9O0ZGVE0ucHJvdG90eXBlLm11bHA9ZnVuY3Rpb24gbXVscCh4LHksb3V0KXt2YXIgTj0yKnRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgseS5sZW5ndGgpO3ZhciByYnQ9dGhpcy5tYWtlUkJUKE4pO3ZhciBfPXRoaXMuc3R1YihOKTt2YXIgcndzPW5ldyBBcnJheShOKTt2YXIgcndzdD1uZXcgQXJyYXkoTik7dmFyIGl3c3Q9bmV3IEFycmF5KE4pO3ZhciBucndzPW5ldyBBcnJheShOKTt2YXIgbnJ3c3Q9bmV3IEFycmF5KE4pO3ZhciBuaXdzdD1uZXcgQXJyYXkoTik7dmFyIHJtd3M9b3V0LndvcmRzO3Jtd3MubGVuZ3RoPU47dGhpcy5jb252ZXJ0MTNiKHgud29yZHMseC5sZW5ndGgscndzLE4pO3RoaXMuY29udmVydDEzYih5LndvcmRzLHkubGVuZ3RoLG5yd3MsTik7dGhpcy50cmFuc2Zvcm0ocndzLF8scndzdCxpd3N0LE4scmJ0KTt0aGlzLnRyYW5zZm9ybShucndzLF8sbnJ3c3Qsbml3c3QsTixyYnQpO2Zvcih2YXIgaT0wO2k8TjtpKyspe3ZhciByeD1yd3N0W2ldKm5yd3N0W2ldLWl3c3RbaV0qbml3c3RbaV07aXdzdFtpXT1yd3N0W2ldKm5pd3N0W2ldK2l3c3RbaV0qbnJ3c3RbaV07cndzdFtpXT1yeH10aGlzLmNvbmp1Z2F0ZShyd3N0LGl3c3QsTik7dGhpcy50cmFuc2Zvcm0ocndzdCxpd3N0LHJtd3MsXyxOLHJidCk7dGhpcy5jb25qdWdhdGUocm13cyxfLE4pO3RoaXMubm9ybWFsaXplMTNiKHJtd3MsTik7b3V0Lm5lZ2F0aXZlPXgubmVnYXRpdmVeeS5uZWdhdGl2ZTtvdXQubGVuZ3RoPXgubGVuZ3RoK3kubGVuZ3RoO3JldHVybiBvdXQuc3RyaXAoKX07Qk4ucHJvdG90eXBlLm11bD1mdW5jdGlvbiBtdWwobnVtKXt2YXIgb3V0PW5ldyBCTihudWxsKTtvdXQud29yZHM9bmV3IEFycmF5KHRoaXMubGVuZ3RoK251bS5sZW5ndGgpO3JldHVybiB0aGlzLm11bFRvKG51bSxvdXQpfTtCTi5wcm90b3R5cGUubXVsZj1mdW5jdGlvbiBtdWxmKG51bSl7dmFyIG91dD1uZXcgQk4obnVsbCk7b3V0LndvcmRzPW5ldyBBcnJheSh0aGlzLmxlbmd0aCtudW0ubGVuZ3RoKTtyZXR1cm4ganVtYm9NdWxUbyh0aGlzLG51bSxvdXQpfTtCTi5wcm90b3R5cGUuaW11bD1mdW5jdGlvbiBpbXVsKG51bSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sdGhpcyl9O0JOLnByb3RvdHlwZS5pbXVsbj1mdW5jdGlvbiBpbXVsbihudW0pe2Fzc2VydCh0eXBlb2YgbnVtPT09XCJudW1iZXJcIik7YXNzZXJ0KG51bTw2NzEwODg2NCk7dmFyIGNhcnJ5PTA7Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciB3PSh0aGlzLndvcmRzW2ldfDApKm51bTt2YXIgbG89KHcmNjcxMDg4NjMpKyhjYXJyeSY2NzEwODg2Myk7Y2Fycnk+Pj0yNjtjYXJyeSs9dy82NzEwODg2NHwwO2NhcnJ5Kz1sbz4+PjI2O3RoaXMud29yZHNbaV09bG8mNjcxMDg4NjN9aWYoY2FycnkhPT0wKXt0aGlzLndvcmRzW2ldPWNhcnJ5O3RoaXMubGVuZ3RoKyt9cmV0dXJuIHRoaXN9O0JOLnByb3RvdHlwZS5tdWxuPWZ1bmN0aW9uIG11bG4obnVtKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSl9O0JOLnByb3RvdHlwZS5zcXI9ZnVuY3Rpb24gc3FyKCl7cmV0dXJuIHRoaXMubXVsKHRoaXMpfTtCTi5wcm90b3R5cGUuaXNxcj1mdW5jdGlvbiBpc3FyKCl7cmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpfTtCTi5wcm90b3R5cGUucG93PWZ1bmN0aW9uIHBvdyhudW0pe3ZhciB3PXRvQml0QXJyYXkobnVtKTtpZih3Lmxlbmd0aD09PTApcmV0dXJuIG5ldyBCTigxKTt2YXIgcmVzPXRoaXM7Zm9yKHZhciBpPTA7aTx3Lmxlbmd0aDtpKysscmVzPXJlcy5zcXIoKSl7aWYod1tpXSE9PTApYnJlYWt9aWYoKytpPHcubGVuZ3RoKXtmb3IodmFyIHE9cmVzLnNxcigpO2k8dy5sZW5ndGg7aSsrLHE9cS5zcXIoKSl7aWYod1tpXT09PTApY29udGludWU7cmVzPXJlcy5tdWwocSl9fXJldHVybiByZXN9O0JOLnByb3RvdHlwZS5pdXNobG49ZnVuY3Rpb24gaXVzaGxuKGJpdHMpe2Fzc2VydCh0eXBlb2YgYml0cz09PVwibnVtYmVyXCImJmJpdHM+PTApO3ZhciByPWJpdHMlMjY7dmFyIHM9KGJpdHMtcikvMjY7dmFyIGNhcnJ5TWFzaz02NzEwODg2Mz4+PjI2LXI8PDI2LXI7dmFyIGk7aWYociE9PTApe3ZhciBjYXJyeT0wO2ZvcihpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciBuZXdDYXJyeT10aGlzLndvcmRzW2ldJmNhcnJ5TWFzazt2YXIgYz0odGhpcy53b3Jkc1tpXXwwKS1uZXdDYXJyeTw8cjt0aGlzLndvcmRzW2ldPWN8Y2Fycnk7Y2Fycnk9bmV3Q2Fycnk+Pj4yNi1yfWlmKGNhcnJ5KXt0aGlzLndvcmRzW2ldPWNhcnJ5O3RoaXMubGVuZ3RoKyt9fWlmKHMhPT0wKXtmb3IoaT10aGlzLmxlbmd0aC0xO2k+PTA7aS0tKXt0aGlzLndvcmRzW2krc109dGhpcy53b3Jkc1tpXX1mb3IoaT0wO2k8cztpKyspe3RoaXMud29yZHNbaV09MH10aGlzLmxlbmd0aCs9c31yZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuaXNobG49ZnVuY3Rpb24gaXNobG4oYml0cyl7YXNzZXJ0KHRoaXMubmVnYXRpdmU9PT0wKTtyZXR1cm4gdGhpcy5pdXNobG4oYml0cyl9O0JOLnByb3RvdHlwZS5pdXNocm49ZnVuY3Rpb24gaXVzaHJuKGJpdHMsaGludCxleHRlbmRlZCl7YXNzZXJ0KHR5cGVvZiBiaXRzPT09XCJudW1iZXJcIiYmYml0cz49MCk7dmFyIGg7aWYoaGludCl7aD0oaGludC1oaW50JTI2KS8yNn1lbHNle2g9MH12YXIgcj1iaXRzJTI2O3ZhciBzPU1hdGgubWluKChiaXRzLXIpLzI2LHRoaXMubGVuZ3RoKTt2YXIgbWFzaz02NzEwODg2M142NzEwODg2Mz4+PnI8PHI7dmFyIG1hc2tlZFdvcmRzPWV4dGVuZGVkO2gtPXM7aD1NYXRoLm1heCgwLGgpO2lmKG1hc2tlZFdvcmRzKXtmb3IodmFyIGk9MDtpPHM7aSsrKXttYXNrZWRXb3Jkcy53b3Jkc1tpXT10aGlzLndvcmRzW2ldfW1hc2tlZFdvcmRzLmxlbmd0aD1zfWlmKHM9PT0wKXt9ZWxzZSBpZih0aGlzLmxlbmd0aD5zKXt0aGlzLmxlbmd0aC09cztmb3IoaT0wO2k8dGhpcy5sZW5ndGg7aSsrKXt0aGlzLndvcmRzW2ldPXRoaXMud29yZHNbaStzXX19ZWxzZXt0aGlzLndvcmRzWzBdPTA7dGhpcy5sZW5ndGg9MX12YXIgY2Fycnk9MDtmb3IoaT10aGlzLmxlbmd0aC0xO2k+PTAmJihjYXJyeSE9PTB8fGk+PWgpO2ktLSl7dmFyIHdvcmQ9dGhpcy53b3Jkc1tpXXwwO3RoaXMud29yZHNbaV09Y2Fycnk8PDI2LXJ8d29yZD4+PnI7Y2Fycnk9d29yZCZtYXNrfWlmKG1hc2tlZFdvcmRzJiZjYXJyeSE9PTApe21hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXT1jYXJyeX1pZih0aGlzLmxlbmd0aD09PTApe3RoaXMud29yZHNbMF09MDt0aGlzLmxlbmd0aD0xfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5pc2hybj1mdW5jdGlvbiBpc2hybihiaXRzLGhpbnQsZXh0ZW5kZWQpe2Fzc2VydCh0aGlzLm5lZ2F0aXZlPT09MCk7cmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsaGludCxleHRlbmRlZCl9O0JOLnByb3RvdHlwZS5zaGxuPWZ1bmN0aW9uIHNobG4oYml0cyl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKX07Qk4ucHJvdG90eXBlLnVzaGxuPWZ1bmN0aW9uIHVzaGxuKGJpdHMpe3JldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpfTtCTi5wcm90b3R5cGUuc2hybj1mdW5jdGlvbiBzaHJuKGJpdHMpe3JldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyl9O0JOLnByb3RvdHlwZS51c2hybj1mdW5jdGlvbiB1c2hybihiaXRzKXtyZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKX07Qk4ucHJvdG90eXBlLnRlc3RuPWZ1bmN0aW9uIHRlc3RuKGJpdCl7YXNzZXJ0KHR5cGVvZiBiaXQ9PT1cIm51bWJlclwiJiZiaXQ+PTApO3ZhciByPWJpdCUyNjt2YXIgcz0oYml0LXIpLzI2O3ZhciBxPTE8PHI7aWYodGhpcy5sZW5ndGg8PXMpcmV0dXJuIGZhbHNlO3ZhciB3PXRoaXMud29yZHNbc107cmV0dXJuISEodyZxKX07Qk4ucHJvdG90eXBlLmltYXNrbj1mdW5jdGlvbiBpbWFza24oYml0cyl7YXNzZXJ0KHR5cGVvZiBiaXRzPT09XCJudW1iZXJcIiYmYml0cz49MCk7dmFyIHI9Yml0cyUyNjt2YXIgcz0oYml0cy1yKS8yNjthc3NlcnQodGhpcy5uZWdhdGl2ZT09PTAsXCJpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnNcIik7aWYodGhpcy5sZW5ndGg8PXMpe3JldHVybiB0aGlzfWlmKHIhPT0wKXtzKyt9dGhpcy5sZW5ndGg9TWF0aC5taW4ocyx0aGlzLmxlbmd0aCk7aWYociE9PTApe3ZhciBtYXNrPTY3MTA4ODYzXjY3MTA4ODYzPj4+cjw8cjt0aGlzLndvcmRzW3RoaXMubGVuZ3RoLTFdJj1tYXNrfXJldHVybiB0aGlzLnN0cmlwKCl9O0JOLnByb3RvdHlwZS5tYXNrbj1mdW5jdGlvbiBtYXNrbihiaXRzKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKX07Qk4ucHJvdG90eXBlLmlhZGRuPWZ1bmN0aW9uIGlhZGRuKG51bSl7YXNzZXJ0KHR5cGVvZiBudW09PT1cIm51bWJlclwiKTthc3NlcnQobnVtPDY3MTA4ODY0KTtpZihudW08MClyZXR1cm4gdGhpcy5pc3VibigtbnVtKTtpZih0aGlzLm5lZ2F0aXZlIT09MCl7aWYodGhpcy5sZW5ndGg9PT0xJiYodGhpcy53b3Jkc1swXXwwKTxudW0pe3RoaXMud29yZHNbMF09bnVtLSh0aGlzLndvcmRzWzBdfDApO3RoaXMubmVnYXRpdmU9MDtyZXR1cm4gdGhpc310aGlzLm5lZ2F0aXZlPTA7dGhpcy5pc3VibihudW0pO3RoaXMubmVnYXRpdmU9MTtyZXR1cm4gdGhpc31yZXR1cm4gdGhpcy5faWFkZG4obnVtKX07Qk4ucHJvdG90eXBlLl9pYWRkbj1mdW5jdGlvbiBfaWFkZG4obnVtKXt0aGlzLndvcmRzWzBdKz1udW07Zm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aCYmdGhpcy53b3Jkc1tpXT49NjcxMDg4NjQ7aSsrKXt0aGlzLndvcmRzW2ldLT02NzEwODg2NDtpZihpPT09dGhpcy5sZW5ndGgtMSl7dGhpcy53b3Jkc1tpKzFdPTF9ZWxzZXt0aGlzLndvcmRzW2krMV0rK319dGhpcy5sZW5ndGg9TWF0aC5tYXgodGhpcy5sZW5ndGgsaSsxKTtyZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmlzdWJuPWZ1bmN0aW9uIGlzdWJuKG51bSl7YXNzZXJ0KHR5cGVvZiBudW09PT1cIm51bWJlclwiKTthc3NlcnQobnVtPDY3MTA4ODY0KTtpZihudW08MClyZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtpZih0aGlzLm5lZ2F0aXZlIT09MCl7dGhpcy5uZWdhdGl2ZT0wO3RoaXMuaWFkZG4obnVtKTt0aGlzLm5lZ2F0aXZlPTE7cmV0dXJuIHRoaXN9dGhpcy53b3Jkc1swXS09bnVtO2lmKHRoaXMubGVuZ3RoPT09MSYmdGhpcy53b3Jkc1swXTwwKXt0aGlzLndvcmRzWzBdPS10aGlzLndvcmRzWzBdO3RoaXMubmVnYXRpdmU9MX1lbHNle2Zvcih2YXIgaT0wO2k8dGhpcy5sZW5ndGgmJnRoaXMud29yZHNbaV08MDtpKyspe3RoaXMud29yZHNbaV0rPTY3MTA4ODY0O3RoaXMud29yZHNbaSsxXS09MX19cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLmFkZG49ZnVuY3Rpb24gYWRkbihudW0pe3JldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKX07Qk4ucHJvdG90eXBlLnN1Ym49ZnVuY3Rpb24gc3VibihudW0pe3JldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKX07Qk4ucHJvdG90eXBlLmlhYnM9ZnVuY3Rpb24gaWFicygpe3RoaXMubmVnYXRpdmU9MDtyZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmFicz1mdW5jdGlvbiBhYnMoKXtyZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKX07Qk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bD1mdW5jdGlvbiBfaXNobG5zdWJtdWwobnVtLG11bCxzaGlmdCl7dmFyIGxlbj1udW0ubGVuZ3RoK3NoaWZ0O3ZhciBpO3RoaXMuX2V4cGFuZChsZW4pO3ZhciB3O3ZhciBjYXJyeT0wO2ZvcihpPTA7aTxudW0ubGVuZ3RoO2krKyl7dz0odGhpcy53b3Jkc1tpK3NoaWZ0XXwwKStjYXJyeTt2YXIgcmlnaHQ9KG51bS53b3Jkc1tpXXwwKSptdWw7dy09cmlnaHQmNjcxMDg4NjM7Y2Fycnk9KHc+PjI2KS0ocmlnaHQvNjcxMDg4NjR8MCk7dGhpcy53b3Jkc1tpK3NoaWZ0XT13JjY3MTA4ODYzfWZvcig7aTx0aGlzLmxlbmd0aC1zaGlmdDtpKyspe3c9KHRoaXMud29yZHNbaStzaGlmdF18MCkrY2Fycnk7Y2Fycnk9dz4+MjY7dGhpcy53b3Jkc1tpK3NoaWZ0XT13JjY3MTA4ODYzfWlmKGNhcnJ5PT09MClyZXR1cm4gdGhpcy5zdHJpcCgpO2Fzc2VydChjYXJyeT09PS0xKTtjYXJyeT0wO2ZvcihpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3c9LSh0aGlzLndvcmRzW2ldfDApK2NhcnJ5O2NhcnJ5PXc+PjI2O3RoaXMud29yZHNbaV09dyY2NzEwODg2M310aGlzLm5lZ2F0aXZlPTE7cmV0dXJuIHRoaXMuc3RyaXAoKX07Qk4ucHJvdG90eXBlLl93b3JkRGl2PWZ1bmN0aW9uIF93b3JkRGl2KG51bSxtb2RlKXt2YXIgc2hpZnQ9dGhpcy5sZW5ndGgtbnVtLmxlbmd0aDt2YXIgYT10aGlzLmNsb25lKCk7dmFyIGI9bnVtO3ZhciBiaGk9Yi53b3Jkc1tiLmxlbmd0aC0xXXwwO3ZhciBiaGlCaXRzPXRoaXMuX2NvdW50Qml0cyhiaGkpO3NoaWZ0PTI2LWJoaUJpdHM7aWYoc2hpZnQhPT0wKXtiPWIudXNobG4oc2hpZnQpO2EuaXVzaGxuKHNoaWZ0KTtiaGk9Yi53b3Jkc1tiLmxlbmd0aC0xXXwwfXZhciBtPWEubGVuZ3RoLWIubGVuZ3RoO3ZhciBxO2lmKG1vZGUhPT1cIm1vZFwiKXtxPW5ldyBCTihudWxsKTtxLmxlbmd0aD1tKzE7cS53b3Jkcz1uZXcgQXJyYXkocS5sZW5ndGgpO2Zvcih2YXIgaT0wO2k8cS5sZW5ndGg7aSsrKXtxLndvcmRzW2ldPTB9fXZhciBkaWZmPWEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwxLG0pO2lmKGRpZmYubmVnYXRpdmU9PT0wKXthPWRpZmY7aWYocSl7cS53b3Jkc1ttXT0xfX1mb3IodmFyIGo9bS0xO2o+PTA7ai0tKXt2YXIgcWo9KGEud29yZHNbYi5sZW5ndGgral18MCkqNjcxMDg4NjQrKGEud29yZHNbYi5sZW5ndGgrai0xXXwwKTtxaj1NYXRoLm1pbihxai9iaGl8MCw2NzEwODg2Myk7YS5faXNobG5zdWJtdWwoYixxaixqKTt3aGlsZShhLm5lZ2F0aXZlIT09MCl7cWotLTthLm5lZ2F0aXZlPTA7YS5faXNobG5zdWJtdWwoYiwxLGopO2lmKCFhLmlzWmVybygpKXthLm5lZ2F0aXZlXj0xfX1pZihxKXtxLndvcmRzW2pdPXFqfX1pZihxKXtxLnN0cmlwKCl9YS5zdHJpcCgpO2lmKG1vZGUhPT1cImRpdlwiJiZzaGlmdCE9PTApe2EuaXVzaHJuKHNoaWZ0KX1yZXR1cm57ZGl2OnF8fG51bGwsbW9kOmF9fTtCTi5wcm90b3R5cGUuZGl2bW9kPWZ1bmN0aW9uIGRpdm1vZChudW0sbW9kZSxwb3NpdGl2ZSl7YXNzZXJ0KCFudW0uaXNaZXJvKCkpO2lmKHRoaXMuaXNaZXJvKCkpe3JldHVybntkaXY6bmV3IEJOKDApLG1vZDpuZXcgQk4oMCl9fXZhciBkaXYsbW9kLHJlcztpZih0aGlzLm5lZ2F0aXZlIT09MCYmbnVtLm5lZ2F0aXZlPT09MCl7cmVzPXRoaXMubmVnKCkuZGl2bW9kKG51bSxtb2RlKTtpZihtb2RlIT09XCJtb2RcIil7ZGl2PXJlcy5kaXYubmVnKCl9aWYobW9kZSE9PVwiZGl2XCIpe21vZD1yZXMubW9kLm5lZygpO2lmKHBvc2l0aXZlJiZtb2QubmVnYXRpdmUhPT0wKXttb2QuaWFkZChudW0pfX1yZXR1cm57ZGl2OmRpdixtb2Q6bW9kfX1pZih0aGlzLm5lZ2F0aXZlPT09MCYmbnVtLm5lZ2F0aXZlIT09MCl7cmVzPXRoaXMuZGl2bW9kKG51bS5uZWcoKSxtb2RlKTtpZihtb2RlIT09XCJtb2RcIil7ZGl2PXJlcy5kaXYubmVnKCl9cmV0dXJue2RpdjpkaXYsbW9kOnJlcy5tb2R9fWlmKCh0aGlzLm5lZ2F0aXZlJm51bS5uZWdhdGl2ZSkhPT0wKXtyZXM9dGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLG1vZGUpO2lmKG1vZGUhPT1cImRpdlwiKXttb2Q9cmVzLm1vZC5uZWcoKTtpZihwb3NpdGl2ZSYmbW9kLm5lZ2F0aXZlIT09MCl7bW9kLmlzdWIobnVtKX19cmV0dXJue2RpdjpyZXMuZGl2LG1vZDptb2R9fWlmKG51bS5sZW5ndGg+dGhpcy5sZW5ndGh8fHRoaXMuY21wKG51bSk8MCl7cmV0dXJue2RpdjpuZXcgQk4oMCksbW9kOnRoaXN9fWlmKG51bS5sZW5ndGg9PT0xKXtpZihtb2RlPT09XCJkaXZcIil7cmV0dXJue2Rpdjp0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxtb2Q6bnVsbH19aWYobW9kZT09PVwibW9kXCIpe3JldHVybntkaXY6bnVsbCxtb2Q6bmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKX19cmV0dXJue2Rpdjp0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxtb2Q6bmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKX19cmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLG1vZGUpfTtCTi5wcm90b3R5cGUuZGl2PWZ1bmN0aW9uIGRpdihudW0pe3JldHVybiB0aGlzLmRpdm1vZChudW0sXCJkaXZcIixmYWxzZSkuZGl2fTtCTi5wcm90b3R5cGUubW9kPWZ1bmN0aW9uIG1vZChudW0pe3JldHVybiB0aGlzLmRpdm1vZChudW0sXCJtb2RcIixmYWxzZSkubW9kfTtCTi5wcm90b3R5cGUudW1vZD1mdW5jdGlvbiB1bW9kKG51bSl7cmV0dXJuIHRoaXMuZGl2bW9kKG51bSxcIm1vZFwiLHRydWUpLm1vZH07Qk4ucHJvdG90eXBlLmRpdlJvdW5kPWZ1bmN0aW9uIGRpdlJvdW5kKG51bSl7dmFyIGRtPXRoaXMuZGl2bW9kKG51bSk7aWYoZG0ubW9kLmlzWmVybygpKXJldHVybiBkbS5kaXY7dmFyIG1vZD1kbS5kaXYubmVnYXRpdmUhPT0wP2RtLm1vZC5pc3ViKG51bSk6ZG0ubW9kO3ZhciBoYWxmPW51bS51c2hybigxKTt2YXIgcjI9bnVtLmFuZGxuKDEpO3ZhciBjbXA9bW9kLmNtcChoYWxmKTtpZihjbXA8MHx8cjI9PT0xJiZjbXA9PT0wKXJldHVybiBkbS5kaXY7cmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSE9PTA/ZG0uZGl2LmlzdWJuKDEpOmRtLmRpdi5pYWRkbigxKX07Qk4ucHJvdG90eXBlLm1vZG49ZnVuY3Rpb24gbW9kbihudW0pe2Fzc2VydChudW08PTY3MTA4ODYzKTt2YXIgcD0oMTw8MjYpJW51bTt2YXIgYWNjPTA7Zm9yKHZhciBpPXRoaXMubGVuZ3RoLTE7aT49MDtpLS0pe2FjYz0ocCphY2MrKHRoaXMud29yZHNbaV18MCkpJW51bX1yZXR1cm4gYWNjfTtCTi5wcm90b3R5cGUuaWRpdm49ZnVuY3Rpb24gaWRpdm4obnVtKXthc3NlcnQobnVtPD02NzEwODg2Myk7dmFyIGNhcnJ5PTA7Zm9yKHZhciBpPXRoaXMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciB3PSh0aGlzLndvcmRzW2ldfDApK2NhcnJ5KjY3MTA4ODY0O3RoaXMud29yZHNbaV09dy9udW18MDtjYXJyeT13JW51bX1yZXR1cm4gdGhpcy5zdHJpcCgpfTtCTi5wcm90b3R5cGUuZGl2bj1mdW5jdGlvbiBkaXZuKG51bSl7cmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pfTtCTi5wcm90b3R5cGUuZWdjZD1mdW5jdGlvbiBlZ2NkKHApe2Fzc2VydChwLm5lZ2F0aXZlPT09MCk7YXNzZXJ0KCFwLmlzWmVybygpKTt2YXIgeD10aGlzO3ZhciB5PXAuY2xvbmUoKTtpZih4Lm5lZ2F0aXZlIT09MCl7eD14LnVtb2QocCl9ZWxzZXt4PXguY2xvbmUoKX12YXIgQT1uZXcgQk4oMSk7dmFyIEI9bmV3IEJOKDApO3ZhciBDPW5ldyBCTigwKTt2YXIgRD1uZXcgQk4oMSk7dmFyIGc9MDt3aGlsZSh4LmlzRXZlbigpJiZ5LmlzRXZlbigpKXt4Lml1c2hybigxKTt5Lml1c2hybigxKTsrK2d9dmFyIHlwPXkuY2xvbmUoKTt2YXIgeHA9eC5jbG9uZSgpO3doaWxlKCF4LmlzWmVybygpKXtmb3IodmFyIGk9MCxpbT0xOyh4LndvcmRzWzBdJmltKT09PTAmJmk8MjY7KytpLGltPDw9MSk7aWYoaT4wKXt4Lml1c2hybihpKTt3aGlsZShpLS0gPjApe2lmKEEuaXNPZGQoKXx8Qi5pc09kZCgpKXtBLmlhZGQoeXApO0IuaXN1Yih4cCl9QS5pdXNocm4oMSk7Qi5pdXNocm4oMSl9fWZvcih2YXIgaj0wLGptPTE7KHkud29yZHNbMF0mam0pPT09MCYmajwyNjsrK2osam08PD0xKTtpZihqPjApe3kuaXVzaHJuKGopO3doaWxlKGotLSA+MCl7aWYoQy5pc09kZCgpfHxELmlzT2RkKCkpe0MuaWFkZCh5cCk7RC5pc3ViKHhwKX1DLml1c2hybigxKTtELml1c2hybigxKX19aWYoeC5jbXAoeSk+PTApe3guaXN1Yih5KTtBLmlzdWIoQyk7Qi5pc3ViKEQpfWVsc2V7eS5pc3ViKHgpO0MuaXN1YihBKTtELmlzdWIoQil9fXJldHVybnthOkMsYjpELGdjZDp5Lml1c2hsbihnKX19O0JOLnByb3RvdHlwZS5faW52bXA9ZnVuY3Rpb24gX2ludm1wKHApe2Fzc2VydChwLm5lZ2F0aXZlPT09MCk7YXNzZXJ0KCFwLmlzWmVybygpKTt2YXIgYT10aGlzO3ZhciBiPXAuY2xvbmUoKTtpZihhLm5lZ2F0aXZlIT09MCl7YT1hLnVtb2QocCl9ZWxzZXthPWEuY2xvbmUoKX12YXIgeDE9bmV3IEJOKDEpO3ZhciB4Mj1uZXcgQk4oMCk7dmFyIGRlbHRhPWIuY2xvbmUoKTt3aGlsZShhLmNtcG4oMSk+MCYmYi5jbXBuKDEpPjApe2Zvcih2YXIgaT0wLGltPTE7KGEud29yZHNbMF0maW0pPT09MCYmaTwyNjsrK2ksaW08PD0xKTtpZihpPjApe2EuaXVzaHJuKGkpO3doaWxlKGktLSA+MCl7aWYoeDEuaXNPZGQoKSl7eDEuaWFkZChkZWx0YSl9eDEuaXVzaHJuKDEpfX1mb3IodmFyIGo9MCxqbT0xOyhiLndvcmRzWzBdJmptKT09PTAmJmo8MjY7KytqLGptPDw9MSk7aWYoaj4wKXtiLml1c2hybihqKTt3aGlsZShqLS0gPjApe2lmKHgyLmlzT2RkKCkpe3gyLmlhZGQoZGVsdGEpfXgyLml1c2hybigxKX19aWYoYS5jbXAoYik+PTApe2EuaXN1YihiKTt4MS5pc3ViKHgyKX1lbHNle2IuaXN1YihhKTt4Mi5pc3ViKHgxKX19dmFyIHJlcztpZihhLmNtcG4oMSk9PT0wKXtyZXM9eDF9ZWxzZXtyZXM9eDJ9aWYocmVzLmNtcG4oMCk8MCl7cmVzLmlhZGQocCl9cmV0dXJuIHJlc307Qk4ucHJvdG90eXBlLmdjZD1mdW5jdGlvbiBnY2QobnVtKXtpZih0aGlzLmlzWmVybygpKXJldHVybiBudW0uYWJzKCk7aWYobnVtLmlzWmVybygpKXJldHVybiB0aGlzLmFicygpO3ZhciBhPXRoaXMuY2xvbmUoKTt2YXIgYj1udW0uY2xvbmUoKTthLm5lZ2F0aXZlPTA7Yi5uZWdhdGl2ZT0wO2Zvcih2YXIgc2hpZnQ9MDthLmlzRXZlbigpJiZiLmlzRXZlbigpO3NoaWZ0Kyspe2EuaXVzaHJuKDEpO2IuaXVzaHJuKDEpfWRve3doaWxlKGEuaXNFdmVuKCkpe2EuaXVzaHJuKDEpfXdoaWxlKGIuaXNFdmVuKCkpe2IuaXVzaHJuKDEpfXZhciByPWEuY21wKGIpO2lmKHI8MCl7dmFyIHQ9YTthPWI7Yj10fWVsc2UgaWYocj09PTB8fGIuY21wbigxKT09PTApe2JyZWFrfWEuaXN1YihiKX13aGlsZSh0cnVlKTtyZXR1cm4gYi5pdXNobG4oc2hpZnQpfTtCTi5wcm90b3R5cGUuaW52bT1mdW5jdGlvbiBpbnZtKG51bSl7cmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pfTtCTi5wcm90b3R5cGUuaXNFdmVuPWZ1bmN0aW9uIGlzRXZlbigpe3JldHVybih0aGlzLndvcmRzWzBdJjEpPT09MH07Qk4ucHJvdG90eXBlLmlzT2RkPWZ1bmN0aW9uIGlzT2RkKCl7cmV0dXJuKHRoaXMud29yZHNbMF0mMSk9PT0xfTtCTi5wcm90b3R5cGUuYW5kbG49ZnVuY3Rpb24gYW5kbG4obnVtKXtyZXR1cm4gdGhpcy53b3Jkc1swXSZudW19O0JOLnByb3RvdHlwZS5iaW5jbj1mdW5jdGlvbiBiaW5jbihiaXQpe2Fzc2VydCh0eXBlb2YgYml0PT09XCJudW1iZXJcIik7dmFyIHI9Yml0JTI2O3ZhciBzPShiaXQtcikvMjY7dmFyIHE9MTw8cjtpZih0aGlzLmxlbmd0aDw9cyl7dGhpcy5fZXhwYW5kKHMrMSk7dGhpcy53b3Jkc1tzXXw9cTtyZXR1cm4gdGhpc312YXIgY2Fycnk9cTtmb3IodmFyIGk9cztjYXJyeSE9PTAmJmk8dGhpcy5sZW5ndGg7aSsrKXt2YXIgdz10aGlzLndvcmRzW2ldfDA7dys9Y2Fycnk7Y2Fycnk9dz4+PjI2O3cmPTY3MTA4ODYzO3RoaXMud29yZHNbaV09d31pZihjYXJyeSE9PTApe3RoaXMud29yZHNbaV09Y2Fycnk7dGhpcy5sZW5ndGgrK31yZXR1cm4gdGhpc307Qk4ucHJvdG90eXBlLmlzWmVybz1mdW5jdGlvbiBpc1plcm8oKXtyZXR1cm4gdGhpcy5sZW5ndGg9PT0xJiZ0aGlzLndvcmRzWzBdPT09MH07Qk4ucHJvdG90eXBlLmNtcG49ZnVuY3Rpb24gY21wbihudW0pe3ZhciBuZWdhdGl2ZT1udW08MDtpZih0aGlzLm5lZ2F0aXZlIT09MCYmIW5lZ2F0aXZlKXJldHVybi0xO2lmKHRoaXMubmVnYXRpdmU9PT0wJiZuZWdhdGl2ZSlyZXR1cm4gMTt0aGlzLnN0cmlwKCk7dmFyIHJlcztpZih0aGlzLmxlbmd0aD4xKXtyZXM9MX1lbHNle2lmKG5lZ2F0aXZlKXtudW09LW51bX1hc3NlcnQobnVtPD02NzEwODg2MyxcIk51bWJlciBpcyB0b28gYmlnXCIpO3ZhciB3PXRoaXMud29yZHNbMF18MDtyZXM9dz09PW51bT8wOnc8bnVtPy0xOjF9aWYodGhpcy5uZWdhdGl2ZSE9PTApcmV0dXJuLXJlc3wwO3JldHVybiByZXN9O0JOLnByb3RvdHlwZS5jbXA9ZnVuY3Rpb24gY21wKG51bSl7aWYodGhpcy5uZWdhdGl2ZSE9PTAmJm51bS5uZWdhdGl2ZT09PTApcmV0dXJuLTE7aWYodGhpcy5uZWdhdGl2ZT09PTAmJm51bS5uZWdhdGl2ZSE9PTApcmV0dXJuIDE7dmFyIHJlcz10aGlzLnVjbXAobnVtKTtpZih0aGlzLm5lZ2F0aXZlIT09MClyZXR1cm4tcmVzfDA7cmV0dXJuIHJlc307Qk4ucHJvdG90eXBlLnVjbXA9ZnVuY3Rpb24gdWNtcChudW0pe2lmKHRoaXMubGVuZ3RoPm51bS5sZW5ndGgpcmV0dXJuIDE7aWYodGhpcy5sZW5ndGg8bnVtLmxlbmd0aClyZXR1cm4tMTt2YXIgcmVzPTA7Zm9yKHZhciBpPXRoaXMubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciBhPXRoaXMud29yZHNbaV18MDt2YXIgYj1udW0ud29yZHNbaV18MDtpZihhPT09Yiljb250aW51ZTtpZihhPGIpe3Jlcz0tMX1lbHNlIGlmKGE+Yil7cmVzPTF9YnJlYWt9cmV0dXJuIHJlc307Qk4ucHJvdG90eXBlLmd0bj1mdW5jdGlvbiBndG4obnVtKXtyZXR1cm4gdGhpcy5jbXBuKG51bSk9PT0xfTtCTi5wcm90b3R5cGUuZ3Q9ZnVuY3Rpb24gZ3QobnVtKXtyZXR1cm4gdGhpcy5jbXAobnVtKT09PTF9O0JOLnByb3RvdHlwZS5ndGVuPWZ1bmN0aW9uIGd0ZW4obnVtKXtyZXR1cm4gdGhpcy5jbXBuKG51bSk+PTB9O0JOLnByb3RvdHlwZS5ndGU9ZnVuY3Rpb24gZ3RlKG51bSl7cmV0dXJuIHRoaXMuY21wKG51bSk+PTB9O0JOLnByb3RvdHlwZS5sdG49ZnVuY3Rpb24gbHRuKG51bSl7cmV0dXJuIHRoaXMuY21wbihudW0pPT09LTF9O0JOLnByb3RvdHlwZS5sdD1mdW5jdGlvbiBsdChudW0pe3JldHVybiB0aGlzLmNtcChudW0pPT09LTF9O0JOLnByb3RvdHlwZS5sdGVuPWZ1bmN0aW9uIGx0ZW4obnVtKXtyZXR1cm4gdGhpcy5jbXBuKG51bSk8PTB9O0JOLnByb3RvdHlwZS5sdGU9ZnVuY3Rpb24gbHRlKG51bSl7cmV0dXJuIHRoaXMuY21wKG51bSk8PTB9O0JOLnByb3RvdHlwZS5lcW49ZnVuY3Rpb24gZXFuKG51bSl7cmV0dXJuIHRoaXMuY21wbihudW0pPT09MH07Qk4ucHJvdG90eXBlLmVxPWZ1bmN0aW9uIGVxKG51bSl7cmV0dXJuIHRoaXMuY21wKG51bSk9PT0wfTtCTi5yZWQ9ZnVuY3Rpb24gcmVkKG51bSl7cmV0dXJuIG5ldyBSZWQobnVtKX07Qk4ucHJvdG90eXBlLnRvUmVkPWZ1bmN0aW9uIHRvUmVkKGN0eCl7YXNzZXJ0KCF0aGlzLnJlZCxcIkFscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHRcIik7YXNzZXJ0KHRoaXMubmVnYXRpdmU9PT0wLFwicmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXNcIik7cmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCl9O0JOLnByb3RvdHlwZS5mcm9tUmVkPWZ1bmN0aW9uIGZyb21SZWQoKXthc3NlcnQodGhpcy5yZWQsXCJmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0XCIpO3JldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKX07Qk4ucHJvdG90eXBlLl9mb3JjZVJlZD1mdW5jdGlvbiBfZm9yY2VSZWQoY3R4KXt0aGlzLnJlZD1jdHg7cmV0dXJuIHRoaXN9O0JOLnByb3RvdHlwZS5mb3JjZVJlZD1mdW5jdGlvbiBmb3JjZVJlZChjdHgpe2Fzc2VydCghdGhpcy5yZWQsXCJBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0XCIpO3JldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpfTtCTi5wcm90b3R5cGUucmVkQWRkPWZ1bmN0aW9uIHJlZEFkZChudW0pe2Fzc2VydCh0aGlzLnJlZCxcInJlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7cmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLG51bSl9O0JOLnByb3RvdHlwZS5yZWRJQWRkPWZ1bmN0aW9uIHJlZElBZGQobnVtKXthc3NlcnQodGhpcy5yZWQsXCJyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTtyZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLG51bSl9O0JOLnByb3RvdHlwZS5yZWRTdWI9ZnVuY3Rpb24gcmVkU3ViKG51bSl7YXNzZXJ0KHRoaXMucmVkLFwicmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTtyZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsbnVtKX07Qk4ucHJvdG90eXBlLnJlZElTdWI9ZnVuY3Rpb24gcmVkSVN1YihudW0pe2Fzc2VydCh0aGlzLnJlZCxcInJlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3JldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsbnVtKX07Qk4ucHJvdG90eXBlLnJlZFNobD1mdW5jdGlvbiByZWRTaGwobnVtKXthc3NlcnQodGhpcy5yZWQsXCJyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3JldHVybiB0aGlzLnJlZC5zaGwodGhpcyxudW0pfTtCTi5wcm90b3R5cGUucmVkTXVsPWZ1bmN0aW9uIHJlZE11bChudW0pe2Fzc2VydCh0aGlzLnJlZCxcInJlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7dGhpcy5yZWQuX3ZlcmlmeTIodGhpcyxudW0pO3JldHVybiB0aGlzLnJlZC5tdWwodGhpcyxudW0pfTtCTi5wcm90b3R5cGUucmVkSU11bD1mdW5jdGlvbiByZWRJTXVsKG51bSl7YXNzZXJ0KHRoaXMucmVkLFwicmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTt0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLG51bSk7cmV0dXJuIHRoaXMucmVkLmltdWwodGhpcyxudW0pfTtCTi5wcm90b3R5cGUucmVkU3FyPWZ1bmN0aW9uIHJlZFNxcigpe2Fzc2VydCh0aGlzLnJlZCxcInJlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7dGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7cmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKX07Qk4ucHJvdG90eXBlLnJlZElTcXI9ZnVuY3Rpb24gcmVkSVNxcigpe2Fzc2VydCh0aGlzLnJlZCxcInJlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3RoaXMucmVkLl92ZXJpZnkxKHRoaXMpO3JldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpfTtCTi5wcm90b3R5cGUucmVkU3FydD1mdW5jdGlvbiByZWRTcXJ0KCl7YXNzZXJ0KHRoaXMucmVkLFwicmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIik7dGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7cmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyl9O0JOLnByb3RvdHlwZS5yZWRJbnZtPWZ1bmN0aW9uIHJlZEludm0oKXthc3NlcnQodGhpcy5yZWQsXCJyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVyc1wiKTt0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtyZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKX07Qk4ucHJvdG90eXBlLnJlZE5lZz1mdW5jdGlvbiByZWROZWcoKXthc3NlcnQodGhpcy5yZWQsXCJyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpO3RoaXMucmVkLl92ZXJpZnkxKHRoaXMpO3JldHVybiB0aGlzLnJlZC5uZWcodGhpcyl9O0JOLnByb3RvdHlwZS5yZWRQb3c9ZnVuY3Rpb24gcmVkUG93KG51bSl7YXNzZXJ0KHRoaXMucmVkJiYhbnVtLnJlZCxcInJlZFBvdyhub3JtYWxOdW0pXCIpO3RoaXMucmVkLl92ZXJpZnkxKHRoaXMpO3JldHVybiB0aGlzLnJlZC5wb3codGhpcyxudW0pfTt2YXIgcHJpbWVzPXtrMjU2Om51bGwscDIyNDpudWxsLHAxOTI6bnVsbCxwMjU1MTk6bnVsbH07ZnVuY3Rpb24gTVByaW1lKG5hbWUscCl7dGhpcy5uYW1lPW5hbWU7dGhpcy5wPW5ldyBCTihwLDE2KTt0aGlzLm49dGhpcy5wLmJpdExlbmd0aCgpO3RoaXMuaz1uZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO3RoaXMudG1wPXRoaXMuX3RtcCgpfU1QcmltZS5wcm90b3R5cGUuX3RtcD1mdW5jdGlvbiBfdG1wKCl7dmFyIHRtcD1uZXcgQk4obnVsbCk7dG1wLndvcmRzPW5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uLzEzKSk7cmV0dXJuIHRtcH07TVByaW1lLnByb3RvdHlwZS5pcmVkdWNlPWZ1bmN0aW9uIGlyZWR1Y2UobnVtKXt2YXIgcj1udW07dmFyIHJsZW47ZG97dGhpcy5zcGxpdChyLHRoaXMudG1wKTtyPXRoaXMuaW11bEsocik7cj1yLmlhZGQodGhpcy50bXApO3JsZW49ci5iaXRMZW5ndGgoKX13aGlsZShybGVuPnRoaXMubik7dmFyIGNtcD1ybGVuPHRoaXMubj8tMTpyLnVjbXAodGhpcy5wKTtpZihjbXA9PT0wKXtyLndvcmRzWzBdPTA7ci5sZW5ndGg9MX1lbHNlIGlmKGNtcD4wKXtyLmlzdWIodGhpcy5wKX1lbHNle2lmKHIuc3RyaXAhPT11bmRlZmluZWQpe3Iuc3RyaXAoKX1lbHNle3IuX3N0cmlwKCl9fXJldHVybiByfTtNUHJpbWUucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uIHNwbGl0KGlucHV0LG91dCl7aW5wdXQuaXVzaHJuKHRoaXMubiwwLG91dCl9O01QcmltZS5wcm90b3R5cGUuaW11bEs9ZnVuY3Rpb24gaW11bEsobnVtKXtyZXR1cm4gbnVtLmltdWwodGhpcy5rKX07ZnVuY3Rpb24gSzI1Nigpe01QcmltZS5jYWxsKHRoaXMsXCJrMjU2XCIsXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZlwiKX1pbmhlcml0cyhLMjU2LE1QcmltZSk7SzI1Ni5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24gc3BsaXQoaW5wdXQsb3V0cHV0KXt2YXIgbWFzaz00MTk0MzAzO3ZhciBvdXRMZW49TWF0aC5taW4oaW5wdXQubGVuZ3RoLDkpO2Zvcih2YXIgaT0wO2k8b3V0TGVuO2krKyl7b3V0cHV0LndvcmRzW2ldPWlucHV0LndvcmRzW2ldfW91dHB1dC5sZW5ndGg9b3V0TGVuO2lmKGlucHV0Lmxlbmd0aDw9OSl7aW5wdXQud29yZHNbMF09MDtpbnB1dC5sZW5ndGg9MTtyZXR1cm59dmFyIHByZXY9aW5wdXQud29yZHNbOV07b3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK109cHJldiZtYXNrO2ZvcihpPTEwO2k8aW5wdXQubGVuZ3RoO2krKyl7dmFyIG5leHQ9aW5wdXQud29yZHNbaV18MDtpbnB1dC53b3Jkc1tpLTEwXT0obmV4dCZtYXNrKTw8NHxwcmV2Pj4+MjI7cHJldj1uZXh0fXByZXY+Pj49MjI7aW5wdXQud29yZHNbaS0xMF09cHJldjtpZihwcmV2PT09MCYmaW5wdXQubGVuZ3RoPjEwKXtpbnB1dC5sZW5ndGgtPTEwfWVsc2V7aW5wdXQubGVuZ3RoLT05fX07SzI1Ni5wcm90b3R5cGUuaW11bEs9ZnVuY3Rpb24gaW11bEsobnVtKXtudW0ud29yZHNbbnVtLmxlbmd0aF09MDtudW0ud29yZHNbbnVtLmxlbmd0aCsxXT0wO251bS5sZW5ndGgrPTI7dmFyIGxvPTA7Zm9yKHZhciBpPTA7aTxudW0ubGVuZ3RoO2krKyl7dmFyIHc9bnVtLndvcmRzW2ldfDA7bG8rPXcqOTc3O251bS53b3Jkc1tpXT1sbyY2NzEwODg2Mztsbz13KjY0Kyhsby82NzEwODg2NHwwKX1pZihudW0ud29yZHNbbnVtLmxlbmd0aC0xXT09PTApe251bS5sZW5ndGgtLTtpZihudW0ud29yZHNbbnVtLmxlbmd0aC0xXT09PTApe251bS5sZW5ndGgtLX19cmV0dXJuIG51bX07ZnVuY3Rpb24gUDIyNCgpe01QcmltZS5jYWxsKHRoaXMsXCJwMjI0XCIsXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMVwiKX1pbmhlcml0cyhQMjI0LE1QcmltZSk7ZnVuY3Rpb24gUDE5Migpe01QcmltZS5jYWxsKHRoaXMsXCJwMTkyXCIsXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZlwiKX1pbmhlcml0cyhQMTkyLE1QcmltZSk7ZnVuY3Rpb24gUDI1NTE5KCl7TVByaW1lLmNhbGwodGhpcyxcIjI1NTE5XCIsXCI3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkXCIpfWluaGVyaXRzKFAyNTUxOSxNUHJpbWUpO1AyNTUxOS5wcm90b3R5cGUuaW11bEs9ZnVuY3Rpb24gaW11bEsobnVtKXt2YXIgY2Fycnk9MDtmb3IodmFyIGk9MDtpPG51bS5sZW5ndGg7aSsrKXt2YXIgaGk9KG51bS53b3Jkc1tpXXwwKSoxOStjYXJyeTt2YXIgbG89aGkmNjcxMDg4NjM7aGk+Pj49MjY7bnVtLndvcmRzW2ldPWxvO2NhcnJ5PWhpfWlmKGNhcnJ5IT09MCl7bnVtLndvcmRzW251bS5sZW5ndGgrK109Y2Fycnl9cmV0dXJuIG51bX07Qk4uX3ByaW1lPWZ1bmN0aW9uIHByaW1lKG5hbWUpe2lmKHByaW1lc1tuYW1lXSlyZXR1cm4gcHJpbWVzW25hbWVdO3ZhciBwcmltZTtpZihuYW1lPT09XCJrMjU2XCIpe3ByaW1lPW5ldyBLMjU2fWVsc2UgaWYobmFtZT09PVwicDIyNFwiKXtwcmltZT1uZXcgUDIyNH1lbHNlIGlmKG5hbWU9PT1cInAxOTJcIil7cHJpbWU9bmV3IFAxOTJ9ZWxzZSBpZihuYW1lPT09XCJwMjU1MTlcIil7cHJpbWU9bmV3IFAyNTUxOX1lbHNle3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gcHJpbWUgXCIrbmFtZSl9cHJpbWVzW25hbWVdPXByaW1lO3JldHVybiBwcmltZX07ZnVuY3Rpb24gUmVkKG0pe2lmKHR5cGVvZiBtPT09XCJzdHJpbmdcIil7dmFyIHByaW1lPUJOLl9wcmltZShtKTt0aGlzLm09cHJpbWUucDt0aGlzLnByaW1lPXByaW1lfWVsc2V7YXNzZXJ0KG0uZ3RuKDEpLFwibW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxXCIpO3RoaXMubT1tO3RoaXMucHJpbWU9bnVsbH19UmVkLnByb3RvdHlwZS5fdmVyaWZ5MT1mdW5jdGlvbiBfdmVyaWZ5MShhKXthc3NlcnQoYS5uZWdhdGl2ZT09PTAsXCJyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlc1wiKTthc3NlcnQoYS5yZWQsXCJyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzXCIpfTtSZWQucHJvdG90eXBlLl92ZXJpZnkyPWZ1bmN0aW9uIF92ZXJpZnkyKGEsYil7YXNzZXJ0KChhLm5lZ2F0aXZlfGIubmVnYXRpdmUpPT09MCxcInJlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzXCIpO2Fzc2VydChhLnJlZCYmYS5yZWQ9PT1iLnJlZCxcInJlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnNcIil9O1JlZC5wcm90b3R5cGUuaW1vZD1mdW5jdGlvbiBpbW9kKGEpe2lmKHRoaXMucHJpbWUpcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7cmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKX07UmVkLnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24gbmVnKGEpe2lmKGEuaXNaZXJvKCkpe3JldHVybiBhLmNsb25lKCl9cmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpfTtSZWQucHJvdG90eXBlLmFkZD1mdW5jdGlvbiBhZGQoYSxiKXt0aGlzLl92ZXJpZnkyKGEsYik7dmFyIHJlcz1hLmFkZChiKTtpZihyZXMuY21wKHRoaXMubSk+PTApe3Jlcy5pc3ViKHRoaXMubSl9cmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyl9O1JlZC5wcm90b3R5cGUuaWFkZD1mdW5jdGlvbiBpYWRkKGEsYil7dGhpcy5fdmVyaWZ5MihhLGIpO3ZhciByZXM9YS5pYWRkKGIpO2lmKHJlcy5jbXAodGhpcy5tKT49MCl7cmVzLmlzdWIodGhpcy5tKX1yZXR1cm4gcmVzfTtSZWQucHJvdG90eXBlLnN1Yj1mdW5jdGlvbiBzdWIoYSxiKXt0aGlzLl92ZXJpZnkyKGEsYik7dmFyIHJlcz1hLnN1YihiKTtpZihyZXMuY21wbigwKTwwKXtyZXMuaWFkZCh0aGlzLm0pfXJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpfTtSZWQucHJvdG90eXBlLmlzdWI9ZnVuY3Rpb24gaXN1YihhLGIpe3RoaXMuX3ZlcmlmeTIoYSxiKTt2YXIgcmVzPWEuaXN1YihiKTtpZihyZXMuY21wbigwKTwwKXtyZXMuaWFkZCh0aGlzLm0pfXJldHVybiByZXN9O1JlZC5wcm90b3R5cGUuc2hsPWZ1bmN0aW9uIHNobChhLG51bSl7dGhpcy5fdmVyaWZ5MShhKTtyZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSl9O1JlZC5wcm90b3R5cGUuaW11bD1mdW5jdGlvbiBpbXVsKGEsYil7dGhpcy5fdmVyaWZ5MihhLGIpO3JldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKX07UmVkLnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24gbXVsKGEsYil7dGhpcy5fdmVyaWZ5MihhLGIpO3JldHVybiB0aGlzLmltb2QoYS5tdWwoYikpfTtSZWQucHJvdG90eXBlLmlzcXI9ZnVuY3Rpb24gaXNxcihhKXtyZXR1cm4gdGhpcy5pbXVsKGEsYS5jbG9uZSgpKX07UmVkLnByb3RvdHlwZS5zcXI9ZnVuY3Rpb24gc3FyKGEpe3JldHVybiB0aGlzLm11bChhLGEpfTtSZWQucHJvdG90eXBlLnNxcnQ9ZnVuY3Rpb24gc3FydChhKXtpZihhLmlzWmVybygpKXJldHVybiBhLmNsb25lKCk7dmFyIG1vZDM9dGhpcy5tLmFuZGxuKDMpO2Fzc2VydChtb2QzJTI9PT0xKTtpZihtb2QzPT09Myl7dmFyIHBvdz10aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO3JldHVybiB0aGlzLnBvdyhhLHBvdyl9dmFyIHE9dGhpcy5tLnN1Ym4oMSk7dmFyIHM9MDt3aGlsZSghcS5pc1plcm8oKSYmcS5hbmRsbigxKT09PTApe3MrKztxLml1c2hybigxKX1hc3NlcnQoIXEuaXNaZXJvKCkpO3ZhciBvbmU9bmV3IEJOKDEpLnRvUmVkKHRoaXMpO3ZhciBuT25lPW9uZS5yZWROZWcoKTt2YXIgbHBvdz10aGlzLm0uc3VibigxKS5pdXNocm4oMSk7dmFyIHo9dGhpcy5tLmJpdExlbmd0aCgpO3o9bmV3IEJOKDIqeip6KS50b1JlZCh0aGlzKTt3aGlsZSh0aGlzLnBvdyh6LGxwb3cpLmNtcChuT25lKSE9PTApe3oucmVkSUFkZChuT25lKX12YXIgYz10aGlzLnBvdyh6LHEpO3ZhciByPXRoaXMucG93KGEscS5hZGRuKDEpLml1c2hybigxKSk7dmFyIHQ9dGhpcy5wb3coYSxxKTt2YXIgbT1zO3doaWxlKHQuY21wKG9uZSkhPT0wKXt2YXIgdG1wPXQ7Zm9yKHZhciBpPTA7dG1wLmNtcChvbmUpIT09MDtpKyspe3RtcD10bXAucmVkU3FyKCl9YXNzZXJ0KGk8bSk7dmFyIGI9dGhpcy5wb3coYyxuZXcgQk4oMSkuaXVzaGxuKG0taS0xKSk7cj1yLnJlZE11bChiKTtjPWIucmVkU3FyKCk7dD10LnJlZE11bChjKTttPWl9cmV0dXJuIHJ9O1JlZC5wcm90b3R5cGUuaW52bT1mdW5jdGlvbiBpbnZtKGEpe3ZhciBpbnY9YS5faW52bXAodGhpcy5tKTtpZihpbnYubmVnYXRpdmUhPT0wKXtpbnYubmVnYXRpdmU9MDtyZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCl9ZWxzZXtyZXR1cm4gdGhpcy5pbW9kKGludil9fTtSZWQucHJvdG90eXBlLnBvdz1mdW5jdGlvbiBwb3coYSxudW0pe2lmKG51bS5pc1plcm8oKSlyZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO2lmKG51bS5jbXBuKDEpPT09MClyZXR1cm4gYS5jbG9uZSgpO3ZhciB3aW5kb3dTaXplPTQ7dmFyIHduZD1uZXcgQXJyYXkoMTw8d2luZG93U2l6ZSk7d25kWzBdPW5ldyBCTigxKS50b1JlZCh0aGlzKTt3bmRbMV09YTtmb3IodmFyIGk9MjtpPHduZC5sZW5ndGg7aSsrKXt3bmRbaV09dGhpcy5tdWwod25kW2ktMV0sYSl9dmFyIHJlcz13bmRbMF07dmFyIGN1cnJlbnQ9MDt2YXIgY3VycmVudExlbj0wO3ZhciBzdGFydD1udW0uYml0TGVuZ3RoKCklMjY7aWYoc3RhcnQ9PT0wKXtzdGFydD0yNn1mb3IoaT1udW0ubGVuZ3RoLTE7aT49MDtpLS0pe3ZhciB3b3JkPW51bS53b3Jkc1tpXTtmb3IodmFyIGo9c3RhcnQtMTtqPj0wO2otLSl7dmFyIGJpdD13b3JkPj5qJjE7aWYocmVzIT09d25kWzBdKXtyZXM9dGhpcy5zcXIocmVzKX1pZihiaXQ9PT0wJiZjdXJyZW50PT09MCl7Y3VycmVudExlbj0wO2NvbnRpbnVlfWN1cnJlbnQ8PD0xO2N1cnJlbnR8PWJpdDtjdXJyZW50TGVuKys7aWYoY3VycmVudExlbiE9PXdpbmRvd1NpemUmJihpIT09MHx8aiE9PTApKWNvbnRpbnVlO3Jlcz10aGlzLm11bChyZXMsd25kW2N1cnJlbnRdKTtjdXJyZW50TGVuPTA7Y3VycmVudD0wfXN0YXJ0PTI2fXJldHVybiByZXN9O1JlZC5wcm90b3R5cGUuY29udmVydFRvPWZ1bmN0aW9uIGNvbnZlcnRUbyhudW0pe3ZhciByPW51bS51bW9kKHRoaXMubSk7cmV0dXJuIHI9PT1udW0/ci5jbG9uZSgpOnJ9O1JlZC5wcm90b3R5cGUuY29udmVydEZyb209ZnVuY3Rpb24gY29udmVydEZyb20obnVtKXt2YXIgcmVzPW51bS5jbG9uZSgpO3Jlcy5yZWQ9bnVsbDtyZXR1cm4gcmVzfTtCTi5tb250PWZ1bmN0aW9uIG1vbnQobnVtKXtyZXR1cm4gbmV3IE1vbnQobnVtKX07ZnVuY3Rpb24gTW9udChtKXtSZWQuY2FsbCh0aGlzLG0pO3RoaXMuc2hpZnQ9dGhpcy5tLmJpdExlbmd0aCgpO2lmKHRoaXMuc2hpZnQlMjYhPT0wKXt0aGlzLnNoaWZ0Kz0yNi10aGlzLnNoaWZ0JTI2fXRoaXMucj1uZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO3RoaXMucjI9dGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7dGhpcy5yaW52PXRoaXMuci5faW52bXAodGhpcy5tKTt0aGlzLm1pbnY9dGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO3RoaXMubWludj10aGlzLm1pbnYudW1vZCh0aGlzLnIpO3RoaXMubWludj10aGlzLnIuc3ViKHRoaXMubWludil9aW5oZXJpdHMoTW9udCxSZWQpO01vbnQucHJvdG90eXBlLmNvbnZlcnRUbz1mdW5jdGlvbiBjb252ZXJ0VG8obnVtKXtyZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSl9O01vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tPWZ1bmN0aW9uIGNvbnZlcnRGcm9tKG51bSl7dmFyIHI9dGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7ci5yZWQ9bnVsbDtyZXR1cm4gcn07TW9udC5wcm90b3R5cGUuaW11bD1mdW5jdGlvbiBpbXVsKGEsYil7aWYoYS5pc1plcm8oKXx8Yi5pc1plcm8oKSl7YS53b3Jkc1swXT0wO2EubGVuZ3RoPTE7cmV0dXJuIGF9dmFyIHQ9YS5pbXVsKGIpO3ZhciBjPXQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO3ZhciB1PXQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7dmFyIHJlcz11O2lmKHUuY21wKHRoaXMubSk+PTApe3Jlcz11LmlzdWIodGhpcy5tKX1lbHNlIGlmKHUuY21wbigwKTwwKXtyZXM9dS5pYWRkKHRoaXMubSl9cmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyl9O01vbnQucHJvdG90eXBlLm11bD1mdW5jdGlvbiBtdWwoYSxiKXtpZihhLmlzWmVybygpfHxiLmlzWmVybygpKXJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO3ZhciB0PWEubXVsKGIpO3ZhciBjPXQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO3ZhciB1PXQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7dmFyIHJlcz11O2lmKHUuY21wKHRoaXMubSk+PTApe3Jlcz11LmlzdWIodGhpcy5tKX1lbHNlIGlmKHUuY21wbigwKTwwKXtyZXM9dS5pYWRkKHRoaXMubSl9cmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyl9O01vbnQucHJvdG90eXBlLmludm09ZnVuY3Rpb24gaW52bShhKXt2YXIgcmVzPXRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7cmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyl9fSkoXCJvYmplY3RcIj09PVwidW5kZWZpbmVkXCJ8fG1vZHVsZSxjb21tb25qc0dsb2JhbCl9KTtjb25zdCB2ZXJzaW9uPVwibG9nZ2VyLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7bGV0IF9wZXJtYW5lbnRDZW5zb3JFcnJvcnM9ZmFsc2U7bGV0IF9jZW5zb3JFcnJvcnM9ZmFsc2U7Y29uc3QgTG9nTGV2ZWxzPXtkZWJ1ZzoxLGRlZmF1bHQ6MixpbmZvOjIsd2FybmluZzozLGVycm9yOjQsb2ZmOjV9O2xldCBfbG9nTGV2ZWw9TG9nTGV2ZWxzW1wiZGVmYXVsdFwiXTtsZXQgX2dsb2JhbExvZ2dlcj1udWxsO2Z1bmN0aW9uIF9jaGVja05vcm1hbGl6ZSgpe3RyeXtjb25zdCBtaXNzaW5nPVtdO1tcIk5GRFwiLFwiTkZDXCIsXCJORktEXCIsXCJORktDXCJdLmZvckVhY2goZm9ybT0+e3RyeXtpZihcInRlc3RcIi5ub3JtYWxpemUoZm9ybSkhPT1cInRlc3RcIil7dGhyb3cgbmV3IEVycm9yKFwiYmFkIG5vcm1hbGl6ZVwiKX19Y2F0Y2goZXJyb3Ipe21pc3NpbmcucHVzaChmb3JtKX19KTtpZihtaXNzaW5nLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBcIittaXNzaW5nLmpvaW4oXCIsIFwiKSl9aWYoU3RyaW5nLmZyb21DaGFyQ29kZSgyMzMpLm5vcm1hbGl6ZShcIk5GRFwiKSE9PVN0cmluZy5mcm9tQ2hhckNvZGUoMTAxLDc2OSkpe3Rocm93IG5ldyBFcnJvcihcImJyb2tlbiBpbXBsZW1lbnRhdGlvblwiKX19Y2F0Y2goZXJyb3Ipe3JldHVybiBlcnJvci5tZXNzYWdlfXJldHVybiBudWxsfWNvbnN0IF9ub3JtYWxpemVFcnJvcj1fY2hlY2tOb3JtYWxpemUoKTt2YXIgTG9nTGV2ZWw7KGZ1bmN0aW9uKExvZ0xldmVsKXtMb2dMZXZlbFtcIkRFQlVHXCJdPVwiREVCVUdcIjtMb2dMZXZlbFtcIklORk9cIl09XCJJTkZPXCI7TG9nTGV2ZWxbXCJXQVJOSU5HXCJdPVwiV0FSTklOR1wiO0xvZ0xldmVsW1wiRVJST1JcIl09XCJFUlJPUlwiO0xvZ0xldmVsW1wiT0ZGXCJdPVwiT0ZGXCJ9KShMb2dMZXZlbHx8KExvZ0xldmVsPXt9KSk7dmFyIEVycm9yQ29kZTsoZnVuY3Rpb24oRXJyb3JDb2RlKXtFcnJvckNvZGVbXCJVTktOT1dOX0VSUk9SXCJdPVwiVU5LTk9XTl9FUlJPUlwiO0Vycm9yQ29kZVtcIk5PVF9JTVBMRU1FTlRFRFwiXT1cIk5PVF9JTVBMRU1FTlRFRFwiO0Vycm9yQ29kZVtcIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiXT1cIlVOU1VQUE9SVEVEX09QRVJBVElPTlwiO0Vycm9yQ29kZVtcIk5FVFdPUktfRVJST1JcIl09XCJORVRXT1JLX0VSUk9SXCI7RXJyb3JDb2RlW1wiU0VSVkVSX0VSUk9SXCJdPVwiU0VSVkVSX0VSUk9SXCI7RXJyb3JDb2RlW1wiVElNRU9VVFwiXT1cIlRJTUVPVVRcIjtFcnJvckNvZGVbXCJCVUZGRVJfT1ZFUlJVTlwiXT1cIkJVRkZFUl9PVkVSUlVOXCI7RXJyb3JDb2RlW1wiTlVNRVJJQ19GQVVMVFwiXT1cIk5VTUVSSUNfRkFVTFRcIjtFcnJvckNvZGVbXCJNSVNTSU5HX05FV1wiXT1cIk1JU1NJTkdfTkVXXCI7RXJyb3JDb2RlW1wiSU5WQUxJRF9BUkdVTUVOVFwiXT1cIklOVkFMSURfQVJHVU1FTlRcIjtFcnJvckNvZGVbXCJNSVNTSU5HX0FSR1VNRU5UXCJdPVwiTUlTU0lOR19BUkdVTUVOVFwiO0Vycm9yQ29kZVtcIlVORVhQRUNURURfQVJHVU1FTlRcIl09XCJVTkVYUEVDVEVEX0FSR1VNRU5UXCI7RXJyb3JDb2RlW1wiQ0FMTF9FWENFUFRJT05cIl09XCJDQUxMX0VYQ0VQVElPTlwiO0Vycm9yQ29kZVtcIklOU1VGRklDSUVOVF9GVU5EU1wiXT1cIklOU1VGRklDSUVOVF9GVU5EU1wiO0Vycm9yQ29kZVtcIk5PTkNFX0VYUElSRURcIl09XCJOT05DRV9FWFBJUkVEXCI7RXJyb3JDb2RlW1wiUkVQTEFDRU1FTlRfVU5ERVJQUklDRURcIl09XCJSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRFwiO0Vycm9yQ29kZVtcIlVOUFJFRElDVEFCTEVfR0FTX0xJTUlUXCJdPVwiVU5QUkVESUNUQUJMRV9HQVNfTElNSVRcIn0pKEVycm9yQ29kZXx8KEVycm9yQ29kZT17fSkpO2NsYXNzIExvZ2dlcntjb25zdHJ1Y3Rvcih2ZXJzaW9uKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInZlcnNpb25cIix7ZW51bWVyYWJsZTp0cnVlLHZhbHVlOnZlcnNpb24sd3JpdGFibGU6ZmFsc2V9KX1fbG9nKGxvZ0xldmVsLGFyZ3Mpe2NvbnN0IGxldmVsPWxvZ0xldmVsLnRvTG93ZXJDYXNlKCk7aWYoTG9nTGV2ZWxzW2xldmVsXT09bnVsbCl7dGhpcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxvZyBsZXZlbCBuYW1lXCIsXCJsb2dMZXZlbFwiLGxvZ0xldmVsKX1pZihfbG9nTGV2ZWw+TG9nTGV2ZWxzW2xldmVsXSl7cmV0dXJufWNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJncyl9ZGVidWcoLi4uYXJncyl7dGhpcy5fbG9nKExvZ2dlci5sZXZlbHMuREVCVUcsYXJncyl9aW5mbyguLi5hcmdzKXt0aGlzLl9sb2coTG9nZ2VyLmxldmVscy5JTkZPLGFyZ3MpfXdhcm4oLi4uYXJncyl7dGhpcy5fbG9nKExvZ2dlci5sZXZlbHMuV0FSTklORyxhcmdzKX1tYWtlRXJyb3IobWVzc2FnZSxjb2RlLHBhcmFtcyl7aWYoX2NlbnNvckVycm9ycyl7cmV0dXJuIHRoaXMubWFrZUVycm9yKFwiY2Vuc29yZWQgZXJyb3JcIixjb2RlLHt9KX1pZighY29kZSl7Y29kZT1Mb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1J9aWYoIXBhcmFtcyl7cGFyYW1zPXt9fWNvbnN0IG1lc3NhZ2VEZXRhaWxzPVtdO09iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXk9Pnt0cnl7bWVzc2FnZURldGFpbHMucHVzaChrZXkrXCI9XCIrSlNPTi5zdHJpbmdpZnkocGFyYW1zW2tleV0pKX1jYXRjaChlcnJvcil7bWVzc2FnZURldGFpbHMucHVzaChrZXkrXCI9XCIrSlNPTi5zdHJpbmdpZnkocGFyYW1zW2tleV0udG9TdHJpbmcoKSkpfX0pO21lc3NhZ2VEZXRhaWxzLnB1c2goYGNvZGU9JHtjb2RlfWApO21lc3NhZ2VEZXRhaWxzLnB1c2goYHZlcnNpb249JHt0aGlzLnZlcnNpb259YCk7Y29uc3QgcmVhc29uPW1lc3NhZ2U7aWYobWVzc2FnZURldGFpbHMubGVuZ3RoKXttZXNzYWdlKz1cIiAoXCIrbWVzc2FnZURldGFpbHMuam9pbihcIiwgXCIpK1wiKVwifWNvbnN0IGVycm9yPW5ldyBFcnJvcihtZXNzYWdlKTtlcnJvci5yZWFzb249cmVhc29uO2Vycm9yLmNvZGU9Y29kZTtPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtlcnJvcltrZXldPXBhcmFtc1trZXldfSk7cmV0dXJuIGVycm9yfXRocm93RXJyb3IobWVzc2FnZSxjb2RlLHBhcmFtcyl7dGhyb3cgdGhpcy5tYWtlRXJyb3IobWVzc2FnZSxjb2RlLHBhcmFtcyl9dGhyb3dBcmd1bWVudEVycm9yKG1lc3NhZ2UsbmFtZSx2YWx1ZSl7cmV0dXJuIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6bmFtZSx2YWx1ZTp2YWx1ZX0pfWFzc2VydChjb25kaXRpb24sbWVzc2FnZSxjb2RlLHBhcmFtcyl7aWYoISFjb25kaXRpb24pe3JldHVybn10aGlzLnRocm93RXJyb3IobWVzc2FnZSxjb2RlLHBhcmFtcyl9YXNzZXJ0QXJndW1lbnQoY29uZGl0aW9uLG1lc3NhZ2UsbmFtZSx2YWx1ZSl7aWYoISFjb25kaXRpb24pe3JldHVybn10aGlzLnRocm93QXJndW1lbnRFcnJvcihtZXNzYWdlLG5hbWUsdmFsdWUpfWNoZWNrTm9ybWFsaXplKG1lc3NhZ2Upe2lmKG1lc3NhZ2U9PW51bGwpe21lc3NhZ2U9XCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCJ9aWYoX25vcm1hbGl6ZUVycm9yKXt0aGlzLnRocm93RXJyb3IoXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIlN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCIsZm9ybTpfbm9ybWFsaXplRXJyb3J9KX19Y2hlY2tTYWZlVWludDUzKHZhbHVlLG1lc3NhZ2Upe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCIpe3JldHVybn1pZihtZXNzYWdlPT1udWxsKXttZXNzYWdlPVwidmFsdWUgbm90IHNhZmVcIn1pZih2YWx1ZTwwfHx2YWx1ZT49OTAwNzE5OTI1NDc0MDk5MSl7dGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULHtvcGVyYXRpb246XCJjaGVja1NhZmVJbnRlZ2VyXCIsZmF1bHQ6XCJvdXQtb2Ytc2FmZS1yYW5nZVwiLHZhbHVlOnZhbHVlfSl9aWYodmFsdWUlMSl7dGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULHtvcGVyYXRpb246XCJjaGVja1NhZmVJbnRlZ2VyXCIsZmF1bHQ6XCJub24taW50ZWdlclwiLHZhbHVlOnZhbHVlfSl9fWNoZWNrQXJndW1lbnRDb3VudChjb3VudCxleHBlY3RlZENvdW50LG1lc3NhZ2Upe2lmKG1lc3NhZ2Upe21lc3NhZ2U9XCI6IFwiK21lc3NhZ2V9ZWxzZXttZXNzYWdlPVwiXCJ9aWYoY291bnQ8ZXhwZWN0ZWRDb3VudCl7dGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBhcmd1bWVudFwiK21lc3NhZ2UsTG9nZ2VyLmVycm9ycy5NSVNTSU5HX0FSR1VNRU5ULHtjb3VudDpjb3VudCxleHBlY3RlZENvdW50OmV4cGVjdGVkQ291bnR9KX1pZihjb3VudD5leHBlY3RlZENvdW50KXt0aGlzLnRocm93RXJyb3IoXCJ0b28gbWFueSBhcmd1bWVudHNcIittZXNzYWdlLExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCx7Y291bnQ6Y291bnQsZXhwZWN0ZWRDb3VudDpleHBlY3RlZENvdW50fSl9fWNoZWNrTmV3KHRhcmdldCxraW5kKXtpZih0YXJnZXQ9PT1PYmplY3R8fHRhcmdldD09bnVsbCl7dGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIixMb2dnZXIuZXJyb3JzLk1JU1NJTkdfTkVXLHtuYW1lOmtpbmQubmFtZX0pfX1jaGVja0Fic3RyYWN0KHRhcmdldCxraW5kKXtpZih0YXJnZXQ9PT1raW5kKXt0aGlzLnRocm93RXJyb3IoXCJjYW5ub3QgaW5zdGFudGlhdGUgYWJzdHJhY3QgY2xhc3MgXCIrSlNPTi5zdHJpbmdpZnkoa2luZC5uYW1lKStcIiBkaXJlY3RseTsgdXNlIGEgc3ViLWNsYXNzXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se25hbWU6dGFyZ2V0Lm5hbWUsb3BlcmF0aW9uOlwibmV3XCJ9KX1lbHNlIGlmKHRhcmdldD09PU9iamVjdHx8dGFyZ2V0PT1udWxsKXt0aGlzLnRocm93RXJyb3IoXCJtaXNzaW5nIG5ld1wiLExvZ2dlci5lcnJvcnMuTUlTU0lOR19ORVcse25hbWU6a2luZC5uYW1lfSl9fXN0YXRpYyBnbG9iYWxMb2dnZXIoKXtpZighX2dsb2JhbExvZ2dlcil7X2dsb2JhbExvZ2dlcj1uZXcgTG9nZ2VyKHZlcnNpb24pfXJldHVybiBfZ2xvYmFsTG9nZ2VyfXN0YXRpYyBzZXRDZW5zb3JzaGlwKGNlbnNvcnNoaXAscGVybWFuZW50KXtpZighY2Vuc29yc2hpcCYmcGVybWFuZW50KXt0aGlzLmdsb2JhbExvZ2dlcigpLnRocm93RXJyb3IoXCJjYW5ub3QgcGVybWFuZW50bHkgZGlzYWJsZSBjZW5zb3JzaGlwXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNldENlbnNvcnNoaXBcIn0pfWlmKF9wZXJtYW5lbnRDZW5zb3JFcnJvcnMpe2lmKCFjZW5zb3JzaGlwKXtyZXR1cm59dGhpcy5nbG9iYWxMb2dnZXIoKS50aHJvd0Vycm9yKFwiZXJyb3IgY2Vuc29yc2hpcCBwZXJtYW5lbnRcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2V0Q2Vuc29yc2hpcFwifSl9X2NlbnNvckVycm9ycz0hIWNlbnNvcnNoaXA7X3Blcm1hbmVudENlbnNvckVycm9ycz0hIXBlcm1hbmVudH1zdGF0aWMgc2V0TG9nTGV2ZWwobG9nTGV2ZWwpe2NvbnN0IGxldmVsPUxvZ0xldmVsc1tsb2dMZXZlbC50b0xvd2VyQ2FzZSgpXTtpZihsZXZlbD09bnVsbCl7TG9nZ2VyLmdsb2JhbExvZ2dlcigpLndhcm4oXCJpbnZhbGlkIGxvZyBsZXZlbCAtIFwiK2xvZ0xldmVsKTtyZXR1cm59X2xvZ0xldmVsPWxldmVsfXN0YXRpYyBmcm9tKHZlcnNpb24pe3JldHVybiBuZXcgTG9nZ2VyKHZlcnNpb24pfX1Mb2dnZXIuZXJyb3JzPUVycm9yQ29kZTtMb2dnZXIubGV2ZWxzPUxvZ0xldmVsO2NvbnN0IHZlcnNpb24kMT1cImJ5dGVzLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyPW5ldyBMb2dnZXIodmVyc2lvbiQxKTtmdW5jdGlvbiBpc0hleGFibGUodmFsdWUpe3JldHVybiEhdmFsdWUudG9IZXhTdHJpbmd9ZnVuY3Rpb24gYWRkU2xpY2UoYXJyYXkpe2lmKGFycmF5LnNsaWNlKXtyZXR1cm4gYXJyYXl9YXJyYXkuc2xpY2U9ZnVuY3Rpb24oKXtjb25zdCBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhcnJheSxhcmdzKSkpfTtyZXR1cm4gYXJyYXl9ZnVuY3Rpb24gaXNCeXRlc0xpa2UodmFsdWUpe3JldHVybiBpc0hleFN0cmluZyh2YWx1ZSkmJiEodmFsdWUubGVuZ3RoJTIpfHxpc0J5dGVzKHZhbHVlKX1mdW5jdGlvbiBpc0J5dGVzKHZhbHVlKXtpZih2YWx1ZT09bnVsbCl7cmV0dXJuIGZhbHNlfWlmKHZhbHVlLmNvbnN0cnVjdG9yPT09VWludDhBcnJheSl7cmV0dXJuIHRydWV9aWYodHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIil7cmV0dXJuIGZhbHNlfWlmKHZhbHVlLmxlbmd0aD09bnVsbCl7cmV0dXJuIGZhbHNlfWZvcihsZXQgaT0wO2k8dmFsdWUubGVuZ3RoO2krKyl7Y29uc3Qgdj12YWx1ZVtpXTtpZih0eXBlb2YgdiE9PVwibnVtYmVyXCJ8fHY8MHx8dj49MjU2fHx2JTEpe3JldHVybiBmYWxzZX19cmV0dXJuIHRydWV9ZnVuY3Rpb24gYXJyYXlpZnkodmFsdWUsb3B0aW9ucyl7aWYoIW9wdGlvbnMpe29wdGlvbnM9e319aWYodHlwZW9mIHZhbHVlPT09XCJudW1iZXJcIil7bG9nZ2VyLmNoZWNrU2FmZVVpbnQ1Myh2YWx1ZSxcImludmFsaWQgYXJyYXlpZnkgdmFsdWVcIik7Y29uc3QgcmVzdWx0PVtdO3doaWxlKHZhbHVlKXtyZXN1bHQudW5zaGlmdCh2YWx1ZSYyNTUpO3ZhbHVlPXBhcnNlSW50KFN0cmluZyh2YWx1ZS8yNTYpKX1pZihyZXN1bHQubGVuZ3RoPT09MCl7cmVzdWx0LnB1c2goMCl9cmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHJlc3VsdCkpfWlmKG9wdGlvbnMuYWxsb3dNaXNzaW5nUHJlZml4JiZ0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiJiZ2YWx1ZS5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7dmFsdWU9XCIweFwiK3ZhbHVlfWlmKGlzSGV4YWJsZSh2YWx1ZSkpe3ZhbHVlPXZhbHVlLnRvSGV4U3RyaW5nKCl9aWYoaXNIZXhTdHJpbmcodmFsdWUpKXtsZXQgaGV4PXZhbHVlLnN1YnN0cmluZygyKTtpZihoZXgubGVuZ3RoJTIpe2lmKG9wdGlvbnMuaGV4UGFkPT09XCJsZWZ0XCIpe2hleD1cIjB4MFwiK2hleC5zdWJzdHJpbmcoMil9ZWxzZSBpZihvcHRpb25zLmhleFBhZD09PVwicmlnaHRcIil7aGV4Kz1cIjBcIn1lbHNle2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJoZXggZGF0YSBpcyBvZGQtbGVuZ3RoXCIsXCJ2YWx1ZVwiLHZhbHVlKX19Y29uc3QgcmVzdWx0PVtdO2ZvcihsZXQgaT0wO2k8aGV4Lmxlbmd0aDtpKz0yKXtyZXN1bHQucHVzaChwYXJzZUludChoZXguc3Vic3RyaW5nKGksaSsyKSwxNikpfXJldHVybiBhZGRTbGljZShuZXcgVWludDhBcnJheShyZXN1bHQpKX1pZihpc0J5dGVzKHZhbHVlKSl7cmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHZhbHVlKSl9cmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFycmF5aWZ5IHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1mdW5jdGlvbiBjb25jYXQoaXRlbXMpe2NvbnN0IG9iamVjdHM9aXRlbXMubWFwKGl0ZW09PmFycmF5aWZ5KGl0ZW0pKTtjb25zdCBsZW5ndGg9b2JqZWN0cy5yZWR1Y2UoKGFjY3VtLGl0ZW0pPT5hY2N1bStpdGVtLmxlbmd0aCwwKTtjb25zdCByZXN1bHQ9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtvYmplY3RzLnJlZHVjZSgob2Zmc2V0LG9iamVjdCk9PntyZXN1bHQuc2V0KG9iamVjdCxvZmZzZXQpO3JldHVybiBvZmZzZXQrb2JqZWN0Lmxlbmd0aH0sMCk7cmV0dXJuIGFkZFNsaWNlKHJlc3VsdCl9ZnVuY3Rpb24gc3RyaXBaZXJvcyh2YWx1ZSl7bGV0IHJlc3VsdD1hcnJheWlmeSh2YWx1ZSk7aWYocmVzdWx0Lmxlbmd0aD09PTApe3JldHVybiByZXN1bHR9bGV0IHN0YXJ0PTA7d2hpbGUoc3RhcnQ8cmVzdWx0Lmxlbmd0aCYmcmVzdWx0W3N0YXJ0XT09PTApe3N0YXJ0Kyt9aWYoc3RhcnQpe3Jlc3VsdD1yZXN1bHQuc2xpY2Uoc3RhcnQpfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gemVyb1BhZCh2YWx1ZSxsZW5ndGgpe3ZhbHVlPWFycmF5aWZ5KHZhbHVlKTtpZih2YWx1ZS5sZW5ndGg+bGVuZ3RoKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidmFsdWUgb3V0IG9mIHJhbmdlXCIsXCJ2YWx1ZVwiLGFyZ3VtZW50c1swXSl9Y29uc3QgcmVzdWx0PW5ldyBVaW50OEFycmF5KGxlbmd0aCk7cmVzdWx0LnNldCh2YWx1ZSxsZW5ndGgtdmFsdWUubGVuZ3RoKTtyZXR1cm4gYWRkU2xpY2UocmVzdWx0KX1mdW5jdGlvbiBpc0hleFN0cmluZyh2YWx1ZSxsZW5ndGgpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCJ8fCF2YWx1ZS5tYXRjaCgvXjB4WzAtOUEtRmEtZl0qJC8pKXtyZXR1cm4gZmFsc2V9aWYobGVuZ3RoJiZ2YWx1ZS5sZW5ndGghPT0yKzIqbGVuZ3RoKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9Y29uc3QgSGV4Q2hhcmFjdGVycz1cIjAxMjM0NTY3ODlhYmNkZWZcIjtmdW5jdGlvbiBoZXhsaWZ5KHZhbHVlLG9wdGlvbnMpe2lmKCFvcHRpb25zKXtvcHRpb25zPXt9fWlmKHR5cGVvZiB2YWx1ZT09PVwibnVtYmVyXCIpe2xvZ2dlci5jaGVja1NhZmVVaW50NTModmFsdWUsXCJpbnZhbGlkIGhleGxpZnkgdmFsdWVcIik7bGV0IGhleD1cIlwiO3doaWxlKHZhbHVlKXtoZXg9SGV4Q2hhcmFjdGVyc1t2YWx1ZSYxNV0raGV4O3ZhbHVlPU1hdGguZmxvb3IodmFsdWUvMTYpfWlmKGhleC5sZW5ndGgpe2lmKGhleC5sZW5ndGglMil7aGV4PVwiMFwiK2hleH1yZXR1cm5cIjB4XCIraGV4fXJldHVyblwiMHgwMFwifWlmKG9wdGlvbnMuYWxsb3dNaXNzaW5nUHJlZml4JiZ0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiJiZ2YWx1ZS5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7dmFsdWU9XCIweFwiK3ZhbHVlfWlmKGlzSGV4YWJsZSh2YWx1ZSkpe3JldHVybiB2YWx1ZS50b0hleFN0cmluZygpfWlmKGlzSGV4U3RyaW5nKHZhbHVlKSl7aWYodmFsdWUubGVuZ3RoJTIpe2lmKG9wdGlvbnMuaGV4UGFkPT09XCJsZWZ0XCIpe3ZhbHVlPVwiMHgwXCIrdmFsdWUuc3Vic3RyaW5nKDIpfWVsc2UgaWYob3B0aW9ucy5oZXhQYWQ9PT1cInJpZ2h0XCIpe3ZhbHVlKz1cIjBcIn1lbHNle2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJoZXggZGF0YSBpcyBvZGQtbGVuZ3RoXCIsXCJ2YWx1ZVwiLHZhbHVlKX19cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCl9aWYoaXNCeXRlcyh2YWx1ZSkpe2xldCByZXN1bHQ9XCIweFwiO2ZvcihsZXQgaT0wO2k8dmFsdWUubGVuZ3RoO2krKyl7bGV0IHY9dmFsdWVbaV07cmVzdWx0Kz1IZXhDaGFyYWN0ZXJzWyh2JjI0MCk+PjRdK0hleENoYXJhY3RlcnNbdiYxNV19cmV0dXJuIHJlc3VsdH1yZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGV4bGlmeSB2YWx1ZVwiLFwidmFsdWVcIix2YWx1ZSl9ZnVuY3Rpb24gaGV4RGF0YUxlbmd0aChkYXRhKXtpZih0eXBlb2YgZGF0YSE9PVwic3RyaW5nXCIpe2RhdGE9aGV4bGlmeShkYXRhKX1lbHNlIGlmKCFpc0hleFN0cmluZyhkYXRhKXx8ZGF0YS5sZW5ndGglMil7cmV0dXJuIG51bGx9cmV0dXJuKGRhdGEubGVuZ3RoLTIpLzJ9ZnVuY3Rpb24gaGV4RGF0YVNsaWNlKGRhdGEsb2Zmc2V0LGVuZE9mZnNldCl7aWYodHlwZW9mIGRhdGEhPT1cInN0cmluZ1wiKXtkYXRhPWhleGxpZnkoZGF0YSl9ZWxzZSBpZighaXNIZXhTdHJpbmcoZGF0YSl8fGRhdGEubGVuZ3RoJTIpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleERhdGFcIixcInZhbHVlXCIsZGF0YSl9b2Zmc2V0PTIrMipvZmZzZXQ7aWYoZW5kT2Zmc2V0IT1udWxsKXtyZXR1cm5cIjB4XCIrZGF0YS5zdWJzdHJpbmcob2Zmc2V0LDIrMiplbmRPZmZzZXQpfXJldHVyblwiMHhcIitkYXRhLnN1YnN0cmluZyhvZmZzZXQpfWZ1bmN0aW9uIGhleENvbmNhdChpdGVtcyl7bGV0IHJlc3VsdD1cIjB4XCI7aXRlbXMuZm9yRWFjaChpdGVtPT57cmVzdWx0Kz1oZXhsaWZ5KGl0ZW0pLnN1YnN0cmluZygyKX0pO3JldHVybiByZXN1bHR9ZnVuY3Rpb24gaGV4VmFsdWUodmFsdWUpe2NvbnN0IHRyaW1tZWQ9aGV4U3RyaXBaZXJvcyhoZXhsaWZ5KHZhbHVlLHtoZXhQYWQ6XCJsZWZ0XCJ9KSk7aWYodHJpbW1lZD09PVwiMHhcIil7cmV0dXJuXCIweDBcIn1yZXR1cm4gdHJpbW1lZH1mdW5jdGlvbiBoZXhTdHJpcFplcm9zKHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cInN0cmluZ1wiKXt2YWx1ZT1oZXhsaWZ5KHZhbHVlKX1pZighaXNIZXhTdHJpbmcodmFsdWUpKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXggc3RyaW5nXCIsXCJ2YWx1ZVwiLHZhbHVlKX12YWx1ZT12YWx1ZS5zdWJzdHJpbmcoMik7bGV0IG9mZnNldD0wO3doaWxlKG9mZnNldDx2YWx1ZS5sZW5ndGgmJnZhbHVlW29mZnNldF09PT1cIjBcIil7b2Zmc2V0Kyt9cmV0dXJuXCIweFwiK3ZhbHVlLnN1YnN0cmluZyhvZmZzZXQpfWZ1bmN0aW9uIGhleFplcm9QYWQodmFsdWUsbGVuZ3RoKXtpZih0eXBlb2YgdmFsdWUhPT1cInN0cmluZ1wiKXt2YWx1ZT1oZXhsaWZ5KHZhbHVlKX1lbHNlIGlmKCFpc0hleFN0cmluZyh2YWx1ZSkpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleCBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfWlmKHZhbHVlLmxlbmd0aD4yKmxlbmd0aCsyKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidmFsdWUgb3V0IG9mIHJhbmdlXCIsXCJ2YWx1ZVwiLGFyZ3VtZW50c1sxXSl9d2hpbGUodmFsdWUubGVuZ3RoPDIqbGVuZ3RoKzIpe3ZhbHVlPVwiMHgwXCIrdmFsdWUuc3Vic3RyaW5nKDIpfXJldHVybiB2YWx1ZX1mdW5jdGlvbiBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpe2NvbnN0IHJlc3VsdD17cjpcIjB4XCIsczpcIjB4XCIsX3ZzOlwiMHhcIixyZWNvdmVyeVBhcmFtOjAsdjowfTtpZihpc0J5dGVzTGlrZShzaWduYXR1cmUpKXtjb25zdCBieXRlcz1hcnJheWlmeShzaWduYXR1cmUpO2lmKGJ5dGVzLmxlbmd0aCE9PTY1KXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBzaWduYXR1cmUgc3RyaW5nOyBtdXN0IGJlIDY1IGJ5dGVzXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfXJlc3VsdC5yPWhleGxpZnkoYnl0ZXMuc2xpY2UoMCwzMikpO3Jlc3VsdC5zPWhleGxpZnkoYnl0ZXMuc2xpY2UoMzIsNjQpKTtyZXN1bHQudj1ieXRlc1s2NF07aWYocmVzdWx0LnY8Mjcpe2lmKHJlc3VsdC52PT09MHx8cmVzdWx0LnY9PT0xKXtyZXN1bHQudis9Mjd9ZWxzZXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIGludmFsaWQgdiBieXRlXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfX1yZXN1bHQucmVjb3ZlcnlQYXJhbT0xLXJlc3VsdC52JTI7aWYocmVzdWx0LnJlY292ZXJ5UGFyYW0pe2J5dGVzWzMyXXw9MTI4fXJlc3VsdC5fdnM9aGV4bGlmeShieXRlcy5zbGljZSgzMiw2NCkpfWVsc2V7cmVzdWx0LnI9c2lnbmF0dXJlLnI7cmVzdWx0LnM9c2lnbmF0dXJlLnM7cmVzdWx0LnY9c2lnbmF0dXJlLnY7cmVzdWx0LnJlY292ZXJ5UGFyYW09c2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07cmVzdWx0Ll92cz1zaWduYXR1cmUuX3ZzO2lmKHJlc3VsdC5fdnMhPW51bGwpe2NvbnN0IHZzPXplcm9QYWQoYXJyYXlpZnkocmVzdWx0Ll92cyksMzIpO3Jlc3VsdC5fdnM9aGV4bGlmeSh2cyk7Y29uc3QgcmVjb3ZlcnlQYXJhbT12c1swXT49MTI4PzE6MDtpZihyZXN1bHQucmVjb3ZlcnlQYXJhbT09bnVsbCl7cmVzdWx0LnJlY292ZXJ5UGFyYW09cmVjb3ZlcnlQYXJhbX1lbHNlIGlmKHJlc3VsdC5yZWNvdmVyeVBhcmFtIT09cmVjb3ZlcnlQYXJhbSl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSByZWNvdmVyeVBhcmFtIG1pc21hdGNoIF92c1wiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX12c1swXSY9MTI3O2NvbnN0IHM9aGV4bGlmeSh2cyk7aWYocmVzdWx0LnM9PW51bGwpe3Jlc3VsdC5zPXN9ZWxzZSBpZihyZXN1bHQucyE9PXMpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgdiBtaXNtYXRjaCBfdnNcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9fWlmKHJlc3VsdC5yZWNvdmVyeVBhcmFtPT1udWxsKXtpZihyZXN1bHQudj09bnVsbCl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIHYgYW5kIHJlY292ZXJ5UGFyYW1cIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9ZWxzZSBpZihyZXN1bHQudj09PTB8fHJlc3VsdC52PT09MSl7cmVzdWx0LnJlY292ZXJ5UGFyYW09cmVzdWx0LnZ9ZWxzZXtyZXN1bHQucmVjb3ZlcnlQYXJhbT0xLXJlc3VsdC52JTJ9fWVsc2V7aWYocmVzdWx0LnY9PW51bGwpe3Jlc3VsdC52PTI3K3Jlc3VsdC5yZWNvdmVyeVBhcmFtfWVsc2UgaWYocmVzdWx0LnJlY292ZXJ5UGFyYW0hPT0xLXJlc3VsdC52JTIpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgcmVjb3ZlcnlQYXJhbSBtaXNtYXRjaCB2XCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfX1pZihyZXN1bHQucj09bnVsbHx8IWlzSGV4U3RyaW5nKHJlc3VsdC5yKSl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIG9yIGludmFsaWQgclwiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX1lbHNle3Jlc3VsdC5yPWhleFplcm9QYWQocmVzdWx0LnIsMzIpfWlmKHJlc3VsdC5zPT1udWxsfHwhaXNIZXhTdHJpbmcocmVzdWx0LnMpKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIG1pc3Npbmcgb3IgaW52YWxpZCBzXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfWVsc2V7cmVzdWx0LnM9aGV4WmVyb1BhZChyZXN1bHQucywzMil9Y29uc3QgdnM9YXJyYXlpZnkocmVzdWx0LnMpO2lmKHZzWzBdPj0xMjgpe2xvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgcyBvdXQgb2YgcmFuZ2VcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9aWYocmVzdWx0LnJlY292ZXJ5UGFyYW0pe3ZzWzBdfD0xMjh9Y29uc3QgX3ZzPWhleGxpZnkodnMpO2lmKHJlc3VsdC5fdnMpe2lmKCFpc0hleFN0cmluZyhyZXN1bHQuX3ZzKSl7bG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBpbnZhbGlkIF92c1wiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX1yZXN1bHQuX3ZzPWhleFplcm9QYWQocmVzdWx0Ll92cywzMil9aWYocmVzdWx0Ll92cz09bnVsbCl7cmVzdWx0Ll92cz1fdnN9ZWxzZSBpZihyZXN1bHQuX3ZzIT09X3ZzKXtsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIF92cyBtaXNtYXRjaCB2IGFuZCBzXCIsXCJzaWduYXR1cmVcIixzaWduYXR1cmUpfX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIGpvaW5TaWduYXR1cmUoc2lnbmF0dXJlKXtzaWduYXR1cmU9c3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtyZXR1cm4gaGV4bGlmeShjb25jYXQoW3NpZ25hdHVyZS5yLHNpZ25hdHVyZS5zLHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtP1wiMHgxY1wiOlwiMHgxYlwiXSkpfWNvbnN0IHZlcnNpb24kMj1cImJpZ251bWJlci81LjEuMVwiO1widXNlIHN0cmljdFwiO3ZhciBCTj1ibi5CTjtjb25zdCBsb2dnZXIkMT1uZXcgTG9nZ2VyKHZlcnNpb24kMik7Y29uc3QgX2NvbnN0cnVjdG9yR3VhcmQ9e307Y29uc3QgTUFYX1NBRkU9OTAwNzE5OTI1NDc0MDk5MTtmdW5jdGlvbiBpc0JpZ051bWJlcmlzaCh2YWx1ZSl7cmV0dXJuIHZhbHVlIT1udWxsJiYoQmlnTnVtYmVyLmlzQmlnTnVtYmVyKHZhbHVlKXx8dHlwZW9mIHZhbHVlPT09XCJudW1iZXJcIiYmdmFsdWUlMT09PTB8fHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCImJiEhdmFsdWUubWF0Y2goL14tP1swLTldKyQvKXx8aXNIZXhTdHJpbmcodmFsdWUpfHx0eXBlb2YgdmFsdWU9PT1cImJpZ2ludFwifHxpc0J5dGVzKHZhbHVlKSl9bGV0IF93YXJuZWRUb1N0cmluZ1JhZGl4PWZhbHNlO2NsYXNzIEJpZ051bWJlcntjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLGhleCl7bG9nZ2VyJDEuY2hlY2tOZXcobmV3LnRhcmdldCxCaWdOdW1iZXIpO2lmKGNvbnN0cnVjdG9yR3VhcmQhPT1fY29uc3RydWN0b3JHdWFyZCl7bG9nZ2VyJDEudGhyb3dFcnJvcihcImNhbm5vdCBjYWxsIGNvbnN0cnVjdG9yIGRpcmVjdGx5OyB1c2UgQmlnTnVtYmVyLmZyb21cIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IChCaWdOdW1iZXIpXCJ9KX10aGlzLl9oZXg9aGV4O3RoaXMuX2lzQmlnTnVtYmVyPXRydWU7T2JqZWN0LmZyZWV6ZSh0aGlzKX1mcm9tVHdvcyh2YWx1ZSl7cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuZnJvbVR3b3ModmFsdWUpKX10b1R3b3ModmFsdWUpe3JldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnRvVHdvcyh2YWx1ZSkpfWFicygpe2lmKHRoaXMuX2hleFswXT09PVwiLVwiKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20odGhpcy5faGV4LnN1YnN0cmluZygxKSl9cmV0dXJuIHRoaXN9YWRkKG90aGVyKXtyZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5hZGQodG9CTihvdGhlcikpKX1zdWIob3RoZXIpe3JldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnN1Yih0b0JOKG90aGVyKSkpfWRpdihvdGhlcil7Y29uc3Qgbz1CaWdOdW1iZXIuZnJvbShvdGhlcik7aWYoby5pc1plcm8oKSl7dGhyb3dGYXVsdChcImRpdmlzaW9uIGJ5IHplcm9cIixcImRpdlwiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5kaXYodG9CTihvdGhlcikpKX1tdWwob3RoZXIpe3JldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLm11bCh0b0JOKG90aGVyKSkpfW1vZChvdGhlcil7Y29uc3QgdmFsdWU9dG9CTihvdGhlcik7aWYodmFsdWUuaXNOZWcoKSl7dGhyb3dGYXVsdChcImNhbm5vdCBtb2R1bG8gbmVnYXRpdmUgdmFsdWVzXCIsXCJtb2RcIil9cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykudW1vZCh2YWx1ZSkpfXBvdyhvdGhlcil7Y29uc3QgdmFsdWU9dG9CTihvdGhlcik7aWYodmFsdWUuaXNOZWcoKSl7dGhyb3dGYXVsdChcImNhbm5vdCByYWlzZSB0byBuZWdhdGl2ZSB2YWx1ZXNcIixcInBvd1wiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5wb3codmFsdWUpKX1hbmQob3RoZXIpe2NvbnN0IHZhbHVlPXRvQk4ob3RoZXIpO2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZS5pc05lZygpKXt0aHJvd0ZhdWx0KFwiY2Fubm90ICdhbmQnIG5lZ2F0aXZlIHZhbHVlc1wiLFwiYW5kXCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLmFuZCh2YWx1ZSkpfW9yKG90aGVyKXtjb25zdCB2YWx1ZT10b0JOKG90aGVyKTtpZih0aGlzLmlzTmVnYXRpdmUoKXx8dmFsdWUuaXNOZWcoKSl7dGhyb3dGYXVsdChcImNhbm5vdCAnb3InIG5lZ2F0aXZlIHZhbHVlc1wiLFwib3JcIil9cmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykub3IodmFsdWUpKX14b3Iob3RoZXIpe2NvbnN0IHZhbHVlPXRvQk4ob3RoZXIpO2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZS5pc05lZygpKXt0aHJvd0ZhdWx0KFwiY2Fubm90ICd4b3InIG5lZ2F0aXZlIHZhbHVlc1wiLFwieG9yXCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnhvcih2YWx1ZSkpfW1hc2sodmFsdWUpe2lmKHRoaXMuaXNOZWdhdGl2ZSgpfHx2YWx1ZTwwKXt0aHJvd0ZhdWx0KFwiY2Fubm90IG1hc2sgbmVnYXRpdmUgdmFsdWVzXCIsXCJtYXNrXCIpfXJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLm1hc2tuKHZhbHVlKSl9c2hsKHZhbHVlKXtpZih0aGlzLmlzTmVnYXRpdmUoKXx8dmFsdWU8MCl7dGhyb3dGYXVsdChcImNhbm5vdCBzaGlmdCBuZWdhdGl2ZSB2YWx1ZXNcIixcInNobFwiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5zaGxuKHZhbHVlKSl9c2hyKHZhbHVlKXtpZih0aGlzLmlzTmVnYXRpdmUoKXx8dmFsdWU8MCl7dGhyb3dGYXVsdChcImNhbm5vdCBzaGlmdCBuZWdhdGl2ZSB2YWx1ZXNcIixcInNoclwiKX1yZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5zaHJuKHZhbHVlKSl9ZXEob3RoZXIpe3JldHVybiB0b0JOKHRoaXMpLmVxKHRvQk4ob3RoZXIpKX1sdChvdGhlcil7cmV0dXJuIHRvQk4odGhpcykubHQodG9CTihvdGhlcikpfWx0ZShvdGhlcil7cmV0dXJuIHRvQk4odGhpcykubHRlKHRvQk4ob3RoZXIpKX1ndChvdGhlcil7cmV0dXJuIHRvQk4odGhpcykuZ3QodG9CTihvdGhlcikpfWd0ZShvdGhlcil7cmV0dXJuIHRvQk4odGhpcykuZ3RlKHRvQk4ob3RoZXIpKX1pc05lZ2F0aXZlKCl7cmV0dXJuIHRoaXMuX2hleFswXT09PVwiLVwifWlzWmVybygpe3JldHVybiB0b0JOKHRoaXMpLmlzWmVybygpfXRvTnVtYmVyKCl7dHJ5e3JldHVybiB0b0JOKHRoaXMpLnRvTnVtYmVyKCl9Y2F0Y2goZXJyb3Ipe3Rocm93RmF1bHQoXCJvdmVyZmxvd1wiLFwidG9OdW1iZXJcIix0aGlzLnRvU3RyaW5nKCkpfXJldHVybiBudWxsfXRvQmlnSW50KCl7dHJ5e3JldHVybiBCaWdJbnQodGhpcy50b1N0cmluZygpKX1jYXRjaChlKXt9cmV0dXJuIGxvZ2dlciQxLnRocm93RXJyb3IoXCJ0aGlzIHBsYXRmb3JtIGRvZXMgbm90IHN1cHBvcnQgQmlnSW50XCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se3ZhbHVlOnRoaXMudG9TdHJpbmcoKX0pfXRvU3RyaW5nKCl7aWYoYXJndW1lbnRzLmxlbmd0aD4wKXtpZihhcmd1bWVudHNbMF09PT0xMCl7aWYoIV93YXJuZWRUb1N0cmluZ1JhZGl4KXtfd2FybmVkVG9TdHJpbmdSYWRpeD10cnVlO2xvZ2dlciQxLndhcm4oXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IGFueSBwYXJhbWV0ZXJzOyBiYXNlLTEwIGlzIGFzc3VtZWRcIil9fWVsc2UgaWYoYXJndW1lbnRzWzBdPT09MTYpe2xvZ2dlciQxLnRocm93RXJyb3IoXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IGFueSBwYXJhbWV0ZXJzOyB1c2UgYmlnTnVtYmVyLnRvSGV4U3RyaW5nKClcIixMb2dnZXIuZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQse30pfWVsc2V7bG9nZ2VyJDEudGhyb3dFcnJvcihcIkJpZ051bWJlci50b1N0cmluZyBkb2VzIG5vdCBhY2NlcHQgcGFyYW1ldGVyc1wiLExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCx7fSl9fXJldHVybiB0b0JOKHRoaXMpLnRvU3RyaW5nKDEwKX10b0hleFN0cmluZygpe3JldHVybiB0aGlzLl9oZXh9dG9KU09OKGtleSl7cmV0dXJue3R5cGU6XCJCaWdOdW1iZXJcIixoZXg6dGhpcy50b0hleFN0cmluZygpfX1zdGF0aWMgZnJvbSh2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBCaWdOdW1iZXIpe3JldHVybiB2YWx1ZX1pZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtpZih2YWx1ZS5tYXRjaCgvXi0/MHhbMC05YS1mXSskL2kpKXtyZXR1cm4gbmV3IEJpZ051bWJlcihfY29uc3RydWN0b3JHdWFyZCx0b0hleCh2YWx1ZSkpfWlmKHZhbHVlLm1hdGNoKC9eLT9bMC05XSskLykpe3JldHVybiBuZXcgQmlnTnVtYmVyKF9jb25zdHJ1Y3Rvckd1YXJkLHRvSGV4KG5ldyBCTih2YWx1ZSkpKX1yZXR1cm4gbG9nZ2VyJDEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBCaWdOdW1iZXIgc3RyaW5nXCIsXCJ2YWx1ZVwiLHZhbHVlKX1pZih0eXBlb2YgdmFsdWU9PT1cIm51bWJlclwiKXtpZih2YWx1ZSUxKXt0aHJvd0ZhdWx0KFwidW5kZXJmbG93XCIsXCJCaWdOdW1iZXIuZnJvbVwiLHZhbHVlKX1pZih2YWx1ZT49TUFYX1NBRkV8fHZhbHVlPD0tTUFYX1NBRkUpe3Rocm93RmF1bHQoXCJvdmVyZmxvd1wiLFwiQmlnTnVtYmVyLmZyb21cIix2YWx1ZSl9cmV0dXJuIEJpZ051bWJlci5mcm9tKFN0cmluZyh2YWx1ZSkpfWNvbnN0IGFueVZhbHVlPXZhbHVlO2lmKHR5cGVvZiBhbnlWYWx1ZT09PVwiYmlnaW50XCIpe3JldHVybiBCaWdOdW1iZXIuZnJvbShhbnlWYWx1ZS50b1N0cmluZygpKX1pZihpc0J5dGVzKGFueVZhbHVlKSl7cmV0dXJuIEJpZ051bWJlci5mcm9tKGhleGxpZnkoYW55VmFsdWUpKX1pZihhbnlWYWx1ZSl7aWYoYW55VmFsdWUudG9IZXhTdHJpbmcpe2NvbnN0IGhleD1hbnlWYWx1ZS50b0hleFN0cmluZygpO2lmKHR5cGVvZiBoZXg9PT1cInN0cmluZ1wiKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20oaGV4KX19ZWxzZXtsZXQgaGV4PWFueVZhbHVlLl9oZXg7aWYoaGV4PT1udWxsJiZhbnlWYWx1ZS50eXBlPT09XCJCaWdOdW1iZXJcIil7aGV4PWFueVZhbHVlLmhleH1pZih0eXBlb2YgaGV4PT09XCJzdHJpbmdcIil7aWYoaXNIZXhTdHJpbmcoaGV4KXx8aGV4WzBdPT09XCItXCImJmlzSGV4U3RyaW5nKGhleC5zdWJzdHJpbmcoMSkpKXtyZXR1cm4gQmlnTnVtYmVyLmZyb20oaGV4KX19fX1yZXR1cm4gbG9nZ2VyJDEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBCaWdOdW1iZXIgdmFsdWVcIixcInZhbHVlXCIsdmFsdWUpfXN0YXRpYyBpc0JpZ051bWJlcih2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc0JpZ051bWJlcil9fWZ1bmN0aW9uIHRvSGV4KHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cInN0cmluZ1wiKXtyZXR1cm4gdG9IZXgodmFsdWUudG9TdHJpbmcoMTYpKX1pZih2YWx1ZVswXT09PVwiLVwiKXt2YWx1ZT12YWx1ZS5zdWJzdHJpbmcoMSk7aWYodmFsdWVbMF09PT1cIi1cIil7bG9nZ2VyJDEudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhcIixcInZhbHVlXCIsdmFsdWUpfXZhbHVlPXRvSGV4KHZhbHVlKTtpZih2YWx1ZT09PVwiMHgwMFwiKXtyZXR1cm4gdmFsdWV9cmV0dXJuXCItXCIrdmFsdWV9aWYodmFsdWUuc3Vic3RyaW5nKDAsMikhPT1cIjB4XCIpe3ZhbHVlPVwiMHhcIit2YWx1ZX1pZih2YWx1ZT09PVwiMHhcIil7cmV0dXJuXCIweDAwXCJ9aWYodmFsdWUubGVuZ3RoJTIpe3ZhbHVlPVwiMHgwXCIrdmFsdWUuc3Vic3RyaW5nKDIpfXdoaWxlKHZhbHVlLmxlbmd0aD40JiZ2YWx1ZS5zdWJzdHJpbmcoMCw0KT09PVwiMHgwMFwiKXt2YWx1ZT1cIjB4XCIrdmFsdWUuc3Vic3RyaW5nKDQpfXJldHVybiB2YWx1ZX1mdW5jdGlvbiB0b0JpZ051bWJlcih2YWx1ZSl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHRvSGV4KHZhbHVlKSl9ZnVuY3Rpb24gdG9CTih2YWx1ZSl7Y29uc3QgaGV4PUJpZ051bWJlci5mcm9tKHZhbHVlKS50b0hleFN0cmluZygpO2lmKGhleFswXT09PVwiLVwiKXtyZXR1cm4gbmV3IEJOKFwiLVwiK2hleC5zdWJzdHJpbmcoMyksMTYpfXJldHVybiBuZXcgQk4oaGV4LnN1YnN0cmluZygyKSwxNil9ZnVuY3Rpb24gdGhyb3dGYXVsdChmYXVsdCxvcGVyYXRpb24sdmFsdWUpe2NvbnN0IHBhcmFtcz17ZmF1bHQ6ZmF1bHQsb3BlcmF0aW9uOm9wZXJhdGlvbn07aWYodmFsdWUhPW51bGwpe3BhcmFtcy52YWx1ZT12YWx1ZX1yZXR1cm4gbG9nZ2VyJDEudGhyb3dFcnJvcihmYXVsdCxMb2dnZXIuZXJyb3JzLk5VTUVSSUNfRkFVTFQscGFyYW1zKX1mdW5jdGlvbiBfYmFzZTM2VG8xNih2YWx1ZSl7cmV0dXJuIG5ldyBCTih2YWx1ZSwzNikudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIF9iYXNlMTZUbzM2KHZhbHVlKXtyZXR1cm4gbmV3IEJOKHZhbHVlLDE2KS50b1N0cmluZygzNil9XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJDI9bmV3IExvZ2dlcih2ZXJzaW9uJDIpO2NvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkJDE9e307Y29uc3QgWmVybz1CaWdOdW1iZXIuZnJvbSgwKTtjb25zdCBOZWdhdGl2ZU9uZT1CaWdOdW1iZXIuZnJvbSgtMSk7ZnVuY3Rpb24gdGhyb3dGYXVsdCQxKG1lc3NhZ2UsZmF1bHQsb3BlcmF0aW9uLHZhbHVlKXtjb25zdCBwYXJhbXM9e2ZhdWx0OmZhdWx0LG9wZXJhdGlvbjpvcGVyYXRpb259O2lmKHZhbHVlIT09dW5kZWZpbmVkKXtwYXJhbXMudmFsdWU9dmFsdWV9cmV0dXJuIGxvZ2dlciQyLnRocm93RXJyb3IobWVzc2FnZSxMb2dnZXIuZXJyb3JzLk5VTUVSSUNfRkFVTFQscGFyYW1zKX1sZXQgemVyb3M9XCIwXCI7d2hpbGUoemVyb3MubGVuZ3RoPDI1Nil7emVyb3MrPXplcm9zfWZ1bmN0aW9uIGdldE11bHRpcGxpZXIoZGVjaW1hbHMpe2lmKHR5cGVvZiBkZWNpbWFscyE9PVwibnVtYmVyXCIpe3RyeXtkZWNpbWFscz1CaWdOdW1iZXIuZnJvbShkZWNpbWFscykudG9OdW1iZXIoKX1jYXRjaChlKXt9fWlmKHR5cGVvZiBkZWNpbWFscz09PVwibnVtYmVyXCImJmRlY2ltYWxzPj0wJiZkZWNpbWFsczw9MjU2JiYhKGRlY2ltYWxzJTEpKXtyZXR1cm5cIjFcIit6ZXJvcy5zdWJzdHJpbmcoMCxkZWNpbWFscyl9cmV0dXJuIGxvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZGVjaW1hbCBzaXplXCIsXCJkZWNpbWFsc1wiLGRlY2ltYWxzKX1mdW5jdGlvbiBmb3JtYXRGaXhlZCh2YWx1ZSxkZWNpbWFscyl7aWYoZGVjaW1hbHM9PW51bGwpe2RlY2ltYWxzPTB9Y29uc3QgbXVsdGlwbGllcj1nZXRNdWx0aXBsaWVyKGRlY2ltYWxzKTt2YWx1ZT1CaWdOdW1iZXIuZnJvbSh2YWx1ZSk7Y29uc3QgbmVnYXRpdmU9dmFsdWUubHQoWmVybyk7aWYobmVnYXRpdmUpe3ZhbHVlPXZhbHVlLm11bChOZWdhdGl2ZU9uZSl9bGV0IGZyYWN0aW9uPXZhbHVlLm1vZChtdWx0aXBsaWVyKS50b1N0cmluZygpO3doaWxlKGZyYWN0aW9uLmxlbmd0aDxtdWx0aXBsaWVyLmxlbmd0aC0xKXtmcmFjdGlvbj1cIjBcIitmcmFjdGlvbn1mcmFjdGlvbj1mcmFjdGlvbi5tYXRjaCgvXihbMC05XSpbMS05XXwwKSgwKikvKVsxXTtjb25zdCB3aG9sZT12YWx1ZS5kaXYobXVsdGlwbGllcikudG9TdHJpbmcoKTt2YWx1ZT13aG9sZStcIi5cIitmcmFjdGlvbjtpZihuZWdhdGl2ZSl7dmFsdWU9XCItXCIrdmFsdWV9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIHBhcnNlRml4ZWQodmFsdWUsZGVjaW1hbHMpe2lmKGRlY2ltYWxzPT1udWxsKXtkZWNpbWFscz0wfWNvbnN0IG11bHRpcGxpZXI9Z2V0TXVsdGlwbGllcihkZWNpbWFscyk7aWYodHlwZW9mIHZhbHVlIT09XCJzdHJpbmdcInx8IXZhbHVlLm1hdGNoKC9eLT9bMC05LixdKyQvKSl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBkZWNpbWFsIHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1pZihtdWx0aXBsaWVyLmxlbmd0aC0xPT09MCl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHZhbHVlKX1jb25zdCBuZWdhdGl2ZT12YWx1ZS5zdWJzdHJpbmcoMCwxKT09PVwiLVwiO2lmKG5lZ2F0aXZlKXt2YWx1ZT12YWx1ZS5zdWJzdHJpbmcoMSl9aWYodmFsdWU9PT1cIi5cIil7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyB2YWx1ZVwiLFwidmFsdWVcIix2YWx1ZSl9Y29uc3QgY29tcHM9dmFsdWUuc3BsaXQoXCIuXCIpO2lmKGNvbXBzLmxlbmd0aD4yKXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0b28gbWFueSBkZWNpbWFsIHBvaW50c1wiLFwidmFsdWVcIix2YWx1ZSl9bGV0IHdob2xlPWNvbXBzWzBdLGZyYWN0aW9uPWNvbXBzWzFdO2lmKCF3aG9sZSl7d2hvbGU9XCIwXCJ9aWYoIWZyYWN0aW9uKXtmcmFjdGlvbj1cIjBcIn1pZihmcmFjdGlvbi5sZW5ndGg+bXVsdGlwbGllci5sZW5ndGgtMSl7dGhyb3dGYXVsdCQxKFwiZnJhY3Rpb25hbCBjb21wb25lbnQgZXhjZWVkcyBkZWNpbWFsc1wiLFwidW5kZXJmbG93XCIsXCJwYXJzZUZpeGVkXCIpfXdoaWxlKGZyYWN0aW9uLmxlbmd0aDxtdWx0aXBsaWVyLmxlbmd0aC0xKXtmcmFjdGlvbis9XCIwXCJ9Y29uc3Qgd2hvbGVWYWx1ZT1CaWdOdW1iZXIuZnJvbSh3aG9sZSk7Y29uc3QgZnJhY3Rpb25WYWx1ZT1CaWdOdW1iZXIuZnJvbShmcmFjdGlvbik7bGV0IHdlaT13aG9sZVZhbHVlLm11bChtdWx0aXBsaWVyKS5hZGQoZnJhY3Rpb25WYWx1ZSk7aWYobmVnYXRpdmUpe3dlaT13ZWkubXVsKE5lZ2F0aXZlT25lKX1yZXR1cm4gd2VpfWNsYXNzIEZpeGVkRm9ybWF0e2NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQsc2lnbmVkLHdpZHRoLGRlY2ltYWxzKXtpZihjb25zdHJ1Y3Rvckd1YXJkIT09X2NvbnN0cnVjdG9yR3VhcmQkMSl7bG9nZ2VyJDIudGhyb3dFcnJvcihcImNhbm5vdCB1c2UgRml4ZWRGb3JtYXQgY29uc3RydWN0b3I7IHVzZSBGaXhlZEZvcm1hdC5mcm9tXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyBGaXhlZEZvcm1hdFwifSl9dGhpcy5zaWduZWQ9c2lnbmVkO3RoaXMud2lkdGg9d2lkdGg7dGhpcy5kZWNpbWFscz1kZWNpbWFsczt0aGlzLm5hbWU9KHNpZ25lZD9cIlwiOlwidVwiKStcImZpeGVkXCIrU3RyaW5nKHdpZHRoKStcInhcIitTdHJpbmcoZGVjaW1hbHMpO3RoaXMuX211bHRpcGxpZXI9Z2V0TXVsdGlwbGllcihkZWNpbWFscyk7T2JqZWN0LmZyZWV6ZSh0aGlzKX1zdGF0aWMgZnJvbSh2YWx1ZSl7aWYodmFsdWUgaW5zdGFuY2VvZiBGaXhlZEZvcm1hdCl7cmV0dXJuIHZhbHVlfWxldCBzaWduZWQ9dHJ1ZTtsZXQgd2lkdGg9MTI4O2xldCBkZWNpbWFscz0xODtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtpZih2YWx1ZT09PVwiZml4ZWRcIil7fWVsc2UgaWYodmFsdWU9PT1cInVmaXhlZFwiKXtzaWduZWQ9ZmFsc2V9ZWxzZSBpZih2YWx1ZSE9bnVsbCl7Y29uc3QgbWF0Y2g9dmFsdWUubWF0Y2goL14odT8pZml4ZWQoWzAtOV0rKXgoWzAtOV0rKSQvKTtpZighbWF0Y2gpe2xvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZml4ZWQgZm9ybWF0XCIsXCJmb3JtYXRcIix2YWx1ZSl9c2lnbmVkPW1hdGNoWzFdIT09XCJ1XCI7d2lkdGg9cGFyc2VJbnQobWF0Y2hbMl0pO2RlY2ltYWxzPXBhcnNlSW50KG1hdGNoWzNdKX19ZWxzZSBpZih2YWx1ZSl7Y29uc3QgY2hlY2s9KGtleSx0eXBlLGRlZmF1bHRWYWx1ZSk9PntpZih2YWx1ZVtrZXldPT1udWxsKXtyZXR1cm4gZGVmYXVsdFZhbHVlfWlmKHR5cGVvZiB2YWx1ZVtrZXldIT09dHlwZSl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXQgKFwiK2tleStcIiBub3QgXCIrdHlwZStcIilcIixcImZvcm1hdC5cIitrZXksdmFsdWVba2V5XSl9cmV0dXJuIHZhbHVlW2tleV19O3NpZ25lZD1jaGVjayhcInNpZ25lZFwiLFwiYm9vbGVhblwiLHNpZ25lZCk7d2lkdGg9Y2hlY2soXCJ3aWR0aFwiLFwibnVtYmVyXCIsd2lkdGgpO2RlY2ltYWxzPWNoZWNrKFwiZGVjaW1hbHNcIixcIm51bWJlclwiLGRlY2ltYWxzKX1pZih3aWR0aCU4KXtsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZpeGVkIGZvcm1hdCB3aWR0aCAobm90IGJ5dGUgYWxpZ25lZClcIixcImZvcm1hdC53aWR0aFwiLHdpZHRoKX1pZihkZWNpbWFscz44MCl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXQgKGRlY2ltYWxzIHRvbyBsYXJnZSlcIixcImZvcm1hdC5kZWNpbWFsc1wiLGRlY2ltYWxzKX1yZXR1cm4gbmV3IEZpeGVkRm9ybWF0KF9jb25zdHJ1Y3Rvckd1YXJkJDEsc2lnbmVkLHdpZHRoLGRlY2ltYWxzKX19Y2xhc3MgRml4ZWROdW1iZXJ7Y29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCxoZXgsdmFsdWUsZm9ybWF0KXtsb2dnZXIkMi5jaGVja05ldyhuZXcudGFyZ2V0LEZpeGVkTnVtYmVyKTtpZihjb25zdHJ1Y3Rvckd1YXJkIT09X2NvbnN0cnVjdG9yR3VhcmQkMSl7bG9nZ2VyJDIudGhyb3dFcnJvcihcImNhbm5vdCB1c2UgRml4ZWROdW1iZXIgY29uc3RydWN0b3I7IHVzZSBGaXhlZE51bWJlci5mcm9tXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyBGaXhlZEZvcm1hdFwifSl9dGhpcy5mb3JtYXQ9Zm9ybWF0O3RoaXMuX2hleD1oZXg7dGhpcy5fdmFsdWU9dmFsdWU7dGhpcy5faXNGaXhlZE51bWJlcj10cnVlO09iamVjdC5mcmVlemUodGhpcyl9X2NoZWNrRm9ybWF0KG90aGVyKXtpZih0aGlzLmZvcm1hdC5uYW1lIT09b3RoZXIuZm9ybWF0Lm5hbWUpe2xvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImluY29tcGF0aWJsZSBmb3JtYXQ7IHVzZSBmaXhlZE51bWJlci50b0Zvcm1hdFwiLFwib3RoZXJcIixvdGhlcil9fWFkZFVuc2FmZShvdGhlcil7dGhpcy5fY2hlY2tGb3JtYXQob3RoZXIpO2NvbnN0IGE9cGFyc2VGaXhlZCh0aGlzLl92YWx1ZSx0aGlzLmZvcm1hdC5kZWNpbWFscyk7Y29uc3QgYj1wYXJzZUZpeGVkKG90aGVyLl92YWx1ZSxvdGhlci5mb3JtYXQuZGVjaW1hbHMpO3JldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUoYS5hZGQoYiksdGhpcy5mb3JtYXQuZGVjaW1hbHMsdGhpcy5mb3JtYXQpfXN1YlVuc2FmZShvdGhlcil7dGhpcy5fY2hlY2tGb3JtYXQob3RoZXIpO2NvbnN0IGE9cGFyc2VGaXhlZCh0aGlzLl92YWx1ZSx0aGlzLmZvcm1hdC5kZWNpbWFscyk7Y29uc3QgYj1wYXJzZUZpeGVkKG90aGVyLl92YWx1ZSxvdGhlci5mb3JtYXQuZGVjaW1hbHMpO3JldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUoYS5zdWIoYiksdGhpcy5mb3JtYXQuZGVjaW1hbHMsdGhpcy5mb3JtYXQpfW11bFVuc2FmZShvdGhlcil7dGhpcy5fY2hlY2tGb3JtYXQob3RoZXIpO2NvbnN0IGE9cGFyc2VGaXhlZCh0aGlzLl92YWx1ZSx0aGlzLmZvcm1hdC5kZWNpbWFscyk7Y29uc3QgYj1wYXJzZUZpeGVkKG90aGVyLl92YWx1ZSxvdGhlci5mb3JtYXQuZGVjaW1hbHMpO3JldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUoYS5tdWwoYikuZGl2KHRoaXMuZm9ybWF0Ll9tdWx0aXBsaWVyKSx0aGlzLmZvcm1hdC5kZWNpbWFscyx0aGlzLmZvcm1hdCl9ZGl2VW5zYWZlKG90aGVyKXt0aGlzLl9jaGVja0Zvcm1hdChvdGhlcik7Y29uc3QgYT1wYXJzZUZpeGVkKHRoaXMuX3ZhbHVlLHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtjb25zdCBiPXBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLG90aGVyLmZvcm1hdC5kZWNpbWFscyk7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21WYWx1ZShhLm11bCh0aGlzLmZvcm1hdC5fbXVsdGlwbGllcikuZGl2KGIpLHRoaXMuZm9ybWF0LmRlY2ltYWxzLHRoaXMuZm9ybWF0KX1mbG9vcigpe2xldCBjb21wcz10aGlzLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO2xldCByZXN1bHQ9Rml4ZWROdW1iZXIuZnJvbShjb21wc1swXSx0aGlzLmZvcm1hdCk7Y29uc3QgaGFzRnJhY3Rpb249IWNvbXBzWzFdLm1hdGNoKC9eKDAqKSQvKTtpZih0aGlzLmlzTmVnYXRpdmUoKSYmaGFzRnJhY3Rpb24pe3Jlc3VsdD1yZXN1bHQuc3ViVW5zYWZlKE9ORSl9cmV0dXJuIHJlc3VsdH1jZWlsaW5nKCl7bGV0IGNvbXBzPXRoaXMudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7bGV0IHJlc3VsdD1GaXhlZE51bWJlci5mcm9tKGNvbXBzWzBdLHRoaXMuZm9ybWF0KTtjb25zdCBoYXNGcmFjdGlvbj0hY29tcHNbMV0ubWF0Y2goL14oMCopJC8pO2lmKCF0aGlzLmlzTmVnYXRpdmUoKSYmaGFzRnJhY3Rpb24pe3Jlc3VsdD1yZXN1bHQuYWRkVW5zYWZlKE9ORSl9cmV0dXJuIHJlc3VsdH1yb3VuZChkZWNpbWFscyl7aWYoZGVjaW1hbHM9PW51bGwpe2RlY2ltYWxzPTB9bGV0IGNvbXBzPXRoaXMudG9TdHJpbmcoKS5zcGxpdChcIi5cIik7aWYoZGVjaW1hbHM8MHx8ZGVjaW1hbHM+ODB8fGRlY2ltYWxzJTEpe2xvZ2dlciQyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZGVjaW1hbCBjb3VudFwiLFwiZGVjaW1hbHNcIixkZWNpbWFscyl9aWYoY29tcHNbMV0ubGVuZ3RoPD1kZWNpbWFscyl7cmV0dXJuIHRoaXN9Y29uc3QgZmFjdG9yPUZpeGVkTnVtYmVyLmZyb20oXCIxXCIremVyb3Muc3Vic3RyaW5nKDAsZGVjaW1hbHMpKTtyZXR1cm4gdGhpcy5tdWxVbnNhZmUoZmFjdG9yKS5hZGRVbnNhZmUoQlVNUCkuZmxvb3IoKS5kaXZVbnNhZmUoZmFjdG9yKX1pc1plcm8oKXtyZXR1cm4gdGhpcy5fdmFsdWU9PT1cIjAuMFwifWlzTmVnYXRpdmUoKXtyZXR1cm4gdGhpcy5fdmFsdWVbMF09PT1cIi1cIn10b1N0cmluZygpe3JldHVybiB0aGlzLl92YWx1ZX10b0hleFN0cmluZyh3aWR0aCl7aWYod2lkdGg9PW51bGwpe3JldHVybiB0aGlzLl9oZXh9aWYod2lkdGglOCl7bG9nZ2VyJDIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBieXRlIHdpZHRoXCIsXCJ3aWR0aFwiLHdpZHRoKX1jb25zdCBoZXg9QmlnTnVtYmVyLmZyb20odGhpcy5faGV4KS5mcm9tVHdvcyh0aGlzLmZvcm1hdC53aWR0aCkudG9Ud29zKHdpZHRoKS50b0hleFN0cmluZygpO3JldHVybiBoZXhaZXJvUGFkKGhleCx3aWR0aC84KX10b1Vuc2FmZUZsb2F0KCl7cmV0dXJuIHBhcnNlRmxvYXQodGhpcy50b1N0cmluZygpKX10b0Zvcm1hdChmb3JtYXQpe3JldHVybiBGaXhlZE51bWJlci5mcm9tU3RyaW5nKHRoaXMuX3ZhbHVlLGZvcm1hdCl9c3RhdGljIGZyb21WYWx1ZSh2YWx1ZSxkZWNpbWFscyxmb3JtYXQpe2lmKGZvcm1hdD09bnVsbCYmZGVjaW1hbHMhPW51bGwmJiFpc0JpZ051bWJlcmlzaChkZWNpbWFscykpe2Zvcm1hdD1kZWNpbWFscztkZWNpbWFscz1udWxsfWlmKGRlY2ltYWxzPT1udWxsKXtkZWNpbWFscz0wfWlmKGZvcm1hdD09bnVsbCl7Zm9ybWF0PVwiZml4ZWRcIn1yZXR1cm4gRml4ZWROdW1iZXIuZnJvbVN0cmluZyhmb3JtYXRGaXhlZCh2YWx1ZSxkZWNpbWFscyksRml4ZWRGb3JtYXQuZnJvbShmb3JtYXQpKX1zdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSxmb3JtYXQpe2lmKGZvcm1hdD09bnVsbCl7Zm9ybWF0PVwiZml4ZWRcIn1jb25zdCBmaXhlZEZvcm1hdD1GaXhlZEZvcm1hdC5mcm9tKGZvcm1hdCk7Y29uc3QgbnVtZXJpYz1wYXJzZUZpeGVkKHZhbHVlLGZpeGVkRm9ybWF0LmRlY2ltYWxzKTtpZighZml4ZWRGb3JtYXQuc2lnbmVkJiZudW1lcmljLmx0KFplcm8pKXt0aHJvd0ZhdWx0JDEoXCJ1bnNpZ25lZCB2YWx1ZSBjYW5ub3QgYmUgbmVnYXRpdmVcIixcIm92ZXJmbG93XCIsXCJ2YWx1ZVwiLHZhbHVlKX1sZXQgaGV4PW51bGw7aWYoZml4ZWRGb3JtYXQuc2lnbmVkKXtoZXg9bnVtZXJpYy50b1R3b3MoZml4ZWRGb3JtYXQud2lkdGgpLnRvSGV4U3RyaW5nKCl9ZWxzZXtoZXg9bnVtZXJpYy50b0hleFN0cmluZygpO2hleD1oZXhaZXJvUGFkKGhleCxmaXhlZEZvcm1hdC53aWR0aC84KX1jb25zdCBkZWNpbWFsPWZvcm1hdEZpeGVkKG51bWVyaWMsZml4ZWRGb3JtYXQuZGVjaW1hbHMpO3JldHVybiBuZXcgRml4ZWROdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQkMSxoZXgsZGVjaW1hbCxmaXhlZEZvcm1hdCl9c3RhdGljIGZyb21CeXRlcyh2YWx1ZSxmb3JtYXQpe2lmKGZvcm1hdD09bnVsbCl7Zm9ybWF0PVwiZml4ZWRcIn1jb25zdCBmaXhlZEZvcm1hdD1GaXhlZEZvcm1hdC5mcm9tKGZvcm1hdCk7aWYoYXJyYXlpZnkodmFsdWUpLmxlbmd0aD5maXhlZEZvcm1hdC53aWR0aC84KXt0aHJvdyBuZXcgRXJyb3IoXCJvdmVyZmxvd1wiKX1sZXQgbnVtZXJpYz1CaWdOdW1iZXIuZnJvbSh2YWx1ZSk7aWYoZml4ZWRGb3JtYXQuc2lnbmVkKXtudW1lcmljPW51bWVyaWMuZnJvbVR3b3MoZml4ZWRGb3JtYXQud2lkdGgpfWNvbnN0IGhleD1udW1lcmljLnRvVHdvcygoZml4ZWRGb3JtYXQuc2lnbmVkPzA6MSkrZml4ZWRGb3JtYXQud2lkdGgpLnRvSGV4U3RyaW5nKCk7Y29uc3QgZGVjaW1hbD1mb3JtYXRGaXhlZChudW1lcmljLGZpeGVkRm9ybWF0LmRlY2ltYWxzKTtyZXR1cm4gbmV3IEZpeGVkTnVtYmVyKF9jb25zdHJ1Y3Rvckd1YXJkJDEsaGV4LGRlY2ltYWwsZml4ZWRGb3JtYXQpfXN0YXRpYyBmcm9tKHZhbHVlLGZvcm1hdCl7aWYodHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIil7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21TdHJpbmcodmFsdWUsZm9ybWF0KX1pZihpc0J5dGVzKHZhbHVlKSl7cmV0dXJuIEZpeGVkTnVtYmVyLmZyb21CeXRlcyh2YWx1ZSxmb3JtYXQpfXRyeXtyZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKHZhbHVlLDAsZm9ybWF0KX1jYXRjaChlcnJvcil7aWYoZXJyb3IuY29kZSE9PUxvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCl7dGhyb3cgZXJyb3J9fXJldHVybiBsb2dnZXIkMi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEZpeGVkTnVtYmVyIHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1zdGF0aWMgaXNGaXhlZE51bWJlcih2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc0ZpeGVkTnVtYmVyKX19Y29uc3QgT05FPUZpeGVkTnVtYmVyLmZyb20oMSk7Y29uc3QgQlVNUD1GaXhlZE51bWJlci5mcm9tKFwiMC41XCIpO2NvbnN0IHZlcnNpb24kMz1cInByb3BlcnRpZXMvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkMz1uZXcgTG9nZ2VyKHZlcnNpb24kMyk7ZnVuY3Rpb24gZGVmaW5lUmVhZE9ubHkob2JqZWN0LG5hbWUsdmFsdWUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsbmFtZSx7ZW51bWVyYWJsZTp0cnVlLHZhbHVlOnZhbHVlLHdyaXRhYmxlOmZhbHNlfSl9ZnVuY3Rpb24gZ2V0U3RhdGljKGN0b3Isa2V5KXtmb3IobGV0IGk9MDtpPDMyO2krKyl7aWYoY3RvcltrZXldKXtyZXR1cm4gY3RvcltrZXldfWlmKCFjdG9yLnByb3RvdHlwZXx8dHlwZW9mIGN0b3IucHJvdG90eXBlIT09XCJvYmplY3RcIil7YnJlYWt9Y3Rvcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoY3Rvci5wcm90b3R5cGUpLmNvbnN0cnVjdG9yfXJldHVybiBudWxsfWZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0aWVzKG9iamVjdCl7cmV0dXJuIF9fYXdhaXRlcih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgcHJvbWlzZXM9T2JqZWN0LmtleXMob2JqZWN0KS5tYXAoa2V5PT57Y29uc3QgdmFsdWU9b2JqZWN0W2tleV07cmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbih2PT4oe2tleTprZXksdmFsdWU6dn0pKX0pO2NvbnN0IHJlc3VsdHM9eWllbGQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO3JldHVybiByZXN1bHRzLnJlZHVjZSgoYWNjdW0scmVzdWx0KT0+e2FjY3VtW3Jlc3VsdC5rZXldPXJlc3VsdC52YWx1ZTtyZXR1cm4gYWNjdW19LHt9KX0pfWZ1bmN0aW9uIGNoZWNrUHJvcGVydGllcyhvYmplY3QscHJvcGVydGllcyl7aWYoIW9iamVjdHx8dHlwZW9mIG9iamVjdCE9PVwib2JqZWN0XCIpe2xvZ2dlciQzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgb2JqZWN0XCIsXCJvYmplY3RcIixvYmplY3QpfU9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXk9PntpZighcHJvcGVydGllc1trZXldKXtsb2dnZXIkMy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG9iamVjdCBrZXkgLSBcIitrZXksXCJ0cmFuc2FjdGlvbjpcIitrZXksb2JqZWN0KX19KX1mdW5jdGlvbiBzaGFsbG93Q29weShvYmplY3Qpe2NvbnN0IHJlc3VsdD17fTtmb3IoY29uc3Qga2V5IGluIG9iamVjdCl7cmVzdWx0W2tleV09b2JqZWN0W2tleV19cmV0dXJuIHJlc3VsdH1jb25zdCBvcGFxdWU9e2JpZ2ludDp0cnVlLGJvb2xlYW46dHJ1ZSxmdW5jdGlvbjp0cnVlLG51bWJlcjp0cnVlLHN0cmluZzp0cnVlfTtmdW5jdGlvbiBfaXNGcm96ZW4ob2JqZWN0KXtpZihvYmplY3Q9PT11bmRlZmluZWR8fG9iamVjdD09PW51bGx8fG9wYXF1ZVt0eXBlb2Ygb2JqZWN0XSl7cmV0dXJuIHRydWV9aWYoQXJyYXkuaXNBcnJheShvYmplY3QpfHx0eXBlb2Ygb2JqZWN0PT09XCJvYmplY3RcIil7aWYoIU9iamVjdC5pc0Zyb3plbihvYmplY3QpKXtyZXR1cm4gZmFsc2V9Y29uc3Qga2V5cz1PYmplY3Qua2V5cyhvYmplY3QpO2ZvcihsZXQgaT0wO2k8a2V5cy5sZW5ndGg7aSsrKXtpZighX2lzRnJvemVuKG9iamVjdFtrZXlzW2ldXSkpe3JldHVybiBmYWxzZX19cmV0dXJuIHRydWV9cmV0dXJuIGxvZ2dlciQzLnRocm93QXJndW1lbnRFcnJvcihgQ2Fubm90IGRlZXBDb3B5ICR7dHlwZW9mIG9iamVjdH1gLFwib2JqZWN0XCIsb2JqZWN0KX1mdW5jdGlvbiBfZGVlcENvcHkob2JqZWN0KXtpZihfaXNGcm96ZW4ob2JqZWN0KSl7cmV0dXJuIG9iamVjdH1pZihBcnJheS5pc0FycmF5KG9iamVjdCkpe3JldHVybiBPYmplY3QuZnJlZXplKG9iamVjdC5tYXAoaXRlbT0+ZGVlcENvcHkoaXRlbSkpKX1pZih0eXBlb2Ygb2JqZWN0PT09XCJvYmplY3RcIil7Y29uc3QgcmVzdWx0PXt9O2Zvcihjb25zdCBrZXkgaW4gb2JqZWN0KXtjb25zdCB2YWx1ZT1vYmplY3Rba2V5XTtpZih2YWx1ZT09PXVuZGVmaW5lZCl7Y29udGludWV9ZGVmaW5lUmVhZE9ubHkocmVzdWx0LGtleSxkZWVwQ29weSh2YWx1ZSkpfXJldHVybiByZXN1bHR9cmV0dXJuIGxvZ2dlciQzLnRocm93QXJndW1lbnRFcnJvcihgQ2Fubm90IGRlZXBDb3B5ICR7dHlwZW9mIG9iamVjdH1gLFwib2JqZWN0XCIsb2JqZWN0KX1mdW5jdGlvbiBkZWVwQ29weShvYmplY3Qpe3JldHVybiBfZGVlcENvcHkob2JqZWN0KX1jbGFzcyBEZXNjcmlwdGlvbntjb25zdHJ1Y3RvcihpbmZvKXtmb3IoY29uc3Qga2V5IGluIGluZm8pe3RoaXNba2V5XT1kZWVwQ29weShpbmZvW2tleV0pfX19Y29uc3QgdmVyc2lvbiQ0PVwiYWJpLzUuMS4yXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJDQ9bmV3IExvZ2dlcih2ZXJzaW9uJDQpO2NvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkJDI9e307bGV0IE1vZGlmaWVyc0J5dGVzPXtjYWxsZGF0YTp0cnVlLG1lbW9yeTp0cnVlLHN0b3JhZ2U6dHJ1ZX07bGV0IE1vZGlmaWVyc05lc3Q9e2NhbGxkYXRhOnRydWUsbWVtb3J5OnRydWV9O2Z1bmN0aW9uIGNoZWNrTW9kaWZpZXIodHlwZSxuYW1lKXtpZih0eXBlPT09XCJieXRlc1wifHx0eXBlPT09XCJzdHJpbmdcIil7aWYoTW9kaWZpZXJzQnl0ZXNbbmFtZV0pe3JldHVybiB0cnVlfX1lbHNlIGlmKHR5cGU9PT1cImFkZHJlc3NcIil7aWYobmFtZT09PVwicGF5YWJsZVwiKXtyZXR1cm4gdHJ1ZX19ZWxzZSBpZih0eXBlLmluZGV4T2YoXCJbXCIpPj0wfHx0eXBlPT09XCJ0dXBsZVwiKXtpZihNb2RpZmllcnNOZXN0W25hbWVdKXtyZXR1cm4gdHJ1ZX19aWYoTW9kaWZpZXJzQnl0ZXNbbmFtZV18fG5hbWU9PT1cInBheWFibGVcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBtb2RpZmllclwiLFwibmFtZVwiLG5hbWUpfXJldHVybiBmYWxzZX1mdW5jdGlvbiBwYXJzZVBhcmFtVHlwZShwYXJhbSxhbGxvd0luZGV4ZWQpe2xldCBvcmlnaW5hbFBhcmFtPXBhcmFtO2Z1bmN0aW9uIHRocm93RXJyb3IoaSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBwb3NpdGlvbiAke2l9YCxcInBhcmFtXCIscGFyYW0pfXBhcmFtPXBhcmFtLnJlcGxhY2UoL1xccy9nLFwiIFwiKTtmdW5jdGlvbiBuZXdOb2RlKHBhcmVudCl7bGV0IG5vZGU9e3R5cGU6XCJcIixuYW1lOlwiXCIscGFyZW50OnBhcmVudCxzdGF0ZTp7YWxsb3dUeXBlOnRydWV9fTtpZihhbGxvd0luZGV4ZWQpe25vZGUuaW5kZXhlZD1mYWxzZX1yZXR1cm4gbm9kZX1sZXQgcGFyZW50PXt0eXBlOlwiXCIsbmFtZTpcIlwiLHN0YXRlOnthbGxvd1R5cGU6dHJ1ZX19O2xldCBub2RlPXBhcmVudDtmb3IobGV0IGk9MDtpPHBhcmFtLmxlbmd0aDtpKyspe2xldCBjPXBhcmFtW2ldO3N3aXRjaChjKXtjYXNlXCIoXCI6aWYobm9kZS5zdGF0ZS5hbGxvd1R5cGUmJm5vZGUudHlwZT09PVwiXCIpe25vZGUudHlwZT1cInR1cGxlXCJ9ZWxzZSBpZighbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyl7dGhyb3dFcnJvcihpKX1ub2RlLnN0YXRlLmFsbG93VHlwZT1mYWxzZTtub2RlLnR5cGU9dmVyaWZ5VHlwZShub2RlLnR5cGUpO25vZGUuY29tcG9uZW50cz1bbmV3Tm9kZShub2RlKV07bm9kZT1ub2RlLmNvbXBvbmVudHNbMF07YnJlYWs7Y2FzZVwiKVwiOmRlbGV0ZSBub2RlLnN0YXRlO2lmKG5vZGUubmFtZT09PVwiaW5kZXhlZFwiKXtpZighYWxsb3dJbmRleGVkKXt0aHJvd0Vycm9yKGkpfW5vZGUuaW5kZXhlZD10cnVlO25vZGUubmFtZT1cIlwifWlmKGNoZWNrTW9kaWZpZXIobm9kZS50eXBlLG5vZGUubmFtZSkpe25vZGUubmFtZT1cIlwifW5vZGUudHlwZT12ZXJpZnlUeXBlKG5vZGUudHlwZSk7bGV0IGNoaWxkPW5vZGU7bm9kZT1ub2RlLnBhcmVudDtpZighbm9kZSl7dGhyb3dFcnJvcihpKX1kZWxldGUgY2hpbGQucGFyZW50O25vZGUuc3RhdGUuYWxsb3dQYXJhbXM9ZmFsc2U7bm9kZS5zdGF0ZS5hbGxvd05hbWU9dHJ1ZTtub2RlLnN0YXRlLmFsbG93QXJyYXk9dHJ1ZTticmVhaztjYXNlXCIsXCI6ZGVsZXRlIG5vZGUuc3RhdGU7aWYobm9kZS5uYW1lPT09XCJpbmRleGVkXCIpe2lmKCFhbGxvd0luZGV4ZWQpe3Rocm93RXJyb3IoaSl9bm9kZS5pbmRleGVkPXRydWU7bm9kZS5uYW1lPVwiXCJ9aWYoY2hlY2tNb2RpZmllcihub2RlLnR5cGUsbm9kZS5uYW1lKSl7bm9kZS5uYW1lPVwiXCJ9bm9kZS50eXBlPXZlcmlmeVR5cGUobm9kZS50eXBlKTtsZXQgc2libGluZz1uZXdOb2RlKG5vZGUucGFyZW50KTtub2RlLnBhcmVudC5jb21wb25lbnRzLnB1c2goc2libGluZyk7ZGVsZXRlIG5vZGUucGFyZW50O25vZGU9c2libGluZzticmVhaztjYXNlXCIgXCI6aWYobm9kZS5zdGF0ZS5hbGxvd1R5cGUpe2lmKG5vZGUudHlwZSE9PVwiXCIpe25vZGUudHlwZT12ZXJpZnlUeXBlKG5vZGUudHlwZSk7ZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dUeXBlO25vZGUuc3RhdGUuYWxsb3dOYW1lPXRydWU7bm9kZS5zdGF0ZS5hbGxvd1BhcmFtcz10cnVlfX1pZihub2RlLnN0YXRlLmFsbG93TmFtZSl7aWYobm9kZS5uYW1lIT09XCJcIil7aWYobm9kZS5uYW1lPT09XCJpbmRleGVkXCIpe2lmKCFhbGxvd0luZGV4ZWQpe3Rocm93RXJyb3IoaSl9aWYobm9kZS5pbmRleGVkKXt0aHJvd0Vycm9yKGkpfW5vZGUuaW5kZXhlZD10cnVlO25vZGUubmFtZT1cIlwifWVsc2UgaWYoY2hlY2tNb2RpZmllcihub2RlLnR5cGUsbm9kZS5uYW1lKSl7bm9kZS5uYW1lPVwiXCJ9ZWxzZXtub2RlLnN0YXRlLmFsbG93TmFtZT1mYWxzZX19fWJyZWFrO2Nhc2VcIltcIjppZighbm9kZS5zdGF0ZS5hbGxvd0FycmF5KXt0aHJvd0Vycm9yKGkpfW5vZGUudHlwZSs9Yztub2RlLnN0YXRlLmFsbG93QXJyYXk9ZmFsc2U7bm9kZS5zdGF0ZS5hbGxvd05hbWU9ZmFsc2U7bm9kZS5zdGF0ZS5yZWFkQXJyYXk9dHJ1ZTticmVhaztjYXNlXCJdXCI6aWYoIW5vZGUuc3RhdGUucmVhZEFycmF5KXt0aHJvd0Vycm9yKGkpfW5vZGUudHlwZSs9Yztub2RlLnN0YXRlLnJlYWRBcnJheT1mYWxzZTtub2RlLnN0YXRlLmFsbG93QXJyYXk9dHJ1ZTtub2RlLnN0YXRlLmFsbG93TmFtZT10cnVlO2JyZWFrO2RlZmF1bHQ6aWYobm9kZS5zdGF0ZS5hbGxvd1R5cGUpe25vZGUudHlwZSs9Yztub2RlLnN0YXRlLmFsbG93UGFyYW1zPXRydWU7bm9kZS5zdGF0ZS5hbGxvd0FycmF5PXRydWV9ZWxzZSBpZihub2RlLnN0YXRlLmFsbG93TmFtZSl7bm9kZS5uYW1lKz1jO2RlbGV0ZSBub2RlLnN0YXRlLmFsbG93QXJyYXl9ZWxzZSBpZihub2RlLnN0YXRlLnJlYWRBcnJheSl7bm9kZS50eXBlKz1jfWVsc2V7dGhyb3dFcnJvcihpKX19fWlmKG5vZGUucGFyZW50KXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmV4cGVjdGVkIGVvZlwiLFwicGFyYW1cIixwYXJhbSl9ZGVsZXRlIHBhcmVudC5zdGF0ZTtpZihub2RlLm5hbWU9PT1cImluZGV4ZWRcIil7aWYoIWFsbG93SW5kZXhlZCl7dGhyb3dFcnJvcihvcmlnaW5hbFBhcmFtLmxlbmd0aC03KX1pZihub2RlLmluZGV4ZWQpe3Rocm93RXJyb3Iob3JpZ2luYWxQYXJhbS5sZW5ndGgtNyl9bm9kZS5pbmRleGVkPXRydWU7bm9kZS5uYW1lPVwiXCJ9ZWxzZSBpZihjaGVja01vZGlmaWVyKG5vZGUudHlwZSxub2RlLm5hbWUpKXtub2RlLm5hbWU9XCJcIn1wYXJlbnQudHlwZT12ZXJpZnlUeXBlKHBhcmVudC50eXBlKTtyZXR1cm4gcGFyZW50fWZ1bmN0aW9uIHBvcHVsYXRlKG9iamVjdCxwYXJhbXMpe2ZvcihsZXQga2V5IGluIHBhcmFtcyl7ZGVmaW5lUmVhZE9ubHkob2JqZWN0LGtleSxwYXJhbXNba2V5XSl9fWNvbnN0IEZvcm1hdFR5cGVzPU9iamVjdC5mcmVlemUoe3NpZ2hhc2g6XCJzaWdoYXNoXCIsbWluaW1hbDpcIm1pbmltYWxcIixmdWxsOlwiZnVsbFwiLGpzb246XCJqc29uXCJ9KTtjb25zdCBwYXJhbVR5cGVBcnJheT1uZXcgUmVnRXhwKC9eKC4qKVxcWyhbMC05XSopXFxdJC8pO2NsYXNzIFBhcmFtVHlwZXtjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLHBhcmFtcyl7aWYoY29uc3RydWN0b3JHdWFyZCE9PV9jb25zdHJ1Y3Rvckd1YXJkJDIpe2xvZ2dlciQ0LnRocm93RXJyb3IoXCJ1c2UgZnJvbVN0cmluZ1wiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJuZXcgUGFyYW1UeXBlKClcIn0pfXBvcHVsYXRlKHRoaXMscGFyYW1zKTtsZXQgbWF0Y2g9dGhpcy50eXBlLm1hdGNoKHBhcmFtVHlwZUFycmF5KTtpZihtYXRjaCl7cG9wdWxhdGUodGhpcyx7YXJyYXlMZW5ndGg6cGFyc2VJbnQobWF0Y2hbMl18fFwiLTFcIiksYXJyYXlDaGlsZHJlbjpQYXJhbVR5cGUuZnJvbU9iamVjdCh7dHlwZTptYXRjaFsxXSxjb21wb25lbnRzOnRoaXMuY29tcG9uZW50c30pLGJhc2VUeXBlOlwiYXJyYXlcIn0pfWVsc2V7cG9wdWxhdGUodGhpcyx7YXJyYXlMZW5ndGg6bnVsbCxhcnJheUNoaWxkcmVuOm51bGwsYmFzZVR5cGU6dGhpcy5jb21wb25lbnRzIT1udWxsP1widHVwbGVcIjp0aGlzLnR5cGV9KX10aGlzLl9pc1BhcmFtVHlwZT10cnVlO09iamVjdC5mcmVlemUodGhpcyl9Zm9ybWF0KGZvcm1hdCl7aWYoIWZvcm1hdCl7Zm9ybWF0PUZvcm1hdFR5cGVzLnNpZ2hhc2h9aWYoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIixcImZvcm1hdFwiLGZvcm1hdCl9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuanNvbil7bGV0IHJlc3VsdD17dHlwZTp0aGlzLmJhc2VUeXBlPT09XCJ0dXBsZVwiP1widHVwbGVcIjp0aGlzLnR5cGUsbmFtZTp0aGlzLm5hbWV8fHVuZGVmaW5lZH07aWYodHlwZW9mIHRoaXMuaW5kZXhlZD09PVwiYm9vbGVhblwiKXtyZXN1bHQuaW5kZXhlZD10aGlzLmluZGV4ZWR9aWYodGhpcy5jb21wb25lbnRzKXtyZXN1bHQuY29tcG9uZW50cz10aGlzLmNvbXBvbmVudHMubWFwKGNvbXA9PkpTT04ucGFyc2UoY29tcC5mb3JtYXQoZm9ybWF0KSkpfXJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpfWxldCByZXN1bHQ9XCJcIjtpZih0aGlzLmJhc2VUeXBlPT09XCJhcnJheVwiKXtyZXN1bHQrPXRoaXMuYXJyYXlDaGlsZHJlbi5mb3JtYXQoZm9ybWF0KTtyZXN1bHQrPVwiW1wiKyh0aGlzLmFycmF5TGVuZ3RoPDA/XCJcIjpTdHJpbmcodGhpcy5hcnJheUxlbmd0aCkpK1wiXVwifWVsc2V7aWYodGhpcy5iYXNlVHlwZT09PVwidHVwbGVcIil7aWYoZm9ybWF0IT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7cmVzdWx0Kz10aGlzLnR5cGV9cmVzdWx0Kz1cIihcIit0aGlzLmNvbXBvbmVudHMubWFwKGNvbXA9PmNvbXAuZm9ybWF0KGZvcm1hdCkpLmpvaW4oZm9ybWF0PT09Rm9ybWF0VHlwZXMuZnVsbD9cIiwgXCI6XCIsXCIpK1wiKVwifWVsc2V7cmVzdWx0Kz10aGlzLnR5cGV9fWlmKGZvcm1hdCE9PUZvcm1hdFR5cGVzLnNpZ2hhc2gpe2lmKHRoaXMuaW5kZXhlZD09PXRydWUpe3Jlc3VsdCs9XCIgaW5kZXhlZFwifWlmKGZvcm1hdD09PUZvcm1hdFR5cGVzLmZ1bGwmJnRoaXMubmFtZSl7cmVzdWx0Kz1cIiBcIit0aGlzLm5hbWV9fXJldHVybiByZXN1bHR9c3RhdGljIGZyb20odmFsdWUsYWxsb3dJbmRleGVkKXtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gUGFyYW1UeXBlLmZyb21TdHJpbmcodmFsdWUsYWxsb3dJbmRleGVkKX1yZXR1cm4gUGFyYW1UeXBlLmZyb21PYmplY3QodmFsdWUpfXN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKXtpZihQYXJhbVR5cGUuaXNQYXJhbVR5cGUodmFsdWUpKXtyZXR1cm4gdmFsdWV9cmV0dXJuIG5ldyBQYXJhbVR5cGUoX2NvbnN0cnVjdG9yR3VhcmQkMix7bmFtZTp2YWx1ZS5uYW1lfHxudWxsLHR5cGU6dmVyaWZ5VHlwZSh2YWx1ZS50eXBlKSxpbmRleGVkOnZhbHVlLmluZGV4ZWQ9PW51bGw/bnVsbDohIXZhbHVlLmluZGV4ZWQsY29tcG9uZW50czp2YWx1ZS5jb21wb25lbnRzP3ZhbHVlLmNvbXBvbmVudHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KTpudWxsfSl9c3RhdGljIGZyb21TdHJpbmcodmFsdWUsYWxsb3dJbmRleGVkKXtmdW5jdGlvbiBQYXJhbVR5cGlmeShub2RlKXtyZXR1cm4gUGFyYW1UeXBlLmZyb21PYmplY3Qoe25hbWU6bm9kZS5uYW1lLHR5cGU6bm9kZS50eXBlLGluZGV4ZWQ6bm9kZS5pbmRleGVkLGNvbXBvbmVudHM6bm9kZS5jb21wb25lbnRzfSl9cmV0dXJuIFBhcmFtVHlwaWZ5KHBhcnNlUGFyYW1UeXBlKHZhbHVlLCEhYWxsb3dJbmRleGVkKSl9c3RhdGljIGlzUGFyYW1UeXBlKHZhbHVlKXtyZXR1cm4hISh2YWx1ZSE9bnVsbCYmdmFsdWUuX2lzUGFyYW1UeXBlKX19ZnVuY3Rpb24gcGFyc2VQYXJhbXModmFsdWUsYWxsb3dJbmRleCl7cmV0dXJuIHNwbGl0TmVzdGluZyh2YWx1ZSkubWFwKHBhcmFtPT5QYXJhbVR5cGUuZnJvbVN0cmluZyhwYXJhbSxhbGxvd0luZGV4KSl9Y2xhc3MgRnJhZ21lbnR7Y29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZCxwYXJhbXMpe2lmKGNvbnN0cnVjdG9yR3VhcmQhPT1fY29uc3RydWN0b3JHdWFyZCQyKXtsb2dnZXIkNC50aHJvd0Vycm9yKFwidXNlIGEgc3RhdGljIGZyb20gbWV0aG9kXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyBGcmFnbWVudCgpXCJ9KX1wb3B1bGF0ZSh0aGlzLHBhcmFtcyk7dGhpcy5faXNGcmFnbWVudD10cnVlO09iamVjdC5mcmVlemUodGhpcyl9c3RhdGljIGZyb20odmFsdWUpe2lmKEZyYWdtZW50LmlzRnJhZ21lbnQodmFsdWUpKXtyZXR1cm4gdmFsdWV9aWYodHlwZW9mIHZhbHVlPT09XCJzdHJpbmdcIil7cmV0dXJuIEZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpfXJldHVybiBGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKX1zdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSl7aWYoRnJhZ21lbnQuaXNGcmFnbWVudCh2YWx1ZSkpe3JldHVybiB2YWx1ZX1zd2l0Y2godmFsdWUudHlwZSl7Y2FzZVwiZnVuY3Rpb25cIjpyZXR1cm4gRnVuY3Rpb25GcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtjYXNlXCJldmVudFwiOnJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO2Nhc2VcImNvbnN0cnVjdG9yXCI6cmV0dXJuIENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7Y2FzZVwiZXJyb3JcIjpjYXNlXCJmYWxsYmFja1wiOmNhc2VcInJlY2VpdmVcIjpyZXR1cm4gbnVsbH1yZXR1cm4gbG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmcmFnbWVudCBvYmplY3RcIixcInZhbHVlXCIsdmFsdWUpfXN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKXt2YWx1ZT12YWx1ZS5yZXBsYWNlKC9cXHMvZyxcIiBcIik7dmFsdWU9dmFsdWUucmVwbGFjZSgvXFwoL2csXCIgKFwiKS5yZXBsYWNlKC9cXCkvZyxcIikgXCIpLnJlcGxhY2UoL1xccysvZyxcIiBcIik7dmFsdWU9dmFsdWUudHJpbSgpO2lmKHZhbHVlLnNwbGl0KFwiIFwiKVswXT09PVwiZXZlbnRcIil7cmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS5zdWJzdHJpbmcoNSkudHJpbSgpKX1lbHNlIGlmKHZhbHVlLnNwbGl0KFwiIFwiKVswXT09PVwiZnVuY3Rpb25cIil7cmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS5zdWJzdHJpbmcoOCkudHJpbSgpKX1lbHNlIGlmKHZhbHVlLnNwbGl0KFwiKFwiKVswXS50cmltKCk9PT1cImNvbnN0cnVjdG9yXCIpe3JldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUudHJpbSgpKX1yZXR1cm4gbG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgZnJhZ21lbnRcIixcInZhbHVlXCIsdmFsdWUpfXN0YXRpYyBpc0ZyYWdtZW50KHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzRnJhZ21lbnQpfX1jbGFzcyBFdmVudEZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnR7Zm9ybWF0KGZvcm1hdCl7aWYoIWZvcm1hdCl7Zm9ybWF0PUZvcm1hdFR5cGVzLnNpZ2hhc2h9aWYoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIixcImZvcm1hdFwiLGZvcm1hdCl9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuanNvbil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHt0eXBlOlwiZXZlbnRcIixhbm9ueW1vdXM6dGhpcy5hbm9ueW1vdXMsbmFtZTp0aGlzLm5hbWUsaW5wdXRzOnRoaXMuaW5wdXRzLm1hcChpbnB1dD0+SlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpfSl9bGV0IHJlc3VsdD1cIlwiO2lmKGZvcm1hdCE9PUZvcm1hdFR5cGVzLnNpZ2hhc2gpe3Jlc3VsdCs9XCJldmVudCBcIn1yZXN1bHQrPXRoaXMubmFtZStcIihcIit0aGlzLmlucHV0cy5tYXAoaW5wdXQ9PmlucHV0LmZvcm1hdChmb3JtYXQpKS5qb2luKGZvcm1hdD09PUZvcm1hdFR5cGVzLmZ1bGw/XCIsIFwiOlwiLFwiKStcIikgXCI7aWYoZm9ybWF0IT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7aWYodGhpcy5hbm9ueW1vdXMpe3Jlc3VsdCs9XCJhbm9ueW1vdXMgXCJ9fXJldHVybiByZXN1bHQudHJpbSgpfXN0YXRpYyBmcm9tKHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKX1yZXR1cm4gRXZlbnRGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKX1zdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSl7aWYoRXZlbnRGcmFnbWVudC5pc0V2ZW50RnJhZ21lbnQodmFsdWUpKXtyZXR1cm4gdmFsdWV9aWYodmFsdWUudHlwZSE9PVwiZXZlbnRcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBldmVudCBvYmplY3RcIixcInZhbHVlXCIsdmFsdWUpfWNvbnN0IHBhcmFtcz17bmFtZTp2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLGFub255bW91czp2YWx1ZS5hbm9ueW1vdXMsaW5wdXRzOnZhbHVlLmlucHV0cz92YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KTpbXSx0eXBlOlwiZXZlbnRcIn07cmV0dXJuIG5ldyBFdmVudEZyYWdtZW50KF9jb25zdHJ1Y3Rvckd1YXJkJDIscGFyYW1zKX1zdGF0aWMgZnJvbVN0cmluZyh2YWx1ZSl7bGV0IG1hdGNoPXZhbHVlLm1hdGNoKHJlZ2V4UGFyZW4pO2lmKCFtYXRjaCl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBldmVudCBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfWxldCBhbm9ueW1vdXM9ZmFsc2U7bWF0Y2hbM10uc3BsaXQoXCIgXCIpLmZvckVhY2gobW9kaWZpZXI9Pntzd2l0Y2gobW9kaWZpZXIudHJpbSgpKXtjYXNlXCJhbm9ueW1vdXNcIjphbm9ueW1vdXM9dHJ1ZTticmVhaztjYXNlXCJcIjpicmVhaztkZWZhdWx0OmxvZ2dlciQ0Lndhcm4oXCJ1bmtub3duIG1vZGlmaWVyOiBcIittb2RpZmllcil9fSk7cmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbU9iamVjdCh7bmFtZTptYXRjaFsxXS50cmltKCksYW5vbnltb3VzOmFub255bW91cyxpbnB1dHM6cGFyc2VQYXJhbXMobWF0Y2hbMl0sdHJ1ZSksdHlwZTpcImV2ZW50XCJ9KX1zdGF0aWMgaXNFdmVudEZyYWdtZW50KHZhbHVlKXtyZXR1cm4gdmFsdWUmJnZhbHVlLl9pc0ZyYWdtZW50JiZ2YWx1ZS50eXBlPT09XCJldmVudFwifX1mdW5jdGlvbiBwYXJzZUdhcyh2YWx1ZSxwYXJhbXMpe3BhcmFtcy5nYXM9bnVsbDtsZXQgY29tcHM9dmFsdWUuc3BsaXQoXCJAXCIpO2lmKGNvbXBzLmxlbmd0aCE9PTEpe2lmKGNvbXBzLmxlbmd0aD4yKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGh1bWFuLXJlYWRhYmxlIEFCSSBzaWduYXR1cmVcIixcInZhbHVlXCIsdmFsdWUpfWlmKCFjb21wc1sxXS5tYXRjaCgvXlswLTldKyQvKSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBodW1hbi1yZWFkYWJsZSBBQkkgc2lnbmF0dXJlIGdhc1wiLFwidmFsdWVcIix2YWx1ZSl9cGFyYW1zLmdhcz1CaWdOdW1iZXIuZnJvbShjb21wc1sxXSk7cmV0dXJuIGNvbXBzWzBdfXJldHVybiB2YWx1ZX1mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyh2YWx1ZSxwYXJhbXMpe3BhcmFtcy5jb25zdGFudD1mYWxzZTtwYXJhbXMucGF5YWJsZT1mYWxzZTtwYXJhbXMuc3RhdGVNdXRhYmlsaXR5PVwibm9ucGF5YWJsZVwiO3ZhbHVlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKG1vZGlmaWVyPT57c3dpdGNoKG1vZGlmaWVyLnRyaW0oKSl7Y2FzZVwiY29uc3RhbnRcIjpwYXJhbXMuY29uc3RhbnQ9dHJ1ZTticmVhaztjYXNlXCJwYXlhYmxlXCI6cGFyYW1zLnBheWFibGU9dHJ1ZTtwYXJhbXMuc3RhdGVNdXRhYmlsaXR5PVwicGF5YWJsZVwiO2JyZWFrO2Nhc2VcIm5vbnBheWFibGVcIjpwYXJhbXMucGF5YWJsZT1mYWxzZTtwYXJhbXMuc3RhdGVNdXRhYmlsaXR5PVwibm9ucGF5YWJsZVwiO2JyZWFrO2Nhc2VcInB1cmVcIjpwYXJhbXMuY29uc3RhbnQ9dHJ1ZTtwYXJhbXMuc3RhdGVNdXRhYmlsaXR5PVwicHVyZVwiO2JyZWFrO2Nhc2VcInZpZXdcIjpwYXJhbXMuY29uc3RhbnQ9dHJ1ZTtwYXJhbXMuc3RhdGVNdXRhYmlsaXR5PVwidmlld1wiO2JyZWFrO2Nhc2VcImV4dGVybmFsXCI6Y2FzZVwicHVibGljXCI6Y2FzZVwiXCI6YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhcInVua25vd24gbW9kaWZpZXI6IFwiK21vZGlmaWVyKX19KX1mdW5jdGlvbiB2ZXJpZnlTdGF0ZSh2YWx1ZSl7bGV0IHJlc3VsdD17Y29uc3RhbnQ6ZmFsc2UscGF5YWJsZTp0cnVlLHN0YXRlTXV0YWJpbGl0eTpcInBheWFibGVcIn07aWYodmFsdWUuc3RhdGVNdXRhYmlsaXR5IT1udWxsKXtyZXN1bHQuc3RhdGVNdXRhYmlsaXR5PXZhbHVlLnN0YXRlTXV0YWJpbGl0eTtyZXN1bHQuY29uc3RhbnQ9cmVzdWx0LnN0YXRlTXV0YWJpbGl0eT09PVwidmlld1wifHxyZXN1bHQuc3RhdGVNdXRhYmlsaXR5PT09XCJwdXJlXCI7aWYodmFsdWUuY29uc3RhbnQhPW51bGwpe2lmKCEhdmFsdWUuY29uc3RhbnQhPT1yZXN1bHQuY29uc3RhbnQpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImNhbm5vdCBoYXZlIGNvbnN0YW50IGZ1bmN0aW9uIHdpdGggbXV0YWJpbGl0eSBcIityZXN1bHQuc3RhdGVNdXRhYmlsaXR5LFwidmFsdWVcIix2YWx1ZSl9fXJlc3VsdC5wYXlhYmxlPXJlc3VsdC5zdGF0ZU11dGFiaWxpdHk9PT1cInBheWFibGVcIjtpZih2YWx1ZS5wYXlhYmxlIT1udWxsKXtpZighIXZhbHVlLnBheWFibGUhPT1yZXN1bHQucGF5YWJsZSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgcGF5YWJsZSBmdW5jdGlvbiB3aXRoIG11dGFiaWxpdHkgXCIrcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSxcInZhbHVlXCIsdmFsdWUpfX19ZWxzZSBpZih2YWx1ZS5wYXlhYmxlIT1udWxsKXtyZXN1bHQucGF5YWJsZT0hIXZhbHVlLnBheWFibGU7aWYodmFsdWUuY29uc3RhbnQ9PW51bGwmJiFyZXN1bHQucGF5YWJsZSYmdmFsdWUudHlwZSE9PVwiY29uc3RydWN0b3JcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwidW5hYmxlIHRvIGRldGVybWluZSBzdGF0ZU11dGFiaWxpdHlcIixcInZhbHVlXCIsdmFsdWUpfXJlc3VsdC5jb25zdGFudD0hIXZhbHVlLmNvbnN0YW50O2lmKHJlc3VsdC5jb25zdGFudCl7cmVzdWx0LnN0YXRlTXV0YWJpbGl0eT1cInZpZXdcIn1lbHNle3Jlc3VsdC5zdGF0ZU11dGFiaWxpdHk9cmVzdWx0LnBheWFibGU/XCJwYXlhYmxlXCI6XCJub25wYXlhYmxlXCJ9aWYocmVzdWx0LnBheWFibGUmJnJlc3VsdC5jb25zdGFudCl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgcGF5YWJsZSBmdW5jdGlvblwiLFwidmFsdWVcIix2YWx1ZSl9fWVsc2UgaWYodmFsdWUuY29uc3RhbnQhPW51bGwpe3Jlc3VsdC5jb25zdGFudD0hIXZhbHVlLmNvbnN0YW50O3Jlc3VsdC5wYXlhYmxlPSFyZXN1bHQuY29uc3RhbnQ7cmVzdWx0LnN0YXRlTXV0YWJpbGl0eT1yZXN1bHQuY29uc3RhbnQ/XCJ2aWV3XCI6XCJwYXlhYmxlXCJ9ZWxzZSBpZih2YWx1ZS50eXBlIT09XCJjb25zdHJ1Y3RvclwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmFibGUgdG8gZGV0ZXJtaW5lIHN0YXRlTXV0YWJpbGl0eVwiLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIHJlc3VsdH1jbGFzcyBDb25zdHJ1Y3RvckZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnR7Zm9ybWF0KGZvcm1hdCl7aWYoIWZvcm1hdCl7Zm9ybWF0PUZvcm1hdFR5cGVzLnNpZ2hhc2h9aWYoIUZvcm1hdFR5cGVzW2Zvcm1hdF0pe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIixcImZvcm1hdFwiLGZvcm1hdCl9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuanNvbil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHt0eXBlOlwiY29uc3RydWN0b3JcIixzdGF0ZU11dGFiaWxpdHk6dGhpcy5zdGF0ZU11dGFiaWxpdHkhPT1cIm5vbnBheWFibGVcIj90aGlzLnN0YXRlTXV0YWJpbGl0eTp1bmRlZmluZWQscGF5YWJsZTp0aGlzLnBheWFibGUsZ2FzOnRoaXMuZ2FzP3RoaXMuZ2FzLnRvTnVtYmVyKCk6dW5kZWZpbmVkLGlucHV0czp0aGlzLmlucHV0cy5tYXAoaW5wdXQ9PkpTT04ucGFyc2UoaW5wdXQuZm9ybWF0KGZvcm1hdCkpKX0pfWlmKGZvcm1hdD09PUZvcm1hdFR5cGVzLnNpZ2hhc2gpe2xvZ2dlciQ0LnRocm93RXJyb3IoXCJjYW5ub3QgZm9ybWF0IGEgY29uc3RydWN0b3IgZm9yIHNpZ2hhc2hcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiZm9ybWF0KHNpZ2hhc2gpXCJ9KX1sZXQgcmVzdWx0PVwiY29uc3RydWN0b3IoXCIrdGhpcy5pbnB1dHMubWFwKGlucHV0PT5pbnB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5mdWxsP1wiLCBcIjpcIixcIikrXCIpIFwiO2lmKHRoaXMuc3RhdGVNdXRhYmlsaXR5JiZ0aGlzLnN0YXRlTXV0YWJpbGl0eSE9PVwibm9ucGF5YWJsZVwiKXtyZXN1bHQrPXRoaXMuc3RhdGVNdXRhYmlsaXR5K1wiIFwifXJldHVybiByZXN1bHQudHJpbSgpfXN0YXRpYyBmcm9tKHZhbHVlKXtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKX1yZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKX1zdGF0aWMgZnJvbU9iamVjdCh2YWx1ZSl7aWYoQ29uc3RydWN0b3JGcmFnbWVudC5pc0NvbnN0cnVjdG9yRnJhZ21lbnQodmFsdWUpKXtyZXR1cm4gdmFsdWV9aWYodmFsdWUudHlwZSE9PVwiY29uc3RydWN0b3JcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb25zdHJ1Y3RvciBvYmplY3RcIixcInZhbHVlXCIsdmFsdWUpfWxldCBzdGF0ZT12ZXJpZnlTdGF0ZSh2YWx1ZSk7aWYoc3RhdGUuY29uc3RhbnQpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjb25zdGFudFwiLFwidmFsdWVcIix2YWx1ZSl9Y29uc3QgcGFyYW1zPXtuYW1lOm51bGwsdHlwZTp2YWx1ZS50eXBlLGlucHV0czp2YWx1ZS5pbnB1dHM/dmFsdWUuaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCk6W10scGF5YWJsZTpzdGF0ZS5wYXlhYmxlLHN0YXRlTXV0YWJpbGl0eTpzdGF0ZS5zdGF0ZU11dGFiaWxpdHksZ2FzOnZhbHVlLmdhcz9CaWdOdW1iZXIuZnJvbSh2YWx1ZS5nYXMpOm51bGx9O3JldHVybiBuZXcgQ29uc3RydWN0b3JGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCQyLHBhcmFtcyl9c3RhdGljIGZyb21TdHJpbmcodmFsdWUpe2xldCBwYXJhbXM9e3R5cGU6XCJjb25zdHJ1Y3RvclwifTt2YWx1ZT1wYXJzZUdhcyh2YWx1ZSxwYXJhbXMpO2xldCBwYXJlbnM9dmFsdWUubWF0Y2gocmVnZXhQYXJlbik7aWYoIXBhcmVuc3x8cGFyZW5zWzFdLnRyaW0oKSE9PVwiY29uc3RydWN0b3JcIil7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb25zdHJ1Y3RvciBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfXBhcmFtcy5pbnB1dHM9cGFyc2VQYXJhbXMocGFyZW5zWzJdLnRyaW0oKSxmYWxzZSk7cGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSxwYXJhbXMpO3JldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21PYmplY3QocGFyYW1zKX1zdGF0aWMgaXNDb25zdHJ1Y3RvckZyYWdtZW50KHZhbHVlKXtyZXR1cm4gdmFsdWUmJnZhbHVlLl9pc0ZyYWdtZW50JiZ2YWx1ZS50eXBlPT09XCJjb25zdHJ1Y3RvclwifX1jbGFzcyBGdW5jdGlvbkZyYWdtZW50IGV4dGVuZHMgQ29uc3RydWN0b3JGcmFnbWVudHtmb3JtYXQoZm9ybWF0KXtpZighZm9ybWF0KXtmb3JtYXQ9Rm9ybWF0VHlwZXMuc2lnaGFzaH1pZighRm9ybWF0VHlwZXNbZm9ybWF0XSl7bG9nZ2VyJDQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLFwiZm9ybWF0XCIsZm9ybWF0KX1pZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5qc29uKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoe3R5cGU6XCJmdW5jdGlvblwiLG5hbWU6dGhpcy5uYW1lLGNvbnN0YW50OnRoaXMuY29uc3RhbnQsc3RhdGVNdXRhYmlsaXR5OnRoaXMuc3RhdGVNdXRhYmlsaXR5IT09XCJub25wYXlhYmxlXCI/dGhpcy5zdGF0ZU11dGFiaWxpdHk6dW5kZWZpbmVkLHBheWFibGU6dGhpcy5wYXlhYmxlLGdhczp0aGlzLmdhcz90aGlzLmdhcy50b051bWJlcigpOnVuZGVmaW5lZCxpbnB1dHM6dGhpcy5pbnB1dHMubWFwKGlucHV0PT5KU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSksb3V0cHV0czp0aGlzLm91dHB1dHMubWFwKG91dHB1dD0+SlNPTi5wYXJzZShvdXRwdXQuZm9ybWF0KGZvcm1hdCkpKX0pfWxldCByZXN1bHQ9XCJcIjtpZihmb3JtYXQhPT1Gb3JtYXRUeXBlcy5zaWdoYXNoKXtyZXN1bHQrPVwiZnVuY3Rpb24gXCJ9cmVzdWx0Kz10aGlzLm5hbWUrXCIoXCIrdGhpcy5pbnB1dHMubWFwKGlucHV0PT5pbnB1dC5mb3JtYXQoZm9ybWF0KSkuam9pbihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5mdWxsP1wiLCBcIjpcIixcIikrXCIpIFwiO2lmKGZvcm1hdCE9PUZvcm1hdFR5cGVzLnNpZ2hhc2gpe2lmKHRoaXMuc3RhdGVNdXRhYmlsaXR5KXtpZih0aGlzLnN0YXRlTXV0YWJpbGl0eSE9PVwibm9ucGF5YWJsZVwiKXtyZXN1bHQrPXRoaXMuc3RhdGVNdXRhYmlsaXR5K1wiIFwifX1lbHNlIGlmKHRoaXMuY29uc3RhbnQpe3Jlc3VsdCs9XCJ2aWV3IFwifWlmKHRoaXMub3V0cHV0cyYmdGhpcy5vdXRwdXRzLmxlbmd0aCl7cmVzdWx0Kz1cInJldHVybnMgKFwiK3RoaXMub3V0cHV0cy5tYXAob3V0cHV0PT5vdXRwdXQuZm9ybWF0KGZvcm1hdCkpLmpvaW4oXCIsIFwiKStcIikgXCJ9aWYodGhpcy5nYXMhPW51bGwpe3Jlc3VsdCs9XCJAXCIrdGhpcy5nYXMudG9TdHJpbmcoKStcIiBcIn19cmV0dXJuIHJlc3VsdC50cmltKCl9c3RhdGljIGZyb20odmFsdWUpe2lmKHR5cGVvZiB2YWx1ZT09PVwic3RyaW5nXCIpe3JldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpfXJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpfXN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlKXtpZihGdW5jdGlvbkZyYWdtZW50LmlzRnVuY3Rpb25GcmFnbWVudCh2YWx1ZSkpe3JldHVybiB2YWx1ZX1pZih2YWx1ZS50eXBlIT09XCJmdW5jdGlvblwiKXtsb2dnZXIkNC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZ1bmN0aW9uIG9iamVjdFwiLFwidmFsdWVcIix2YWx1ZSl9bGV0IHN0YXRlPXZlcmlmeVN0YXRlKHZhbHVlKTtjb25zdCBwYXJhbXM9e3R5cGU6dmFsdWUudHlwZSxuYW1lOnZlcmlmeUlkZW50aWZpZXIodmFsdWUubmFtZSksY29uc3RhbnQ6c3RhdGUuY29uc3RhbnQsaW5wdXRzOnZhbHVlLmlucHV0cz92YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KTpbXSxvdXRwdXRzOnZhbHVlLm91dHB1dHM/dmFsdWUub3V0cHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpOltdLHBheWFibGU6c3RhdGUucGF5YWJsZSxzdGF0ZU11dGFiaWxpdHk6c3RhdGUuc3RhdGVNdXRhYmlsaXR5LGdhczp2YWx1ZS5nYXM/QmlnTnVtYmVyLmZyb20odmFsdWUuZ2FzKTpudWxsfTtyZXR1cm4gbmV3IEZ1bmN0aW9uRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQkMixwYXJhbXMpfXN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlKXtsZXQgcGFyYW1zPXt0eXBlOlwiZnVuY3Rpb25cIn07dmFsdWU9cGFyc2VHYXModmFsdWUscGFyYW1zKTtsZXQgY29tcHM9dmFsdWUuc3BsaXQoXCIgcmV0dXJucyBcIik7aWYoY29tcHMubGVuZ3RoPjIpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gc3RyaW5nXCIsXCJ2YWx1ZVwiLHZhbHVlKX1sZXQgcGFyZW5zPWNvbXBzWzBdLm1hdGNoKHJlZ2V4UGFyZW4pO2lmKCFwYXJlbnMpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gc2lnbmF0dXJlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1wYXJhbXMubmFtZT1wYXJlbnNbMV0udHJpbSgpO2lmKHBhcmFtcy5uYW1lKXt2ZXJpZnlJZGVudGlmaWVyKHBhcmFtcy5uYW1lKX1wYXJhbXMuaW5wdXRzPXBhcnNlUGFyYW1zKHBhcmVuc1syXSxmYWxzZSk7cGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSxwYXJhbXMpO2lmKGNvbXBzLmxlbmd0aD4xKXtsZXQgcmV0dXJucz1jb21wc1sxXS5tYXRjaChyZWdleFBhcmVuKTtpZihyZXR1cm5zWzFdLnRyaW0oKSE9XCJcInx8cmV0dXJuc1szXS50cmltKCkhPVwiXCIpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcInVuZXhwZWN0ZWQgdG9rZW5zXCIsXCJ2YWx1ZVwiLHZhbHVlKX1wYXJhbXMub3V0cHV0cz1wYXJzZVBhcmFtcyhyZXR1cm5zWzJdLGZhbHNlKX1lbHNle3BhcmFtcy5vdXRwdXRzPVtdfXJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QocGFyYW1zKX1zdGF0aWMgaXNGdW5jdGlvbkZyYWdtZW50KHZhbHVlKXtyZXR1cm4gdmFsdWUmJnZhbHVlLl9pc0ZyYWdtZW50JiZ2YWx1ZS50eXBlPT09XCJmdW5jdGlvblwifX1mdW5jdGlvbiB2ZXJpZnlUeXBlKHR5cGUpe2lmKHR5cGUubWF0Y2goL151aW50KCR8W14xLTldKS8pKXt0eXBlPVwidWludDI1NlwiK3R5cGUuc3Vic3RyaW5nKDQpfWVsc2UgaWYodHlwZS5tYXRjaCgvXmludCgkfFteMS05XSkvKSl7dHlwZT1cImludDI1NlwiK3R5cGUuc3Vic3RyaW5nKDMpfXJldHVybiB0eXBlfWNvbnN0IHJlZ2V4SWRlbnRpZmllcj1uZXcgUmVnRXhwKFwiXltBLVphLXpfXVtBLVphLXowLTlfXSokXCIpO2Z1bmN0aW9uIHZlcmlmeUlkZW50aWZpZXIodmFsdWUpe2lmKCF2YWx1ZXx8IXZhbHVlLm1hdGNoKHJlZ2V4SWRlbnRpZmllcikpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBpZGVudGlmaWVyIFwiJHt2YWx1ZX1cImAsXCJ2YWx1ZVwiLHZhbHVlKX1yZXR1cm4gdmFsdWV9Y29uc3QgcmVnZXhQYXJlbj1uZXcgUmVnRXhwKFwiXihbXikoXSopXFxcXCgoLiopXFxcXCkoW14pKF0qKSRcIik7ZnVuY3Rpb24gc3BsaXROZXN0aW5nKHZhbHVlKXt2YWx1ZT12YWx1ZS50cmltKCk7bGV0IHJlc3VsdD1bXTtsZXQgYWNjdW09XCJcIjtsZXQgZGVwdGg9MDtmb3IobGV0IG9mZnNldD0wO29mZnNldDx2YWx1ZS5sZW5ndGg7b2Zmc2V0Kyspe2xldCBjPXZhbHVlW29mZnNldF07aWYoYz09PVwiLFwiJiZkZXB0aD09PTApe3Jlc3VsdC5wdXNoKGFjY3VtKTthY2N1bT1cIlwifWVsc2V7YWNjdW0rPWM7aWYoYz09PVwiKFwiKXtkZXB0aCsrfWVsc2UgaWYoYz09PVwiKVwiKXtkZXB0aC0tO2lmKGRlcHRoPT09LTEpe2xvZ2dlciQ0LnRocm93QXJndW1lbnRFcnJvcihcInVuYmFsYW5jZWQgcGFyZW50aGVzaXNcIixcInZhbHVlXCIsdmFsdWUpfX19fWlmKGFjY3VtKXtyZXN1bHQucHVzaChhY2N1bSl9cmV0dXJuIHJlc3VsdH1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkNT1uZXcgTG9nZ2VyKHZlcnNpb24kNCk7ZnVuY3Rpb24gY2hlY2tSZXN1bHRFcnJvcnMocmVzdWx0KXtjb25zdCBlcnJvcnM9W107Y29uc3QgY2hlY2tFcnJvcnM9ZnVuY3Rpb24ocGF0aCxvYmplY3Qpe2lmKCFBcnJheS5pc0FycmF5KG9iamVjdCkpe3JldHVybn1mb3IobGV0IGtleSBpbiBvYmplY3Qpe2NvbnN0IGNoaWxkUGF0aD1wYXRoLnNsaWNlKCk7Y2hpbGRQYXRoLnB1c2goa2V5KTt0cnl7Y2hlY2tFcnJvcnMoY2hpbGRQYXRoLG9iamVjdFtrZXldKX1jYXRjaChlcnJvcil7ZXJyb3JzLnB1c2goe3BhdGg6Y2hpbGRQYXRoLGVycm9yOmVycm9yfSl9fX07Y2hlY2tFcnJvcnMoW10scmVzdWx0KTtyZXR1cm4gZXJyb3JzfWNsYXNzIENvZGVye2NvbnN0cnVjdG9yKG5hbWUsdHlwZSxsb2NhbE5hbWUsZHluYW1pYyl7dGhpcy5uYW1lPW5hbWU7dGhpcy50eXBlPXR5cGU7dGhpcy5sb2NhbE5hbWU9bG9jYWxOYW1lO3RoaXMuZHluYW1pYz1keW5hbWljfV90aHJvd0Vycm9yKG1lc3NhZ2UsdmFsdWUpe2xvZ2dlciQ1LnRocm93QXJndW1lbnRFcnJvcihtZXNzYWdlLHRoaXMubG9jYWxOYW1lLHZhbHVlKX19Y2xhc3MgV3JpdGVye2NvbnN0cnVjdG9yKHdvcmRTaXplKXtkZWZpbmVSZWFkT25seSh0aGlzLFwid29yZFNpemVcIix3b3JkU2l6ZXx8MzIpO3RoaXMuX2RhdGE9W107dGhpcy5fZGF0YUxlbmd0aD0wO3RoaXMuX3BhZGRpbmc9bmV3IFVpbnQ4QXJyYXkod29yZFNpemUpfWdldCBkYXRhKCl7cmV0dXJuIGhleENvbmNhdCh0aGlzLl9kYXRhKX1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX2RhdGFMZW5ndGh9X3dyaXRlRGF0YShkYXRhKXt0aGlzLl9kYXRhLnB1c2goZGF0YSk7dGhpcy5fZGF0YUxlbmd0aCs9ZGF0YS5sZW5ndGg7cmV0dXJuIGRhdGEubGVuZ3RofWFwcGVuZFdyaXRlcih3cml0ZXIpe3JldHVybiB0aGlzLl93cml0ZURhdGEoY29uY2F0KHdyaXRlci5fZGF0YSkpfXdyaXRlQnl0ZXModmFsdWUpe2xldCBieXRlcz1hcnJheWlmeSh2YWx1ZSk7Y29uc3QgcGFkZGluZ09mZnNldD1ieXRlcy5sZW5ndGgldGhpcy53b3JkU2l6ZTtpZihwYWRkaW5nT2Zmc2V0KXtieXRlcz1jb25jYXQoW2J5dGVzLHRoaXMuX3BhZGRpbmcuc2xpY2UocGFkZGluZ09mZnNldCldKX1yZXR1cm4gdGhpcy5fd3JpdGVEYXRhKGJ5dGVzKX1fZ2V0VmFsdWUodmFsdWUpe2xldCBieXRlcz1hcnJheWlmeShCaWdOdW1iZXIuZnJvbSh2YWx1ZSkpO2lmKGJ5dGVzLmxlbmd0aD50aGlzLndvcmRTaXplKXtsb2dnZXIkNS50aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se2xlbmd0aDp0aGlzLndvcmRTaXplLG9mZnNldDpieXRlcy5sZW5ndGh9KX1pZihieXRlcy5sZW5ndGgldGhpcy53b3JkU2l6ZSl7Ynl0ZXM9Y29uY2F0KFt0aGlzLl9wYWRkaW5nLnNsaWNlKGJ5dGVzLmxlbmd0aCV0aGlzLndvcmRTaXplKSxieXRlc10pfXJldHVybiBieXRlc313cml0ZVZhbHVlKHZhbHVlKXtyZXR1cm4gdGhpcy5fd3JpdGVEYXRhKHRoaXMuX2dldFZhbHVlKHZhbHVlKSl9d3JpdGVVcGRhdGFibGVWYWx1ZSgpe2NvbnN0IG9mZnNldD10aGlzLl9kYXRhLmxlbmd0aDt0aGlzLl9kYXRhLnB1c2godGhpcy5fcGFkZGluZyk7dGhpcy5fZGF0YUxlbmd0aCs9dGhpcy53b3JkU2l6ZTtyZXR1cm4gdmFsdWU9Pnt0aGlzLl9kYXRhW29mZnNldF09dGhpcy5fZ2V0VmFsdWUodmFsdWUpfX19Y2xhc3MgUmVhZGVye2NvbnN0cnVjdG9yKGRhdGEsd29yZFNpemUsY29lcmNlRnVuYyxhbGxvd0xvb3NlKXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2RhdGFcIixhcnJheWlmeShkYXRhKSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIndvcmRTaXplXCIsd29yZFNpemV8fDMyKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2NvZXJjZUZ1bmNcIixjb2VyY2VGdW5jKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYWxsb3dMb29zZVwiLGFsbG93TG9vc2UpO3RoaXMuX29mZnNldD0wfWdldCBkYXRhKCl7cmV0dXJuIGhleGxpZnkodGhpcy5fZGF0YSl9Z2V0IGNvbnN1bWVkKCl7cmV0dXJuIHRoaXMuX29mZnNldH1zdGF0aWMgY29lcmNlKG5hbWUsdmFsdWUpe2xldCBtYXRjaD1uYW1lLm1hdGNoKFwiXnU/aW50KFswLTldKykkXCIpO2lmKG1hdGNoJiZwYXJzZUludChtYXRjaFsxXSk8PTQ4KXt2YWx1ZT12YWx1ZS50b051bWJlcigpfXJldHVybiB2YWx1ZX1jb2VyY2UobmFtZSx2YWx1ZSl7aWYodGhpcy5fY29lcmNlRnVuYyl7cmV0dXJuIHRoaXMuX2NvZXJjZUZ1bmMobmFtZSx2YWx1ZSl9cmV0dXJuIFJlYWRlci5jb2VyY2UobmFtZSx2YWx1ZSl9X3BlZWtCeXRlcyhvZmZzZXQsbGVuZ3RoLGxvb3NlKXtsZXQgYWxpZ25lZExlbmd0aD1NYXRoLmNlaWwobGVuZ3RoL3RoaXMud29yZFNpemUpKnRoaXMud29yZFNpemU7aWYodGhpcy5fb2Zmc2V0K2FsaWduZWRMZW5ndGg+dGhpcy5fZGF0YS5sZW5ndGgpe2lmKHRoaXMuYWxsb3dMb29zZSYmbG9vc2UmJnRoaXMuX29mZnNldCtsZW5ndGg8PXRoaXMuX2RhdGEubGVuZ3RoKXthbGlnbmVkTGVuZ3RoPWxlbmd0aH1lbHNle2xvZ2dlciQ1LnRocm93RXJyb3IoXCJkYXRhIG91dC1vZi1ib3VuZHNcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHtsZW5ndGg6dGhpcy5fZGF0YS5sZW5ndGgsb2Zmc2V0OnRoaXMuX29mZnNldCthbGlnbmVkTGVuZ3RofSl9fXJldHVybiB0aGlzLl9kYXRhLnNsaWNlKHRoaXMuX29mZnNldCx0aGlzLl9vZmZzZXQrYWxpZ25lZExlbmd0aCl9c3ViUmVhZGVyKG9mZnNldCl7cmV0dXJuIG5ldyBSZWFkZXIodGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQrb2Zmc2V0KSx0aGlzLndvcmRTaXplLHRoaXMuX2NvZXJjZUZ1bmMsdGhpcy5hbGxvd0xvb3NlKX1yZWFkQnl0ZXMobGVuZ3RoLGxvb3NlKXtsZXQgYnl0ZXM9dGhpcy5fcGVla0J5dGVzKDAsbGVuZ3RoLCEhbG9vc2UpO3RoaXMuX29mZnNldCs9Ynl0ZXMubGVuZ3RoO3JldHVybiBieXRlcy5zbGljZSgwLGxlbmd0aCl9cmVhZFZhbHVlKCl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHRoaXMucmVhZEJ5dGVzKHRoaXMud29yZFNpemUpKX19dmFyIHNoYTM9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlKXsoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgcm9vdD10eXBlb2Ygd2luZG93PT09XCJvYmplY3RcIj93aW5kb3c6e307dmFyIE5PREVfSlM9IXJvb3QuSlNfU0hBM19OT19OT0RFX0pTJiZ0eXBlb2YgcHJvY2Vzcz09PVwib2JqZWN0XCImJnByb2Nlc3MudmVyc2lvbnMmJnByb2Nlc3MudmVyc2lvbnMubm9kZTtpZihOT0RFX0pTKXtyb290PWNvbW1vbmpzR2xvYmFsfXZhciBDT01NT05fSlM9IXJvb3QuSlNfU0hBM19OT19DT01NT05fSlMmJlwib2JqZWN0XCI9PT1cIm9iamVjdFwiJiZtb2R1bGUuZXhwb3J0czt2YXIgSEVYX0NIQVJTPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLnNwbGl0KFwiXCIpO3ZhciBTSEFLRV9QQURESU5HPVszMSw3OTM2LDIwMzE2MTYsNTIwMDkzNjk2XTt2YXIgS0VDQ0FLX1BBRERJTkc9WzEsMjU2LDY1NTM2LDE2Nzc3MjE2XTt2YXIgUEFERElORz1bNiwxNTM2LDM5MzIxNiwxMDA2NjMyOTZdO3ZhciBTSElGVD1bMCw4LDE2LDI0XTt2YXIgUkM9WzEsMCwzMjg5OCwwLDMyOTA2LDIxNDc0ODM2NDgsMjE0NzUxNjQxNiwyMTQ3NDgzNjQ4LDMyOTA3LDAsMjE0NzQ4MzY0OSwwLDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjc3NywyMTQ3NDgzNjQ4LDEzOCwwLDEzNiwwLDIxNDc1MTY0MjUsMCwyMTQ3NDgzNjU4LDAsMjE0NzUxNjU1NSwwLDEzOSwyMTQ3NDgzNjQ4LDMyOTA1LDIxNDc0ODM2NDgsMzI3NzEsMjE0NzQ4MzY0OCwzMjc3MCwyMTQ3NDgzNjQ4LDEyOCwyMTQ3NDgzNjQ4LDMyNzc4LDAsMjE0NzQ4MzY1OCwyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUsMjE0NzQ4MzY0OCwzMjg5NiwyMTQ3NDgzNjQ4LDIxNDc0ODM2NDksMCwyMTQ3NTE2NDI0LDIxNDc0ODM2NDhdO3ZhciBCSVRTPVsyMjQsMjU2LDM4NCw1MTJdO3ZhciBTSEFLRV9CSVRTPVsxMjgsMjU2XTt2YXIgT1VUUFVUX1RZUEVTPVtcImhleFwiLFwiYnVmZmVyXCIsXCJhcnJheUJ1ZmZlclwiLFwiYXJyYXlcIl07dmFyIGNyZWF0ZU91dHB1dE1ldGhvZD1mdW5jdGlvbihiaXRzLHBhZGRpbmcsb3V0cHV0VHlwZSl7cmV0dXJuIGZ1bmN0aW9uKG1lc3NhZ2Upe3JldHVybiBuZXcgS2VjY2FrKGJpdHMscGFkZGluZyxiaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKX19O3ZhciBjcmVhdGVTaGFrZU91dHB1dE1ldGhvZD1mdW5jdGlvbihiaXRzLHBhZGRpbmcsb3V0cHV0VHlwZSl7cmV0dXJuIGZ1bmN0aW9uKG1lc3NhZ2Usb3V0cHV0Qml0cyl7cmV0dXJuIG5ldyBLZWNjYWsoYml0cyxwYWRkaW5nLG91dHB1dEJpdHMpLnVwZGF0ZShtZXNzYWdlKVtvdXRwdXRUeXBlXSgpfX07dmFyIGNyZWF0ZU1ldGhvZD1mdW5jdGlvbihiaXRzLHBhZGRpbmcpe3ZhciBtZXRob2Q9Y3JlYXRlT3V0cHV0TWV0aG9kKGJpdHMscGFkZGluZyxcImhleFwiKTttZXRob2QuY3JlYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBLZWNjYWsoYml0cyxwYWRkaW5nLGJpdHMpfTttZXRob2QudXBkYXRlPWZ1bmN0aW9uKG1lc3NhZ2Upe3JldHVybiBtZXRob2QuY3JlYXRlKCkudXBkYXRlKG1lc3NhZ2UpfTtmb3IodmFyIGk9MDtpPE9VVFBVVF9UWVBFUy5sZW5ndGg7KytpKXt2YXIgdHlwZT1PVVRQVVRfVFlQRVNbaV07bWV0aG9kW3R5cGVdPWNyZWF0ZU91dHB1dE1ldGhvZChiaXRzLHBhZGRpbmcsdHlwZSl9cmV0dXJuIG1ldGhvZH07dmFyIGNyZWF0ZVNoYWtlTWV0aG9kPWZ1bmN0aW9uKGJpdHMscGFkZGluZyl7dmFyIG1ldGhvZD1jcmVhdGVTaGFrZU91dHB1dE1ldGhvZChiaXRzLHBhZGRpbmcsXCJoZXhcIik7bWV0aG9kLmNyZWF0ZT1mdW5jdGlvbihvdXRwdXRCaXRzKXtyZXR1cm4gbmV3IEtlY2NhayhiaXRzLHBhZGRpbmcsb3V0cHV0Qml0cyl9O21ldGhvZC51cGRhdGU9ZnVuY3Rpb24obWVzc2FnZSxvdXRwdXRCaXRzKXtyZXR1cm4gbWV0aG9kLmNyZWF0ZShvdXRwdXRCaXRzKS51cGRhdGUobWVzc2FnZSl9O2Zvcih2YXIgaT0wO2k8T1VUUFVUX1RZUEVTLmxlbmd0aDsrK2kpe3ZhciB0eXBlPU9VVFBVVF9UWVBFU1tpXTttZXRob2RbdHlwZV09Y3JlYXRlU2hha2VPdXRwdXRNZXRob2QoYml0cyxwYWRkaW5nLHR5cGUpfXJldHVybiBtZXRob2R9O3ZhciBhbGdvcml0aG1zPVt7bmFtZTpcImtlY2Nha1wiLHBhZGRpbmc6S0VDQ0FLX1BBRERJTkcsYml0czpCSVRTLGNyZWF0ZU1ldGhvZDpjcmVhdGVNZXRob2R9LHtuYW1lOlwic2hhM1wiLHBhZGRpbmc6UEFERElORyxiaXRzOkJJVFMsY3JlYXRlTWV0aG9kOmNyZWF0ZU1ldGhvZH0se25hbWU6XCJzaGFrZVwiLHBhZGRpbmc6U0hBS0VfUEFERElORyxiaXRzOlNIQUtFX0JJVFMsY3JlYXRlTWV0aG9kOmNyZWF0ZVNoYWtlTWV0aG9kfV07dmFyIG1ldGhvZHM9e30sbWV0aG9kTmFtZXM9W107Zm9yKHZhciBpPTA7aTxhbGdvcml0aG1zLmxlbmd0aDsrK2kpe3ZhciBhbGdvcml0aG09YWxnb3JpdGhtc1tpXTt2YXIgYml0cz1hbGdvcml0aG0uYml0cztmb3IodmFyIGo9MDtqPGJpdHMubGVuZ3RoOysrail7dmFyIG1ldGhvZE5hbWU9YWxnb3JpdGhtLm5hbWUrXCJfXCIrYml0c1tqXTttZXRob2ROYW1lcy5wdXNoKG1ldGhvZE5hbWUpO21ldGhvZHNbbWV0aG9kTmFtZV09YWxnb3JpdGhtLmNyZWF0ZU1ldGhvZChiaXRzW2pdLGFsZ29yaXRobS5wYWRkaW5nKX19ZnVuY3Rpb24gS2VjY2FrKGJpdHMscGFkZGluZyxvdXRwdXRCaXRzKXt0aGlzLmJsb2Nrcz1bXTt0aGlzLnM9W107dGhpcy5wYWRkaW5nPXBhZGRpbmc7dGhpcy5vdXRwdXRCaXRzPW91dHB1dEJpdHM7dGhpcy5yZXNldD10cnVlO3RoaXMuYmxvY2s9MDt0aGlzLnN0YXJ0PTA7dGhpcy5ibG9ja0NvdW50PTE2MDAtKGJpdHM8PDEpPj41O3RoaXMuYnl0ZUNvdW50PXRoaXMuYmxvY2tDb3VudDw8Mjt0aGlzLm91dHB1dEJsb2Nrcz1vdXRwdXRCaXRzPj41O3RoaXMuZXh0cmFCeXRlcz0ob3V0cHV0Qml0cyYzMSk+PjM7Zm9yKHZhciBpPTA7aTw1MDsrK2kpe3RoaXMuc1tpXT0wfX1LZWNjYWsucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbihtZXNzYWdlKXt2YXIgbm90U3RyaW5nPXR5cGVvZiBtZXNzYWdlIT09XCJzdHJpbmdcIjtpZihub3RTdHJpbmcmJm1lc3NhZ2UuY29uc3RydWN0b3I9PT1BcnJheUJ1ZmZlcil7bWVzc2FnZT1uZXcgVWludDhBcnJheShtZXNzYWdlKX12YXIgbGVuZ3RoPW1lc3NhZ2UubGVuZ3RoLGJsb2Nrcz10aGlzLmJsb2NrcyxieXRlQ291bnQ9dGhpcy5ieXRlQ291bnQsYmxvY2tDb3VudD10aGlzLmJsb2NrQ291bnQsaW5kZXg9MCxzPXRoaXMucyxpLGNvZGU7d2hpbGUoaW5kZXg8bGVuZ3RoKXtpZih0aGlzLnJlc2V0KXt0aGlzLnJlc2V0PWZhbHNlO2Jsb2Nrc1swXT10aGlzLmJsb2NrO2ZvcihpPTE7aTxibG9ja0NvdW50KzE7KytpKXtibG9ja3NbaV09MH19aWYobm90U3RyaW5nKXtmb3IoaT10aGlzLnN0YXJ0O2luZGV4PGxlbmd0aCYmaTxieXRlQ291bnQ7KytpbmRleCl7YmxvY2tzW2k+PjJdfD1tZXNzYWdlW2luZGV4XTw8U0hJRlRbaSsrJjNdfX1lbHNle2ZvcihpPXRoaXMuc3RhcnQ7aW5kZXg8bGVuZ3RoJiZpPGJ5dGVDb3VudDsrK2luZGV4KXtjb2RlPW1lc3NhZ2UuY2hhckNvZGVBdChpbmRleCk7aWYoY29kZTwxMjgpe2Jsb2Nrc1tpPj4yXXw9Y29kZTw8U0hJRlRbaSsrJjNdfWVsc2UgaWYoY29kZTwyMDQ4KXtibG9ja3NbaT4+Ml18PSgxOTJ8Y29kZT4+Nik8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZSY2Myk8PFNISUZUW2krKyYzXX1lbHNlIGlmKGNvZGU8NTUyOTZ8fGNvZGU+PTU3MzQ0KXtibG9ja3NbaT4+Ml18PSgyMjR8Y29kZT4+MTIpPDxTSElGVFtpKysmM107YmxvY2tzW2k+PjJdfD0oMTI4fGNvZGU+PjYmNjMpPDxTSElGVFtpKysmM107YmxvY2tzW2k+PjJdfD0oMTI4fGNvZGUmNjMpPDxTSElGVFtpKysmM119ZWxzZXtjb2RlPTY1NTM2KygoY29kZSYxMDIzKTw8MTB8bWVzc2FnZS5jaGFyQ29kZUF0KCsraW5kZXgpJjEwMjMpO2Jsb2Nrc1tpPj4yXXw9KDI0MHxjb2RlPj4xOCk8PFNISUZUW2krKyYzXTtibG9ja3NbaT4+Ml18PSgxMjh8Y29kZT4+MTImNjMpPDxTSElGVFtpKysmM107YmxvY2tzW2k+PjJdfD0oMTI4fGNvZGU+PjYmNjMpPDxTSElGVFtpKysmM107YmxvY2tzW2k+PjJdfD0oMTI4fGNvZGUmNjMpPDxTSElGVFtpKysmM119fX10aGlzLmxhc3RCeXRlSW5kZXg9aTtpZihpPj1ieXRlQ291bnQpe3RoaXMuc3RhcnQ9aS1ieXRlQ291bnQ7dGhpcy5ibG9jaz1ibG9ja3NbYmxvY2tDb3VudF07Zm9yKGk9MDtpPGJsb2NrQ291bnQ7KytpKXtzW2ldXj1ibG9ja3NbaV19ZihzKTt0aGlzLnJlc2V0PXRydWV9ZWxzZXt0aGlzLnN0YXJ0PWl9fXJldHVybiB0aGlzfTtLZWNjYWsucHJvdG90eXBlLmZpbmFsaXplPWZ1bmN0aW9uKCl7dmFyIGJsb2Nrcz10aGlzLmJsb2NrcyxpPXRoaXMubGFzdEJ5dGVJbmRleCxibG9ja0NvdW50PXRoaXMuYmxvY2tDb3VudCxzPXRoaXMucztibG9ja3NbaT4+Ml18PXRoaXMucGFkZGluZ1tpJjNdO2lmKHRoaXMubGFzdEJ5dGVJbmRleD09PXRoaXMuYnl0ZUNvdW50KXtibG9ja3NbMF09YmxvY2tzW2Jsb2NrQ291bnRdO2ZvcihpPTE7aTxibG9ja0NvdW50KzE7KytpKXtibG9ja3NbaV09MH19YmxvY2tzW2Jsb2NrQ291bnQtMV18PTIxNDc0ODM2NDg7Zm9yKGk9MDtpPGJsb2NrQ291bnQ7KytpKXtzW2ldXj1ibG9ja3NbaV19ZihzKX07S2VjY2FrLnByb3RvdHlwZS50b1N0cmluZz1LZWNjYWsucHJvdG90eXBlLmhleD1mdW5jdGlvbigpe3RoaXMuZmluYWxpemUoKTt2YXIgYmxvY2tDb3VudD10aGlzLmJsb2NrQ291bnQscz10aGlzLnMsb3V0cHV0QmxvY2tzPXRoaXMub3V0cHV0QmxvY2tzLGV4dHJhQnl0ZXM9dGhpcy5leHRyYUJ5dGVzLGk9MCxqPTA7dmFyIGhleD1cIlwiLGJsb2NrO3doaWxlKGo8b3V0cHV0QmxvY2tzKXtmb3IoaT0wO2k8YmxvY2tDb3VudCYmajxvdXRwdXRCbG9ja3M7KytpLCsrail7YmxvY2s9c1tpXTtoZXgrPUhFWF9DSEFSU1tibG9jaz4+NCYxNV0rSEVYX0NIQVJTW2Jsb2NrJjE1XStIRVhfQ0hBUlNbYmxvY2s+PjEyJjE1XStIRVhfQ0hBUlNbYmxvY2s+PjgmMTVdK0hFWF9DSEFSU1tibG9jaz4+MjAmMTVdK0hFWF9DSEFSU1tibG9jaz4+MTYmMTVdK0hFWF9DSEFSU1tibG9jaz4+MjgmMTVdK0hFWF9DSEFSU1tibG9jaz4+MjQmMTVdfWlmKGolYmxvY2tDb3VudD09PTApe2Yocyk7aT0wfX1pZihleHRyYUJ5dGVzKXtibG9jaz1zW2ldO2lmKGV4dHJhQnl0ZXM+MCl7aGV4Kz1IRVhfQ0hBUlNbYmxvY2s+PjQmMTVdK0hFWF9DSEFSU1tibG9jayYxNV19aWYoZXh0cmFCeXRlcz4xKXtoZXgrPUhFWF9DSEFSU1tibG9jaz4+MTImMTVdK0hFWF9DSEFSU1tibG9jaz4+OCYxNV19aWYoZXh0cmFCeXRlcz4yKXtoZXgrPUhFWF9DSEFSU1tibG9jaz4+MjAmMTVdK0hFWF9DSEFSU1tibG9jaz4+MTYmMTVdfX1yZXR1cm4gaGV4fTtLZWNjYWsucHJvdG90eXBlLmFycmF5QnVmZmVyPWZ1bmN0aW9uKCl7dGhpcy5maW5hbGl6ZSgpO3ZhciBibG9ja0NvdW50PXRoaXMuYmxvY2tDb3VudCxzPXRoaXMucyxvdXRwdXRCbG9ja3M9dGhpcy5vdXRwdXRCbG9ja3MsZXh0cmFCeXRlcz10aGlzLmV4dHJhQnl0ZXMsaT0wLGo9MDt2YXIgYnl0ZXM9dGhpcy5vdXRwdXRCaXRzPj4zO3ZhciBidWZmZXI7aWYoZXh0cmFCeXRlcyl7YnVmZmVyPW5ldyBBcnJheUJ1ZmZlcihvdXRwdXRCbG9ja3MrMTw8Mil9ZWxzZXtidWZmZXI9bmV3IEFycmF5QnVmZmVyKGJ5dGVzKX12YXIgYXJyYXk9bmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7d2hpbGUoajxvdXRwdXRCbG9ja3Mpe2ZvcihpPTA7aTxibG9ja0NvdW50JiZqPG91dHB1dEJsb2NrczsrK2ksKytqKXthcnJheVtqXT1zW2ldfWlmKGolYmxvY2tDb3VudD09PTApe2Yocyl9fWlmKGV4dHJhQnl0ZXMpe2FycmF5W2ldPXNbaV07YnVmZmVyPWJ1ZmZlci5zbGljZSgwLGJ5dGVzKX1yZXR1cm4gYnVmZmVyfTtLZWNjYWsucHJvdG90eXBlLmJ1ZmZlcj1LZWNjYWsucHJvdG90eXBlLmFycmF5QnVmZmVyO0tlY2Nhay5wcm90b3R5cGUuZGlnZXN0PUtlY2Nhay5wcm90b3R5cGUuYXJyYXk9ZnVuY3Rpb24oKXt0aGlzLmZpbmFsaXplKCk7dmFyIGJsb2NrQ291bnQ9dGhpcy5ibG9ja0NvdW50LHM9dGhpcy5zLG91dHB1dEJsb2Nrcz10aGlzLm91dHB1dEJsb2NrcyxleHRyYUJ5dGVzPXRoaXMuZXh0cmFCeXRlcyxpPTAsaj0wO3ZhciBhcnJheT1bXSxvZmZzZXQsYmxvY2s7d2hpbGUoajxvdXRwdXRCbG9ja3Mpe2ZvcihpPTA7aTxibG9ja0NvdW50JiZqPG91dHB1dEJsb2NrczsrK2ksKytqKXtvZmZzZXQ9ajw8MjtibG9jaz1zW2ldO2FycmF5W29mZnNldF09YmxvY2smMjU1O2FycmF5W29mZnNldCsxXT1ibG9jaz4+OCYyNTU7YXJyYXlbb2Zmc2V0KzJdPWJsb2NrPj4xNiYyNTU7YXJyYXlbb2Zmc2V0KzNdPWJsb2NrPj4yNCYyNTV9aWYoaiVibG9ja0NvdW50PT09MCl7ZihzKX19aWYoZXh0cmFCeXRlcyl7b2Zmc2V0PWo8PDI7YmxvY2s9c1tpXTtpZihleHRyYUJ5dGVzPjApe2FycmF5W29mZnNldF09YmxvY2smMjU1fWlmKGV4dHJhQnl0ZXM+MSl7YXJyYXlbb2Zmc2V0KzFdPWJsb2NrPj44JjI1NX1pZihleHRyYUJ5dGVzPjIpe2FycmF5W29mZnNldCsyXT1ibG9jaz4+MTYmMjU1fX1yZXR1cm4gYXJyYXl9O3ZhciBmPWZ1bmN0aW9uKHMpe3ZhciBoLGwsbixjMCxjMSxjMixjMyxjNCxjNSxjNixjNyxjOCxjOSxiMCxiMSxiMixiMyxiNCxiNSxiNixiNyxiOCxiOSxiMTAsYjExLGIxMixiMTMsYjE0LGIxNSxiMTYsYjE3LGIxOCxiMTksYjIwLGIyMSxiMjIsYjIzLGIyNCxiMjUsYjI2LGIyNyxiMjgsYjI5LGIzMCxiMzEsYjMyLGIzMyxiMzQsYjM1LGIzNixiMzcsYjM4LGIzOSxiNDAsYjQxLGI0MixiNDMsYjQ0LGI0NSxiNDYsYjQ3LGI0OCxiNDk7Zm9yKG49MDtuPDQ4O24rPTIpe2MwPXNbMF1ec1sxMF1ec1syMF1ec1szMF1ec1s0MF07YzE9c1sxXV5zWzExXV5zWzIxXV5zWzMxXV5zWzQxXTtjMj1zWzJdXnNbMTJdXnNbMjJdXnNbMzJdXnNbNDJdO2MzPXNbM11ec1sxM11ec1syM11ec1szM11ec1s0M107YzQ9c1s0XV5zWzE0XV5zWzI0XV5zWzM0XV5zWzQ0XTtjNT1zWzVdXnNbMTVdXnNbMjVdXnNbMzVdXnNbNDVdO2M2PXNbNl1ec1sxNl1ec1syNl1ec1szNl1ec1s0Nl07Yzc9c1s3XV5zWzE3XV5zWzI3XV5zWzM3XV5zWzQ3XTtjOD1zWzhdXnNbMThdXnNbMjhdXnNbMzhdXnNbNDhdO2M5PXNbOV1ec1sxOV1ec1syOV1ec1szOV1ec1s0OV07aD1jOF4oYzI8PDF8YzM+Pj4zMSk7bD1jOV4oYzM8PDF8YzI+Pj4zMSk7c1swXV49aDtzWzFdXj1sO3NbMTBdXj1oO3NbMTFdXj1sO3NbMjBdXj1oO3NbMjFdXj1sO3NbMzBdXj1oO3NbMzFdXj1sO3NbNDBdXj1oO3NbNDFdXj1sO2g9YzBeKGM0PDwxfGM1Pj4+MzEpO2w9YzFeKGM1PDwxfGM0Pj4+MzEpO3NbMl1ePWg7c1szXV49bDtzWzEyXV49aDtzWzEzXV49bDtzWzIyXV49aDtzWzIzXV49bDtzWzMyXV49aDtzWzMzXV49bDtzWzQyXV49aDtzWzQzXV49bDtoPWMyXihjNjw8MXxjNz4+PjMxKTtsPWMzXihjNzw8MXxjNj4+PjMxKTtzWzRdXj1oO3NbNV1ePWw7c1sxNF1ePWg7c1sxNV1ePWw7c1syNF1ePWg7c1syNV1ePWw7c1szNF1ePWg7c1szNV1ePWw7c1s0NF1ePWg7c1s0NV1ePWw7aD1jNF4oYzg8PDF8Yzk+Pj4zMSk7bD1jNV4oYzk8PDF8Yzg+Pj4zMSk7c1s2XV49aDtzWzddXj1sO3NbMTZdXj1oO3NbMTddXj1sO3NbMjZdXj1oO3NbMjddXj1sO3NbMzZdXj1oO3NbMzddXj1sO3NbNDZdXj1oO3NbNDddXj1sO2g9YzZeKGMwPDwxfGMxPj4+MzEpO2w9YzdeKGMxPDwxfGMwPj4+MzEpO3NbOF1ePWg7c1s5XV49bDtzWzE4XV49aDtzWzE5XV49bDtzWzI4XV49aDtzWzI5XV49bDtzWzM4XV49aDtzWzM5XV49bDtzWzQ4XV49aDtzWzQ5XV49bDtiMD1zWzBdO2IxPXNbMV07YjMyPXNbMTFdPDw0fHNbMTBdPj4+Mjg7YjMzPXNbMTBdPDw0fHNbMTFdPj4+Mjg7YjE0PXNbMjBdPDwzfHNbMjFdPj4+Mjk7YjE1PXNbMjFdPDwzfHNbMjBdPj4+Mjk7YjQ2PXNbMzFdPDw5fHNbMzBdPj4+MjM7YjQ3PXNbMzBdPDw5fHNbMzFdPj4+MjM7YjI4PXNbNDBdPDwxOHxzWzQxXT4+PjE0O2IyOT1zWzQxXTw8MTh8c1s0MF0+Pj4xNDtiMjA9c1syXTw8MXxzWzNdPj4+MzE7YjIxPXNbM108PDF8c1syXT4+PjMxO2IyPXNbMTNdPDwxMnxzWzEyXT4+PjIwO2IzPXNbMTJdPDwxMnxzWzEzXT4+PjIwO2IzND1zWzIyXTw8MTB8c1syM10+Pj4yMjtiMzU9c1syM108PDEwfHNbMjJdPj4+MjI7YjE2PXNbMzNdPDwxM3xzWzMyXT4+PjE5O2IxNz1zWzMyXTw8MTN8c1szM10+Pj4xOTtiNDg9c1s0Ml08PDJ8c1s0M10+Pj4zMDtiNDk9c1s0M108PDJ8c1s0Ml0+Pj4zMDtiNDA9c1s1XTw8MzB8c1s0XT4+PjI7YjQxPXNbNF08PDMwfHNbNV0+Pj4yO2IyMj1zWzE0XTw8NnxzWzE1XT4+PjI2O2IyMz1zWzE1XTw8NnxzWzE0XT4+PjI2O2I0PXNbMjVdPDwxMXxzWzI0XT4+PjIxO2I1PXNbMjRdPDwxMXxzWzI1XT4+PjIxO2IzNj1zWzM0XTw8MTV8c1szNV0+Pj4xNztiMzc9c1szNV08PDE1fHNbMzRdPj4+MTc7YjE4PXNbNDVdPDwyOXxzWzQ0XT4+PjM7YjE5PXNbNDRdPDwyOXxzWzQ1XT4+PjM7YjEwPXNbNl08PDI4fHNbN10+Pj40O2IxMT1zWzddPDwyOHxzWzZdPj4+NDtiNDI9c1sxN108PDIzfHNbMTZdPj4+OTtiNDM9c1sxNl08PDIzfHNbMTddPj4+OTtiMjQ9c1syNl08PDI1fHNbMjddPj4+NztiMjU9c1syN108PDI1fHNbMjZdPj4+NztiNj1zWzM2XTw8MjF8c1szN10+Pj4xMTtiNz1zWzM3XTw8MjF8c1szNl0+Pj4xMTtiMzg9c1s0N108PDI0fHNbNDZdPj4+ODtiMzk9c1s0Nl08PDI0fHNbNDddPj4+ODtiMzA9c1s4XTw8Mjd8c1s5XT4+PjU7YjMxPXNbOV08PDI3fHNbOF0+Pj41O2IxMj1zWzE4XTw8MjB8c1sxOV0+Pj4xMjtiMTM9c1sxOV08PDIwfHNbMThdPj4+MTI7YjQ0PXNbMjldPDw3fHNbMjhdPj4+MjU7YjQ1PXNbMjhdPDw3fHNbMjldPj4+MjU7YjI2PXNbMzhdPDw4fHNbMzldPj4+MjQ7YjI3PXNbMzldPDw4fHNbMzhdPj4+MjQ7Yjg9c1s0OF08PDE0fHNbNDldPj4+MTg7Yjk9c1s0OV08PDE0fHNbNDhdPj4+MTg7c1swXT1iMF5+YjImYjQ7c1sxXT1iMV5+YjMmYjU7c1sxMF09YjEwXn5iMTImYjE0O3NbMTFdPWIxMV5+YjEzJmIxNTtzWzIwXT1iMjBefmIyMiZiMjQ7c1syMV09YjIxXn5iMjMmYjI1O3NbMzBdPWIzMF5+YjMyJmIzNDtzWzMxXT1iMzFefmIzMyZiMzU7c1s0MF09YjQwXn5iNDImYjQ0O3NbNDFdPWI0MV5+YjQzJmI0NTtzWzJdPWIyXn5iNCZiNjtzWzNdPWIzXn5iNSZiNztzWzEyXT1iMTJefmIxNCZiMTY7c1sxM109YjEzXn5iMTUmYjE3O3NbMjJdPWIyMl5+YjI0JmIyNjtzWzIzXT1iMjNefmIyNSZiMjc7c1szMl09YjMyXn5iMzQmYjM2O3NbMzNdPWIzM15+YjM1JmIzNztzWzQyXT1iNDJefmI0NCZiNDY7c1s0M109YjQzXn5iNDUmYjQ3O3NbNF09YjRefmI2JmI4O3NbNV09YjVefmI3JmI5O3NbMTRdPWIxNF5+YjE2JmIxODtzWzE1XT1iMTVefmIxNyZiMTk7c1syNF09YjI0Xn5iMjYmYjI4O3NbMjVdPWIyNV5+YjI3JmIyOTtzWzM0XT1iMzRefmIzNiZiMzg7c1szNV09YjM1Xn5iMzcmYjM5O3NbNDRdPWI0NF5+YjQ2JmI0ODtzWzQ1XT1iNDVefmI0NyZiNDk7c1s2XT1iNl5+YjgmYjA7c1s3XT1iN15+YjkmYjE7c1sxNl09YjE2Xn5iMTgmYjEwO3NbMTddPWIxN15+YjE5JmIxMTtzWzI2XT1iMjZefmIyOCZiMjA7c1syN109YjI3Xn5iMjkmYjIxO3NbMzZdPWIzNl5+YjM4JmIzMDtzWzM3XT1iMzdefmIzOSZiMzE7c1s0Nl09YjQ2Xn5iNDgmYjQwO3NbNDddPWI0N15+YjQ5JmI0MTtzWzhdPWI4Xn5iMCZiMjtzWzldPWI5Xn5iMSZiMztzWzE4XT1iMThefmIxMCZiMTI7c1sxOV09YjE5Xn5iMTEmYjEzO3NbMjhdPWIyOF5+YjIwJmIyMjtzWzI5XT1iMjlefmIyMSZiMjM7c1szOF09YjM4Xn5iMzAmYjMyO3NbMzldPWIzOV5+YjMxJmIzMztzWzQ4XT1iNDhefmI0MCZiNDI7c1s0OV09YjQ5Xn5iNDEmYjQzO3NbMF1ePVJDW25dO3NbMV1ePVJDW24rMV19fTtpZihDT01NT05fSlMpe21vZHVsZS5leHBvcnRzPW1ldGhvZHN9ZWxzZXtmb3IodmFyIGk9MDtpPG1ldGhvZE5hbWVzLmxlbmd0aDsrK2kpe3Jvb3RbbWV0aG9kTmFtZXNbaV1dPW1ldGhvZHNbbWV0aG9kTmFtZXNbaV1dfX19KSgpfSk7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24ga2VjY2FrMjU2KGRhdGEpe3JldHVyblwiMHhcIitzaGEzLmtlY2Nha18yNTYoYXJyYXlpZnkoZGF0YSkpfWNvbnN0IHZlcnNpb24kNT1cInJscC81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciQ2PW5ldyBMb2dnZXIodmVyc2lvbiQ1KTtmdW5jdGlvbiBhcnJheWlmeUludGVnZXIodmFsdWUpe2NvbnN0IHJlc3VsdD1bXTt3aGlsZSh2YWx1ZSl7cmVzdWx0LnVuc2hpZnQodmFsdWUmMjU1KTt2YWx1ZT4+PTh9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLG9mZnNldCxsZW5ndGgpe2xldCByZXN1bHQ9MDtmb3IobGV0IGk9MDtpPGxlbmd0aDtpKyspe3Jlc3VsdD1yZXN1bHQqMjU2K2RhdGFbb2Zmc2V0K2ldfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gX2VuY29kZShvYmplY3Qpe2lmKEFycmF5LmlzQXJyYXkob2JqZWN0KSl7bGV0IHBheWxvYWQ9W107b2JqZWN0LmZvckVhY2goZnVuY3Rpb24oY2hpbGQpe3BheWxvYWQ9cGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpfSk7aWYocGF5bG9hZC5sZW5ndGg8PTU1KXtwYXlsb2FkLnVuc2hpZnQoMTkyK3BheWxvYWQubGVuZ3RoKTtyZXR1cm4gcGF5bG9hZH1jb25zdCBsZW5ndGg9YXJyYXlpZnlJbnRlZ2VyKHBheWxvYWQubGVuZ3RoKTtsZW5ndGgudW5zaGlmdCgyNDcrbGVuZ3RoLmxlbmd0aCk7cmV0dXJuIGxlbmd0aC5jb25jYXQocGF5bG9hZCl9aWYoIWlzQnl0ZXNMaWtlKG9iamVjdCkpe2xvZ2dlciQ2LnRocm93QXJndW1lbnRFcnJvcihcIlJMUCBvYmplY3QgbXVzdCBiZSBCeXRlc0xpa2VcIixcIm9iamVjdFwiLG9iamVjdCl9Y29uc3QgZGF0YT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnJheWlmeShvYmplY3QpKTtpZihkYXRhLmxlbmd0aD09PTEmJmRhdGFbMF08PTEyNyl7cmV0dXJuIGRhdGF9ZWxzZSBpZihkYXRhLmxlbmd0aDw9NTUpe2RhdGEudW5zaGlmdCgxMjgrZGF0YS5sZW5ndGgpO3JldHVybiBkYXRhfWNvbnN0IGxlbmd0aD1hcnJheWlmeUludGVnZXIoZGF0YS5sZW5ndGgpO2xlbmd0aC51bnNoaWZ0KDE4MytsZW5ndGgubGVuZ3RoKTtyZXR1cm4gbGVuZ3RoLmNvbmNhdChkYXRhKX1mdW5jdGlvbiBlbmNvZGUob2JqZWN0KXtyZXR1cm4gaGV4bGlmeShfZW5jb2RlKG9iamVjdCkpfWZ1bmN0aW9uIF9kZWNvZGVDaGlsZHJlbihkYXRhLG9mZnNldCxjaGlsZE9mZnNldCxsZW5ndGgpe2NvbnN0IHJlc3VsdD1bXTt3aGlsZShjaGlsZE9mZnNldDxvZmZzZXQrMStsZW5ndGgpe2NvbnN0IGRlY29kZWQ9X2RlY29kZShkYXRhLGNoaWxkT2Zmc2V0KTtyZXN1bHQucHVzaChkZWNvZGVkLnJlc3VsdCk7Y2hpbGRPZmZzZXQrPWRlY29kZWQuY29uc3VtZWQ7aWYoY2hpbGRPZmZzZXQ+b2Zmc2V0KzErbGVuZ3RoKXtsb2dnZXIkNi50aHJvd0Vycm9yKFwiY2hpbGQgZGF0YSB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX19cmV0dXJue2NvbnN1bWVkOjErbGVuZ3RoLHJlc3VsdDpyZXN1bHR9fWZ1bmN0aW9uIF9kZWNvZGUoZGF0YSxvZmZzZXQpe2lmKGRhdGEubGVuZ3RoPT09MCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgdG9vIHNob3J0XCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSl9aWYoZGF0YVtvZmZzZXRdPj0yNDgpe2NvbnN0IGxlbmd0aExlbmd0aD1kYXRhW29mZnNldF0tMjQ3O2lmKG9mZnNldCsxK2xlbmd0aExlbmd0aD5kYXRhLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgc2hvcnQgc2VnbWVudCB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX1jb25zdCBsZW5ndGg9dW5hcnJheWlmeUludGVnZXIoZGF0YSxvZmZzZXQrMSxsZW5ndGhMZW5ndGgpO2lmKG9mZnNldCsxK2xlbmd0aExlbmd0aCtsZW5ndGg+ZGF0YS5sZW5ndGgpe2xvZ2dlciQ2LnRocm93RXJyb3IoXCJkYXRhIGxvbmcgc2VnbWVudCB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX1yZXR1cm4gX2RlY29kZUNoaWxkcmVuKGRhdGEsb2Zmc2V0LG9mZnNldCsxK2xlbmd0aExlbmd0aCxsZW5ndGhMZW5ndGgrbGVuZ3RoKX1lbHNlIGlmKGRhdGFbb2Zmc2V0XT49MTkyKXtjb25zdCBsZW5ndGg9ZGF0YVtvZmZzZXRdLTE5MjtpZihvZmZzZXQrMStsZW5ndGg+ZGF0YS5sZW5ndGgpe2xvZ2dlciQ2LnRocm93RXJyb3IoXCJkYXRhIGFycmF5IHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfXJldHVybiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSxvZmZzZXQsb2Zmc2V0KzEsbGVuZ3RoKX1lbHNlIGlmKGRhdGFbb2Zmc2V0XT49MTg0KXtjb25zdCBsZW5ndGhMZW5ndGg9ZGF0YVtvZmZzZXRdLTE4MztpZihvZmZzZXQrMStsZW5ndGhMZW5ndGg+ZGF0YS5sZW5ndGgpe2xvZ2dlciQ2LnRocm93RXJyb3IoXCJkYXRhIGFycmF5IHRvbyBzaG9ydFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se30pfWNvbnN0IGxlbmd0aD11bmFycmF5aWZ5SW50ZWdlcihkYXRhLG9mZnNldCsxLGxlbmd0aExlbmd0aCk7aWYob2Zmc2V0KzErbGVuZ3RoTGVuZ3RoK2xlbmd0aD5kYXRhLmxlbmd0aCl7bG9nZ2VyJDYudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTix7fSl9Y29uc3QgcmVzdWx0PWhleGxpZnkoZGF0YS5zbGljZShvZmZzZXQrMStsZW5ndGhMZW5ndGgsb2Zmc2V0KzErbGVuZ3RoTGVuZ3RoK2xlbmd0aCkpO3JldHVybntjb25zdW1lZDoxK2xlbmd0aExlbmd0aCtsZW5ndGgscmVzdWx0OnJlc3VsdH19ZWxzZSBpZihkYXRhW29mZnNldF0+PTEyOCl7Y29uc3QgbGVuZ3RoPWRhdGFbb2Zmc2V0XS0xMjg7aWYob2Zmc2V0KzErbGVuZ3RoPmRhdGEubGVuZ3RoKXtsb2dnZXIkNi50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIixMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLHt9KX1jb25zdCByZXN1bHQ9aGV4bGlmeShkYXRhLnNsaWNlKG9mZnNldCsxLG9mZnNldCsxK2xlbmd0aCkpO3JldHVybntjb25zdW1lZDoxK2xlbmd0aCxyZXN1bHQ6cmVzdWx0fX1yZXR1cm57Y29uc3VtZWQ6MSxyZXN1bHQ6aGV4bGlmeShkYXRhW29mZnNldF0pfX1mdW5jdGlvbiBkZWNvZGUoZGF0YSl7Y29uc3QgYnl0ZXM9YXJyYXlpZnkoZGF0YSk7Y29uc3QgZGVjb2RlZD1fZGVjb2RlKGJ5dGVzLDApO2lmKGRlY29kZWQuY29uc3VtZWQhPT1ieXRlcy5sZW5ndGgpe2xvZ2dlciQ2LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcmxwIGRhdGFcIixcImRhdGFcIixkYXRhKX1yZXR1cm4gZGVjb2RlZC5yZXN1bHR9dmFyIGluZGV4PU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGVuY29kZTplbmNvZGUsZGVjb2RlOmRlY29kZX0pO2NvbnN0IHZlcnNpb24kNj1cImFkZHJlc3MvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkNz1uZXcgTG9nZ2VyKHZlcnNpb24kNik7ZnVuY3Rpb24gZ2V0Q2hlY2tzdW1BZGRyZXNzKGFkZHJlc3Mpe2lmKCFpc0hleFN0cmluZyhhZGRyZXNzLDIwKSl7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzXCIsXCJhZGRyZXNzXCIsYWRkcmVzcyl9YWRkcmVzcz1hZGRyZXNzLnRvTG93ZXJDYXNlKCk7Y29uc3QgY2hhcnM9YWRkcmVzcy5zdWJzdHJpbmcoMikuc3BsaXQoXCJcIik7Y29uc3QgZXhwYW5kZWQ9bmV3IFVpbnQ4QXJyYXkoNDApO2ZvcihsZXQgaT0wO2k8NDA7aSsrKXtleHBhbmRlZFtpXT1jaGFyc1tpXS5jaGFyQ29kZUF0KDApfWNvbnN0IGhhc2hlZD1hcnJheWlmeShrZWNjYWsyNTYoZXhwYW5kZWQpKTtmb3IobGV0IGk9MDtpPDQwO2krPTIpe2lmKGhhc2hlZFtpPj4xXT4+ND49OCl7Y2hhcnNbaV09Y2hhcnNbaV0udG9VcHBlckNhc2UoKX1pZigoaGFzaGVkW2k+PjFdJjE1KT49OCl7Y2hhcnNbaSsxXT1jaGFyc1tpKzFdLnRvVXBwZXJDYXNlKCl9fXJldHVyblwiMHhcIitjaGFycy5qb2luKFwiXCIpfWNvbnN0IE1BWF9TQUZFX0lOVEVHRVI9OTAwNzE5OTI1NDc0MDk5MTtmdW5jdGlvbiBsb2cxMCh4KXtpZihNYXRoLmxvZzEwKXtyZXR1cm4gTWF0aC5sb2cxMCh4KX1yZXR1cm4gTWF0aC5sb2coeCkvTWF0aC5MTjEwfWNvbnN0IGliYW5Mb29rdXA9e307Zm9yKGxldCBpPTA7aTwxMDtpKyspe2liYW5Mb29rdXBbU3RyaW5nKGkpXT1TdHJpbmcoaSl9Zm9yKGxldCBpPTA7aTwyNjtpKyspe2liYW5Mb29rdXBbU3RyaW5nLmZyb21DaGFyQ29kZSg2NStpKV09U3RyaW5nKDEwK2kpfWNvbnN0IHNhZmVEaWdpdHM9TWF0aC5mbG9vcihsb2cxMChNQVhfU0FGRV9JTlRFR0VSKSk7ZnVuY3Rpb24gaWJhbkNoZWNrc3VtKGFkZHJlc3Mpe2FkZHJlc3M9YWRkcmVzcy50b1VwcGVyQ2FzZSgpO2FkZHJlc3M9YWRkcmVzcy5zdWJzdHJpbmcoNCkrYWRkcmVzcy5zdWJzdHJpbmcoMCwyKStcIjAwXCI7bGV0IGV4cGFuZGVkPWFkZHJlc3Muc3BsaXQoXCJcIikubWFwKGM9PntyZXR1cm4gaWJhbkxvb2t1cFtjXX0pLmpvaW4oXCJcIik7d2hpbGUoZXhwYW5kZWQubGVuZ3RoPj1zYWZlRGlnaXRzKXtsZXQgYmxvY2s9ZXhwYW5kZWQuc3Vic3RyaW5nKDAsc2FmZURpZ2l0cyk7ZXhwYW5kZWQ9cGFyc2VJbnQoYmxvY2ssMTApJTk3K2V4cGFuZGVkLnN1YnN0cmluZyhibG9jay5sZW5ndGgpfWxldCBjaGVja3N1bT1TdHJpbmcoOTgtcGFyc2VJbnQoZXhwYW5kZWQsMTApJTk3KTt3aGlsZShjaGVja3N1bS5sZW5ndGg8Mil7Y2hlY2tzdW09XCIwXCIrY2hlY2tzdW19cmV0dXJuIGNoZWNrc3VtfWZ1bmN0aW9uIGdldEFkZHJlc3MoYWRkcmVzcyl7bGV0IHJlc3VsdD1udWxsO2lmKHR5cGVvZiBhZGRyZXNzIT09XCJzdHJpbmdcIil7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhZGRyZXNzXCIsXCJhZGRyZXNzXCIsYWRkcmVzcyl9aWYoYWRkcmVzcy5tYXRjaCgvXigweCk/WzAtOWEtZkEtRl17NDB9JC8pKXtpZihhZGRyZXNzLnN1YnN0cmluZygwLDIpIT09XCIweFwiKXthZGRyZXNzPVwiMHhcIithZGRyZXNzfXJlc3VsdD1nZXRDaGVja3N1bUFkZHJlc3MoYWRkcmVzcyk7aWYoYWRkcmVzcy5tYXRjaCgvKFtBLUZdLipbYS1mXSl8KFthLWZdLipbQS1GXSkvKSYmcmVzdWx0IT09YWRkcmVzcyl7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiYmFkIGFkZHJlc3MgY2hlY2tzdW1cIixcImFkZHJlc3NcIixhZGRyZXNzKX19ZWxzZSBpZihhZGRyZXNzLm1hdGNoKC9eWEVbMC05XXsyfVswLTlBLVphLXpdezMwLDMxfSQvKSl7aWYoYWRkcmVzcy5zdWJzdHJpbmcoMiw0KSE9PWliYW5DaGVja3N1bShhZGRyZXNzKSl7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiYmFkIGljYXAgY2hlY2tzdW1cIixcImFkZHJlc3NcIixhZGRyZXNzKX1yZXN1bHQ9X2Jhc2UzNlRvMTYoYWRkcmVzcy5zdWJzdHJpbmcoNCkpO3doaWxlKHJlc3VsdC5sZW5ndGg8NDApe3Jlc3VsdD1cIjBcIityZXN1bHR9cmVzdWx0PWdldENoZWNrc3VtQWRkcmVzcyhcIjB4XCIrcmVzdWx0KX1lbHNle2xvZ2dlciQ3LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzc1wiLFwiYWRkcmVzc1wiLGFkZHJlc3MpfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gaXNBZGRyZXNzKGFkZHJlc3Mpe3RyeXtnZXRBZGRyZXNzKGFkZHJlc3MpO3JldHVybiB0cnVlfWNhdGNoKGVycm9yKXt9cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIGdldEljYXBBZGRyZXNzKGFkZHJlc3Mpe2xldCBiYXNlMzY9X2Jhc2UxNlRvMzYoZ2V0QWRkcmVzcyhhZGRyZXNzKS5zdWJzdHJpbmcoMikpLnRvVXBwZXJDYXNlKCk7d2hpbGUoYmFzZTM2Lmxlbmd0aDwzMCl7YmFzZTM2PVwiMFwiK2Jhc2UzNn1yZXR1cm5cIlhFXCIraWJhbkNoZWNrc3VtKFwiWEUwMFwiK2Jhc2UzNikrYmFzZTM2fWZ1bmN0aW9uIGdldENvbnRyYWN0QWRkcmVzcyh0cmFuc2FjdGlvbil7bGV0IGZyb209bnVsbDt0cnl7ZnJvbT1nZXRBZGRyZXNzKHRyYW5zYWN0aW9uLmZyb20pfWNhdGNoKGVycm9yKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIGZyb20gYWRkcmVzc1wiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9Y29uc3Qgbm9uY2U9c3RyaXBaZXJvcyhhcnJheWlmeShCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi5ub25jZSkudG9IZXhTdHJpbmcoKSkpO3JldHVybiBnZXRBZGRyZXNzKGhleERhdGFTbGljZShrZWNjYWsyNTYoZW5jb2RlKFtmcm9tLG5vbmNlXSkpLDEyKSl9ZnVuY3Rpb24gZ2V0Q3JlYXRlMkFkZHJlc3MoZnJvbSxzYWx0LGluaXRDb2RlSGFzaCl7aWYoaGV4RGF0YUxlbmd0aChzYWx0KSE9PTMyKXtsb2dnZXIkNy50aHJvd0FyZ3VtZW50RXJyb3IoXCJzYWx0IG11c3QgYmUgMzIgYnl0ZXNcIixcInNhbHRcIixzYWx0KX1pZihoZXhEYXRhTGVuZ3RoKGluaXRDb2RlSGFzaCkhPT0zMil7bG9nZ2VyJDcudGhyb3dBcmd1bWVudEVycm9yKFwiaW5pdENvZGVIYXNoIG11c3QgYmUgMzIgYnl0ZXNcIixcImluaXRDb2RlSGFzaFwiLGluaXRDb2RlSGFzaCl9cmV0dXJuIGdldEFkZHJlc3MoaGV4RGF0YVNsaWNlKGtlY2NhazI1Nihjb25jYXQoW1wiMHhmZlwiLGdldEFkZHJlc3MoZnJvbSksc2FsdCxpbml0Q29kZUhhc2hdKSksMTIpKX1cInVzZSBzdHJpY3RcIjtjbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBDb2Rlcntjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpe3N1cGVyKFwiYWRkcmVzc1wiLFwiYWRkcmVzc1wiLGxvY2FsTmFtZSxmYWxzZSl9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn1lbmNvZGUod3JpdGVyLHZhbHVlKXt0cnl7Z2V0QWRkcmVzcyh2YWx1ZSl9Y2F0Y2goZXJyb3Ipe3RoaXMuX3Rocm93RXJyb3IoZXJyb3IubWVzc2FnZSx2YWx1ZSl9cmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gZ2V0QWRkcmVzcyhoZXhaZXJvUGFkKHJlYWRlci5yZWFkVmFsdWUoKS50b0hleFN0cmluZygpLDIwKSl9fVwidXNlIHN0cmljdFwiO2NsYXNzIEFub255bW91c0NvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3IoY29kZXIpe3N1cGVyKGNvZGVyLm5hbWUsY29kZXIudHlwZSx1bmRlZmluZWQsY29kZXIuZHluYW1pYyk7dGhpcy5jb2Rlcj1jb2Rlcn1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKX1lbmNvZGUod3JpdGVyLHZhbHVlKXtyZXR1cm4gdGhpcy5jb2Rlci5lbmNvZGUod3JpdGVyLHZhbHVlKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gdGhpcy5jb2Rlci5kZWNvZGUocmVhZGVyKX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJDg9bmV3IExvZ2dlcih2ZXJzaW9uJDQpO2Z1bmN0aW9uIHBhY2sod3JpdGVyLGNvZGVycyx2YWx1ZXMpe2xldCBhcnJheVZhbHVlcz1udWxsO2lmKEFycmF5LmlzQXJyYXkodmFsdWVzKSl7YXJyYXlWYWx1ZXM9dmFsdWVzfWVsc2UgaWYodmFsdWVzJiZ0eXBlb2YgdmFsdWVzPT09XCJvYmplY3RcIil7bGV0IHVuaXF1ZT17fTthcnJheVZhbHVlcz1jb2RlcnMubWFwKGNvZGVyPT57Y29uc3QgbmFtZT1jb2Rlci5sb2NhbE5hbWU7aWYoIW5hbWUpe2xvZ2dlciQ4LnRocm93RXJyb3IoXCJjYW5ub3QgZW5jb2RlIG9iamVjdCBmb3Igc2lnbmF0dXJlIHdpdGggbWlzc2luZyBuYW1lc1wiLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJ2YWx1ZXNcIixjb2Rlcjpjb2Rlcix2YWx1ZTp2YWx1ZXN9KX1pZih1bmlxdWVbbmFtZV0pe2xvZ2dlciQ4LnRocm93RXJyb3IoXCJjYW5ub3QgZW5jb2RlIG9iamVjdCBmb3Igc2lnbmF0dXJlIHdpdGggZHVwbGljYXRlIG5hbWVzXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpcInZhbHVlc1wiLGNvZGVyOmNvZGVyLHZhbHVlOnZhbHVlc30pfXVuaXF1ZVtuYW1lXT10cnVlO3JldHVybiB2YWx1ZXNbbmFtZV19KX1lbHNle2xvZ2dlciQ4LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHVwbGUgdmFsdWVcIixcInR1cGxlXCIsdmFsdWVzKX1pZihjb2RlcnMubGVuZ3RoIT09YXJyYXlWYWx1ZXMubGVuZ3RoKXtsb2dnZXIkOC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcy92YWx1ZSBsZW5ndGggbWlzbWF0Y2hcIixcInR1cGxlXCIsdmFsdWVzKX1sZXQgc3RhdGljV3JpdGVyPW5ldyBXcml0ZXIod3JpdGVyLndvcmRTaXplKTtsZXQgZHluYW1pY1dyaXRlcj1uZXcgV3JpdGVyKHdyaXRlci53b3JkU2l6ZSk7bGV0IHVwZGF0ZUZ1bmNzPVtdO2NvZGVycy5mb3JFYWNoKChjb2RlcixpbmRleCk9PntsZXQgdmFsdWU9YXJyYXlWYWx1ZXNbaW5kZXhdO2lmKGNvZGVyLmR5bmFtaWMpe2xldCBkeW5hbWljT2Zmc2V0PWR5bmFtaWNXcml0ZXIubGVuZ3RoO2NvZGVyLmVuY29kZShkeW5hbWljV3JpdGVyLHZhbHVlKTtsZXQgdXBkYXRlRnVuYz1zdGF0aWNXcml0ZXIud3JpdGVVcGRhdGFibGVWYWx1ZSgpO3VwZGF0ZUZ1bmNzLnB1c2goYmFzZU9mZnNldD0+e3VwZGF0ZUZ1bmMoYmFzZU9mZnNldCtkeW5hbWljT2Zmc2V0KX0pfWVsc2V7Y29kZXIuZW5jb2RlKHN0YXRpY1dyaXRlcix2YWx1ZSl9fSk7dXBkYXRlRnVuY3MuZm9yRWFjaChmdW5jPT57ZnVuYyhzdGF0aWNXcml0ZXIubGVuZ3RoKX0pO2xldCBsZW5ndGg9d3JpdGVyLmFwcGVuZFdyaXRlcihzdGF0aWNXcml0ZXIpO2xlbmd0aCs9d3JpdGVyLmFwcGVuZFdyaXRlcihkeW5hbWljV3JpdGVyKTtyZXR1cm4gbGVuZ3RofWZ1bmN0aW9uIHVucGFjayhyZWFkZXIsY29kZXJzKXtsZXQgdmFsdWVzPVtdO2xldCBiYXNlUmVhZGVyPXJlYWRlci5zdWJSZWFkZXIoMCk7Y29kZXJzLmZvckVhY2goY29kZXI9PntsZXQgdmFsdWU9bnVsbDtpZihjb2Rlci5keW5hbWljKXtsZXQgb2Zmc2V0PXJlYWRlci5yZWFkVmFsdWUoKTtsZXQgb2Zmc2V0UmVhZGVyPWJhc2VSZWFkZXIuc3ViUmVhZGVyKG9mZnNldC50b051bWJlcigpKTt0cnl7dmFsdWU9Y29kZXIuZGVjb2RlKG9mZnNldFJlYWRlcil9Y2F0Y2goZXJyb3Ipe2lmKGVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOKXt0aHJvdyBlcnJvcn12YWx1ZT1lcnJvcjt2YWx1ZS5iYXNlVHlwZT1jb2Rlci5uYW1lO3ZhbHVlLm5hbWU9Y29kZXIubG9jYWxOYW1lO3ZhbHVlLnR5cGU9Y29kZXIudHlwZX19ZWxzZXt0cnl7dmFsdWU9Y29kZXIuZGVjb2RlKHJlYWRlcil9Y2F0Y2goZXJyb3Ipe2lmKGVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOKXt0aHJvdyBlcnJvcn12YWx1ZT1lcnJvcjt2YWx1ZS5iYXNlVHlwZT1jb2Rlci5uYW1lO3ZhbHVlLm5hbWU9Y29kZXIubG9jYWxOYW1lO3ZhbHVlLnR5cGU9Y29kZXIudHlwZX19aWYodmFsdWUhPXVuZGVmaW5lZCl7dmFsdWVzLnB1c2godmFsdWUpfX0pO2NvbnN0IHVuaXF1ZU5hbWVzPWNvZGVycy5yZWR1Y2UoKGFjY3VtLGNvZGVyKT0+e2NvbnN0IG5hbWU9Y29kZXIubG9jYWxOYW1lO2lmKG5hbWUpe2lmKCFhY2N1bVtuYW1lXSl7YWNjdW1bbmFtZV09MH1hY2N1bVtuYW1lXSsrfXJldHVybiBhY2N1bX0se30pO2NvZGVycy5mb3JFYWNoKChjb2RlcixpbmRleCk9PntsZXQgbmFtZT1jb2Rlci5sb2NhbE5hbWU7aWYoIW5hbWV8fHVuaXF1ZU5hbWVzW25hbWVdIT09MSl7cmV0dXJufWlmKG5hbWU9PT1cImxlbmd0aFwiKXtuYW1lPVwiX2xlbmd0aFwifWlmKHZhbHVlc1tuYW1lXSE9bnVsbCl7cmV0dXJufWNvbnN0IHZhbHVlPXZhbHVlc1tpbmRleF07aWYodmFsdWUgaW5zdGFuY2VvZiBFcnJvcil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlcyxuYW1lLHtnZXQ6KCk9Pnt0aHJvdyB2YWx1ZX19KX1lbHNle3ZhbHVlc1tuYW1lXT12YWx1ZX19KTtmb3IobGV0IGk9MDtpPHZhbHVlcy5sZW5ndGg7aSsrKXtjb25zdCB2YWx1ZT12YWx1ZXNbaV07aWYodmFsdWUgaW5zdGFuY2VvZiBFcnJvcil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlcyxpLHtnZXQ6KCk9Pnt0aHJvdyB2YWx1ZX19KX19cmV0dXJuIE9iamVjdC5mcmVlemUodmFsdWVzKX1jbGFzcyBBcnJheUNvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3IoY29kZXIsbGVuZ3RoLGxvY2FsTmFtZSl7Y29uc3QgdHlwZT1jb2Rlci50eXBlK1wiW1wiKyhsZW5ndGg+PTA/bGVuZ3RoOlwiXCIpK1wiXVwiO2NvbnN0IGR5bmFtaWM9bGVuZ3RoPT09LTF8fGNvZGVyLmR5bmFtaWM7c3VwZXIoXCJhcnJheVwiLHR5cGUsbG9jYWxOYW1lLGR5bmFtaWMpO3RoaXMuY29kZXI9Y29kZXI7dGhpcy5sZW5ndGg9bGVuZ3RofWRlZmF1bHRWYWx1ZSgpe2NvbnN0IGRlZmF1bHRDaGlsZD10aGlzLmNvZGVyLmRlZmF1bHRWYWx1ZSgpO2NvbnN0IHJlc3VsdD1bXTtmb3IobGV0IGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7cmVzdWx0LnB1c2goZGVmYXVsdENoaWxkKX1yZXR1cm4gcmVzdWx0fWVuY29kZSh3cml0ZXIsdmFsdWUpe2lmKCFBcnJheS5pc0FycmF5KHZhbHVlKSl7dGhpcy5fdGhyb3dFcnJvcihcImV4cGVjdGVkIGFycmF5IHZhbHVlXCIsdmFsdWUpfWxldCBjb3VudD10aGlzLmxlbmd0aDtpZihjb3VudD09PS0xKXtjb3VudD12YWx1ZS5sZW5ndGg7d3JpdGVyLndyaXRlVmFsdWUodmFsdWUubGVuZ3RoKX1sb2dnZXIkOC5jaGVja0FyZ3VtZW50Q291bnQodmFsdWUubGVuZ3RoLGNvdW50LFwiY29kZXIgYXJyYXlcIisodGhpcy5sb2NhbE5hbWU/XCIgXCIrdGhpcy5sb2NhbE5hbWU6XCJcIikpO2xldCBjb2RlcnM9W107Zm9yKGxldCBpPTA7aTx2YWx1ZS5sZW5ndGg7aSsrKXtjb2RlcnMucHVzaCh0aGlzLmNvZGVyKX1yZXR1cm4gcGFjayh3cml0ZXIsY29kZXJzLHZhbHVlKX1kZWNvZGUocmVhZGVyKXtsZXQgY291bnQ9dGhpcy5sZW5ndGg7aWYoY291bnQ9PT0tMSl7Y291bnQ9cmVhZGVyLnJlYWRWYWx1ZSgpLnRvTnVtYmVyKCk7aWYoY291bnQqMzI+cmVhZGVyLl9kYXRhLmxlbmd0aCl7bG9nZ2VyJDgudGhyb3dFcnJvcihcImluc3VmZmljaWVudCBkYXRhIGxlbmd0aFwiLExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4se2xlbmd0aDpyZWFkZXIuX2RhdGEubGVuZ3RoLGNvdW50OmNvdW50fSl9fWxldCBjb2RlcnM9W107Zm9yKGxldCBpPTA7aTxjb3VudDtpKyspe2NvZGVycy5wdXNoKG5ldyBBbm9ueW1vdXNDb2Rlcih0aGlzLmNvZGVyKSl9cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLHVucGFjayhyZWFkZXIsY29kZXJzKSl9fVwidXNlIHN0cmljdFwiO2NsYXNzIEJvb2xlYW5Db2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKGxvY2FsTmFtZSl7c3VwZXIoXCJib29sXCIsXCJib29sXCIsbG9jYWxOYW1lLGZhbHNlKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm4gZmFsc2V9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7cmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlPzE6MCl9ZGVjb2RlKHJlYWRlcil7cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy50eXBlLCFyZWFkZXIucmVhZFZhbHVlKCkuaXNaZXJvKCkpfX1cInVzZSBzdHJpY3RcIjtjbGFzcyBEeW5hbWljQnl0ZXNDb2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKHR5cGUsbG9jYWxOYW1lKXtzdXBlcih0eXBlLHR5cGUsbG9jYWxOYW1lLHRydWUpfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiMHhcIn1lbmNvZGUod3JpdGVyLHZhbHVlKXt2YWx1ZT1hcnJheWlmeSh2YWx1ZSk7bGV0IGxlbmd0aD13cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO2xlbmd0aCs9d3JpdGVyLndyaXRlQnl0ZXModmFsdWUpO3JldHVybiBsZW5ndGh9ZGVjb2RlKHJlYWRlcil7cmV0dXJuIHJlYWRlci5yZWFkQnl0ZXMocmVhZGVyLnJlYWRWYWx1ZSgpLnRvTnVtYmVyKCksdHJ1ZSl9fWNsYXNzIEJ5dGVzQ29kZXIgZXh0ZW5kcyBEeW5hbWljQnl0ZXNDb2Rlcntjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpe3N1cGVyKFwiYnl0ZXNcIixsb2NhbE5hbWUpfWRlY29kZShyZWFkZXIpe3JldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSxoZXhsaWZ5KHN1cGVyLmRlY29kZShyZWFkZXIpKSl9fVwidXNlIHN0cmljdFwiO2NsYXNzIEZpeGVkQnl0ZXNDb2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKHNpemUsbG9jYWxOYW1lKXtsZXQgbmFtZT1cImJ5dGVzXCIrU3RyaW5nKHNpemUpO3N1cGVyKG5hbWUsbmFtZSxsb2NhbE5hbWUsZmFsc2UpO3RoaXMuc2l6ZT1zaXplfWRlZmF1bHRWYWx1ZSgpe3JldHVyblwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIuc3Vic3RyaW5nKDAsMit0aGlzLnNpemUqMil9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7bGV0IGRhdGE9YXJyYXlpZnkodmFsdWUpO2lmKGRhdGEubGVuZ3RoIT09dGhpcy5zaXplKXt0aGlzLl90aHJvd0Vycm9yKFwiaW5jb3JyZWN0IGRhdGEgbGVuZ3RoXCIsdmFsdWUpfXJldHVybiB3cml0ZXIud3JpdGVCeXRlcyhkYXRhKX1kZWNvZGUocmVhZGVyKXtyZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsaGV4bGlmeShyZWFkZXIucmVhZEJ5dGVzKHRoaXMuc2l6ZSkpKX19XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgTnVsbENvZGVyIGV4dGVuZHMgQ29kZXJ7Y29uc3RydWN0b3IobG9jYWxOYW1lKXtzdXBlcihcIm51bGxcIixcIlwiLGxvY2FsTmFtZSxmYWxzZSl9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuIG51bGx9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7aWYodmFsdWUhPW51bGwpe3RoaXMuX3Rocm93RXJyb3IoXCJub3QgbnVsbFwiLHZhbHVlKX1yZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoW10pfWRlY29kZShyZWFkZXIpe3JlYWRlci5yZWFkQnl0ZXMoMCk7cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLG51bGwpfX1jb25zdCBBZGRyZXNzWmVybz1cIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO2NvbnN0IE5lZ2F0aXZlT25lJDE9QmlnTnVtYmVyLmZyb20oLTEpO2NvbnN0IFplcm8kMT1CaWdOdW1iZXIuZnJvbSgwKTtjb25zdCBPbmU9QmlnTnVtYmVyLmZyb20oMSk7Y29uc3QgVHdvPUJpZ051bWJlci5mcm9tKDIpO2NvbnN0IFdlaVBlckV0aGVyPUJpZ051bWJlci5mcm9tKFwiMTAwMDAwMDAwMDAwMDAwMDAwMFwiKTtjb25zdCBNYXhVaW50MjU2PUJpZ051bWJlci5mcm9tKFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO2NvbnN0IEhhc2haZXJvPVwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7Y29uc3QgRXRoZXJTeW1ib2w9XCJcdTAzOUVcIjtcInVzZSBzdHJpY3RcIjt2YXIgaW5kZXgkMT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxBZGRyZXNzWmVybzpBZGRyZXNzWmVybyxOZWdhdGl2ZU9uZTpOZWdhdGl2ZU9uZSQxLFplcm86WmVybyQxLE9uZTpPbmUsVHdvOlR3byxXZWlQZXJFdGhlcjpXZWlQZXJFdGhlcixNYXhVaW50MjU2Ok1heFVpbnQyNTYsSGFzaFplcm86SGFzaFplcm8sRXRoZXJTeW1ib2w6RXRoZXJTeW1ib2x9KTtcInVzZSBzdHJpY3RcIjtjbGFzcyBOdW1iZXJDb2RlciBleHRlbmRzIENvZGVye2NvbnN0cnVjdG9yKHNpemUsc2lnbmVkLGxvY2FsTmFtZSl7Y29uc3QgbmFtZT0oc2lnbmVkP1wiaW50XCI6XCJ1aW50XCIpK3NpemUqODtzdXBlcihuYW1lLG5hbWUsbG9jYWxOYW1lLGZhbHNlKTt0aGlzLnNpemU9c2l6ZTt0aGlzLnNpZ25lZD1zaWduZWR9ZGVmYXVsdFZhbHVlKCl7cmV0dXJuIDB9ZW5jb2RlKHdyaXRlcix2YWx1ZSl7bGV0IHY9QmlnTnVtYmVyLmZyb20odmFsdWUpO2xldCBtYXhVaW50VmFsdWU9TWF4VWludDI1Ni5tYXNrKHdyaXRlci53b3JkU2l6ZSo4KTtpZih0aGlzLnNpZ25lZCl7bGV0IGJvdW5kcz1tYXhVaW50VmFsdWUubWFzayh0aGlzLnNpemUqOC0xKTtpZih2Lmd0KGJvdW5kcyl8fHYubHQoYm91bmRzLmFkZChPbmUpLm11bChOZWdhdGl2ZU9uZSQxKSkpe3RoaXMuX3Rocm93RXJyb3IoXCJ2YWx1ZSBvdXQtb2YtYm91bmRzXCIsdmFsdWUpfX1lbHNlIGlmKHYubHQoWmVybyQxKXx8di5ndChtYXhVaW50VmFsdWUubWFzayh0aGlzLnNpemUqOCkpKXt0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLHZhbHVlKX12PXYudG9Ud29zKHRoaXMuc2l6ZSo4KS5tYXNrKHRoaXMuc2l6ZSo4KTtpZih0aGlzLnNpZ25lZCl7dj12LmZyb21Ud29zKHRoaXMuc2l6ZSo4KS50b1R3b3MoOCp3cml0ZXIud29yZFNpemUpfXJldHVybiB3cml0ZXIud3JpdGVWYWx1ZSh2KX1kZWNvZGUocmVhZGVyKXtsZXQgdmFsdWU9cmVhZGVyLnJlYWRWYWx1ZSgpLm1hc2sodGhpcy5zaXplKjgpO2lmKHRoaXMuc2lnbmVkKXt2YWx1ZT12YWx1ZS5mcm9tVHdvcyh0aGlzLnNpemUqOCl9cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLHZhbHVlKX19Y29uc3QgdmVyc2lvbiQ3PVwic3RyaW5ncy81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciQ5PW5ldyBMb2dnZXIodmVyc2lvbiQ3KTt2YXIgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtOyhmdW5jdGlvbihVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0pe1VuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcImN1cnJlbnRcIl09XCJcIjtVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORkNcIl09XCJORkNcIjtVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORkRcIl09XCJORkRcIjtVbmljb2RlTm9ybWFsaXphdGlvbkZvcm1bXCJORktDXCJdPVwiTkZLQ1wiO1VuaWNvZGVOb3JtYWxpemF0aW9uRm9ybVtcIk5GS0RcIl09XCJORktEXCJ9KShVbmljb2RlTm9ybWFsaXphdGlvbkZvcm18fChVbmljb2RlTm9ybWFsaXphdGlvbkZvcm09e30pKTt2YXIgVXRmOEVycm9yUmVhc29uOyhmdW5jdGlvbihVdGY4RXJyb3JSZWFzb24pe1V0ZjhFcnJvclJlYXNvbltcIlVORVhQRUNURURfQ09OVElOVUVcIl09XCJ1bmV4cGVjdGVkIGNvbnRpbnVhdGlvbiBieXRlXCI7VXRmOEVycm9yUmVhc29uW1wiQkFEX1BSRUZJWFwiXT1cImJhZCBjb2RlcG9pbnQgcHJlZml4XCI7VXRmOEVycm9yUmVhc29uW1wiT1ZFUlJVTlwiXT1cInN0cmluZyBvdmVycnVuXCI7VXRmOEVycm9yUmVhc29uW1wiTUlTU0lOR19DT05USU5VRVwiXT1cIm1pc3NpbmcgY29udGludWF0aW9uIGJ5dGVcIjtVdGY4RXJyb3JSZWFzb25bXCJPVVRfT0ZfUkFOR0VcIl09XCJvdXQgb2YgVVRGLTggcmFuZ2VcIjtVdGY4RXJyb3JSZWFzb25bXCJVVEYxNl9TVVJST0dBVEVcIl09XCJVVEYtMTYgc3Vycm9nYXRlXCI7VXRmOEVycm9yUmVhc29uW1wiT1ZFUkxPTkdcIl09XCJvdmVybG9uZyByZXByZXNlbnRhdGlvblwifSkoVXRmOEVycm9yUmVhc29ufHwoVXRmOEVycm9yUmVhc29uPXt9KSk7ZnVuY3Rpb24gZXJyb3JGdW5jKHJlYXNvbixvZmZzZXQsYnl0ZXMsb3V0cHV0LGJhZENvZGVwb2ludCl7cmV0dXJuIGxvZ2dlciQ5LnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBjb2RlcG9pbnQgYXQgb2Zmc2V0ICR7b2Zmc2V0fTsgJHtyZWFzb259YCxcImJ5dGVzXCIsYnl0ZXMpfWZ1bmN0aW9uIGlnbm9yZUZ1bmMocmVhc29uLG9mZnNldCxieXRlcyxvdXRwdXQsYmFkQ29kZXBvaW50KXtpZihyZWFzb249PT1VdGY4RXJyb3JSZWFzb24uQkFEX1BSRUZJWHx8cmVhc29uPT09VXRmOEVycm9yUmVhc29uLlVORVhQRUNURURfQ09OVElOVUUpe2xldCBpPTA7Zm9yKGxldCBvPW9mZnNldCsxO288Ynl0ZXMubGVuZ3RoO28rKyl7aWYoYnl0ZXNbb10+PjYhPT0yKXticmVha31pKyt9cmV0dXJuIGl9aWYocmVhc29uPT09VXRmOEVycm9yUmVhc29uLk9WRVJSVU4pe3JldHVybiBieXRlcy5sZW5ndGgtb2Zmc2V0LTF9cmV0dXJuIDB9ZnVuY3Rpb24gcmVwbGFjZUZ1bmMocmVhc29uLG9mZnNldCxieXRlcyxvdXRwdXQsYmFkQ29kZXBvaW50KXtpZihyZWFzb249PT1VdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcpe291dHB1dC5wdXNoKGJhZENvZGVwb2ludCk7cmV0dXJuIDB9b3V0cHV0LnB1c2goNjU1MzMpO3JldHVybiBpZ25vcmVGdW5jKHJlYXNvbixvZmZzZXQsYnl0ZXMsb3V0cHV0LGJhZENvZGVwb2ludCl9Y29uc3QgVXRmOEVycm9yRnVuY3M9T2JqZWN0LmZyZWV6ZSh7ZXJyb3I6ZXJyb3JGdW5jLGlnbm9yZTppZ25vcmVGdW5jLHJlcGxhY2U6cmVwbGFjZUZ1bmN9KTtmdW5jdGlvbiBnZXRVdGY4Q29kZVBvaW50cyhieXRlcyxvbkVycm9yKXtpZihvbkVycm9yPT1udWxsKXtvbkVycm9yPVV0ZjhFcnJvckZ1bmNzLmVycm9yfWJ5dGVzPWFycmF5aWZ5KGJ5dGVzKTtjb25zdCByZXN1bHQ9W107bGV0IGk9MDt3aGlsZShpPGJ5dGVzLmxlbmd0aCl7Y29uc3QgYz1ieXRlc1tpKytdO2lmKGM+Pjc9PT0wKXtyZXN1bHQucHVzaChjKTtjb250aW51ZX1sZXQgZXh0cmFMZW5ndGg9bnVsbDtsZXQgb3ZlcmxvbmdNYXNrPW51bGw7aWYoKGMmMjI0KT09PTE5Mil7ZXh0cmFMZW5ndGg9MTtvdmVybG9uZ01hc2s9MTI3fWVsc2UgaWYoKGMmMjQwKT09PTIyNCl7ZXh0cmFMZW5ndGg9MjtvdmVybG9uZ01hc2s9MjA0N31lbHNlIGlmKChjJjI0OCk9PT0yNDApe2V4dHJhTGVuZ3RoPTM7b3ZlcmxvbmdNYXNrPTY1NTM1fWVsc2V7aWYoKGMmMTkyKT09PTEyOCl7aSs9b25FcnJvcihVdGY4RXJyb3JSZWFzb24uVU5FWFBFQ1RFRF9DT05USU5VRSxpLTEsYnl0ZXMscmVzdWx0KX1lbHNle2krPW9uRXJyb3IoVXRmOEVycm9yUmVhc29uLkJBRF9QUkVGSVgsaS0xLGJ5dGVzLHJlc3VsdCl9Y29udGludWV9aWYoaS0xK2V4dHJhTGVuZ3RoPj1ieXRlcy5sZW5ndGgpe2krPW9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk9WRVJSVU4saS0xLGJ5dGVzLHJlc3VsdCk7Y29udGludWV9bGV0IHJlcz1jJigxPDw4LWV4dHJhTGVuZ3RoLTEpLTE7Zm9yKGxldCBqPTA7ajxleHRyYUxlbmd0aDtqKyspe2xldCBuZXh0Q2hhcj1ieXRlc1tpXTtpZigobmV4dENoYXImMTkyKSE9MTI4KXtpKz1vbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5NSVNTSU5HX0NPTlRJTlVFLGksYnl0ZXMscmVzdWx0KTtyZXM9bnVsbDticmVha31yZXM9cmVzPDw2fG5leHRDaGFyJjYzO2krK31pZihyZXM9PT1udWxsKXtjb250aW51ZX1pZihyZXM+MTExNDExMSl7aSs9b25FcnJvcihVdGY4RXJyb3JSZWFzb24uT1VUX09GX1JBTkdFLGktMS1leHRyYUxlbmd0aCxieXRlcyxyZXN1bHQscmVzKTtjb250aW51ZX1pZihyZXM+PTU1Mjk2JiZyZXM8PTU3MzQzKXtpKz1vbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5VVEYxNl9TVVJST0dBVEUsaS0xLWV4dHJhTGVuZ3RoLGJ5dGVzLHJlc3VsdCxyZXMpO2NvbnRpbnVlfWlmKHJlczw9b3ZlcmxvbmdNYXNrKXtpKz1vbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5PVkVSTE9ORyxpLTEtZXh0cmFMZW5ndGgsYnl0ZXMscmVzdWx0LHJlcyk7Y29udGludWV9cmVzdWx0LnB1c2gocmVzKX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIHRvVXRmOEJ5dGVzKHN0cixmb3JtPVVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5jdXJyZW50KXtpZihmb3JtIT1Vbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uY3VycmVudCl7bG9nZ2VyJDkuY2hlY2tOb3JtYWxpemUoKTtzdHI9c3RyLm5vcm1hbGl6ZShmb3JtKX1sZXQgcmVzdWx0PVtdO2ZvcihsZXQgaT0wO2k8c3RyLmxlbmd0aDtpKyspe2NvbnN0IGM9c3RyLmNoYXJDb2RlQXQoaSk7aWYoYzwxMjgpe3Jlc3VsdC5wdXNoKGMpfWVsc2UgaWYoYzwyMDQ4KXtyZXN1bHQucHVzaChjPj42fDE5Mik7cmVzdWx0LnB1c2goYyY2M3wxMjgpfWVsc2UgaWYoKGMmNjQ1MTIpPT01NTI5Nil7aSsrO2NvbnN0IGMyPXN0ci5jaGFyQ29kZUF0KGkpO2lmKGk+PXN0ci5sZW5ndGh8fChjMiY2NDUxMikhPT01NjMyMCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1dGYtOCBzdHJpbmdcIil9Y29uc3QgcGFpcj02NTUzNisoKGMmMTAyMyk8PDEwKSsoYzImMTAyMyk7cmVzdWx0LnB1c2gocGFpcj4+MTh8MjQwKTtyZXN1bHQucHVzaChwYWlyPj4xMiY2M3wxMjgpO3Jlc3VsdC5wdXNoKHBhaXI+PjYmNjN8MTI4KTtyZXN1bHQucHVzaChwYWlyJjYzfDEyOCl9ZWxzZXtyZXN1bHQucHVzaChjPj4xMnwyMjQpO3Jlc3VsdC5wdXNoKGM+PjYmNjN8MTI4KTtyZXN1bHQucHVzaChjJjYzfDEyOCl9fXJldHVybiBhcnJheWlmeShyZXN1bHQpfWZ1bmN0aW9uIGVzY2FwZUNoYXIodmFsdWUpe2NvbnN0IGhleD1cIjAwMDBcIit2YWx1ZS50b1N0cmluZygxNik7cmV0dXJuXCJcXFxcdVwiK2hleC5zdWJzdHJpbmcoaGV4Lmxlbmd0aC00KX1mdW5jdGlvbiBfdG9Fc2NhcGVkVXRmOFN0cmluZyhieXRlcyxvbkVycm9yKXtyZXR1cm4nXCInK2dldFV0ZjhDb2RlUG9pbnRzKGJ5dGVzLG9uRXJyb3IpLm1hcChjb2RlUG9pbnQ9PntpZihjb2RlUG9pbnQ8MjU2KXtzd2l0Y2goY29kZVBvaW50KXtjYXNlIDg6cmV0dXJuXCJcXFxcYlwiO2Nhc2UgOTpyZXR1cm5cIlxcXFx0XCI7Y2FzZSAxMDpyZXR1cm5cIlxcXFxuXCI7Y2FzZSAxMzpyZXR1cm5cIlxcXFxyXCI7Y2FzZSAzNDpyZXR1cm4nXFxcXFwiJztjYXNlIDkyOnJldHVyblwiXFxcXFxcXFxcIn1pZihjb2RlUG9pbnQ+PTMyJiZjb2RlUG9pbnQ8MTI3KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpfX1pZihjb2RlUG9pbnQ8PTY1NTM1KXtyZXR1cm4gZXNjYXBlQ2hhcihjb2RlUG9pbnQpfWNvZGVQb2ludC09NjU1MzY7cmV0dXJuIGVzY2FwZUNoYXIoKGNvZGVQb2ludD4+MTAmMTAyMykrNTUyOTYpK2VzY2FwZUNoYXIoKGNvZGVQb2ludCYxMDIzKSs1NjMyMCl9KS5qb2luKFwiXCIpKydcIid9ZnVuY3Rpb24gX3RvVXRmOFN0cmluZyhjb2RlUG9pbnRzKXtyZXR1cm4gY29kZVBvaW50cy5tYXAoY29kZVBvaW50PT57aWYoY29kZVBvaW50PD02NTUzNSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KX1jb2RlUG9pbnQtPTY1NTM2O3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKChjb2RlUG9pbnQ+PjEwJjEwMjMpKzU1Mjk2LChjb2RlUG9pbnQmMTAyMykrNTYzMjApfSkuam9pbihcIlwiKX1mdW5jdGlvbiB0b1V0ZjhTdHJpbmcoYnl0ZXMsb25FcnJvcil7cmV0dXJuIF90b1V0ZjhTdHJpbmcoZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsb25FcnJvcikpfWZ1bmN0aW9uIHRvVXRmOENvZGVQb2ludHMoc3RyLGZvcm09VW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpe3JldHVybiBnZXRVdGY4Q29kZVBvaW50cyh0b1V0ZjhCeXRlcyhzdHIsZm9ybSkpfVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGZvcm1hdEJ5dGVzMzJTdHJpbmcodGV4dCl7Y29uc3QgYnl0ZXM9dG9VdGY4Qnl0ZXModGV4dCk7aWYoYnl0ZXMubGVuZ3RoPjMxKXt0aHJvdyBuZXcgRXJyb3IoXCJieXRlczMyIHN0cmluZyBtdXN0IGJlIGxlc3MgdGhhbiAzMiBieXRlc1wiKX1yZXR1cm4gaGV4bGlmeShjb25jYXQoW2J5dGVzLEhhc2haZXJvXSkuc2xpY2UoMCwzMikpfWZ1bmN0aW9uIHBhcnNlQnl0ZXMzMlN0cmluZyhieXRlcyl7Y29uc3QgZGF0YT1hcnJheWlmeShieXRlcyk7aWYoZGF0YS5sZW5ndGghPT0zMil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBieXRlczMyIC0gbm90IDMyIGJ5dGVzIGxvbmdcIil9aWYoZGF0YVszMV0hPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgc3RyaW5nIC0gbm8gbnVsbCB0ZXJtaW5hdG9yXCIpfWxldCBsZW5ndGg9MzE7d2hpbGUoZGF0YVtsZW5ndGgtMV09PT0wKXtsZW5ndGgtLX1yZXR1cm4gdG9VdGY4U3RyaW5nKGRhdGEuc2xpY2UoMCxsZW5ndGgpKX1cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBieXRlczIoZGF0YSl7aWYoZGF0YS5sZW5ndGglNCE9PTApe3Rocm93IG5ldyBFcnJvcihcImJhZCBkYXRhXCIpfWxldCByZXN1bHQ9W107Zm9yKGxldCBpPTA7aTxkYXRhLmxlbmd0aDtpKz00KXtyZXN1bHQucHVzaChwYXJzZUludChkYXRhLnN1YnN0cmluZyhpLGkrNCksMTYpKX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIGNyZWF0ZVRhYmxlKGRhdGEsZnVuYyl7aWYoIWZ1bmMpe2Z1bmM9ZnVuY3Rpb24odmFsdWUpe3JldHVybltwYXJzZUludCh2YWx1ZSwxNildfX1sZXQgbG89MDtsZXQgcmVzdWx0PXt9O2RhdGEuc3BsaXQoXCIsXCIpLmZvckVhY2gocGFpcj0+e2xldCBjb21wcz1wYWlyLnNwbGl0KFwiOlwiKTtsbys9cGFyc2VJbnQoY29tcHNbMF0sMTYpO3Jlc3VsdFtsb109ZnVuYyhjb21wc1sxXSl9KTtyZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIGNyZWF0ZVJhbmdlVGFibGUoZGF0YSl7bGV0IGhpPTA7cmV0dXJuIGRhdGEuc3BsaXQoXCIsXCIpLm1hcCh2PT57bGV0IGNvbXBzPXYuc3BsaXQoXCItXCIpO2lmKGNvbXBzLmxlbmd0aD09PTEpe2NvbXBzWzFdPVwiMFwifWVsc2UgaWYoY29tcHNbMV09PT1cIlwiKXtjb21wc1sxXT1cIjFcIn1sZXQgbG89aGkrcGFyc2VJbnQoY29tcHNbMF0sMTYpO2hpPXBhcnNlSW50KGNvbXBzWzFdLDE2KTtyZXR1cm57bDpsbyxoOmhpfX0pfWZ1bmN0aW9uIG1hdGNoTWFwKHZhbHVlLHJhbmdlcyl7bGV0IGxvPTA7Zm9yKGxldCBpPTA7aTxyYW5nZXMubGVuZ3RoO2krKyl7bGV0IHJhbmdlPXJhbmdlc1tpXTtsbys9cmFuZ2UubDtpZih2YWx1ZT49bG8mJnZhbHVlPD1sbytyYW5nZS5oJiYodmFsdWUtbG8pJShyYW5nZS5kfHwxKT09PTApe2lmKHJhbmdlLmUmJnJhbmdlLmUuaW5kZXhPZih2YWx1ZS1sbykhPT0tMSl7Y29udGludWV9cmV0dXJuIHJhbmdlfX1yZXR1cm4gbnVsbH1jb25zdCBUYWJsZV9BXzFfcmFuZ2VzPWNyZWF0ZVJhbmdlVGFibGUoXCIyMjEsMTMtMWIsNWYtLDQwLTEwLDUxLWYsMTEtMywzLTMsMi0yLDItNCw4LDIsMTUsMmQsMjgtOCw4OCw0OCwyNy0sMy01LDExLTIwLDI3LSw4LDI4LDMtNSwxMiwxOCxiLWEsMWMtNCw2LTE2LDItZCwyLTIsMiwxYi00LDE3LTksOGYtLDEwLGYsMWYtMiwxYy0zNCwzMy0xNGUsNCwzNi0sMTMtLDYtMiwxYS1mLDQsOS0sMy0sMTcsOCwyLTIsNS0sMiw4LSwzLSw0LTgsMi0zLDMsNi0sMTYtNiwyLSw3LTMsMy0sMTcsOCwzLDMsMy0sMiw2LTMsMy0sNC1hLDUsMi02LDEwLWIsNCw4LDIsNCwxNyw4LDMsNi0sYiw0LDQtLDItZSwyLTQsYi0xMCw0LDktLDMtLDE3LDgsMy0sNS0sOS0yLDMtLDQtNywzLTMsMyw0LTMsYy0xMCwzLDctMiw0LDUtMiwzLDIsMy0yLDMtMiw0LTIsOSw0LTMsNi0yLDQsNS04LDItZSxkLWQsNCw5LDQsMTgsYiw2LTMsOCw0LDUtNiwzLTgsMy0zLGItMTEsMyw5LDQsMTgsYiw2LTMsOCw0LDUtNiwzLTYsMiwzLTMsYi0xMSwzLDksNCwxOCwxMS0zLDctLDQsNS04LDItNywzLTMsYi0xMSwzLDEzLTIsMTksYSwyLSw4LTIsMi0zLDcsMiw5LTExLDQtYiwzYi0zLDFlLTI0LDMsMi0sMywyLSwyLTUsNSw4LDQsMiwyLSwzLGUsNC0sNiwyLDctLGItLDMtMjEsNDksMjMtNSwxYy0zLDksMjUsMTAtLDItMmYsMjMsNiwzLDgtMiw1LTUsMWItNDUsMjctOSwyYS0sMi0zLDViLTQsNDUtNCw1My01LDgsNDAsMiw1LSw4LDIsNS0sMjgsMiw1LSwyMCwyLDUtLDgsMiw1LSw4LDgsMTgsMjAsMiw1LSw4LDI4LDE0LTUsMWQtMjIsNTYtYiwyNzctOCwxZS0yLDUyLWUsZSw4LWEsMTgtOCwxNS1iLGUsNCwzLWIsNWUtMixiLTE1LDEwLGItNSw1OS03LDJiLTU1NSw5ZC0zLDViLTUsMTctLDctLDI3LSw3LSw5LDIsMiwyLDIwLSwzNiwxMCxmLSw3LDE0LSw0LGEsNTQtMywyLTYsNi01LDktLDFjLTEwLDEzLTFkLDFjLTE0LDNjLSwxMC02LDMyLWIsMjQwLTMwLDI4LTE4LGMtMTQsYTAsMTE1LSwzLDY2LSxiLTc2LDUsNS0sMWQsMjQsMiw1LTIsMiw4LSwzNS0yLDE5LGYtMTAsMWQtMywzMTEtMzdmLDFiLDVhLWIsZDctMTksZC0zLDQxLDU3LSw2OC00LDI5LTMsNWYsMjktMzcsMmUtMiwyNS1jLDJjLTIsNGUtMywzMCw3OC0zLDY0LSwyMCwxOWI3LTQ5LDUxYTctNTksNDhlLTIsMzgtNzM4LDJiYTUtNWIsMjIyZi0sM2MtOTQsOC1iLDYtNCwxYiw2LDIsMywzLDZkLTIwLDE2ZS1mLDQxLSwzNy03LDJlLTIsMTEtZiw1LWIsMTgtLGIsMTQsNS0zLDYsODgtLDIsYmYtMiw3LSw3LSw3LSw0LTIsOCw4LTksOC0yZmYsMjAsNS1iLDFjLWI0LDI3LSwyNy1jYmIxLGY3LTksMjgtMixiNS0yMjEsNTYsNDgsMy0sMi0sMy0sNSxkLDIsNSwzLDQyLDUtLDksOCwxZCw1LDYsMi0yLDgsMTUzLTMsMTIzLTMsMzMtMjdmZCxhNmRhLTUxMjgsMjFmLTVkZiwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMsMi0xZCw2MS1mZjdkXCIpO2NvbnN0IFRhYmxlX0JfMV9mbGFncz1cImFkLDM0ZiwxODA2LDE4MGIsMTgwYywxODBkLDIwMGIsMjAwYywyMDBkLDIwNjAsZmVmZlwiLnNwbGl0KFwiLFwiKS5tYXAodj0+cGFyc2VJbnQodiwxNikpO2NvbnN0IFRhYmxlX0JfMl9yYW5nZXM9W3toOjI1LHM6MzIsbDo2NX0se2g6MzAsczozMixlOlsyM10sbDoxMjd9LHtoOjU0LHM6MSxlOls0OF0sbDo2NCxkOjJ9LHtoOjE0LHM6MSxsOjU3LGQ6Mn0se2g6NDQsczoxLGw6MTcsZDoyfSx7aDoxMCxzOjEsZTpbMiw2LDhdLGw6NjEsZDoyfSx7aDoxNixzOjEsbDo2OCxkOjJ9LHtoOjg0LHM6MSxlOlsxOCwyNCw2Nl0sbDoxOSxkOjJ9LHtoOjI2LHM6MzIsZTpbMTddLGw6NDM1fSx7aDoyMixzOjEsbDo3MSxkOjJ9LHtoOjE1LHM6ODAsbDo0MH0se2g6MzEsczozMixsOjE2fSx7aDozMixzOjEsbDo4MCxkOjJ9LHtoOjUyLHM6MSxsOjQyLGQ6Mn0se2g6MTIsczoxLGw6NTUsZDoyfSx7aDo0MCxzOjEsZTpbMzhdLGw6MTUsZDoyfSx7aDoxNCxzOjEsbDo0OCxkOjJ9LHtoOjM3LHM6NDgsbDo0OX0se2g6MTQ4LHM6MSxsOjYzNTEsZDoyfSx7aDo4OCxzOjEsbDoxNjAsZDoyfSx7aDoxNSxzOjE2LGw6NzA0fSx7aDoyNSxzOjI2LGw6ODU0fSx7aDoyNSxzOjMyLGw6NTU5MTV9LHtoOjM3LHM6NDAsbDoxMjQ3fSx7aDoyNSxzOi0xMTk3MTEsbDo1MzI0OH0se2g6MjUsczotMTE5NzYzLGw6NTJ9LHtoOjI1LHM6LTExOTgxNSxsOjUyfSx7aDoyNSxzOi0xMTk4NjcsZTpbMSw0LDUsNyw4LDExLDEyLDE3XSxsOjUyfSx7aDoyNSxzOi0xMTk5MTksbDo1Mn0se2g6MjQsczotMTE5OTcxLGU6WzIsNyw4LDE3XSxsOjUyfSx7aDoyNCxzOi0xMjAwMjMsZTpbMiw3LDEzLDE1LDE2LDE3XSxsOjUyfSx7aDoyNSxzOi0xMjAwNzUsbDo1Mn0se2g6MjUsczotMTIwMTI3LGw6NTJ9LHtoOjI1LHM6LTEyMDE3OSxsOjUyfSx7aDoyNSxzOi0xMjAyMzEsbDo1Mn0se2g6MjUsczotMTIwMjgzLGw6NTJ9LHtoOjI1LHM6LTEyMDMzNSxsOjUyfSx7aDoyNCxzOi0xMTk1NDMsZTpbMTddLGw6NTZ9LHtoOjI0LHM6LTExOTYwMSxlOlsxN10sbDo1OH0se2g6MjQsczotMTE5NjU5LGU6WzE3XSxsOjU4fSx7aDoyNCxzOi0xMTk3MTcsZTpbMTddLGw6NTh9LHtoOjI0LHM6LTExOTc3NSxlOlsxN10sbDo1OH1dO2NvbnN0IFRhYmxlX0JfMl9sdXRfYWJzPWNyZWF0ZVRhYmxlKFwiYjU6M2JjLGMzOmZmLDc6NzMsMjoyNTMsNToyNTQsMzoyNTYsMToyNTcsNToyNTksMToyNWIsMzoyNjAsMToyNjMsMjoyNjksMToyNjgsNToyNmYsMToyNzIsMjoyNzUsNzoyODAsMzoyODMsNToyODgsMzoyOGEsMToyOGIsNToyOTIsM2Y6MTk1LDE6MWJmLDI5OjE5ZSwxMjU6M2I5LDhiOjNiMiwxOjNiOCwxOjNjNSwzOjNjNiwxOjNjMCwxYTozYmEsMTozYzEsMTozYzMsMjozYjgsMTozYjUsMWJjOTozYjksMWM6MWY3NiwxOjFmNzcsZjoxZjdhLDE6MWY3YixkOjFmNzgsMToxZjc5LDE6MWY3YywxOjFmN2QsMTA3OjYzLDU6MjViLDQ6NjgsMTo2OCwxOjY4LDM6NjksMTo2OSwxOjZjLDM6NmUsNDo3MCwxOjcxLDE6NzIsMTo3MiwxOjcyLDc6N2EsMjozYzksMjo3YSwyOjZiLDE6ZTUsMTo2MiwxOjYzLDM6NjUsMTo2NiwyOjZkLGI6M2IzLDE6M2MwLDY6NjQsMWI1NzQ6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzLDIwOjNiOCwxYTozYzMsMjA6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzXCIpO2NvbnN0IFRhYmxlX0JfMl9sdXRfcmVsPWNyZWF0ZVRhYmxlKFwiMTc5OjEsMjoxLDI6MSw1OjEsMjoxLGE6NGYsYToxLDg6MSwyOjEsMjoxLDM6MSw1OjEsMzoxLDQ6MSwyOjEsMzoxLDQ6MSw4OjIsMToxLDI6MiwxOjEsMjoyLDI3OjIsMTk1OjI2LDI6MjUsMToyNSwxOjI1LDI6NDAsMjozZiwxOjNmLDMzOjEsMTE6LTYsMTotOSwxYWM3Oi0zYSw2ZDotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LGI6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw5Oi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsOTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsYzotOCwyOi04LDI6LTgsMjotOCw5Oi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsNDk6LTgsMTotOCwxOi00YSwxOi00YSxkOi01NiwxOi01NiwxOi01NiwxOi01NixkOi04LDE6LTgsZjotOCwxOi04LDM6LTdcIik7Y29uc3QgVGFibGVfQl8yX2NvbXBsZXg9Y3JlYXRlVGFibGUoXCJkZjowMDczMDA3Myw1MTowMDY5MDMwNywxOTowMkJDMDA2RSxhNzowMDZBMDMwQywxOGE6MDAyMDAzQjksMTY6MDNCOTAzMDgwMzAxLDIwOjAzQzUwMzA4MDMwMSwxZDc6MDU2NTA1ODIsMTkwZjowMDY4MDMzMSwxOjAwNzQwMzA4LDE6MDA3NzAzMEEsMTowMDc5MDMwQSwxOjAwNjEwMkJFLGI2OjAzQzUwMzEzLDI6MDNDNTAzMTMwMzAwLDI6MDNDNTAzMTMwMzAxLDI6MDNDNTAzMTMwMzQyLDJhOjFGMDAwM0I5LDE6MUYwMTAzQjksMToxRjAyMDNCOSwxOjFGMDMwM0I5LDE6MUYwNDAzQjksMToxRjA1MDNCOSwxOjFGMDYwM0I5LDE6MUYwNzAzQjksMToxRjAwMDNCOSwxOjFGMDEwM0I5LDE6MUYwMjAzQjksMToxRjAzMDNCOSwxOjFGMDQwM0I5LDE6MUYwNTAzQjksMToxRjA2MDNCOSwxOjFGMDcwM0I5LDE6MUYyMDAzQjksMToxRjIxMDNCOSwxOjFGMjIwM0I5LDE6MUYyMzAzQjksMToxRjI0MDNCOSwxOjFGMjUwM0I5LDE6MUYyNjAzQjksMToxRjI3MDNCOSwxOjFGMjAwM0I5LDE6MUYyMTAzQjksMToxRjIyMDNCOSwxOjFGMjMwM0I5LDE6MUYyNDAzQjksMToxRjI1MDNCOSwxOjFGMjYwM0I5LDE6MUYyNzAzQjksMToxRjYwMDNCOSwxOjFGNjEwM0I5LDE6MUY2MjAzQjksMToxRjYzMDNCOSwxOjFGNjQwM0I5LDE6MUY2NTAzQjksMToxRjY2MDNCOSwxOjFGNjcwM0I5LDE6MUY2MDAzQjksMToxRjYxMDNCOSwxOjFGNjIwM0I5LDE6MUY2MzAzQjksMToxRjY0MDNCOSwxOjFGNjUwM0I5LDE6MUY2NjAzQjksMToxRjY3MDNCOSwzOjFGNzAwM0I5LDE6MDNCMTAzQjksMTowM0FDMDNCOSwyOjAzQjEwMzQyLDE6MDNCMTAzNDIwM0I5LDU6MDNCMTAzQjksNjoxRjc0MDNCOSwxOjAzQjcwM0I5LDE6MDNBRTAzQjksMjowM0I3MDM0MiwxOjAzQjcwMzQyMDNCOSw1OjAzQjcwM0I5LDY6MDNCOTAzMDgwMzAwLDE6MDNCOTAzMDgwMzAxLDM6MDNCOTAzNDIsMTowM0I5MDMwODAzNDIsYjowM0M1MDMwODAzMDAsMTowM0M1MDMwODAzMDEsMTowM0MxMDMxMywyOjAzQzUwMzQyLDE6MDNDNTAzMDgwMzQyLGI6MUY3QzAzQjksMTowM0M5MDNCOSwxOjAzQ0UwM0I5LDI6MDNDOTAzNDIsMTowM0M5MDM0MjAzQjksNTowM0M5MDNCOSxhYzowMDcyMDA3Myw1YjowMEIwMDA2Myw2OjAwQjAwMDY2LGQ6MDA2RTAwNkYsYTowMDczMDA2RCwxOjAwNzQwMDY1MDA2QywxOjAwNzQwMDZELDEyNGY6MDA2ODAwNzAwMDYxLDI6MDA2MTAwNzUsMjowMDZGMDA3NixiOjAwNzAwMDYxLDE6MDA2RTAwNjEsMTowM0JDMDA2MSwxOjAwNkQwMDYxLDE6MDA2QjAwNjEsMTowMDZCMDA2MiwxOjAwNkQwMDYyLDE6MDA2NzAwNjIsMzowMDcwMDA2NiwxOjAwNkUwMDY2LDE6MDNCQzAwNjYsNDowMDY4MDA3QSwxOjAwNkIwMDY4MDA3QSwxOjAwNkQwMDY4MDA3QSwxOjAwNjcwMDY4MDA3QSwxOjAwNzQwMDY4MDA3QSwxNTowMDcwMDA2MSwxOjAwNkIwMDcwMDA2MSwxOjAwNkQwMDcwMDA2MSwxOjAwNjcwMDcwMDA2MSw4OjAwNzAwMDc2LDE6MDA2RTAwNzYsMTowM0JDMDA3NiwxOjAwNkQwMDc2LDE6MDA2QjAwNzYsMTowMDZEMDA3NiwxOjAwNzAwMDc3LDE6MDA2RTAwNzcsMTowM0JDMDA3NywxOjAwNkQwMDc3LDE6MDA2QjAwNzcsMTowMDZEMDA3NywxOjAwNkIwM0M5LDE6MDA2RDAzQzksMjowMDYyMDA3MSwzOjAwNjMyMjE1MDA2QjAwNjcsMTowMDYzMDA2RjAwMkUsMTowMDY0MDA2MiwxOjAwNjcwMDc5LDI6MDA2ODAwNzAsMjowMDZCMDA2QiwxOjAwNkIwMDZELDk6MDA3MDAwNjgsMjowMDcwMDA3MDAwNkQsMTowMDcwMDA3MiwyOjAwNzMwMDc2LDE6MDA3NzAwNjIsYzcyMzowMDY2MDA2NiwxOjAwNjYwMDY5LDE6MDA2NjAwNkMsMTowMDY2MDA2NjAwNjksMTowMDY2MDA2NjAwNkMsMTowMDczMDA3NCwxOjAwNzMwMDc0LGQ6MDU3NDA1NzYsMTowNTc0MDU2NSwxOjA1NzQwNTZCLDE6MDU3RTA1NzYsMTowNTc0MDU2RFwiLGJ5dGVzMik7Y29uc3QgVGFibGVfQ19yYW5nZXM9Y3JlYXRlUmFuZ2VUYWJsZShcIjgwLTIwLDJhMC0sMzljLDMyLGY3MSwxOGUsN2YyLWYsMTktNywzMC00LDctNSxmODEtYiw1LGE4MDAtMjBmZiw0ZDEtMWYsMTEwLGZhLTYsZDE3NC03LDJlODQtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLGZmZmYtLDIsMWYtNWYsZmY3Zi0yMDAwMVwiKTtmdW5jdGlvbiBmbGF0dGVuKHZhbHVlcyl7cmV0dXJuIHZhbHVlcy5yZWR1Y2UoKGFjY3VtLHZhbHVlKT0+e3ZhbHVlLmZvckVhY2godmFsdWU9PnthY2N1bS5wdXNoKHZhbHVlKX0pO3JldHVybiBhY2N1bX0sW10pfWZ1bmN0aW9uIF9uYW1lcHJlcFRhYmxlQTEoY29kZXBvaW50KXtyZXR1cm4hIW1hdGNoTWFwKGNvZGVwb2ludCxUYWJsZV9BXzFfcmFuZ2VzKX1mdW5jdGlvbiBfbmFtZXByZXBUYWJsZUIyKGNvZGVwb2ludCl7bGV0IHJhbmdlPW1hdGNoTWFwKGNvZGVwb2ludCxUYWJsZV9CXzJfcmFuZ2VzKTtpZihyYW5nZSl7cmV0dXJuW2NvZGVwb2ludCtyYW5nZS5zXX1sZXQgY29kZXM9VGFibGVfQl8yX2x1dF9hYnNbY29kZXBvaW50XTtpZihjb2Rlcyl7cmV0dXJuIGNvZGVzfWxldCBzaGlmdD1UYWJsZV9CXzJfbHV0X3JlbFtjb2RlcG9pbnRdO2lmKHNoaWZ0KXtyZXR1cm5bY29kZXBvaW50K3NoaWZ0WzBdXX1sZXQgY29tcGxleD1UYWJsZV9CXzJfY29tcGxleFtjb2RlcG9pbnRdO2lmKGNvbXBsZXgpe3JldHVybiBjb21wbGV4fXJldHVybiBudWxsfWZ1bmN0aW9uIF9uYW1lcHJlcFRhYmxlQyhjb2RlcG9pbnQpe3JldHVybiEhbWF0Y2hNYXAoY29kZXBvaW50LFRhYmxlX0NfcmFuZ2VzKX1mdW5jdGlvbiBuYW1lcHJlcCh2YWx1ZSl7aWYodmFsdWUubWF0Y2goL15bYS16MC05LV0qJC9pKSYmdmFsdWUubGVuZ3RoPD01OSl7cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCl9bGV0IGNvZGVzPXRvVXRmOENvZGVQb2ludHModmFsdWUpO2NvZGVzPWZsYXR0ZW4oY29kZXMubWFwKGNvZGU9PntpZihUYWJsZV9CXzFfZmxhZ3MuaW5kZXhPZihjb2RlKT49MCl7cmV0dXJuW119aWYoY29kZT49NjUwMjQmJmNvZGU8PTY1MDM5KXtyZXR1cm5bXX1sZXQgY29kZXNUYWJsZUIyPV9uYW1lcHJlcFRhYmxlQjIoY29kZSk7aWYoY29kZXNUYWJsZUIyKXtyZXR1cm4gY29kZXNUYWJsZUIyfXJldHVybltjb2RlXX0pKTtjb2Rlcz10b1V0ZjhDb2RlUG9pbnRzKF90b1V0ZjhTdHJpbmcoY29kZXMpLFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktDKTtjb2Rlcy5mb3JFYWNoKGNvZGU9PntpZihfbmFtZXByZXBUYWJsZUMoY29kZSkpe3Rocm93IG5ldyBFcnJvcihcIlNUUklOR1BSRVBfQ09OVEFJTlNfUFJPSElCSVRFRFwiKX19KTtjb2Rlcy5mb3JFYWNoKGNvZGU9PntpZihfbmFtZXByZXBUYWJsZUExKGNvZGUpKXt0aHJvdyBuZXcgRXJyb3IoXCJTVFJJTkdQUkVQX0NPTlRBSU5TX1VOQVNTSUdORURcIil9fSk7bGV0IG5hbWU9X3RvVXRmOFN0cmluZyhjb2Rlcyk7aWYobmFtZS5zdWJzdHJpbmcoMCwxKT09PVwiLVwifHxuYW1lLnN1YnN0cmluZygyLDQpPT09XCItLVwifHxuYW1lLnN1YnN0cmluZyhuYW1lLmxlbmd0aC0xKT09PVwiLVwiKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGh5cGhlblwiKX1pZihuYW1lLmxlbmd0aD42Myl7dGhyb3cgbmV3IEVycm9yKFwidG9vIGxvbmdcIil9cmV0dXJuIG5hbWV9XCJ1c2Ugc3RyaWN0XCI7XCJ1c2Ugc3RyaWN0XCI7Y2xhc3MgU3RyaW5nQ29kZXIgZXh0ZW5kcyBEeW5hbWljQnl0ZXNDb2Rlcntjb25zdHJ1Y3Rvcihsb2NhbE5hbWUpe3N1cGVyKFwic3RyaW5nXCIsbG9jYWxOYW1lKX1kZWZhdWx0VmFsdWUoKXtyZXR1cm5cIlwifWVuY29kZSh3cml0ZXIsdmFsdWUpe3JldHVybiBzdXBlci5lbmNvZGUod3JpdGVyLHRvVXRmOEJ5dGVzKHZhbHVlKSl9ZGVjb2RlKHJlYWRlcil7cmV0dXJuIHRvVXRmOFN0cmluZyhzdXBlci5kZWNvZGUocmVhZGVyKSl9fVwidXNlIHN0cmljdFwiO2NsYXNzIFR1cGxlQ29kZXIgZXh0ZW5kcyBDb2Rlcntjb25zdHJ1Y3Rvcihjb2RlcnMsbG9jYWxOYW1lKXtsZXQgZHluYW1pYz1mYWxzZTtjb25zdCB0eXBlcz1bXTtjb2RlcnMuZm9yRWFjaChjb2Rlcj0+e2lmKGNvZGVyLmR5bmFtaWMpe2R5bmFtaWM9dHJ1ZX10eXBlcy5wdXNoKGNvZGVyLnR5cGUpfSk7Y29uc3QgdHlwZT1cInR1cGxlKFwiK3R5cGVzLmpvaW4oXCIsXCIpK1wiKVwiO3N1cGVyKFwidHVwbGVcIix0eXBlLGxvY2FsTmFtZSxkeW5hbWljKTt0aGlzLmNvZGVycz1jb2RlcnN9ZGVmYXVsdFZhbHVlKCl7Y29uc3QgdmFsdWVzPVtdO3RoaXMuY29kZXJzLmZvckVhY2goY29kZXI9Pnt2YWx1ZXMucHVzaChjb2Rlci5kZWZhdWx0VmFsdWUoKSl9KTtjb25zdCB1bmlxdWVOYW1lcz10aGlzLmNvZGVycy5yZWR1Y2UoKGFjY3VtLGNvZGVyKT0+e2NvbnN0IG5hbWU9Y29kZXIubG9jYWxOYW1lO2lmKG5hbWUpe2lmKCFhY2N1bVtuYW1lXSl7YWNjdW1bbmFtZV09MH1hY2N1bVtuYW1lXSsrfXJldHVybiBhY2N1bX0se30pO3RoaXMuY29kZXJzLmZvckVhY2goKGNvZGVyLGluZGV4KT0+e2xldCBuYW1lPWNvZGVyLmxvY2FsTmFtZTtpZighbmFtZXx8dW5pcXVlTmFtZXNbbmFtZV0hPT0xKXtyZXR1cm59aWYobmFtZT09PVwibGVuZ3RoXCIpe25hbWU9XCJfbGVuZ3RoXCJ9aWYodmFsdWVzW25hbWVdIT1udWxsKXtyZXR1cm59dmFsdWVzW25hbWVdPXZhbHVlc1tpbmRleF19KTtyZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpfWVuY29kZSh3cml0ZXIsdmFsdWUpe3JldHVybiBwYWNrKHdyaXRlcix0aGlzLmNvZGVycyx2YWx1ZSl9ZGVjb2RlKHJlYWRlcil7cmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLHVucGFjayhyZWFkZXIsdGhpcy5jb2RlcnMpKX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJGE9bmV3IExvZ2dlcih2ZXJzaW9uJDQpO2NvbnN0IHBhcmFtVHlwZUJ5dGVzPW5ldyBSZWdFeHAoL15ieXRlcyhbMC05XSopJC8pO2NvbnN0IHBhcmFtVHlwZU51bWJlcj1uZXcgUmVnRXhwKC9eKHU/aW50KShbMC05XSopJC8pO2NsYXNzIEFiaUNvZGVye2NvbnN0cnVjdG9yKGNvZXJjZUZ1bmMpe2xvZ2dlciRhLmNoZWNrTmV3KG5ldy50YXJnZXQsQWJpQ29kZXIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJjb2VyY2VGdW5jXCIsY29lcmNlRnVuY3x8bnVsbCl9X2dldENvZGVyKHBhcmFtKXtzd2l0Y2gocGFyYW0uYmFzZVR5cGUpe2Nhc2VcImFkZHJlc3NcIjpyZXR1cm4gbmV3IEFkZHJlc3NDb2RlcihwYXJhbS5uYW1lKTtjYXNlXCJib29sXCI6cmV0dXJuIG5ldyBCb29sZWFuQ29kZXIocGFyYW0ubmFtZSk7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIG5ldyBTdHJpbmdDb2RlcihwYXJhbS5uYW1lKTtjYXNlXCJieXRlc1wiOnJldHVybiBuZXcgQnl0ZXNDb2RlcihwYXJhbS5uYW1lKTtjYXNlXCJhcnJheVwiOnJldHVybiBuZXcgQXJyYXlDb2Rlcih0aGlzLl9nZXRDb2RlcihwYXJhbS5hcnJheUNoaWxkcmVuKSxwYXJhbS5hcnJheUxlbmd0aCxwYXJhbS5uYW1lKTtjYXNlXCJ0dXBsZVwiOnJldHVybiBuZXcgVHVwbGVDb2RlcigocGFyYW0uY29tcG9uZW50c3x8W10pLm1hcChjb21wb25lbnQ9PntyZXR1cm4gdGhpcy5fZ2V0Q29kZXIoY29tcG9uZW50KX0pLHBhcmFtLm5hbWUpO2Nhc2VcIlwiOnJldHVybiBuZXcgTnVsbENvZGVyKHBhcmFtLm5hbWUpfWxldCBtYXRjaD1wYXJhbS50eXBlLm1hdGNoKHBhcmFtVHlwZU51bWJlcik7aWYobWF0Y2gpe2xldCBzaXplPXBhcnNlSW50KG1hdGNoWzJdfHxcIjI1NlwiKTtpZihzaXplPT09MHx8c2l6ZT4yNTZ8fHNpemUlOCE9PTApe2xvZ2dlciRhLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgXCIrbWF0Y2hbMV0rXCIgYml0IGxlbmd0aFwiLFwicGFyYW1cIixwYXJhbSl9cmV0dXJuIG5ldyBOdW1iZXJDb2RlcihzaXplLzgsbWF0Y2hbMV09PT1cImludFwiLHBhcmFtLm5hbWUpfW1hdGNoPXBhcmFtLnR5cGUubWF0Y2gocGFyYW1UeXBlQnl0ZXMpO2lmKG1hdGNoKXtsZXQgc2l6ZT1wYXJzZUludChtYXRjaFsxXSk7aWYoc2l6ZT09PTB8fHNpemU+MzIpe2xvZ2dlciRhLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZXMgbGVuZ3RoXCIsXCJwYXJhbVwiLHBhcmFtKX1yZXR1cm4gbmV3IEZpeGVkQnl0ZXNDb2RlcihzaXplLHBhcmFtLm5hbWUpfXJldHVybiBsb2dnZXIkYS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR5cGVcIixcInR5cGVcIixwYXJhbS50eXBlKX1fZ2V0V29yZFNpemUoKXtyZXR1cm4gMzJ9X2dldFJlYWRlcihkYXRhLGFsbG93TG9vc2Upe3JldHVybiBuZXcgUmVhZGVyKGRhdGEsdGhpcy5fZ2V0V29yZFNpemUoKSx0aGlzLmNvZXJjZUZ1bmMsYWxsb3dMb29zZSl9X2dldFdyaXRlcigpe3JldHVybiBuZXcgV3JpdGVyKHRoaXMuX2dldFdvcmRTaXplKCkpfWdldERlZmF1bHRWYWx1ZSh0eXBlcyl7Y29uc3QgY29kZXJzPXR5cGVzLm1hcCh0eXBlPT50aGlzLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO2NvbnN0IGNvZGVyPW5ldyBUdXBsZUNvZGVyKGNvZGVycyxcIl9cIik7cmV0dXJuIGNvZGVyLmRlZmF1bHRWYWx1ZSgpfWVuY29kZSh0eXBlcyx2YWx1ZXMpe2lmKHR5cGVzLmxlbmd0aCE9PXZhbHVlcy5sZW5ndGgpe2xvZ2dlciRhLnRocm93RXJyb3IoXCJ0eXBlcy92YWx1ZXMgbGVuZ3RoIG1pc21hdGNoXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHtjb3VudDp7dHlwZXM6dHlwZXMubGVuZ3RoLHZhbHVlczp2YWx1ZXMubGVuZ3RofSx2YWx1ZTp7dHlwZXM6dHlwZXMsdmFsdWVzOnZhbHVlc319KX1jb25zdCBjb2RlcnM9dHlwZXMubWFwKHR5cGU9PnRoaXMuX2dldENvZGVyKFBhcmFtVHlwZS5mcm9tKHR5cGUpKSk7Y29uc3QgY29kZXI9bmV3IFR1cGxlQ29kZXIoY29kZXJzLFwiX1wiKTtjb25zdCB3cml0ZXI9dGhpcy5fZ2V0V3JpdGVyKCk7Y29kZXIuZW5jb2RlKHdyaXRlcix2YWx1ZXMpO3JldHVybiB3cml0ZXIuZGF0YX1kZWNvZGUodHlwZXMsZGF0YSxsb29zZSl7Y29uc3QgY29kZXJzPXR5cGVzLm1hcCh0eXBlPT50aGlzLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO2NvbnN0IGNvZGVyPW5ldyBUdXBsZUNvZGVyKGNvZGVycyxcIl9cIik7cmV0dXJuIGNvZGVyLmRlY29kZSh0aGlzLl9nZXRSZWFkZXIoYXJyYXlpZnkoZGF0YSksbG9vc2UpKX19Y29uc3QgZGVmYXVsdEFiaUNvZGVyPW5ldyBBYmlDb2RlcjtmdW5jdGlvbiBpZCh0ZXh0KXtyZXR1cm4ga2VjY2FrMjU2KHRvVXRmOEJ5dGVzKHRleHQpKX1jb25zdCB2ZXJzaW9uJDg9XCJoYXNoLzUuMS4wXCI7Y29uc3QgbG9nZ2VyJGI9bmV3IExvZ2dlcih2ZXJzaW9uJDgpO2NvbnN0IFplcm9zPW5ldyBVaW50OEFycmF5KDMyKTtaZXJvcy5maWxsKDApO2NvbnN0IFBhcnRpdGlvbj1uZXcgUmVnRXhwKFwiXigoLiopXFxcXC4pPyhbXi5dKykkXCIpO2Z1bmN0aW9uIGlzVmFsaWROYW1lKG5hbWUpe3RyeXtjb25zdCBjb21wcz1uYW1lLnNwbGl0KFwiLlwiKTtmb3IobGV0IGk9MDtpPGNvbXBzLmxlbmd0aDtpKyspe2lmKG5hbWVwcmVwKGNvbXBzW2ldKS5sZW5ndGg9PT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eVwiKX19cmV0dXJuIHRydWV9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gZmFsc2V9ZnVuY3Rpb24gbmFtZWhhc2gobmFtZSl7aWYodHlwZW9mIG5hbWUhPT1cInN0cmluZ1wiKXtsb2dnZXIkYi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3MgLSBcIitTdHJpbmcobmFtZSksXCJuYW1lXCIsbmFtZSl9bGV0IHJlc3VsdD1aZXJvczt3aGlsZShuYW1lLmxlbmd0aCl7Y29uc3QgcGFydGl0aW9uPW5hbWUubWF0Y2goUGFydGl0aW9uKTtjb25zdCBsYWJlbD10b1V0ZjhCeXRlcyhuYW1lcHJlcChwYXJ0aXRpb25bM10pKTtyZXN1bHQ9a2VjY2FrMjU2KGNvbmNhdChbcmVzdWx0LGtlY2NhazI1NihsYWJlbCldKSk7bmFtZT1wYXJ0aXRpb25bMl18fFwiXCJ9cmV0dXJuIGhleGxpZnkocmVzdWx0KX1jb25zdCBtZXNzYWdlUHJlZml4PVwiXHUwMDE5RXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuXCI7ZnVuY3Rpb24gaGFzaE1lc3NhZ2UobWVzc2FnZSl7aWYodHlwZW9mIG1lc3NhZ2U9PT1cInN0cmluZ1wiKXttZXNzYWdlPXRvVXRmOEJ5dGVzKG1lc3NhZ2UpfXJldHVybiBrZWNjYWsyNTYoY29uY2F0KFt0b1V0ZjhCeXRlcyhtZXNzYWdlUHJlZml4KSx0b1V0ZjhCeXRlcyhTdHJpbmcobWVzc2FnZS5sZW5ndGgpKSxtZXNzYWdlXSkpfXZhciBfX2F3YWl0ZXIkMT13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJGM9bmV3IExvZ2dlcih2ZXJzaW9uJDgpO2NvbnN0IHBhZGRpbmc9bmV3IFVpbnQ4QXJyYXkoMzIpO3BhZGRpbmcuZmlsbCgwKTtjb25zdCBOZWdhdGl2ZU9uZSQyPUJpZ051bWJlci5mcm9tKC0xKTtjb25zdCBaZXJvJDI9QmlnTnVtYmVyLmZyb20oMCk7Y29uc3QgT25lJDE9QmlnTnVtYmVyLmZyb20oMSk7Y29uc3QgTWF4VWludDI1NiQxPUJpZ051bWJlci5mcm9tKFwiMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpO2Z1bmN0aW9uIGhleFBhZFJpZ2h0KHZhbHVlKXtjb25zdCBieXRlcz1hcnJheWlmeSh2YWx1ZSk7Y29uc3QgcGFkT2Zmc2V0PWJ5dGVzLmxlbmd0aCUzMjtpZihwYWRPZmZzZXQpe3JldHVybiBoZXhDb25jYXQoW2J5dGVzLHBhZGRpbmcuc2xpY2UocGFkT2Zmc2V0KV0pfXJldHVybiBoZXhsaWZ5KGJ5dGVzKX1jb25zdCBoZXhUcnVlPWhleFplcm9QYWQoT25lJDEudG9IZXhTdHJpbmcoKSwzMik7Y29uc3QgaGV4RmFsc2U9aGV4WmVyb1BhZChaZXJvJDIudG9IZXhTdHJpbmcoKSwzMik7Y29uc3QgZG9tYWluRmllbGRUeXBlcz17bmFtZTpcInN0cmluZ1wiLHZlcnNpb246XCJzdHJpbmdcIixjaGFpbklkOlwidWludDI1NlwiLHZlcmlmeWluZ0NvbnRyYWN0OlwiYWRkcmVzc1wiLHNhbHQ6XCJieXRlczMyXCJ9O2NvbnN0IGRvbWFpbkZpZWxkTmFtZXM9W1wibmFtZVwiLFwidmVyc2lvblwiLFwiY2hhaW5JZFwiLFwidmVyaWZ5aW5nQ29udHJhY3RcIixcInNhbHRcIl07ZnVuY3Rpb24gY2hlY2tTdHJpbmcoa2V5KXtyZXR1cm4gZnVuY3Rpb24odmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBkb21haW4gdmFsdWUgZm9yICR7SlNPTi5zdHJpbmdpZnkoa2V5KX1gLGBkb21haW4uJHtrZXl9YCx2YWx1ZSl9cmV0dXJuIHZhbHVlfX1jb25zdCBkb21haW5DaGVja3M9e25hbWU6Y2hlY2tTdHJpbmcoXCJuYW1lXCIpLHZlcnNpb246Y2hlY2tTdHJpbmcoXCJ2ZXJzaW9uXCIpLGNoYWluSWQ6ZnVuY3Rpb24odmFsdWUpe3RyeXtyZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKCl9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gbG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBmb3IgXCJjaGFpbklkXCJgLFwiZG9tYWluLmNoYWluSWRcIix2YWx1ZSl9LHZlcmlmeWluZ0NvbnRyYWN0OmZ1bmN0aW9uKHZhbHVlKXt0cnl7cmV0dXJuIGdldEFkZHJlc3ModmFsdWUpLnRvTG93ZXJDYXNlKCl9Y2F0Y2goZXJyb3Ipe31yZXR1cm4gbG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBcInZlcmlmeWluZ0NvbnRyYWN0XCJgLFwiZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XCIsdmFsdWUpfSxzYWx0OmZ1bmN0aW9uKHZhbHVlKXt0cnl7Y29uc3QgYnl0ZXM9YXJyYXlpZnkodmFsdWUpO2lmKGJ5dGVzLmxlbmd0aCE9PTMyKXt0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbGVuZ3RoXCIpfXJldHVybiBoZXhsaWZ5KGJ5dGVzKX1jYXRjaChlcnJvcil7fXJldHVybiBsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIFwic2FsdFwiYCxcImRvbWFpbi5zYWx0XCIsdmFsdWUpfX07ZnVuY3Rpb24gZ2V0QmFzZUVuY29kZXIodHlwZSl7e2NvbnN0IG1hdGNoPXR5cGUubWF0Y2goL14odT8paW50KFxcZCopJC8pO2lmKG1hdGNoKXtjb25zdCBzaWduZWQ9bWF0Y2hbMV09PT1cIlwiO2NvbnN0IHdpZHRoPXBhcnNlSW50KG1hdGNoWzJdfHxcIjI1NlwiKTtpZih3aWR0aCU4IT09MHx8d2lkdGg+MjU2fHxtYXRjaFsyXSYmbWF0Y2hbMl0hPT1TdHJpbmcod2lkdGgpKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG51bWVyaWMgd2lkdGhcIixcInR5cGVcIix0eXBlKX1jb25zdCBib3VuZHNVcHBlcj1NYXhVaW50MjU2JDEubWFzayhzaWduZWQ/d2lkdGgtMTp3aWR0aCk7Y29uc3QgYm91bmRzTG93ZXI9c2lnbmVkP2JvdW5kc1VwcGVyLmFkZChPbmUkMSkubXVsKE5lZ2F0aXZlT25lJDIpOlplcm8kMjtyZXR1cm4gZnVuY3Rpb24odmFsdWUpe2NvbnN0IHY9QmlnTnVtYmVyLmZyb20odmFsdWUpO2lmKHYubHQoYm91bmRzTG93ZXIpfHx2Lmd0KGJvdW5kc1VwcGVyKSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGB2YWx1ZSBvdXQtb2YtYm91bmRzIGZvciAke3R5cGV9YCxcInZhbHVlXCIsdmFsdWUpfXJldHVybiBoZXhaZXJvUGFkKHYudG9Ud29zKDI1NikudG9IZXhTdHJpbmcoKSwzMil9fX17Y29uc3QgbWF0Y2g9dHlwZS5tYXRjaCgvXmJ5dGVzKFxcZCspJC8pO2lmKG1hdGNoKXtjb25zdCB3aWR0aD1wYXJzZUludChtYXRjaFsxXSk7aWYod2lkdGg9PT0wfHx3aWR0aD4zMnx8bWF0Y2hbMV0hPT1TdHJpbmcod2lkdGgpKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVzIHdpZHRoXCIsXCJ0eXBlXCIsdHlwZSl9cmV0dXJuIGZ1bmN0aW9uKHZhbHVlKXtjb25zdCBieXRlcz1hcnJheWlmeSh2YWx1ZSk7aWYoYnl0ZXMubGVuZ3RoIT09d2lkdGgpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBsZW5ndGggZm9yICR7dHlwZX1gLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIGhleFBhZFJpZ2h0KHZhbHVlKX19fXN3aXRjaCh0eXBlKXtjYXNlXCJhZGRyZXNzXCI6cmV0dXJuIGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gaGV4WmVyb1BhZChnZXRBZGRyZXNzKHZhbHVlKSwzMil9O2Nhc2VcImJvb2xcIjpyZXR1cm4gZnVuY3Rpb24odmFsdWUpe3JldHVybiF2YWx1ZT9oZXhGYWxzZTpoZXhUcnVlfTtjYXNlXCJieXRlc1wiOnJldHVybiBmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGtlY2NhazI1Nih2YWx1ZSl9O2Nhc2VcInN0cmluZ1wiOnJldHVybiBmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGlkKHZhbHVlKX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gZW5jb2RlVHlwZShuYW1lLGZpZWxkcyl7cmV0dXJuYCR7bmFtZX0oJHtmaWVsZHMubWFwKCh7bmFtZTpuYW1lLHR5cGU6dHlwZX0pPT50eXBlK1wiIFwiK25hbWUpLmpvaW4oXCIsXCIpfSlgfWNsYXNzIFR5cGVkRGF0YUVuY29kZXJ7Y29uc3RydWN0b3IodHlwZXMpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJ0eXBlc1wiLE9iamVjdC5mcmVlemUoZGVlcENvcHkodHlwZXMpKSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9lbmNvZGVyQ2FjaGVcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl90eXBlc1wiLHt9KTtjb25zdCBsaW5rcz17fTtjb25zdCBwYXJlbnRzPXt9O2NvbnN0IHN1YnR5cGVzPXt9O09iamVjdC5rZXlzKHR5cGVzKS5mb3JFYWNoKHR5cGU9PntsaW5rc1t0eXBlXT17fTtwYXJlbnRzW3R5cGVdPVtdO3N1YnR5cGVzW3R5cGVdPXt9fSk7Zm9yKGNvbnN0IG5hbWUgaW4gdHlwZXMpe2NvbnN0IHVuaXF1ZU5hbWVzPXt9O3R5cGVzW25hbWVdLmZvckVhY2goZmllbGQ9PntpZih1bmlxdWVOYW1lc1tmaWVsZC5uYW1lXSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBkdXBsaWNhdGUgdmFyaWFibGUgbmFtZSAke0pTT04uc3RyaW5naWZ5KGZpZWxkLm5hbWUpfSBpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWAsXCJ0eXBlc1wiLHR5cGVzKX11bmlxdWVOYW1lc1tmaWVsZC5uYW1lXT10cnVlO2NvbnN0IGJhc2VUeXBlPWZpZWxkLnR5cGUubWF0Y2goL14oW15cXHg1Yl0qKShcXHg1YnwkKS8pWzFdO2lmKGJhc2VUeXBlPT09bmFtZSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBjaXJjdWxhciB0eXBlIHJlZmVyZW5jZSB0byAke0pTT04uc3RyaW5naWZ5KGJhc2VUeXBlKX1gLFwidHlwZXNcIix0eXBlcyl9Y29uc3QgZW5jb2Rlcj1nZXRCYXNlRW5jb2RlcihiYXNlVHlwZSk7aWYoZW5jb2Rlcil7cmV0dXJufWlmKCFwYXJlbnRzW2Jhc2VUeXBlXSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGB1bmtub3duIHR5cGUgJHtKU09OLnN0cmluZ2lmeShiYXNlVHlwZSl9YCxcInR5cGVzXCIsdHlwZXMpfXBhcmVudHNbYmFzZVR5cGVdLnB1c2gobmFtZSk7bGlua3NbbmFtZV1bYmFzZVR5cGVdPXRydWV9KX1jb25zdCBwcmltYXJ5VHlwZXM9T2JqZWN0LmtleXMocGFyZW50cykuZmlsdGVyKG49PnBhcmVudHNbbl0ubGVuZ3RoPT09MCk7aWYocHJpbWFyeVR5cGVzLmxlbmd0aD09PTApe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcIm1pc3NpbmcgcHJpbWFyeSB0eXBlXCIsXCJ0eXBlc1wiLHR5cGVzKX1lbHNlIGlmKHByaW1hcnlUeXBlcy5sZW5ndGg+MSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBhbWJpZ3VvdXMgcHJpbWFyeSB0eXBlcyBvciB1bnVzZWQgdHlwZXM6ICR7cHJpbWFyeVR5cGVzLm1hcCh0PT5KU09OLnN0cmluZ2lmeSh0KSkuam9pbihcIiwgXCIpfWAsXCJ0eXBlc1wiLHR5cGVzKX1kZWZpbmVSZWFkT25seSh0aGlzLFwicHJpbWFyeVR5cGVcIixwcmltYXJ5VHlwZXNbMF0pO2Z1bmN0aW9uIGNoZWNrQ2lyY3VsYXIodHlwZSxmb3VuZCl7aWYoZm91bmRbdHlwZV0pe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2UgdG8gJHtKU09OLnN0cmluZ2lmeSh0eXBlKX1gLFwidHlwZXNcIix0eXBlcyl9Zm91bmRbdHlwZV09dHJ1ZTtPYmplY3Qua2V5cyhsaW5rc1t0eXBlXSkuZm9yRWFjaChjaGlsZD0+e2lmKCFwYXJlbnRzW2NoaWxkXSl7cmV0dXJufWNoZWNrQ2lyY3VsYXIoY2hpbGQsZm91bmQpO09iamVjdC5rZXlzKGZvdW5kKS5mb3JFYWNoKHN1YnR5cGU9PntzdWJ0eXBlc1tzdWJ0eXBlXVtjaGlsZF09dHJ1ZX0pfSk7ZGVsZXRlIGZvdW5kW3R5cGVdfWNoZWNrQ2lyY3VsYXIodGhpcy5wcmltYXJ5VHlwZSx7fSk7Zm9yKGNvbnN0IG5hbWUgaW4gc3VidHlwZXMpe2NvbnN0IHN0PU9iamVjdC5rZXlzKHN1YnR5cGVzW25hbWVdKTtzdC5zb3J0KCk7dGhpcy5fdHlwZXNbbmFtZV09ZW5jb2RlVHlwZShuYW1lLHR5cGVzW25hbWVdKStzdC5tYXAodD0+ZW5jb2RlVHlwZSh0LHR5cGVzW3RdKSkuam9pbihcIlwiKX19Z2V0RW5jb2Rlcih0eXBlKXtsZXQgZW5jb2Rlcj10aGlzLl9lbmNvZGVyQ2FjaGVbdHlwZV07aWYoIWVuY29kZXIpe2VuY29kZXI9dGhpcy5fZW5jb2RlckNhY2hlW3R5cGVdPXRoaXMuX2dldEVuY29kZXIodHlwZSl9cmV0dXJuIGVuY29kZXJ9X2dldEVuY29kZXIodHlwZSl7e2NvbnN0IGVuY29kZXI9Z2V0QmFzZUVuY29kZXIodHlwZSk7aWYoZW5jb2Rlcil7cmV0dXJuIGVuY29kZXJ9fWNvbnN0IG1hdGNoPXR5cGUubWF0Y2goL14oLiopKFxceDViKFxcZCopXFx4NWQpJC8pO2lmKG1hdGNoKXtjb25zdCBzdWJ0eXBlPW1hdGNoWzFdO2NvbnN0IHN1YkVuY29kZXI9dGhpcy5nZXRFbmNvZGVyKHN1YnR5cGUpO2NvbnN0IGxlbmd0aD1wYXJzZUludChtYXRjaFszXSk7cmV0dXJuIHZhbHVlPT57aWYobGVuZ3RoPj0wJiZ2YWx1ZS5sZW5ndGghPT1sZW5ndGgpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihcImFycmF5IGxlbmd0aCBtaXNtYXRjaDsgZXhwZWN0ZWQgbGVuZ3RoICR7IGFycmF5TGVuZ3RoIH1cIixcInZhbHVlXCIsdmFsdWUpfWxldCByZXN1bHQ9dmFsdWUubWFwKHN1YkVuY29kZXIpO2lmKHRoaXMuX3R5cGVzW3N1YnR5cGVdKXtyZXN1bHQ9cmVzdWx0Lm1hcChrZWNjYWsyNTYpfXJldHVybiBrZWNjYWsyNTYoaGV4Q29uY2F0KHJlc3VsdCkpfX1jb25zdCBmaWVsZHM9dGhpcy50eXBlc1t0eXBlXTtpZihmaWVsZHMpe2NvbnN0IGVuY29kZWRUeXBlPWlkKHRoaXMuX3R5cGVzW3R5cGVdKTtyZXR1cm4gdmFsdWU9Pntjb25zdCB2YWx1ZXM9ZmllbGRzLm1hcCgoe25hbWU6bmFtZSx0eXBlOnR5cGV9KT0+e2NvbnN0IHJlc3VsdD10aGlzLmdldEVuY29kZXIodHlwZSkodmFsdWVbbmFtZV0pO2lmKHRoaXMuX3R5cGVzW3R5cGVdKXtyZXR1cm4ga2VjY2FrMjU2KHJlc3VsdCl9cmV0dXJuIHJlc3VsdH0pO3ZhbHVlcy51bnNoaWZ0KGVuY29kZWRUeXBlKTtyZXR1cm4gaGV4Q29uY2F0KHZhbHVlcyl9fXJldHVybiBsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoYHVua25vd24gdHlwZTogJHt0eXBlfWAsXCJ0eXBlXCIsdHlwZSl9ZW5jb2RlVHlwZShuYW1lKXtjb25zdCByZXN1bHQ9dGhpcy5fdHlwZXNbbmFtZV07aWYoIXJlc3VsdCl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGB1bmtub3duIHR5cGU6ICR7SlNPTi5zdHJpbmdpZnkobmFtZSl9YCxcIm5hbWVcIixuYW1lKX1yZXR1cm4gcmVzdWx0fWVuY29kZURhdGEodHlwZSx2YWx1ZSl7cmV0dXJuIHRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZSl9aGFzaFN0cnVjdChuYW1lLHZhbHVlKXtyZXR1cm4ga2VjY2FrMjU2KHRoaXMuZW5jb2RlRGF0YShuYW1lLHZhbHVlKSl9ZW5jb2RlKHZhbHVlKXtyZXR1cm4gdGhpcy5lbmNvZGVEYXRhKHRoaXMucHJpbWFyeVR5cGUsdmFsdWUpfWhhc2godmFsdWUpe3JldHVybiB0aGlzLmhhc2hTdHJ1Y3QodGhpcy5wcmltYXJ5VHlwZSx2YWx1ZSl9X3Zpc2l0KHR5cGUsdmFsdWUsY2FsbGJhY2spe3tjb25zdCBlbmNvZGVyPWdldEJhc2VFbmNvZGVyKHR5cGUpO2lmKGVuY29kZXIpe3JldHVybiBjYWxsYmFjayh0eXBlLHZhbHVlKX19Y29uc3QgbWF0Y2g9dHlwZS5tYXRjaCgvXiguKikoXFx4NWIoXFxkKilcXHg1ZCkkLyk7aWYobWF0Y2gpe2NvbnN0IHN1YnR5cGU9bWF0Y2hbMV07Y29uc3QgbGVuZ3RoPXBhcnNlSW50KG1hdGNoWzNdKTtpZihsZW5ndGg+PTAmJnZhbHVlLmxlbmd0aCE9PWxlbmd0aCl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKFwiYXJyYXkgbGVuZ3RoIG1pc21hdGNoOyBleHBlY3RlZCBsZW5ndGggJHsgYXJyYXlMZW5ndGggfVwiLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIHZhbHVlLm1hcCh2PT50aGlzLl92aXNpdChzdWJ0eXBlLHYsY2FsbGJhY2spKX1jb25zdCBmaWVsZHM9dGhpcy50eXBlc1t0eXBlXTtpZihmaWVsZHMpe3JldHVybiBmaWVsZHMucmVkdWNlKChhY2N1bSx7bmFtZTpuYW1lLHR5cGU6dHlwZX0pPT57YWNjdW1bbmFtZV09dGhpcy5fdmlzaXQodHlwZSx2YWx1ZVtuYW1lXSxjYWxsYmFjayk7cmV0dXJuIGFjY3VtfSx7fSl9cmV0dXJuIGxvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlOiAke3R5cGV9YCxcInR5cGVcIix0eXBlKX12aXNpdCh2YWx1ZSxjYWxsYmFjayl7cmV0dXJuIHRoaXMuX3Zpc2l0KHRoaXMucHJpbWFyeVR5cGUsdmFsdWUsY2FsbGJhY2spfXN0YXRpYyBmcm9tKHR5cGVzKXtyZXR1cm4gbmV3IFR5cGVkRGF0YUVuY29kZXIodHlwZXMpfXN0YXRpYyBnZXRQcmltYXJ5VHlwZSh0eXBlcyl7cmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykucHJpbWFyeVR5cGV9c3RhdGljIGhhc2hTdHJ1Y3QobmFtZSx0eXBlcyx2YWx1ZSl7cmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykuaGFzaFN0cnVjdChuYW1lLHZhbHVlKX1zdGF0aWMgaGFzaERvbWFpbihkb21haW4pe2NvbnN0IGRvbWFpbkZpZWxkcz1bXTtmb3IoY29uc3QgbmFtZSBpbiBkb21haW4pe2NvbnN0IHR5cGU9ZG9tYWluRmllbGRUeXBlc1tuYW1lXTtpZighdHlwZSl7bG9nZ2VyJGMudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIHR5cGVkLWRhdGEgZG9tYWluIGtleTogJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gLFwiZG9tYWluXCIsZG9tYWluKX1kb21haW5GaWVsZHMucHVzaCh7bmFtZTpuYW1lLHR5cGU6dHlwZX0pfWRvbWFpbkZpZWxkcy5zb3J0KChhLGIpPT57cmV0dXJuIGRvbWFpbkZpZWxkTmFtZXMuaW5kZXhPZihhLm5hbWUpLWRvbWFpbkZpZWxkTmFtZXMuaW5kZXhPZihiLm5hbWUpfSk7cmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuaGFzaFN0cnVjdChcIkVJUDcxMkRvbWFpblwiLHtFSVA3MTJEb21haW46ZG9tYWluRmllbGRzfSxkb21haW4pfXN0YXRpYyBlbmNvZGUoZG9tYWluLHR5cGVzLHZhbHVlKXtyZXR1cm4gaGV4Q29uY2F0KFtcIjB4MTkwMVwiLFR5cGVkRGF0YUVuY29kZXIuaGFzaERvbWFpbihkb21haW4pLFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykuaGFzaCh2YWx1ZSldKX1zdGF0aWMgaGFzaChkb21haW4sdHlwZXMsdmFsdWUpe3JldHVybiBrZWNjYWsyNTYoVHlwZWREYXRhRW5jb2Rlci5lbmNvZGUoZG9tYWluLHR5cGVzLHZhbHVlKSl9c3RhdGljIHJlc29sdmVOYW1lcyhkb21haW4sdHlwZXMsdmFsdWUscmVzb2x2ZU5hbWUpe3JldHVybiBfX2F3YWl0ZXIkMSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7ZG9tYWluPXNoYWxsb3dDb3B5KGRvbWFpbik7Y29uc3QgZW5zQ2FjaGU9e307aWYoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0JiYhaXNIZXhTdHJpbmcoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0LDIwKSl7ZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XT1cIjB4XCJ9Y29uc3QgZW5jb2Rlcj1UeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpO2VuY29kZXIudmlzaXQodmFsdWUsKHR5cGUsdmFsdWUpPT57aWYodHlwZT09PVwiYWRkcmVzc1wiJiYhaXNIZXhTdHJpbmcodmFsdWUsMjApKXtlbnNDYWNoZVt2YWx1ZV09XCIweFwifXJldHVybiB2YWx1ZX0pO2Zvcihjb25zdCBuYW1lIGluIGVuc0NhY2hlKXtlbnNDYWNoZVtuYW1lXT15aWVsZCByZXNvbHZlTmFtZShuYW1lKX1pZihkb21haW4udmVyaWZ5aW5nQ29udHJhY3QmJmVuc0NhY2hlW2RvbWFpbi52ZXJpZnlpbmdDb250cmFjdF0pe2RvbWFpbi52ZXJpZnlpbmdDb250cmFjdD1lbnNDYWNoZVtkb21haW4udmVyaWZ5aW5nQ29udHJhY3RdfXZhbHVlPWVuY29kZXIudmlzaXQodmFsdWUsKHR5cGUsdmFsdWUpPT57aWYodHlwZT09PVwiYWRkcmVzc1wiJiZlbnNDYWNoZVt2YWx1ZV0pe3JldHVybiBlbnNDYWNoZVt2YWx1ZV19cmV0dXJuIHZhbHVlfSk7cmV0dXJue2RvbWFpbjpkb21haW4sdmFsdWU6dmFsdWV9fSl9c3RhdGljIGdldFBheWxvYWQoZG9tYWluLHR5cGVzLHZhbHVlKXtUeXBlZERhdGFFbmNvZGVyLmhhc2hEb21haW4oZG9tYWluKTtjb25zdCBkb21haW5WYWx1ZXM9e307Y29uc3QgZG9tYWluVHlwZXM9W107ZG9tYWluRmllbGROYW1lcy5mb3JFYWNoKG5hbWU9Pntjb25zdCB2YWx1ZT1kb21haW5bbmFtZV07aWYodmFsdWU9PW51bGwpe3JldHVybn1kb21haW5WYWx1ZXNbbmFtZV09ZG9tYWluQ2hlY2tzW25hbWVdKHZhbHVlKTtkb21haW5UeXBlcy5wdXNoKHtuYW1lOm5hbWUsdHlwZTpkb21haW5GaWVsZFR5cGVzW25hbWVdfSl9KTtjb25zdCBlbmNvZGVyPVR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcyk7Y29uc3QgdHlwZXNXaXRoRG9tYWluPXNoYWxsb3dDb3B5KHR5cGVzKTtpZih0eXBlc1dpdGhEb21haW4uRUlQNzEyRG9tYWluKXtsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcyBtdXN0IG5vdCBjb250YWluIEVJUDcxMkRvbWFpbiB0eXBlXCIsXCJ0eXBlcy5FSVA3MTJEb21haW5cIix0eXBlcyl9ZWxzZXt0eXBlc1dpdGhEb21haW4uRUlQNzEyRG9tYWluPWRvbWFpblR5cGVzfWVuY29kZXIuZW5jb2RlKHZhbHVlKTtyZXR1cm57dHlwZXM6dHlwZXNXaXRoRG9tYWluLGRvbWFpbjpkb21haW5WYWx1ZXMscHJpbWFyeVR5cGU6ZW5jb2Rlci5wcmltYXJ5VHlwZSxtZXNzYWdlOmVuY29kZXIudmlzaXQodmFsdWUsKHR5cGUsdmFsdWUpPT57aWYodHlwZS5tYXRjaCgvXmJ5dGVzKFxcZCopLykpe3JldHVybiBoZXhsaWZ5KGFycmF5aWZ5KHZhbHVlKSl9aWYodHlwZS5tYXRjaCgvXnU/aW50Lykpe3JldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoKX1zd2l0Y2godHlwZSl7Y2FzZVwiYWRkcmVzc1wiOnJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO2Nhc2VcImJvb2xcIjpyZXR1cm4hIXZhbHVlO2Nhc2VcInN0cmluZ1wiOmlmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe2xvZ2dlciRjLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBzdHJpbmdgLFwidmFsdWVcIix2YWx1ZSl9cmV0dXJuIHZhbHVlfXJldHVybiBsb2dnZXIkYy50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCB0eXBlXCIsXCJ0eXBlXCIsdHlwZSl9KX19fVwidXNlIHN0cmljdFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRkPW5ldyBMb2dnZXIodmVyc2lvbiQ0KTtjbGFzcyBMb2dEZXNjcmlwdGlvbiBleHRlbmRzIERlc2NyaXB0aW9ue31jbGFzcyBUcmFuc2FjdGlvbkRlc2NyaXB0aW9uIGV4dGVuZHMgRGVzY3JpcHRpb257fWNsYXNzIEluZGV4ZWQgZXh0ZW5kcyBEZXNjcmlwdGlvbntzdGF0aWMgaXNJbmRleGVkKHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzSW5kZXhlZCl9fWZ1bmN0aW9uIHdyYXBBY2Nlc3NFcnJvcihwcm9wZXJ0eSxlcnJvcil7Y29uc3Qgd3JhcD1uZXcgRXJyb3IoYGRlZmVycmVkIGVycm9yIGR1cmluZyBBQkkgZGVjb2RpbmcgdHJpZ2dlcmVkIGFjY2Vzc2luZyAke3Byb3BlcnR5fWApO3dyYXAuZXJyb3I9ZXJyb3I7cmV0dXJuIHdyYXB9Y2xhc3MgSW50ZXJmYWNle2NvbnN0cnVjdG9yKGZyYWdtZW50cyl7bG9nZ2VyJGQuY2hlY2tOZXcobmV3LnRhcmdldCxJbnRlcmZhY2UpO2xldCBhYmk9W107aWYodHlwZW9mIGZyYWdtZW50cz09PVwic3RyaW5nXCIpe2FiaT1KU09OLnBhcnNlKGZyYWdtZW50cyl9ZWxzZXthYmk9ZnJhZ21lbnRzfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJmcmFnbWVudHNcIixhYmkubWFwKGZyYWdtZW50PT57cmV0dXJuIEZyYWdtZW50LmZyb20oZnJhZ21lbnQpfSkuZmlsdGVyKGZyYWdtZW50PT5mcmFnbWVudCE9bnVsbCkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfYWJpQ29kZXJcIixnZXRTdGF0aWMobmV3LnRhcmdldCxcImdldEFiaUNvZGVyXCIpKCkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJmdW5jdGlvbnNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImVycm9yc1wiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZXZlbnRzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJzdHJ1Y3RzXCIse30pO3RoaXMuZnJhZ21lbnRzLmZvckVhY2goZnJhZ21lbnQ9PntsZXQgYnVja2V0PW51bGw7c3dpdGNoKGZyYWdtZW50LnR5cGUpe2Nhc2VcImNvbnN0cnVjdG9yXCI6aWYodGhpcy5kZXBsb3kpe2xvZ2dlciRkLndhcm4oXCJkdXBsaWNhdGUgZGVmaW5pdGlvbiAtIGNvbnN0cnVjdG9yXCIpO3JldHVybn1kZWZpbmVSZWFkT25seSh0aGlzLFwiZGVwbG95XCIsZnJhZ21lbnQpO3JldHVybjtjYXNlXCJmdW5jdGlvblwiOmJ1Y2tldD10aGlzLmZ1bmN0aW9uczticmVhaztjYXNlXCJldmVudFwiOmJ1Y2tldD10aGlzLmV2ZW50czticmVhaztkZWZhdWx0OnJldHVybn1sZXQgc2lnbmF0dXJlPWZyYWdtZW50LmZvcm1hdCgpO2lmKGJ1Y2tldFtzaWduYXR1cmVdKXtsb2dnZXIkZC53YXJuKFwiZHVwbGljYXRlIGRlZmluaXRpb24gLSBcIitzaWduYXR1cmUpO3JldHVybn1idWNrZXRbc2lnbmF0dXJlXT1mcmFnbWVudH0pO2lmKCF0aGlzLmRlcGxveSl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImRlcGxveVwiLENvbnN0cnVjdG9yRnJhZ21lbnQuZnJvbSh7cGF5YWJsZTpmYWxzZSx0eXBlOlwiY29uc3RydWN0b3JcIn0pKX1kZWZpbmVSZWFkT25seSh0aGlzLFwiX2lzSW50ZXJmYWNlXCIsdHJ1ZSl9Zm9ybWF0KGZvcm1hdCl7aWYoIWZvcm1hdCl7Zm9ybWF0PUZvcm1hdFR5cGVzLmZ1bGx9aWYoZm9ybWF0PT09Rm9ybWF0VHlwZXMuc2lnaGFzaCl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwiaW50ZXJmYWNlIGRvZXMgbm90IHN1cHBvcnQgZm9ybWF0dGluZyBzaWdoYXNoXCIsXCJmb3JtYXRcIixmb3JtYXQpfWNvbnN0IGFiaT10aGlzLmZyYWdtZW50cy5tYXAoZnJhZ21lbnQ9PmZyYWdtZW50LmZvcm1hdChmb3JtYXQpKTtpZihmb3JtYXQ9PT1Gb3JtYXRUeXBlcy5qc29uKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoYWJpLm1hcChqPT5KU09OLnBhcnNlKGopKSl9cmV0dXJuIGFiaX1zdGF0aWMgZ2V0QWJpQ29kZXIoKXtyZXR1cm4gZGVmYXVsdEFiaUNvZGVyfXN0YXRpYyBnZXRBZGRyZXNzKGFkZHJlc3Mpe3JldHVybiBnZXRBZGRyZXNzKGFkZHJlc3MpfXN0YXRpYyBnZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpe3JldHVybiBoZXhEYXRhU2xpY2UoaWQoZnVuY3Rpb25GcmFnbWVudC5mb3JtYXQoKSksMCw0KX1zdGF0aWMgZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KXtyZXR1cm4gaWQoZXZlbnRGcmFnbWVudC5mb3JtYXQoKSl9Z2V0RnVuY3Rpb24obmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoKXtpZihpc0hleFN0cmluZyhuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpKXtmb3IoY29uc3QgbmFtZSBpbiB0aGlzLmZ1bmN0aW9ucyl7aWYobmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoPT09dGhpcy5nZXRTaWdoYXNoKG5hbWUpKXtyZXR1cm4gdGhpcy5mdW5jdGlvbnNbbmFtZV19fWxvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGZ1bmN0aW9uXCIsXCJzaWdoYXNoXCIsbmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoKX1pZihuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2guaW5kZXhPZihcIihcIik9PT0tMSl7Y29uc3QgbmFtZT1uYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gudHJpbSgpO2NvbnN0IG1hdGNoaW5nPU9iamVjdC5rZXlzKHRoaXMuZnVuY3Rpb25zKS5maWx0ZXIoZj0+Zi5zcGxpdChcIihcIilbMF09PT1uYW1lKTtpZihtYXRjaGluZy5sZW5ndGg9PT0wKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLFwibmFtZVwiLG5hbWUpfWVsc2UgaWYobWF0Y2hpbmcubGVuZ3RoPjEpe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm11bHRpcGxlIG1hdGNoaW5nIGZ1bmN0aW9uc1wiLFwibmFtZVwiLG5hbWUpfXJldHVybiB0aGlzLmZ1bmN0aW9uc1ttYXRjaGluZ1swXV19Y29uc3QgcmVzdWx0PXRoaXMuZnVuY3Rpb25zW0Z1bmN0aW9uRnJhZ21lbnQuZnJvbVN0cmluZyhuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpLmZvcm1hdCgpXTtpZighcmVzdWx0KXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLFwic2lnbmF0dXJlXCIsbmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoKX1yZXR1cm4gcmVzdWx0fWdldEV2ZW50KG5hbWVPclNpZ25hdHVyZU9yVG9waWMpe2lmKGlzSGV4U3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yVG9waWMpKXtjb25zdCB0b3BpY2hhc2g9bmFtZU9yU2lnbmF0dXJlT3JUb3BpYy50b0xvd2VyQ2FzZSgpO2Zvcihjb25zdCBuYW1lIGluIHRoaXMuZXZlbnRzKXtpZih0b3BpY2hhc2g9PT10aGlzLmdldEV2ZW50VG9waWMobmFtZSkpe3JldHVybiB0aGlzLmV2ZW50c1tuYW1lXX19bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZXZlbnRcIixcInRvcGljaGFzaFwiLHRvcGljaGFzaCl9aWYobmFtZU9yU2lnbmF0dXJlT3JUb3BpYy5pbmRleE9mKFwiKFwiKT09PS0xKXtjb25zdCBuYW1lPW5hbWVPclNpZ25hdHVyZU9yVG9waWMudHJpbSgpO2NvbnN0IG1hdGNoaW5nPU9iamVjdC5rZXlzKHRoaXMuZXZlbnRzKS5maWx0ZXIoZj0+Zi5zcGxpdChcIihcIilbMF09PT1uYW1lKTtpZihtYXRjaGluZy5sZW5ndGg9PT0wKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLFwibmFtZVwiLG5hbWUpfWVsc2UgaWYobWF0Y2hpbmcubGVuZ3RoPjEpe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcIm11bHRpcGxlIG1hdGNoaW5nIGV2ZW50c1wiLFwibmFtZVwiLG5hbWUpfXJldHVybiB0aGlzLmV2ZW50c1ttYXRjaGluZ1swXV19Y29uc3QgcmVzdWx0PXRoaXMuZXZlbnRzW0V2ZW50RnJhZ21lbnQuZnJvbVN0cmluZyhuYW1lT3JTaWduYXR1cmVPclRvcGljKS5mb3JtYXQoKV07aWYoIXJlc3VsdCl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZXZlbnRcIixcInNpZ25hdHVyZVwiLG5hbWVPclNpZ25hdHVyZU9yVG9waWMpfXJldHVybiByZXN1bHR9Z2V0U2lnaGFzaChmdW5jdGlvbkZyYWdtZW50KXtpZih0eXBlb2YgZnVuY3Rpb25GcmFnbWVudD09PVwic3RyaW5nXCIpe2Z1bmN0aW9uRnJhZ21lbnQ9dGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KX1yZXR1cm4gZ2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJnZXRTaWdoYXNoXCIpKGZ1bmN0aW9uRnJhZ21lbnQpfWdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCl7aWYodHlwZW9mIGV2ZW50RnJhZ21lbnQ9PT1cInN0cmluZ1wiKXtldmVudEZyYWdtZW50PXRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCl9cmV0dXJuIGdldFN0YXRpYyh0aGlzLmNvbnN0cnVjdG9yLFwiZ2V0RXZlbnRUb3BpY1wiKShldmVudEZyYWdtZW50KX1fZGVjb2RlUGFyYW1zKHBhcmFtcyxkYXRhKXtyZXR1cm4gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKHBhcmFtcyxkYXRhKX1fZW5jb2RlUGFyYW1zKHBhcmFtcyx2YWx1ZXMpe3JldHVybiB0aGlzLl9hYmlDb2Rlci5lbmNvZGUocGFyYW1zLHZhbHVlcyl9ZW5jb2RlRGVwbG95KHZhbHVlcyl7cmV0dXJuIHRoaXMuX2VuY29kZVBhcmFtcyh0aGlzLmRlcGxveS5pbnB1dHMsdmFsdWVzfHxbXSl9ZGVjb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQsZGF0YSl7aWYodHlwZW9mIGZ1bmN0aW9uRnJhZ21lbnQ9PT1cInN0cmluZ1wiKXtmdW5jdGlvbkZyYWdtZW50PXRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCl9Y29uc3QgYnl0ZXM9YXJyYXlpZnkoZGF0YSk7aWYoaGV4bGlmeShieXRlcy5zbGljZSgwLDQpKSE9PXRoaXMuZ2V0U2lnaGFzaChmdW5jdGlvbkZyYWdtZW50KSl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKGBkYXRhIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBmdW5jdGlvbiAke2Z1bmN0aW9uRnJhZ21lbnQubmFtZX0uYCxcImRhdGFcIixoZXhsaWZ5KGJ5dGVzKSl9cmV0dXJuIHRoaXMuX2RlY29kZVBhcmFtcyhmdW5jdGlvbkZyYWdtZW50LmlucHV0cyxieXRlcy5zbGljZSg0KSl9ZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQsdmFsdWVzKXtpZih0eXBlb2YgZnVuY3Rpb25GcmFnbWVudD09PVwic3RyaW5nXCIpe2Z1bmN0aW9uRnJhZ21lbnQ9dGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KX1yZXR1cm4gaGV4bGlmeShjb25jYXQoW3RoaXMuZ2V0U2lnaGFzaChmdW5jdGlvbkZyYWdtZW50KSx0aGlzLl9lbmNvZGVQYXJhbXMoZnVuY3Rpb25GcmFnbWVudC5pbnB1dHMsdmFsdWVzfHxbXSldKSl9ZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudCxkYXRhKXtpZih0eXBlb2YgZnVuY3Rpb25GcmFnbWVudD09PVwic3RyaW5nXCIpe2Z1bmN0aW9uRnJhZ21lbnQ9dGhpcy5nZXRGdW5jdGlvbihmdW5jdGlvbkZyYWdtZW50KX1sZXQgYnl0ZXM9YXJyYXlpZnkoZGF0YSk7bGV0IHJlYXNvbj1udWxsO2xldCBlcnJvclNpZ25hdHVyZT1udWxsO3N3aXRjaChieXRlcy5sZW5ndGgldGhpcy5fYWJpQ29kZXIuX2dldFdvcmRTaXplKCkpe2Nhc2UgMDp0cnl7cmV0dXJuIHRoaXMuX2FiaUNvZGVyLmRlY29kZShmdW5jdGlvbkZyYWdtZW50Lm91dHB1dHMsYnl0ZXMpfWNhdGNoKGVycm9yKXt9YnJlYWs7Y2FzZSA0OmlmKGhleGxpZnkoYnl0ZXMuc2xpY2UoMCw0KSk9PT1cIjB4MDhjMzc5YTBcIil7ZXJyb3JTaWduYXR1cmU9XCJFcnJvcihzdHJpbmcpXCI7cmVhc29uPXRoaXMuX2FiaUNvZGVyLmRlY29kZShbXCJzdHJpbmdcIl0sYnl0ZXMuc2xpY2UoNCkpWzBdfWJyZWFrfXJldHVybiBsb2dnZXIkZC50aHJvd0Vycm9yKFwiY2FsbCByZXZlcnQgZXhjZXB0aW9uXCIsTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTix7bWV0aG9kOmZ1bmN0aW9uRnJhZ21lbnQuZm9ybWF0KCksZXJyb3JTaWduYXR1cmU6ZXJyb3JTaWduYXR1cmUsZXJyb3JBcmdzOltyZWFzb25dLHJlYXNvbjpyZWFzb259KX1lbmNvZGVGdW5jdGlvblJlc3VsdChmdW5jdGlvbkZyYWdtZW50LHZhbHVlcyl7aWYodHlwZW9mIGZ1bmN0aW9uRnJhZ21lbnQ9PT1cInN0cmluZ1wiKXtmdW5jdGlvbkZyYWdtZW50PXRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCl9cmV0dXJuIGhleGxpZnkodGhpcy5fYWJpQ29kZXIuZW5jb2RlKGZ1bmN0aW9uRnJhZ21lbnQub3V0cHV0cyx2YWx1ZXN8fFtdKSl9ZW5jb2RlRmlsdGVyVG9waWNzKGV2ZW50RnJhZ21lbnQsdmFsdWVzKXtpZih0eXBlb2YgZXZlbnRGcmFnbWVudD09PVwic3RyaW5nXCIpe2V2ZW50RnJhZ21lbnQ9dGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KX1pZih2YWx1ZXMubGVuZ3RoPmV2ZW50RnJhZ21lbnQuaW5wdXRzLmxlbmd0aCl7bG9nZ2VyJGQudGhyb3dFcnJvcihcInRvbyBtYW55IGFyZ3VtZW50cyBmb3IgXCIrZXZlbnRGcmFnbWVudC5mb3JtYXQoKSxMb2dnZXIuZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQse2FyZ3VtZW50OlwidmFsdWVzXCIsdmFsdWU6dmFsdWVzfSl9bGV0IHRvcGljcz1bXTtpZighZXZlbnRGcmFnbWVudC5hbm9ueW1vdXMpe3RvcGljcy5wdXNoKHRoaXMuZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KSl9Y29uc3QgZW5jb2RlVG9waWM9KHBhcmFtLHZhbHVlKT0+e2lmKHBhcmFtLnR5cGU9PT1cInN0cmluZ1wiKXtyZXR1cm4gaWQodmFsdWUpfWVsc2UgaWYocGFyYW0udHlwZT09PVwiYnl0ZXNcIil7cmV0dXJuIGtlY2NhazI1NihoZXhsaWZ5KHZhbHVlKSl9aWYocGFyYW0udHlwZT09PVwiYWRkcmVzc1wiKXt0aGlzLl9hYmlDb2Rlci5lbmNvZGUoW1wiYWRkcmVzc1wiXSxbdmFsdWVdKX1yZXR1cm4gaGV4WmVyb1BhZChoZXhsaWZ5KHZhbHVlKSwzMil9O3ZhbHVlcy5mb3JFYWNoKCh2YWx1ZSxpbmRleCk9PntsZXQgcGFyYW09ZXZlbnRGcmFnbWVudC5pbnB1dHNbaW5kZXhdO2lmKCFwYXJhbS5pbmRleGVkKXtpZih2YWx1ZSE9bnVsbCl7bG9nZ2VyJGQudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGZpbHRlciBub24taW5kZXhlZCBwYXJhbWV0ZXJzOyBtdXN0IGJlIG51bGxcIixcImNvbnRyYWN0LlwiK3BhcmFtLm5hbWUsdmFsdWUpfXJldHVybn1pZih2YWx1ZT09bnVsbCl7dG9waWNzLnB1c2gobnVsbCl9ZWxzZSBpZihwYXJhbS5iYXNlVHlwZT09PVwiYXJyYXlcInx8cGFyYW0uYmFzZVR5cGU9PT1cInR1cGxlXCIpe2xvZ2dlciRkLnRocm93QXJndW1lbnRFcnJvcihcImZpbHRlcmluZyB3aXRoIHR1cGxlcyBvciBhcnJheXMgbm90IHN1cHBvcnRlZFwiLFwiY29udHJhY3QuXCIrcGFyYW0ubmFtZSx2YWx1ZSl9ZWxzZSBpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7dG9waWNzLnB1c2godmFsdWUubWFwKHZhbHVlPT5lbmNvZGVUb3BpYyhwYXJhbSx2YWx1ZSkpKX1lbHNle3RvcGljcy5wdXNoKGVuY29kZVRvcGljKHBhcmFtLHZhbHVlKSl9fSk7d2hpbGUodG9waWNzLmxlbmd0aCYmdG9waWNzW3RvcGljcy5sZW5ndGgtMV09PT1udWxsKXt0b3BpY3MucG9wKCl9cmV0dXJuIHRvcGljc31lbmNvZGVFdmVudExvZyhldmVudEZyYWdtZW50LHZhbHVlcyl7aWYodHlwZW9mIGV2ZW50RnJhZ21lbnQ9PT1cInN0cmluZ1wiKXtldmVudEZyYWdtZW50PXRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCl9Y29uc3QgdG9waWNzPVtdO2NvbnN0IGRhdGFUeXBlcz1bXTtjb25zdCBkYXRhVmFsdWVzPVtdO2lmKCFldmVudEZyYWdtZW50LmFub255bW91cyl7dG9waWNzLnB1c2godGhpcy5nZXRFdmVudFRvcGljKGV2ZW50RnJhZ21lbnQpKX1pZih2YWx1ZXMubGVuZ3RoIT09ZXZlbnRGcmFnbWVudC5pbnB1dHMubGVuZ3RoKXtsb2dnZXIkZC50aHJvd0FyZ3VtZW50RXJyb3IoXCJldmVudCBhcmd1bWVudHMvdmFsdWVzIG1pc21hdGNoXCIsXCJ2YWx1ZXNcIix2YWx1ZXMpfWV2ZW50RnJhZ21lbnQuaW5wdXRzLmZvckVhY2goKHBhcmFtLGluZGV4KT0+e2NvbnN0IHZhbHVlPXZhbHVlc1tpbmRleF07aWYocGFyYW0uaW5kZXhlZCl7aWYocGFyYW0udHlwZT09PVwic3RyaW5nXCIpe3RvcGljcy5wdXNoKGlkKHZhbHVlKSl9ZWxzZSBpZihwYXJhbS50eXBlPT09XCJieXRlc1wiKXt0b3BpY3MucHVzaChrZWNjYWsyNTYodmFsdWUpKX1lbHNlIGlmKHBhcmFtLmJhc2VUeXBlPT09XCJ0dXBsZVwifHxwYXJhbS5iYXNlVHlwZT09PVwiYXJyYXlcIil7dGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfWVsc2V7dG9waWNzLnB1c2godGhpcy5fYWJpQ29kZXIuZW5jb2RlKFtwYXJhbS50eXBlXSxbdmFsdWVdKSl9fWVsc2V7ZGF0YVR5cGVzLnB1c2gocGFyYW0pO2RhdGFWYWx1ZXMucHVzaCh2YWx1ZSl9fSk7cmV0dXJue2RhdGE6dGhpcy5fYWJpQ29kZXIuZW5jb2RlKGRhdGFUeXBlcyxkYXRhVmFsdWVzKSx0b3BpY3M6dG9waWNzfX1kZWNvZGVFdmVudExvZyhldmVudEZyYWdtZW50LGRhdGEsdG9waWNzKXtpZih0eXBlb2YgZXZlbnRGcmFnbWVudD09PVwic3RyaW5nXCIpe2V2ZW50RnJhZ21lbnQ9dGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KX1pZih0b3BpY3MhPW51bGwmJiFldmVudEZyYWdtZW50LmFub255bW91cyl7bGV0IHRvcGljSGFzaD10aGlzLmdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCk7aWYoIWlzSGV4U3RyaW5nKHRvcGljc1swXSwzMil8fHRvcGljc1swXS50b0xvd2VyQ2FzZSgpIT09dG9waWNIYXNoKXtsb2dnZXIkZC50aHJvd0Vycm9yKFwiZnJhZ21lbnQvdG9waWMgbWlzbWF0Y2hcIixMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQse2FyZ3VtZW50OlwidG9waWNzWzBdXCIsZXhwZWN0ZWQ6dG9waWNIYXNoLHZhbHVlOnRvcGljc1swXX0pfXRvcGljcz10b3BpY3Muc2xpY2UoMSl9bGV0IGluZGV4ZWQ9W107bGV0IG5vbkluZGV4ZWQ9W107bGV0IGR5bmFtaWM9W107ZXZlbnRGcmFnbWVudC5pbnB1dHMuZm9yRWFjaCgocGFyYW0saW5kZXgpPT57aWYocGFyYW0uaW5kZXhlZCl7aWYocGFyYW0udHlwZT09PVwic3RyaW5nXCJ8fHBhcmFtLnR5cGU9PT1cImJ5dGVzXCJ8fHBhcmFtLmJhc2VUeXBlPT09XCJ0dXBsZVwifHxwYXJhbS5iYXNlVHlwZT09PVwiYXJyYXlcIil7aW5kZXhlZC5wdXNoKFBhcmFtVHlwZS5mcm9tT2JqZWN0KHt0eXBlOlwiYnl0ZXMzMlwiLG5hbWU6cGFyYW0ubmFtZX0pKTtkeW5hbWljLnB1c2godHJ1ZSl9ZWxzZXtpbmRleGVkLnB1c2gocGFyYW0pO2R5bmFtaWMucHVzaChmYWxzZSl9fWVsc2V7bm9uSW5kZXhlZC5wdXNoKHBhcmFtKTtkeW5hbWljLnB1c2goZmFsc2UpfX0pO2xldCByZXN1bHRJbmRleGVkPXRvcGljcyE9bnVsbD90aGlzLl9hYmlDb2Rlci5kZWNvZGUoaW5kZXhlZCxjb25jYXQodG9waWNzKSk6bnVsbDtsZXQgcmVzdWx0Tm9uSW5kZXhlZD10aGlzLl9hYmlDb2Rlci5kZWNvZGUobm9uSW5kZXhlZCxkYXRhLHRydWUpO2xldCByZXN1bHQ9W107bGV0IG5vbkluZGV4ZWRJbmRleD0wLGluZGV4ZWRJbmRleD0wO2V2ZW50RnJhZ21lbnQuaW5wdXRzLmZvckVhY2goKHBhcmFtLGluZGV4KT0+e2lmKHBhcmFtLmluZGV4ZWQpe2lmKHJlc3VsdEluZGV4ZWQ9PW51bGwpe3Jlc3VsdFtpbmRleF09bmV3IEluZGV4ZWQoe19pc0luZGV4ZWQ6dHJ1ZSxoYXNoOm51bGx9KX1lbHNlIGlmKGR5bmFtaWNbaW5kZXhdKXtyZXN1bHRbaW5kZXhdPW5ldyBJbmRleGVkKHtfaXNJbmRleGVkOnRydWUsaGFzaDpyZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXX0pfWVsc2V7dHJ5e3Jlc3VsdFtpbmRleF09cmVzdWx0SW5kZXhlZFtpbmRleGVkSW5kZXgrK119Y2F0Y2goZXJyb3Ipe3Jlc3VsdFtpbmRleF09ZXJyb3J9fX1lbHNle3RyeXtyZXN1bHRbaW5kZXhdPXJlc3VsdE5vbkluZGV4ZWRbbm9uSW5kZXhlZEluZGV4KytdfWNhdGNoKGVycm9yKXtyZXN1bHRbaW5kZXhdPWVycm9yfX1pZihwYXJhbS5uYW1lJiZyZXN1bHRbcGFyYW0ubmFtZV09PW51bGwpe2NvbnN0IHZhbHVlPXJlc3VsdFtpbmRleF07aWYodmFsdWUgaW5zdGFuY2VvZiBFcnJvcil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCxwYXJhbS5uYW1lLHtnZXQ6KCk9Pnt0aHJvdyB3cmFwQWNjZXNzRXJyb3IoYHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkocGFyYW0ubmFtZSl9YCx2YWx1ZSl9fSl9ZWxzZXtyZXN1bHRbcGFyYW0ubmFtZV09dmFsdWV9fX0pO2ZvcihsZXQgaT0wO2k8cmVzdWx0Lmxlbmd0aDtpKyspe2NvbnN0IHZhbHVlPXJlc3VsdFtpXTtpZih2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKXtPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LGkse2dldDooKT0+e3Rocm93IHdyYXBBY2Nlc3NFcnJvcihgaW5kZXggJHtpfWAsdmFsdWUpfX0pfX1yZXR1cm4gT2JqZWN0LmZyZWV6ZShyZXN1bHQpfXBhcnNlVHJhbnNhY3Rpb24odHgpe2xldCBmcmFnbWVudD10aGlzLmdldEZ1bmN0aW9uKHR4LmRhdGEuc3Vic3RyaW5nKDAsMTApLnRvTG93ZXJDYXNlKCkpO2lmKCFmcmFnbWVudCl7cmV0dXJuIG51bGx9cmV0dXJuIG5ldyBUcmFuc2FjdGlvbkRlc2NyaXB0aW9uKHthcmdzOnRoaXMuX2FiaUNvZGVyLmRlY29kZShmcmFnbWVudC5pbnB1dHMsXCIweFwiK3R4LmRhdGEuc3Vic3RyaW5nKDEwKSksZnVuY3Rpb25GcmFnbWVudDpmcmFnbWVudCxuYW1lOmZyYWdtZW50Lm5hbWUsc2lnbmF0dXJlOmZyYWdtZW50LmZvcm1hdCgpLHNpZ2hhc2g6dGhpcy5nZXRTaWdoYXNoKGZyYWdtZW50KSx2YWx1ZTpCaWdOdW1iZXIuZnJvbSh0eC52YWx1ZXx8XCIwXCIpfSl9cGFyc2VMb2cobG9nKXtsZXQgZnJhZ21lbnQ9dGhpcy5nZXRFdmVudChsb2cudG9waWNzWzBdKTtpZighZnJhZ21lbnR8fGZyYWdtZW50LmFub255bW91cyl7cmV0dXJuIG51bGx9cmV0dXJuIG5ldyBMb2dEZXNjcmlwdGlvbih7ZXZlbnRGcmFnbWVudDpmcmFnbWVudCxuYW1lOmZyYWdtZW50Lm5hbWUsc2lnbmF0dXJlOmZyYWdtZW50LmZvcm1hdCgpLHRvcGljOnRoaXMuZ2V0RXZlbnRUb3BpYyhmcmFnbWVudCksYXJnczp0aGlzLmRlY29kZUV2ZW50TG9nKGZyYWdtZW50LGxvZy5kYXRhLGxvZy50b3BpY3MpfSl9c3RhdGljIGlzSW50ZXJmYWNlKHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzSW50ZXJmYWNlKX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgdmVyc2lvbiQ5PVwiYWJzdHJhY3QtcHJvdmlkZXIvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkZT1uZXcgTG9nZ2VyKHZlcnNpb24kOSk7Y2xhc3MgRm9ya0V2ZW50IGV4dGVuZHMgRGVzY3JpcHRpb257c3RhdGljIGlzRm9ya0V2ZW50KHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzRm9ya0V2ZW50KX19Y2xhc3MgQmxvY2tGb3JrRXZlbnQgZXh0ZW5kcyBGb3JrRXZlbnR7Y29uc3RydWN0b3IoYmxvY2tIYXNoLGV4cGlyeSl7aWYoIWlzSGV4U3RyaW5nKGJsb2NrSGFzaCwzMikpe2xvZ2dlciRlLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYmxvY2tIYXNoXCIsXCJibG9ja0hhc2hcIixibG9ja0hhc2gpfXN1cGVyKHtfaXNGb3JrRXZlbnQ6dHJ1ZSxfaXNCbG9ja0ZvcmtFdmVudDp0cnVlLGV4cGlyeTpleHBpcnl8fDAsYmxvY2tIYXNoOmJsb2NrSGFzaH0pfX1jbGFzcyBUcmFuc2FjdGlvbkZvcmtFdmVudCBleHRlbmRzIEZvcmtFdmVudHtjb25zdHJ1Y3RvcihoYXNoLGV4cGlyeSl7aWYoIWlzSGV4U3RyaW5nKGhhc2gsMzIpKXtsb2dnZXIkZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIixcImhhc2hcIixoYXNoKX1zdXBlcih7X2lzRm9ya0V2ZW50OnRydWUsX2lzVHJhbnNhY3Rpb25Gb3JrRXZlbnQ6dHJ1ZSxleHBpcnk6ZXhwaXJ5fHwwLGhhc2g6aGFzaH0pfX1jbGFzcyBUcmFuc2FjdGlvbk9yZGVyRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50e2NvbnN0cnVjdG9yKGJlZm9yZUhhc2gsYWZ0ZXJIYXNoLGV4cGlyeSl7aWYoIWlzSGV4U3RyaW5nKGJlZm9yZUhhc2gsMzIpKXtsb2dnZXIkZS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIixcImJlZm9yZUhhc2hcIixiZWZvcmVIYXNoKX1pZighaXNIZXhTdHJpbmcoYWZ0ZXJIYXNoLDMyKSl7bG9nZ2VyJGUudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0cmFuc2FjdGlvbiBoYXNoXCIsXCJhZnRlckhhc2hcIixhZnRlckhhc2gpfXN1cGVyKHtfaXNGb3JrRXZlbnQ6dHJ1ZSxfaXNUcmFuc2FjdGlvbk9yZGVyRm9ya0V2ZW50OnRydWUsZXhwaXJ5OmV4cGlyeXx8MCxiZWZvcmVIYXNoOmJlZm9yZUhhc2gsYWZ0ZXJIYXNoOmFmdGVySGFzaH0pfX1jbGFzcyBQcm92aWRlcntjb25zdHJ1Y3Rvcigpe2xvZ2dlciRlLmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCxQcm92aWRlcik7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9pc1Byb3ZpZGVyXCIsdHJ1ZSl9YWRkTGlzdGVuZXIoZXZlbnROYW1lLGxpc3RlbmVyKXtyZXR1cm4gdGhpcy5vbihldmVudE5hbWUsbGlzdGVuZXIpfXJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSxsaXN0ZW5lcil7cmV0dXJuIHRoaXMub2ZmKGV2ZW50TmFtZSxsaXN0ZW5lcil9c3RhdGljIGlzUHJvdmlkZXIodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNQcm92aWRlcil9fWNvbnN0IHZlcnNpb24kYT1cImFic3RyYWN0LXNpZ25lci81LjEuMFwiO1widXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkMj13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJGY9bmV3IExvZ2dlcih2ZXJzaW9uJGEpO2NvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXM9W1wiYWNjZXNzTGlzdFwiLFwiY2hhaW5JZFwiLFwiZGF0YVwiLFwiZnJvbVwiLFwiZ2FzTGltaXRcIixcImdhc1ByaWNlXCIsXCJub25jZVwiLFwidG9cIixcInR5cGVcIixcInZhbHVlXCJdO2NvbnN0IGZvcndhcmRFcnJvcnM9W0xvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCxMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEXTtjbGFzcyBTaWduZXJ7Y29uc3RydWN0b3IoKXtsb2dnZXIkZi5jaGVja0Fic3RyYWN0KG5ldy50YXJnZXQsU2lnbmVyKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2lzU2lnbmVyXCIsdHJ1ZSl9Z2V0QmFsYW5jZShibG9ja1RhZyl7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0QmFsYW5jZVwiKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRCYWxhbmNlKHRoaXMuZ2V0QWRkcmVzcygpLGJsb2NrVGFnKX0pfWdldFRyYW5zYWN0aW9uQ291bnQoYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkMih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7dGhpcy5fY2hlY2tQcm92aWRlcihcImdldFRyYW5zYWN0aW9uQ291bnRcIik7cmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb25Db3VudCh0aGlzLmdldEFkZHJlc3MoKSxibG9ja1RhZyl9KX1lc3RpbWF0ZUdhcyh0cmFuc2FjdGlvbil7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZXN0aW1hdGVHYXNcIik7Y29uc3QgdHg9eWllbGQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7cmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuZXN0aW1hdGVHYXModHgpfSl9Y2FsbCh0cmFuc2FjdGlvbixibG9ja1RhZyl7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwiY2FsbFwiKTtjb25zdCB0eD15aWVsZCByZXNvbHZlUHJvcGVydGllcyh0aGlzLmNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHR4LGJsb2NrVGFnKX0pfXNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7dGhpcy5fY2hlY2tQcm92aWRlcihcInNlbmRUcmFuc2FjdGlvblwiKTtyZXR1cm4gdGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKS50aGVuKHR4PT57cmV0dXJuIHRoaXMuc2lnblRyYW5zYWN0aW9uKHR4KS50aGVuKHNpZ25lZFR4PT57cmV0dXJuIHRoaXMucHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uKHNpZ25lZFR4KX0pfSl9Z2V0Q2hhaW5JZCgpe3JldHVybiBfX2F3YWl0ZXIkMih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7dGhpcy5fY2hlY2tQcm92aWRlcihcImdldENoYWluSWRcIik7Y29uc3QgbmV0d29yaz15aWVsZCB0aGlzLnByb3ZpZGVyLmdldE5ldHdvcmsoKTtyZXR1cm4gbmV0d29yay5jaGFpbklkfSl9Z2V0R2FzUHJpY2UoKXtyZXR1cm4gX19hd2FpdGVyJDIodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRHYXNQcmljZVwiKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5nZXRHYXNQcmljZSgpfSl9cmVzb2x2ZU5hbWUobmFtZSl7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt0aGlzLl9jaGVja1Byb3ZpZGVyKFwicmVzb2x2ZU5hbWVcIik7cmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIucmVzb2x2ZU5hbWUobmFtZSl9KX1jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXtmb3IoY29uc3Qga2V5IGluIHRyYW5zYWN0aW9uKXtpZihhbGxvd2VkVHJhbnNhY3Rpb25LZXlzLmluZGV4T2Yoa2V5KT09PS0xKXtsb2dnZXIkZi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGtleTogXCIra2V5LFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9fWNvbnN0IHR4PXNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtpZih0eC5mcm9tPT1udWxsKXt0eC5mcm9tPXRoaXMuZ2V0QWRkcmVzcygpfWVsc2V7dHguZnJvbT1Qcm9taXNlLmFsbChbUHJvbWlzZS5yZXNvbHZlKHR4LmZyb20pLHRoaXMuZ2V0QWRkcmVzcygpXSkudGhlbihyZXN1bHQ9PntpZihyZXN1bHRbMF0udG9Mb3dlckNhc2UoKSE9PXJlc3VsdFsxXS50b0xvd2VyQ2FzZSgpKXtsb2dnZXIkZi50aHJvd0FyZ3VtZW50RXJyb3IoXCJmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIixcInRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb24pfXJldHVybiByZXN1bHRbMF19KX1yZXR1cm4gdHh9cG9wdWxhdGVUcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7cmV0dXJuIF9fYXdhaXRlciQyKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCB0eD15aWVsZCByZXNvbHZlUHJvcGVydGllcyh0aGlzLmNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pKTtpZih0eC50byE9bnVsbCl7dHgudG89UHJvbWlzZS5yZXNvbHZlKHR4LnRvKS50aGVuKHRvPT5fX2F3YWl0ZXIkMih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYodG89PW51bGwpe3JldHVybiBudWxsfWNvbnN0IGFkZHJlc3M9eWllbGQgdGhpcy5yZXNvbHZlTmFtZSh0byk7aWYoYWRkcmVzcz09bnVsbCl7bG9nZ2VyJGYudGhyb3dBcmd1bWVudEVycm9yKFwicHJvdmlkZWQgRU5TIG5hbWUgcmVzb2x2ZXMgdG8gbnVsbFwiLFwidHgudG9cIix0byl9cmV0dXJuIGFkZHJlc3N9KSl9aWYodHguZ2FzUHJpY2U9PW51bGwpe3R4Lmdhc1ByaWNlPXRoaXMuZ2V0R2FzUHJpY2UoKX1pZih0eC5ub25jZT09bnVsbCl7dHgubm9uY2U9dGhpcy5nZXRUcmFuc2FjdGlvbkNvdW50KFwicGVuZGluZ1wiKX1pZih0eC5nYXNMaW1pdD09bnVsbCl7dHguZ2FzTGltaXQ9dGhpcy5lc3RpbWF0ZUdhcyh0eCkuY2F0Y2goZXJyb3I9PntpZihmb3J3YXJkRXJyb3JzLmluZGV4T2YoZXJyb3IuY29kZSk+PTApe3Rocm93IGVycm9yfXJldHVybiBsb2dnZXIkZi50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLExvZ2dlci5lcnJvcnMuVU5QUkVESUNUQUJMRV9HQVNfTElNSVQse2Vycm9yOmVycm9yLHR4OnR4fSl9KX1pZih0eC5jaGFpbklkPT1udWxsKXt0eC5jaGFpbklkPXRoaXMuZ2V0Q2hhaW5JZCgpfWVsc2V7dHguY2hhaW5JZD1Qcm9taXNlLmFsbChbUHJvbWlzZS5yZXNvbHZlKHR4LmNoYWluSWQpLHRoaXMuZ2V0Q2hhaW5JZCgpXSkudGhlbihyZXN1bHRzPT57aWYocmVzdWx0c1sxXSE9PTAmJnJlc3VsdHNbMF0hPT1yZXN1bHRzWzFdKXtsb2dnZXIkZi50aHJvd0FyZ3VtZW50RXJyb3IoXCJjaGFpbklkIGFkZHJlc3MgbWlzbWF0Y2hcIixcInRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb24pfXJldHVybiByZXN1bHRzWzBdfSl9cmV0dXJuIHlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHR4KX0pfV9jaGVja1Byb3ZpZGVyKG9wZXJhdGlvbil7aWYoIXRoaXMucHJvdmlkZXIpe2xvZ2dlciRmLnRocm93RXJyb3IoXCJtaXNzaW5nIHByb3ZpZGVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpvcGVyYXRpb258fFwiX2NoZWNrUHJvdmlkZXJcIn0pfX1zdGF0aWMgaXNTaWduZXIodmFsdWUpe3JldHVybiEhKHZhbHVlJiZ2YWx1ZS5faXNTaWduZXIpfX1jbGFzcyBWb2lkU2lnbmVyIGV4dGVuZHMgU2lnbmVye2NvbnN0cnVjdG9yKGFkZHJlc3MscHJvdmlkZXIpe2xvZ2dlciRmLmNoZWNrTmV3KG5ldy50YXJnZXQsVm9pZFNpZ25lcik7c3VwZXIoKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYWRkcmVzc1wiLGFkZHJlc3MpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHByb3ZpZGVyfHxudWxsKX1nZXRBZGRyZXNzKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmFkZHJlc3MpfV9mYWlsKG1lc3NhZ2Usb3BlcmF0aW9uKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+e2xvZ2dlciRmLnRocm93RXJyb3IobWVzc2FnZSxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOm9wZXJhdGlvbn0pfSl9c2lnbk1lc3NhZ2UobWVzc2FnZSl7cmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIG1lc3NhZ2VzXCIsXCJzaWduTWVzc2FnZVwiKX1zaWduVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pe3JldHVybiB0aGlzLl9mYWlsKFwiVm9pZFNpZ25lciBjYW5ub3Qgc2lnbiB0cmFuc2FjdGlvbnNcIixcInNpZ25UcmFuc2FjdGlvblwiKX1fc2lnblR5cGVkRGF0YShkb21haW4sdHlwZXMsdmFsdWUpe3JldHVybiB0aGlzLl9mYWlsKFwiVm9pZFNpZ25lciBjYW5ub3Qgc2lnbiB0eXBlZCBkYXRhXCIsXCJzaWduVHlwZWREYXRhXCIpfWNvbm5lY3QocHJvdmlkZXIpe3JldHVybiBuZXcgVm9pZFNpZ25lcih0aGlzLmFkZHJlc3MscHJvdmlkZXIpfX12YXIgbWluaW1hbGlzdGljQXNzZXJ0PWFzc2VydDtmdW5jdGlvbiBhc3NlcnQodmFsLG1zZyl7aWYoIXZhbCl0aHJvdyBuZXcgRXJyb3IobXNnfHxcIkFzc2VydGlvbiBmYWlsZWRcIil9YXNzZXJ0LmVxdWFsPWZ1bmN0aW9uIGFzc2VydEVxdWFsKGwscixtc2cpe2lmKGwhPXIpdGhyb3cgbmV3IEVycm9yKG1zZ3x8XCJBc3NlcnRpb24gZmFpbGVkOiBcIitsK1wiICE9IFwiK3IpfTt2YXIgaW5oZXJpdHNfYnJvd3Nlcj1jcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbihtb2R1bGUpe2lmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT09XCJmdW5jdGlvblwiKXttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpbmhlcml0cyhjdG9yLHN1cGVyQ3Rvcil7aWYoc3VwZXJDdG9yKXtjdG9yLnN1cGVyXz1zdXBlckN0b3I7Y3Rvci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6Y3RvcixlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSl9fX1lbHNle21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGN0b3Isc3VwZXJDdG9yKXtpZihzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3Rvcjt2YXIgVGVtcEN0b3I9ZnVuY3Rpb24oKXt9O1RlbXBDdG9yLnByb3RvdHlwZT1zdXBlckN0b3IucHJvdG90eXBlO2N0b3IucHJvdG90eXBlPW5ldyBUZW1wQ3RvcjtjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jdG9yfX19fSk7dmFyIGluaGVyaXRzPWNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSl7dHJ5e3ZhciB1dGlsPW51bGw7aWYodHlwZW9mIHV0aWwuaW5oZXJpdHMhPT1cImZ1bmN0aW9uXCIpdGhyb3dcIlwiO21vZHVsZS5leHBvcnRzPXV0aWwuaW5oZXJpdHN9Y2F0Y2goZSl7bW9kdWxlLmV4cG9ydHM9aW5oZXJpdHNfYnJvd3Nlcn19KTtcInVzZSBzdHJpY3RcIjt2YXIgaW5oZXJpdHNfMT1pbmhlcml0cztmdW5jdGlvbiB0b0FycmF5KG1zZyxlbmMpe2lmKEFycmF5LmlzQXJyYXkobXNnKSlyZXR1cm4gbXNnLnNsaWNlKCk7aWYoIW1zZylyZXR1cm5bXTt2YXIgcmVzPVtdO2lmKHR5cGVvZiBtc2c9PT1cInN0cmluZ1wiKXtpZighZW5jKXtmb3IodmFyIGk9MDtpPG1zZy5sZW5ndGg7aSsrKXt2YXIgYz1tc2cuY2hhckNvZGVBdChpKTt2YXIgaGk9Yz4+ODt2YXIgbG89YyYyNTU7aWYoaGkpcmVzLnB1c2goaGksbG8pO2Vsc2UgcmVzLnB1c2gobG8pfX1lbHNlIGlmKGVuYz09PVwiaGV4XCIpe21zZz1tc2cucmVwbGFjZSgvW15hLXowLTldKy9naSxcIlwiKTtpZihtc2cubGVuZ3RoJTIhPT0wKW1zZz1cIjBcIittc2c7Zm9yKGk9MDtpPG1zZy5sZW5ndGg7aSs9MilyZXMucHVzaChwYXJzZUludChtc2dbaV0rbXNnW2krMV0sMTYpKX19ZWxzZXtmb3IoaT0wO2k8bXNnLmxlbmd0aDtpKyspcmVzW2ldPW1zZ1tpXXwwfXJldHVybiByZXN9dmFyIHRvQXJyYXlfMT10b0FycmF5O2Z1bmN0aW9uIHRvSGV4JDEobXNnKXt2YXIgcmVzPVwiXCI7Zm9yKHZhciBpPTA7aTxtc2cubGVuZ3RoO2krKylyZXMrPXplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO3JldHVybiByZXN9dmFyIHRvSGV4XzE9dG9IZXgkMTtmdW5jdGlvbiBodG9ubCh3KXt2YXIgcmVzPXc+Pj4yNHx3Pj4+OCY2NTI4MHx3PDw4JjE2NzExNjgwfCh3JjI1NSk8PDI0O3JldHVybiByZXM+Pj4wfXZhciBodG9ubF8xPWh0b25sO2Z1bmN0aW9uIHRvSGV4MzIobXNnLGVuZGlhbil7dmFyIHJlcz1cIlwiO2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKyspe3ZhciB3PW1zZ1tpXTtpZihlbmRpYW49PT1cImxpdHRsZVwiKXc9aHRvbmwodyk7cmVzKz16ZXJvOCh3LnRvU3RyaW5nKDE2KSl9cmV0dXJuIHJlc312YXIgdG9IZXgzMl8xPXRvSGV4MzI7ZnVuY3Rpb24gemVybzIod29yZCl7aWYod29yZC5sZW5ndGg9PT0xKXJldHVyblwiMFwiK3dvcmQ7ZWxzZSByZXR1cm4gd29yZH12YXIgemVybzJfMT16ZXJvMjtmdW5jdGlvbiB6ZXJvOCh3b3JkKXtpZih3b3JkLmxlbmd0aD09PTcpcmV0dXJuXCIwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09NilyZXR1cm5cIjAwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09NSlyZXR1cm5cIjAwMFwiK3dvcmQ7ZWxzZSBpZih3b3JkLmxlbmd0aD09PTQpcmV0dXJuXCIwMDAwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09MylyZXR1cm5cIjAwMDAwXCIrd29yZDtlbHNlIGlmKHdvcmQubGVuZ3RoPT09MilyZXR1cm5cIjAwMDAwMFwiK3dvcmQ7ZWxzZSBpZih3b3JkLmxlbmd0aD09PTEpcmV0dXJuXCIwMDAwMDAwXCIrd29yZDtlbHNlIHJldHVybiB3b3JkfXZhciB6ZXJvOF8xPXplcm84O2Z1bmN0aW9uIGpvaW4zMihtc2csc3RhcnQsZW5kLGVuZGlhbil7dmFyIGxlbj1lbmQtc3RhcnQ7bWluaW1hbGlzdGljQXNzZXJ0KGxlbiU0PT09MCk7dmFyIHJlcz1uZXcgQXJyYXkobGVuLzQpO2Zvcih2YXIgaT0wLGs9c3RhcnQ7aTxyZXMubGVuZ3RoO2krKyxrKz00KXt2YXIgdztpZihlbmRpYW49PT1cImJpZ1wiKXc9bXNnW2tdPDwyNHxtc2dbaysxXTw8MTZ8bXNnW2srMl08PDh8bXNnW2srM107ZWxzZSB3PW1zZ1trKzNdPDwyNHxtc2dbaysyXTw8MTZ8bXNnW2srMV08PDh8bXNnW2tdO3Jlc1tpXT13Pj4+MH1yZXR1cm4gcmVzfXZhciBqb2luMzJfMT1qb2luMzI7ZnVuY3Rpb24gc3BsaXQzMihtc2csZW5kaWFuKXt2YXIgcmVzPW5ldyBBcnJheShtc2cubGVuZ3RoKjQpO2Zvcih2YXIgaT0wLGs9MDtpPG1zZy5sZW5ndGg7aSsrLGsrPTQpe3ZhciBtPW1zZ1tpXTtpZihlbmRpYW49PT1cImJpZ1wiKXtyZXNba109bT4+PjI0O3Jlc1trKzFdPW0+Pj4xNiYyNTU7cmVzW2srMl09bT4+PjgmMjU1O3Jlc1trKzNdPW0mMjU1fWVsc2V7cmVzW2srM109bT4+PjI0O3Jlc1trKzJdPW0+Pj4xNiYyNTU7cmVzW2srMV09bT4+PjgmMjU1O3Jlc1trXT1tJjI1NX19cmV0dXJuIHJlc312YXIgc3BsaXQzMl8xPXNwbGl0MzI7ZnVuY3Rpb24gcm90cjMyKHcsYil7cmV0dXJuIHc+Pj5ifHc8PDMyLWJ9dmFyIHJvdHIzMl8xPXJvdHIzMjtmdW5jdGlvbiByb3RsMzIodyxiKXtyZXR1cm4gdzw8Ynx3Pj4+MzItYn12YXIgcm90bDMyXzE9cm90bDMyO2Z1bmN0aW9uIHN1bTMyKGEsYil7cmV0dXJuIGErYj4+PjB9dmFyIHN1bTMyXzE9c3VtMzI7ZnVuY3Rpb24gc3VtMzJfMyhhLGIsYyl7cmV0dXJuIGErYitjPj4+MH12YXIgc3VtMzJfM18xPXN1bTMyXzM7ZnVuY3Rpb24gc3VtMzJfNChhLGIsYyxkKXtyZXR1cm4gYStiK2MrZD4+PjB9dmFyIHN1bTMyXzRfMT1zdW0zMl80O2Z1bmN0aW9uIHN1bTMyXzUoYSxiLGMsZCxlKXtyZXR1cm4gYStiK2MrZCtlPj4+MH12YXIgc3VtMzJfNV8xPXN1bTMyXzU7ZnVuY3Rpb24gc3VtNjQoYnVmLHBvcyxhaCxhbCl7dmFyIGJoPWJ1Zltwb3NdO3ZhciBibD1idWZbcG9zKzFdO3ZhciBsbz1hbCtibD4+PjA7dmFyIGhpPShsbzxhbD8xOjApK2FoK2JoO2J1Zltwb3NdPWhpPj4+MDtidWZbcG9zKzFdPWxvfXZhciBzdW02NF8xPXN1bTY0O2Z1bmN0aW9uIHN1bTY0X2hpKGFoLGFsLGJoLGJsKXt2YXIgbG89YWwrYmw+Pj4wO3ZhciBoaT0obG88YWw/MTowKSthaCtiaDtyZXR1cm4gaGk+Pj4wfXZhciBzdW02NF9oaV8xPXN1bTY0X2hpO2Z1bmN0aW9uIHN1bTY0X2xvKGFoLGFsLGJoLGJsKXt2YXIgbG89YWwrYmw7cmV0dXJuIGxvPj4+MH12YXIgc3VtNjRfbG9fMT1zdW02NF9sbztmdW5jdGlvbiBzdW02NF80X2hpKGFoLGFsLGJoLGJsLGNoLGNsLGRoLGRsKXt2YXIgY2Fycnk9MDt2YXIgbG89YWw7bG89bG8rYmw+Pj4wO2NhcnJ5Kz1sbzxhbD8xOjA7bG89bG8rY2w+Pj4wO2NhcnJ5Kz1sbzxjbD8xOjA7bG89bG8rZGw+Pj4wO2NhcnJ5Kz1sbzxkbD8xOjA7dmFyIGhpPWFoK2JoK2NoK2RoK2NhcnJ5O3JldHVybiBoaT4+PjB9dmFyIHN1bTY0XzRfaGlfMT1zdW02NF80X2hpO2Z1bmN0aW9uIHN1bTY0XzRfbG8oYWgsYWwsYmgsYmwsY2gsY2wsZGgsZGwpe3ZhciBsbz1hbCtibCtjbCtkbDtyZXR1cm4gbG8+Pj4wfXZhciBzdW02NF80X2xvXzE9c3VtNjRfNF9sbztmdW5jdGlvbiBzdW02NF81X2hpKGFoLGFsLGJoLGJsLGNoLGNsLGRoLGRsLGVoLGVsKXt2YXIgY2Fycnk9MDt2YXIgbG89YWw7bG89bG8rYmw+Pj4wO2NhcnJ5Kz1sbzxhbD8xOjA7bG89bG8rY2w+Pj4wO2NhcnJ5Kz1sbzxjbD8xOjA7bG89bG8rZGw+Pj4wO2NhcnJ5Kz1sbzxkbD8xOjA7bG89bG8rZWw+Pj4wO2NhcnJ5Kz1sbzxlbD8xOjA7dmFyIGhpPWFoK2JoK2NoK2RoK2VoK2NhcnJ5O3JldHVybiBoaT4+PjB9dmFyIHN1bTY0XzVfaGlfMT1zdW02NF81X2hpO2Z1bmN0aW9uIHN1bTY0XzVfbG8oYWgsYWwsYmgsYmwsY2gsY2wsZGgsZGwsZWgsZWwpe3ZhciBsbz1hbCtibCtjbCtkbCtlbDtyZXR1cm4gbG8+Pj4wfXZhciBzdW02NF81X2xvXzE9c3VtNjRfNV9sbztmdW5jdGlvbiByb3RyNjRfaGkoYWgsYWwsbnVtKXt2YXIgcj1hbDw8MzItbnVtfGFoPj4+bnVtO3JldHVybiByPj4+MH12YXIgcm90cjY0X2hpXzE9cm90cjY0X2hpO2Z1bmN0aW9uIHJvdHI2NF9sbyhhaCxhbCxudW0pe3ZhciByPWFoPDwzMi1udW18YWw+Pj5udW07cmV0dXJuIHI+Pj4wfXZhciByb3RyNjRfbG9fMT1yb3RyNjRfbG87ZnVuY3Rpb24gc2hyNjRfaGkoYWgsYWwsbnVtKXtyZXR1cm4gYWg+Pj5udW19dmFyIHNocjY0X2hpXzE9c2hyNjRfaGk7ZnVuY3Rpb24gc2hyNjRfbG8oYWgsYWwsbnVtKXt2YXIgcj1haDw8MzItbnVtfGFsPj4+bnVtO3JldHVybiByPj4+MH12YXIgc2hyNjRfbG9fMT1zaHI2NF9sbzt2YXIgdXRpbHM9e2luaGVyaXRzOmluaGVyaXRzXzEsdG9BcnJheTp0b0FycmF5XzEsdG9IZXg6dG9IZXhfMSxodG9ubDpodG9ubF8xLHRvSGV4MzI6dG9IZXgzMl8xLHplcm8yOnplcm8yXzEsemVybzg6emVybzhfMSxqb2luMzI6am9pbjMyXzEsc3BsaXQzMjpzcGxpdDMyXzEscm90cjMyOnJvdHIzMl8xLHJvdGwzMjpyb3RsMzJfMSxzdW0zMjpzdW0zMl8xLHN1bTMyXzM6c3VtMzJfM18xLHN1bTMyXzQ6c3VtMzJfNF8xLHN1bTMyXzU6c3VtMzJfNV8xLHN1bTY0OnN1bTY0XzEsc3VtNjRfaGk6c3VtNjRfaGlfMSxzdW02NF9sbzpzdW02NF9sb18xLHN1bTY0XzRfaGk6c3VtNjRfNF9oaV8xLHN1bTY0XzRfbG86c3VtNjRfNF9sb18xLHN1bTY0XzVfaGk6c3VtNjRfNV9oaV8xLHN1bTY0XzVfbG86c3VtNjRfNV9sb18xLHJvdHI2NF9oaTpyb3RyNjRfaGlfMSxyb3RyNjRfbG86cm90cjY0X2xvXzEsc2hyNjRfaGk6c2hyNjRfaGlfMSxzaHI2NF9sbzpzaHI2NF9sb18xfTtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBCbG9ja0hhc2goKXt0aGlzLnBlbmRpbmc9bnVsbDt0aGlzLnBlbmRpbmdUb3RhbD0wO3RoaXMuYmxvY2tTaXplPXRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO3RoaXMub3V0U2l6ZT10aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7dGhpcy5obWFjU3RyZW5ndGg9dGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7dGhpcy5wYWRMZW5ndGg9dGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGgvODt0aGlzLmVuZGlhbj1cImJpZ1wiO3RoaXMuX2RlbHRhOD10aGlzLmJsb2NrU2l6ZS84O3RoaXMuX2RlbHRhMzI9dGhpcy5ibG9ja1NpemUvMzJ9dmFyIEJsb2NrSGFzaF8xPUJsb2NrSGFzaDtCbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbiB1cGRhdGUobXNnLGVuYyl7bXNnPXV0aWxzLnRvQXJyYXkobXNnLGVuYyk7aWYoIXRoaXMucGVuZGluZyl0aGlzLnBlbmRpbmc9bXNnO2Vsc2UgdGhpcy5wZW5kaW5nPXRoaXMucGVuZGluZy5jb25jYXQobXNnKTt0aGlzLnBlbmRpbmdUb3RhbCs9bXNnLmxlbmd0aDtpZih0aGlzLnBlbmRpbmcubGVuZ3RoPj10aGlzLl9kZWx0YTgpe21zZz10aGlzLnBlbmRpbmc7dmFyIHI9bXNnLmxlbmd0aCV0aGlzLl9kZWx0YTg7dGhpcy5wZW5kaW5nPW1zZy5zbGljZShtc2cubGVuZ3RoLXIsbXNnLmxlbmd0aCk7aWYodGhpcy5wZW5kaW5nLmxlbmd0aD09PTApdGhpcy5wZW5kaW5nPW51bGw7bXNnPXV0aWxzLmpvaW4zMihtc2csMCxtc2cubGVuZ3RoLXIsdGhpcy5lbmRpYW4pO2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKz10aGlzLl9kZWx0YTMyKXRoaXMuX3VwZGF0ZShtc2csaSxpK3RoaXMuX2RlbHRhMzIpfXJldHVybiB0aGlzfTtCbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXt0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7bWluaW1hbGlzdGljQXNzZXJ0KHRoaXMucGVuZGluZz09PW51bGwpO3JldHVybiB0aGlzLl9kaWdlc3QoZW5jKX07QmxvY2tIYXNoLnByb3RvdHlwZS5fcGFkPWZ1bmN0aW9uIHBhZCgpe3ZhciBsZW49dGhpcy5wZW5kaW5nVG90YWw7dmFyIGJ5dGVzPXRoaXMuX2RlbHRhODt2YXIgaz1ieXRlcy0obGVuK3RoaXMucGFkTGVuZ3RoKSVieXRlczt2YXIgcmVzPW5ldyBBcnJheShrK3RoaXMucGFkTGVuZ3RoKTtyZXNbMF09MTI4O2Zvcih2YXIgaT0xO2k8aztpKyspcmVzW2ldPTA7bGVuPDw9MztpZih0aGlzLmVuZGlhbj09PVwiYmlnXCIpe2Zvcih2YXIgdD04O3Q8dGhpcy5wYWRMZW5ndGg7dCsrKXJlc1tpKytdPTA7cmVzW2krK109MDtyZXNbaSsrXT0wO3Jlc1tpKytdPTA7cmVzW2krK109MDtyZXNbaSsrXT1sZW4+Pj4yNCYyNTU7cmVzW2krK109bGVuPj4+MTYmMjU1O3Jlc1tpKytdPWxlbj4+PjgmMjU1O3Jlc1tpKytdPWxlbiYyNTV9ZWxzZXtyZXNbaSsrXT1sZW4mMjU1O3Jlc1tpKytdPWxlbj4+PjgmMjU1O3Jlc1tpKytdPWxlbj4+PjE2JjI1NTtyZXNbaSsrXT1sZW4+Pj4yNCYyNTU7cmVzW2krK109MDtyZXNbaSsrXT0wO3Jlc1tpKytdPTA7cmVzW2krK109MDtmb3IodD04O3Q8dGhpcy5wYWRMZW5ndGg7dCsrKXJlc1tpKytdPTB9cmV0dXJuIHJlc307dmFyIGNvbW1vbj17QmxvY2tIYXNoOkJsb2NrSGFzaF8xfTtcInVzZSBzdHJpY3RcIjt2YXIgcm90cjMyJDE9dXRpbHMucm90cjMyO2Z1bmN0aW9uIGZ0XzEocyx4LHkseil7aWYocz09PTApcmV0dXJuIGNoMzIoeCx5LHopO2lmKHM9PT0xfHxzPT09MylyZXR1cm4gcDMyKHgseSx6KTtpZihzPT09MilyZXR1cm4gbWFqMzIoeCx5LHopfXZhciBmdF8xXzE9ZnRfMTtmdW5jdGlvbiBjaDMyKHgseSx6KXtyZXR1cm4geCZ5Xn54Jnp9dmFyIGNoMzJfMT1jaDMyO2Z1bmN0aW9uIG1hajMyKHgseSx6KXtyZXR1cm4geCZ5Xngmel55Jnp9dmFyIG1hajMyXzE9bWFqMzI7ZnVuY3Rpb24gcDMyKHgseSx6KXtyZXR1cm4geF55Xnp9dmFyIHAzMl8xPXAzMjtmdW5jdGlvbiBzMF8yNTYoeCl7cmV0dXJuIHJvdHIzMiQxKHgsMilecm90cjMyJDEoeCwxMylecm90cjMyJDEoeCwyMil9dmFyIHMwXzI1Nl8xPXMwXzI1NjtmdW5jdGlvbiBzMV8yNTYoeCl7cmV0dXJuIHJvdHIzMiQxKHgsNilecm90cjMyJDEoeCwxMSlecm90cjMyJDEoeCwyNSl9dmFyIHMxXzI1Nl8xPXMxXzI1NjtmdW5jdGlvbiBnMF8yNTYoeCl7cmV0dXJuIHJvdHIzMiQxKHgsNylecm90cjMyJDEoeCwxOCleeD4+PjN9dmFyIGcwXzI1Nl8xPWcwXzI1NjtmdW5jdGlvbiBnMV8yNTYoeCl7cmV0dXJuIHJvdHIzMiQxKHgsMTcpXnJvdHIzMiQxKHgsMTkpXng+Pj4xMH12YXIgZzFfMjU2XzE9ZzFfMjU2O3ZhciBjb21tb24kMT17ZnRfMTpmdF8xXzEsY2gzMjpjaDMyXzEsbWFqMzI6bWFqMzJfMSxwMzI6cDMyXzEsczBfMjU2OnMwXzI1Nl8xLHMxXzI1NjpzMV8yNTZfMSxnMF8yNTY6ZzBfMjU2XzEsZzFfMjU2OmcxXzI1Nl8xfTtcInVzZSBzdHJpY3RcIjt2YXIgcm90bDMyJDE9dXRpbHMucm90bDMyO3ZhciBzdW0zMiQxPXV0aWxzLnN1bTMyO3ZhciBzdW0zMl81JDE9dXRpbHMuc3VtMzJfNTt2YXIgZnRfMSQxPWNvbW1vbiQxLmZ0XzE7dmFyIEJsb2NrSGFzaCQxPWNvbW1vbi5CbG9ja0hhc2g7dmFyIHNoYTFfSz1bMTUxODUwMDI0OSwxODU5Nzc1MzkzLDI0MDA5NTk3MDgsMzM5NTQ2OTc4Ml07ZnVuY3Rpb24gU0hBMSgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKXJldHVybiBuZXcgU0hBMTtCbG9ja0hhc2gkMS5jYWxsKHRoaXMpO3RoaXMuaD1bMTczMjU4NDE5Myw0MDIzMjMzNDE3LDI1NjIzODMxMDIsMjcxNzMzODc4LDMyODUzNzc1MjBdO3RoaXMuVz1uZXcgQXJyYXkoODApfXV0aWxzLmluaGVyaXRzKFNIQTEsQmxvY2tIYXNoJDEpO3ZhciBfMT1TSEExO1NIQTEuYmxvY2tTaXplPTUxMjtTSEExLm91dFNpemU9MTYwO1NIQTEuaG1hY1N0cmVuZ3RoPTgwO1NIQTEucGFkTGVuZ3RoPTY0O1NIQTEucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24gX3VwZGF0ZShtc2csc3RhcnQpe3ZhciBXPXRoaXMuVztmb3IodmFyIGk9MDtpPDE2O2krKylXW2ldPW1zZ1tzdGFydCtpXTtmb3IoO2k8Vy5sZW5ndGg7aSsrKVdbaV09cm90bDMyJDEoV1tpLTNdXldbaS04XV5XW2ktMTRdXldbaS0xNl0sMSk7dmFyIGE9dGhpcy5oWzBdO3ZhciBiPXRoaXMuaFsxXTt2YXIgYz10aGlzLmhbMl07dmFyIGQ9dGhpcy5oWzNdO3ZhciBlPXRoaXMuaFs0XTtmb3IoaT0wO2k8Vy5sZW5ndGg7aSsrKXt2YXIgcz1+fihpLzIwKTt2YXIgdD1zdW0zMl81JDEocm90bDMyJDEoYSw1KSxmdF8xJDEocyxiLGMsZCksZSxXW2ldLHNoYTFfS1tzXSk7ZT1kO2Q9YztjPXJvdGwzMiQxKGIsMzApO2I9YTthPXR9dGhpcy5oWzBdPXN1bTMyJDEodGhpcy5oWzBdLGEpO3RoaXMuaFsxXT1zdW0zMiQxKHRoaXMuaFsxXSxiKTt0aGlzLmhbMl09c3VtMzIkMSh0aGlzLmhbMl0sYyk7dGhpcy5oWzNdPXN1bTMyJDEodGhpcy5oWzNdLGQpO3RoaXMuaFs0XT1zdW0zMiQxKHRoaXMuaFs0XSxlKX07U0hBMS5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCxcImJpZ1wiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCxcImJpZ1wiKX07XCJ1c2Ugc3RyaWN0XCI7dmFyIHN1bTMyJDI9dXRpbHMuc3VtMzI7dmFyIHN1bTMyXzQkMT11dGlscy5zdW0zMl80O3ZhciBzdW0zMl81JDI9dXRpbHMuc3VtMzJfNTt2YXIgY2gzMiQxPWNvbW1vbiQxLmNoMzI7dmFyIG1hajMyJDE9Y29tbW9uJDEubWFqMzI7dmFyIHMwXzI1NiQxPWNvbW1vbiQxLnMwXzI1Njt2YXIgczFfMjU2JDE9Y29tbW9uJDEuczFfMjU2O3ZhciBnMF8yNTYkMT1jb21tb24kMS5nMF8yNTY7dmFyIGcxXzI1NiQxPWNvbW1vbiQxLmcxXzI1Njt2YXIgQmxvY2tIYXNoJDI9Y29tbW9uLkJsb2NrSGFzaDt2YXIgc2hhMjU2X0s9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07ZnVuY3Rpb24gU0hBMjU2KCl7aWYoISh0aGlzIGluc3RhbmNlb2YgU0hBMjU2KSlyZXR1cm4gbmV3IFNIQTI1NjtCbG9ja0hhc2gkMi5jYWxsKHRoaXMpO3RoaXMuaD1bMTc3OTAzMzcwMywzMTQ0MTM0Mjc3LDEwMTM5MDQyNDIsMjc3MzQ4MDc2MiwxMzU5ODkzMTE5LDI2MDA4MjI5MjQsNTI4NzM0NjM1LDE1NDE0NTkyMjVdO3RoaXMuaz1zaGEyNTZfSzt0aGlzLlc9bmV3IEFycmF5KDY0KX11dGlscy5pbmhlcml0cyhTSEEyNTYsQmxvY2tIYXNoJDIpO3ZhciBfMjU2PVNIQTI1NjtTSEEyNTYuYmxvY2tTaXplPTUxMjtTSEEyNTYub3V0U2l6ZT0yNTY7U0hBMjU2LmhtYWNTdHJlbmd0aD0xOTI7U0hBMjU2LnBhZExlbmd0aD02NDtTSEEyNTYucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24gX3VwZGF0ZShtc2csc3RhcnQpe3ZhciBXPXRoaXMuVztmb3IodmFyIGk9MDtpPDE2O2krKylXW2ldPW1zZ1tzdGFydCtpXTtmb3IoO2k8Vy5sZW5ndGg7aSsrKVdbaV09c3VtMzJfNCQxKGcxXzI1NiQxKFdbaS0yXSksV1tpLTddLGcwXzI1NiQxKFdbaS0xNV0pLFdbaS0xNl0pO3ZhciBhPXRoaXMuaFswXTt2YXIgYj10aGlzLmhbMV07dmFyIGM9dGhpcy5oWzJdO3ZhciBkPXRoaXMuaFszXTt2YXIgZT10aGlzLmhbNF07dmFyIGY9dGhpcy5oWzVdO3ZhciBnPXRoaXMuaFs2XTt2YXIgaD10aGlzLmhbN107bWluaW1hbGlzdGljQXNzZXJ0KHRoaXMuay5sZW5ndGg9PT1XLmxlbmd0aCk7Zm9yKGk9MDtpPFcubGVuZ3RoO2krKyl7dmFyIFQxPXN1bTMyXzUkMihoLHMxXzI1NiQxKGUpLGNoMzIkMShlLGYsZyksdGhpcy5rW2ldLFdbaV0pO3ZhciBUMj1zdW0zMiQyKHMwXzI1NiQxKGEpLG1hajMyJDEoYSxiLGMpKTtoPWc7Zz1mO2Y9ZTtlPXN1bTMyJDIoZCxUMSk7ZD1jO2M9YjtiPWE7YT1zdW0zMiQyKFQxLFQyKX10aGlzLmhbMF09c3VtMzIkMih0aGlzLmhbMF0sYSk7dGhpcy5oWzFdPXN1bTMyJDIodGhpcy5oWzFdLGIpO3RoaXMuaFsyXT1zdW0zMiQyKHRoaXMuaFsyXSxjKTt0aGlzLmhbM109c3VtMzIkMih0aGlzLmhbM10sZCk7dGhpcy5oWzRdPXN1bTMyJDIodGhpcy5oWzRdLGUpO3RoaXMuaFs1XT1zdW0zMiQyKHRoaXMuaFs1XSxmKTt0aGlzLmhbNl09c3VtMzIkMih0aGlzLmhbNl0sZyk7dGhpcy5oWzddPXN1bTMyJDIodGhpcy5oWzddLGgpfTtTSEEyNTYucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24gZGlnZXN0KGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsXCJiaWdcIik7ZWxzZSByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsXCJiaWdcIil9O1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIFNIQTIyNCgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpcmV0dXJuIG5ldyBTSEEyMjQ7XzI1Ni5jYWxsKHRoaXMpO3RoaXMuaD1bMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF19dXRpbHMuaW5oZXJpdHMoU0hBMjI0LF8yNTYpO3ZhciBfMjI0PVNIQTIyNDtTSEEyMjQuYmxvY2tTaXplPTUxMjtTSEEyMjQub3V0U2l6ZT0yMjQ7U0hBMjI0LmhtYWNTdHJlbmd0aD0xOTI7U0hBMjI0LnBhZExlbmd0aD02NDtTSEEyMjQucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24gZGlnZXN0KGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCw3KSxcImJpZ1wiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLDcpLFwiYmlnXCIpfTtcInVzZSBzdHJpY3RcIjt2YXIgcm90cjY0X2hpJDE9dXRpbHMucm90cjY0X2hpO3ZhciByb3RyNjRfbG8kMT11dGlscy5yb3RyNjRfbG87dmFyIHNocjY0X2hpJDE9dXRpbHMuc2hyNjRfaGk7dmFyIHNocjY0X2xvJDE9dXRpbHMuc2hyNjRfbG87dmFyIHN1bTY0JDE9dXRpbHMuc3VtNjQ7dmFyIHN1bTY0X2hpJDE9dXRpbHMuc3VtNjRfaGk7dmFyIHN1bTY0X2xvJDE9dXRpbHMuc3VtNjRfbG87dmFyIHN1bTY0XzRfaGkkMT11dGlscy5zdW02NF80X2hpO3ZhciBzdW02NF80X2xvJDE9dXRpbHMuc3VtNjRfNF9sbzt2YXIgc3VtNjRfNV9oaSQxPXV0aWxzLnN1bTY0XzVfaGk7dmFyIHN1bTY0XzVfbG8kMT11dGlscy5zdW02NF81X2xvO3ZhciBCbG9ja0hhc2gkMz1jb21tb24uQmxvY2tIYXNoO3ZhciBzaGE1MTJfSz1bMTExNjM1MjQwOCwzNjA5NzY3NDU4LDE4OTk0NDc0NDEsNjAyODkxNzI1LDMwNDkzMjM0NzEsMzk2NDQ4NDM5OSwzOTIxMDA5NTczLDIxNzMyOTU1NDgsOTYxOTg3MTYzLDQwODE2Mjg0NzIsMTUwODk3MDk5MywzMDUzODM0MjY1LDI0NTM2MzU3NDgsMjkzNzY3MTU3OSwyODcwNzYzMjIxLDM2NjQ2MDk1NjAsMzYyNDM4MTA4MCwyNzM0ODgzMzk0LDMxMDU5ODQwMSwxMTY0OTk2NTQyLDYwNzIyNTI3OCwxMzIzNjEwNzY0LDE0MjY4ODE5ODcsMzU5MDMwNDk5NCwxOTI1MDc4Mzg4LDQwNjgxODIzODMsMjE2MjA3ODIwNiw5OTEzMzYxMTMsMjYxNDg4ODEwMyw2MzM4MDMzMTcsMzI0ODIyMjU4MCwzNDc5Nzc0ODY4LDM4MzUzOTA0MDEsMjY2NjYxMzQ1OCw0MDIyMjI0Nzc0LDk0NDcxMTEzOSwyNjQzNDcwNzgsMjM0MTI2Mjc3Myw2MDQ4MDc2MjgsMjAwNzgwMDkzMyw3NzAyNTU5ODMsMTQ5NTk5MDkwMSwxMjQ5MTUwMTIyLDE4NTY0MzEyMzUsMTU1NTA4MTY5MiwzMTc1MjE4MTMyLDE5OTYwNjQ5ODYsMjE5ODk1MDgzNywyNTU0MjIwODgyLDM5OTk3MTkzMzksMjgyMTgzNDM0OSw3NjY3ODQwMTYsMjk1Mjk5NjgwOCwyNTY2NTk0ODc5LDMyMTAzMTM2NzEsMzIwMzMzNzk1NiwzMzM2NTcxODkxLDEwMzQ0NTcwMjYsMzU4NDUyODcxMSwyNDY2OTQ4OTAxLDExMzkyNjk5MywzNzU4MzI2MzgzLDMzODI0MTg5NSwxNjg3MTc5MzYsNjY2MzA3MjA1LDExODgxNzk5NjQsNzczNTI5OTEyLDE1NDYwNDU3MzQsMTI5NDc1NzM3MiwxNTIyODA1NDg1LDEzOTYxODIyOTEsMjY0MzgzMzgyMywxNjk1MTgzNzAwLDIzNDM1MjczOTAsMTk4NjY2MTA1MSwxMDE0NDc3NDgwLDIxNzcwMjYzNTAsMTIwNjc1OTE0MiwyNDU2OTU2MDM3LDM0NDA3NzYyNywyNzMwNDg1OTIxLDEyOTA4NjM0NjAsMjgyMDMwMjQxMSwzMTU4NDU0MjczLDMyNTk3MzA4MDAsMzUwNTk1MjY1NywzMzQ1NzY0NzcxLDEwNjIxNzAwOCwzNTE2MDY1ODE3LDM2MDYwMDgzNDQsMzYwMDM1MjgwNCwxNDMyNzI1Nzc2LDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCwyNzU0MjMzNDQsODUxMTY5NzIwLDQzMDIyNzczNCwzMTAwODIzNzUyLDUwNjk0ODYxNiwxMzYzMjU4MTk1LDY1OTA2MDU1NiwzNzUwNjg1NTkzLDg4Mzk5Nzg3NywzNzg1MDUwMjgwLDk1ODEzOTU3MSwzMzE4MzA3NDI3LDEzMjI4MjIyMTgsMzgxMjcyMzQwMywxNTM3MDAyMDYzLDIwMDMwMzQ5OTUsMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5LDE5NTU1NjIyMjIsMTU3NTk5MDAxMiwyMDI0MTA0ODE1LDExMjU1OTI5MjgsMjIyNzczMDQ1MiwyNzE2OTA0MzA2LDIzNjE4NTI0MjQsNDQyNzc2MDQ0LDI0Mjg0MzY0NzQsNTkzNjk4MzQ0LDI3NTY3MzQxODcsMzczMzExMDI0OSwzMjA0MDMxNDc5LDI5OTkzNTE1NzMsMzMyOTMyNTI5OCwzODE1OTIwNDI3LDMzOTE1Njk2MTQsMzkyODM4MzkwMCwzNTE1MjY3MjcxLDU2NjI4MDcxMSwzOTQwMTg3NjA2LDM0NTQwNjk1MzQsNDExODYzMDI3MSw0MDAwMjM5OTkyLDExNjQxODQ3NCwxOTE0MTM4NTU0LDE3NDI5MjQyMSwyNzMxMDU1MjcwLDI4OTM4MDM1NiwzMjAzOTkzMDA2LDQ2MDM5MzI2OSwzMjA2MjAzMTUsNjg1NDcxNzMzLDU4NzQ5NjgzNiw4NTIxNDI5NzEsMTA4Njc5Mjg1MSwxMDE3MDM2Mjk4LDM2NTU0MzEwMCwxMTI2MDAwNTgwLDI2MTgyOTc2NzYsMTI4ODAzMzQ3MCwzNDA5ODU1MTU4LDE1MDE1MDU5NDgsNDIzNDUwOTg2NiwxNjA3MTY3OTE1LDk4NzE2NzQ2OCwxODE2NDAyMzE2LDEyNDYxODk1OTFdO2Z1bmN0aW9uIFNIQTUxMigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpcmV0dXJuIG5ldyBTSEE1MTI7QmxvY2tIYXNoJDMuY2FsbCh0aGlzKTt0aGlzLmg9WzE3NzkwMzM3MDMsNDA4OTIzNTcyMCwzMTQ0MTM0Mjc3LDIyMjc4NzM1OTUsMTAxMzkwNDI0Miw0MjcxMTc1NzIzLDI3NzM0ODA3NjIsMTU5NTc1MDEyOSwxMzU5ODkzMTE5LDI5MTc1NjUxMzcsMjYwMDgyMjkyNCw3MjU1MTExOTksNTI4NzM0NjM1LDQyMTUzODk1NDcsMTU0MTQ1OTIyNSwzMjcwMzMyMDldO3RoaXMuaz1zaGE1MTJfSzt0aGlzLlc9bmV3IEFycmF5KDE2MCl9dXRpbHMuaW5oZXJpdHMoU0hBNTEyLEJsb2NrSGFzaCQzKTt2YXIgXzUxMj1TSEE1MTI7U0hBNTEyLmJsb2NrU2l6ZT0xMDI0O1NIQTUxMi5vdXRTaXplPTUxMjtTSEE1MTIuaG1hY1N0cmVuZ3RoPTE5MjtTSEE1MTIucGFkTGVuZ3RoPTEyODtTSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2s9ZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csc3RhcnQpe3ZhciBXPXRoaXMuVztmb3IodmFyIGk9MDtpPDMyO2krKylXW2ldPW1zZ1tzdGFydCtpXTtmb3IoO2k8Vy5sZW5ndGg7aSs9Mil7dmFyIGMwX2hpPWcxXzUxMl9oaShXW2ktNF0sV1tpLTNdKTt2YXIgYzBfbG89ZzFfNTEyX2xvKFdbaS00XSxXW2ktM10pO3ZhciBjMV9oaT1XW2ktMTRdO3ZhciBjMV9sbz1XW2ktMTNdO3ZhciBjMl9oaT1nMF81MTJfaGkoV1tpLTMwXSxXW2ktMjldKTt2YXIgYzJfbG89ZzBfNTEyX2xvKFdbaS0zMF0sV1tpLTI5XSk7dmFyIGMzX2hpPVdbaS0zMl07dmFyIGMzX2xvPVdbaS0zMV07V1tpXT1zdW02NF80X2hpJDEoYzBfaGksYzBfbG8sYzFfaGksYzFfbG8sYzJfaGksYzJfbG8sYzNfaGksYzNfbG8pO1dbaSsxXT1zdW02NF80X2xvJDEoYzBfaGksYzBfbG8sYzFfaGksYzFfbG8sYzJfaGksYzJfbG8sYzNfaGksYzNfbG8pfX07U0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uIF91cGRhdGUobXNnLHN0YXJ0KXt0aGlzLl9wcmVwYXJlQmxvY2sobXNnLHN0YXJ0KTt2YXIgVz10aGlzLlc7dmFyIGFoPXRoaXMuaFswXTt2YXIgYWw9dGhpcy5oWzFdO3ZhciBiaD10aGlzLmhbMl07dmFyIGJsPXRoaXMuaFszXTt2YXIgY2g9dGhpcy5oWzRdO3ZhciBjbD10aGlzLmhbNV07dmFyIGRoPXRoaXMuaFs2XTt2YXIgZGw9dGhpcy5oWzddO3ZhciBlaD10aGlzLmhbOF07dmFyIGVsPXRoaXMuaFs5XTt2YXIgZmg9dGhpcy5oWzEwXTt2YXIgZmw9dGhpcy5oWzExXTt2YXIgZ2g9dGhpcy5oWzEyXTt2YXIgZ2w9dGhpcy5oWzEzXTt2YXIgaGg9dGhpcy5oWzE0XTt2YXIgaGw9dGhpcy5oWzE1XTttaW5pbWFsaXN0aWNBc3NlcnQodGhpcy5rLmxlbmd0aD09PVcubGVuZ3RoKTtmb3IodmFyIGk9MDtpPFcubGVuZ3RoO2krPTIpe3ZhciBjMF9oaT1oaDt2YXIgYzBfbG89aGw7dmFyIGMxX2hpPXMxXzUxMl9oaShlaCxlbCk7dmFyIGMxX2xvPXMxXzUxMl9sbyhlaCxlbCk7dmFyIGMyX2hpPWNoNjRfaGkoZWgsZWwsZmgsZmwsZ2gsZ2wpO3ZhciBjMl9sbz1jaDY0X2xvKGVoLGVsLGZoLGZsLGdoLGdsKTt2YXIgYzNfaGk9dGhpcy5rW2ldO3ZhciBjM19sbz10aGlzLmtbaSsxXTt2YXIgYzRfaGk9V1tpXTt2YXIgYzRfbG89V1tpKzFdO3ZhciBUMV9oaT1zdW02NF81X2hpJDEoYzBfaGksYzBfbG8sYzFfaGksYzFfbG8sYzJfaGksYzJfbG8sYzNfaGksYzNfbG8sYzRfaGksYzRfbG8pO3ZhciBUMV9sbz1zdW02NF81X2xvJDEoYzBfaGksYzBfbG8sYzFfaGksYzFfbG8sYzJfaGksYzJfbG8sYzNfaGksYzNfbG8sYzRfaGksYzRfbG8pO2MwX2hpPXMwXzUxMl9oaShhaCxhbCk7YzBfbG89czBfNTEyX2xvKGFoLGFsKTtjMV9oaT1tYWo2NF9oaShhaCxhbCxiaCxibCxjaCxjbCk7YzFfbG89bWFqNjRfbG8oYWgsYWwsYmgsYmwsY2gsY2wpO3ZhciBUMl9oaT1zdW02NF9oaSQxKGMwX2hpLGMwX2xvLGMxX2hpLGMxX2xvKTt2YXIgVDJfbG89c3VtNjRfbG8kMShjMF9oaSxjMF9sbyxjMV9oaSxjMV9sbyk7aGg9Z2g7aGw9Z2w7Z2g9Zmg7Z2w9Zmw7Zmg9ZWg7Zmw9ZWw7ZWg9c3VtNjRfaGkkMShkaCxkbCxUMV9oaSxUMV9sbyk7ZWw9c3VtNjRfbG8kMShkbCxkbCxUMV9oaSxUMV9sbyk7ZGg9Y2g7ZGw9Y2w7Y2g9Ymg7Y2w9Ymw7Ymg9YWg7Ymw9YWw7YWg9c3VtNjRfaGkkMShUMV9oaSxUMV9sbyxUMl9oaSxUMl9sbyk7YWw9c3VtNjRfbG8kMShUMV9oaSxUMV9sbyxUMl9oaSxUMl9sbyl9c3VtNjQkMSh0aGlzLmgsMCxhaCxhbCk7c3VtNjQkMSh0aGlzLmgsMixiaCxibCk7c3VtNjQkMSh0aGlzLmgsNCxjaCxjbCk7c3VtNjQkMSh0aGlzLmgsNixkaCxkbCk7c3VtNjQkMSh0aGlzLmgsOCxlaCxlbCk7c3VtNjQkMSh0aGlzLmgsMTAsZmgsZmwpO3N1bTY0JDEodGhpcy5oLDEyLGdoLGdsKTtzdW02NCQxKHRoaXMuaCwxNCxoaCxobCl9O1NIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdD1mdW5jdGlvbiBkaWdlc3QoZW5jKXtpZihlbmM9PT1cImhleFwiKXJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCxcImJpZ1wiKTtlbHNlIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCxcImJpZ1wiKX07ZnVuY3Rpb24gY2g2NF9oaSh4aCx4bCx5aCx5bCx6aCl7dmFyIHI9eGgmeWhefnhoJnpoO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIGNoNjRfbG8oeGgseGwseWgseWwsemgsemwpe3ZhciByPXhsJnlsXn54bCZ6bDtpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBtYWo2NF9oaSh4aCx4bCx5aCx5bCx6aCl7dmFyIHI9eGgmeWheeGgmemheeWgmemg7aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gbWFqNjRfbG8oeGgseGwseWgseWwsemgsemwpe3ZhciByPXhsJnlsXnhsJnpsXnlsJnpsO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIHMwXzUxMl9oaSh4aCx4bCl7dmFyIGMwX2hpPXJvdHI2NF9oaSQxKHhoLHhsLDI4KTt2YXIgYzFfaGk9cm90cjY0X2hpJDEoeGwseGgsMik7dmFyIGMyX2hpPXJvdHI2NF9oaSQxKHhsLHhoLDcpO3ZhciByPWMwX2hpXmMxX2hpXmMyX2hpO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIHMwXzUxMl9sbyh4aCx4bCl7dmFyIGMwX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDI4KTt2YXIgYzFfbG89cm90cjY0X2xvJDEoeGwseGgsMik7dmFyIGMyX2xvPXJvdHI2NF9sbyQxKHhsLHhoLDcpO3ZhciByPWMwX2xvXmMxX2xvXmMyX2xvO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIHMxXzUxMl9oaSh4aCx4bCl7dmFyIGMwX2hpPXJvdHI2NF9oaSQxKHhoLHhsLDE0KTt2YXIgYzFfaGk9cm90cjY0X2hpJDEoeGgseGwsMTgpO3ZhciBjMl9oaT1yb3RyNjRfaGkkMSh4bCx4aCw5KTt2YXIgcj1jMF9oaV5jMV9oaV5jMl9oaTtpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBzMV81MTJfbG8oeGgseGwpe3ZhciBjMF9sbz1yb3RyNjRfbG8kMSh4aCx4bCwxNCk7dmFyIGMxX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDE4KTt2YXIgYzJfbG89cm90cjY0X2xvJDEoeGwseGgsOSk7dmFyIHI9YzBfbG9eYzFfbG9eYzJfbG87aWYocjwwKXIrPTQyOTQ5NjcyOTY7cmV0dXJuIHJ9ZnVuY3Rpb24gZzBfNTEyX2hpKHhoLHhsKXt2YXIgYzBfaGk9cm90cjY0X2hpJDEoeGgseGwsMSk7dmFyIGMxX2hpPXJvdHI2NF9oaSQxKHhoLHhsLDgpO3ZhciBjMl9oaT1zaHI2NF9oaSQxKHhoLHhsLDcpO3ZhciByPWMwX2hpXmMxX2hpXmMyX2hpO2lmKHI8MClyKz00Mjk0OTY3Mjk2O3JldHVybiByfWZ1bmN0aW9uIGcwXzUxMl9sbyh4aCx4bCl7dmFyIGMwX2xvPXJvdHI2NF9sbyQxKHhoLHhsLDEpO3ZhciBjMV9sbz1yb3RyNjRfbG8kMSh4aCx4bCw4KTt2YXIgYzJfbG89c2hyNjRfbG8kMSh4aCx4bCw3KTt2YXIgcj1jMF9sb15jMV9sb15jMl9sbztpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBnMV81MTJfaGkoeGgseGwpe3ZhciBjMF9oaT1yb3RyNjRfaGkkMSh4aCx4bCwxOSk7dmFyIGMxX2hpPXJvdHI2NF9oaSQxKHhsLHhoLDI5KTt2YXIgYzJfaGk9c2hyNjRfaGkkMSh4aCx4bCw2KTt2YXIgcj1jMF9oaV5jMV9oaV5jMl9oaTtpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1mdW5jdGlvbiBnMV81MTJfbG8oeGgseGwpe3ZhciBjMF9sbz1yb3RyNjRfbG8kMSh4aCx4bCwxOSk7dmFyIGMxX2xvPXJvdHI2NF9sbyQxKHhsLHhoLDI5KTt2YXIgYzJfbG89c2hyNjRfbG8kMSh4aCx4bCw2KTt2YXIgcj1jMF9sb15jMV9sb15jMl9sbztpZihyPDApcis9NDI5NDk2NzI5NjtyZXR1cm4gcn1cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBTSEEzODQoKXtpZighKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKXJldHVybiBuZXcgU0hBMzg0O181MTIuY2FsbCh0aGlzKTt0aGlzLmg9WzM0MTgwNzAzNjUsMzIzODM3MTAzMiwxNjU0MjcwMjUwLDkxNDE1MDY2MywyNDM4NTI5MzcwLDgxMjcwMjk5OSwzNTU0NjIzNjAsNDE0NDkxMjY5NywxNzMxNDA1NDE1LDQyOTA3NzU4NTcsMjM5NDE4MDIzMSwxNzUwNjAzMDI1LDM2NzUwMDg1MjUsMTY5NDA3NjgzOSwxMjAzMDYyODEzLDMyMDQwNzU0MjhdfXV0aWxzLmluaGVyaXRzKFNIQTM4NCxfNTEyKTt2YXIgXzM4ND1TSEEzODQ7U0hBMzg0LmJsb2NrU2l6ZT0xMDI0O1NIQTM4NC5vdXRTaXplPTM4NDtTSEEzODQuaG1hY1N0cmVuZ3RoPTE5MjtTSEEzODQucGFkTGVuZ3RoPTEyODtTSEEzODQucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24gZGlnZXN0KGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwxMiksXCJiaWdcIik7ZWxzZSByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwxMiksXCJiaWdcIil9O1widXNlIHN0cmljdFwiO3ZhciBzaGExPV8xO3ZhciBzaGEyMjQ9XzIyNDt2YXIgc2hhMjU2PV8yNTY7dmFyIHNoYTM4ND1fMzg0O3ZhciBzaGE1MTI9XzUxMjt2YXIgc2hhPXtzaGExOnNoYTEsc2hhMjI0OnNoYTIyNCxzaGEyNTY6c2hhMjU2LHNoYTM4NDpzaGEzODQsc2hhNTEyOnNoYTUxMn07XCJ1c2Ugc3RyaWN0XCI7dmFyIHJvdGwzMiQyPXV0aWxzLnJvdGwzMjt2YXIgc3VtMzIkMz11dGlscy5zdW0zMjt2YXIgc3VtMzJfMyQxPXV0aWxzLnN1bTMyXzM7dmFyIHN1bTMyXzQkMj11dGlscy5zdW0zMl80O3ZhciBCbG9ja0hhc2gkND1jb21tb24uQmxvY2tIYXNoO2Z1bmN0aW9uIFJJUEVNRDE2MCgpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpcmV0dXJuIG5ldyBSSVBFTUQxNjA7QmxvY2tIYXNoJDQuY2FsbCh0aGlzKTt0aGlzLmg9WzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXTt0aGlzLmVuZGlhbj1cImxpdHRsZVwifXV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCxCbG9ja0hhc2gkNCk7dmFyIHJpcGVtZDE2MD1SSVBFTUQxNjA7UklQRU1EMTYwLmJsb2NrU2l6ZT01MTI7UklQRU1EMTYwLm91dFNpemU9MTYwO1JJUEVNRDE2MC5obWFjU3RyZW5ndGg9MTkyO1JJUEVNRDE2MC5wYWRMZW5ndGg9NjQ7UklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlPWZ1bmN0aW9uIHVwZGF0ZShtc2csc3RhcnQpe3ZhciBBPXRoaXMuaFswXTt2YXIgQj10aGlzLmhbMV07dmFyIEM9dGhpcy5oWzJdO3ZhciBEPXRoaXMuaFszXTt2YXIgRT10aGlzLmhbNF07dmFyIEFoPUE7dmFyIEJoPUI7dmFyIENoPUM7dmFyIERoPUQ7dmFyIEVoPUU7Zm9yKHZhciBqPTA7ajw4MDtqKyspe3ZhciBUPXN1bTMyJDMocm90bDMyJDIoc3VtMzJfNCQyKEEsZihqLEIsQyxEKSxtc2dbcltqXStzdGFydF0sSyhqKSksc1tqXSksRSk7QT1FO0U9RDtEPXJvdGwzMiQyKEMsMTApO0M9QjtCPVQ7VD1zdW0zMiQzKHJvdGwzMiQyKHN1bTMyXzQkMihBaCxmKDc5LWosQmgsQ2gsRGgpLG1zZ1tyaFtqXStzdGFydF0sS2goaikpLHNoW2pdKSxFaCk7QWg9RWg7RWg9RGg7RGg9cm90bDMyJDIoQ2gsMTApO0NoPUJoO0JoPVR9VD1zdW0zMl8zJDEodGhpcy5oWzFdLEMsRGgpO3RoaXMuaFsxXT1zdW0zMl8zJDEodGhpcy5oWzJdLEQsRWgpO3RoaXMuaFsyXT1zdW0zMl8zJDEodGhpcy5oWzNdLEUsQWgpO3RoaXMuaFszXT1zdW0zMl8zJDEodGhpcy5oWzRdLEEsQmgpO3RoaXMuaFs0XT1zdW0zMl8zJDEodGhpcy5oWzBdLEIsQ2gpO3RoaXMuaFswXT1UfTtSSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3Q9ZnVuY3Rpb24gZGlnZXN0KGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsXCJsaXR0bGVcIik7ZWxzZSByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsXCJsaXR0bGVcIil9O2Z1bmN0aW9uIGYoaix4LHkseil7aWYoajw9MTUpcmV0dXJuIHheeV56O2Vsc2UgaWYoajw9MzEpcmV0dXJuIHgmeXx+eCZ6O2Vsc2UgaWYoajw9NDcpcmV0dXJuKHh8fnkpXno7ZWxzZSBpZihqPD02MylyZXR1cm4geCZ6fHkmfno7ZWxzZSByZXR1cm4geF4oeXx+eil9ZnVuY3Rpb24gSyhqKXtpZihqPD0xNSlyZXR1cm4gMDtlbHNlIGlmKGo8PTMxKXJldHVybiAxNTE4NTAwMjQ5O2Vsc2UgaWYoajw9NDcpcmV0dXJuIDE4NTk3NzUzOTM7ZWxzZSBpZihqPD02MylyZXR1cm4gMjQwMDk1OTcwODtlbHNlIHJldHVybiAyODQwODUzODM4fWZ1bmN0aW9uIEtoKGope2lmKGo8PTE1KXJldHVybiAxMzUyODI5OTI2O2Vsc2UgaWYoajw9MzEpcmV0dXJuIDE1NDg2MDM2ODQ7ZWxzZSBpZihqPD00NylyZXR1cm4gMTgzNjA3MjY5MTtlbHNlIGlmKGo8PTYzKXJldHVybiAyMDUzOTk0MjE3O2Vsc2UgcmV0dXJuIDB9dmFyIHI9WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsNyw0LDEzLDEsMTAsNiwxNSwzLDEyLDAsOSw1LDIsMTQsMTEsOCwzLDEwLDE0LDQsOSwxNSw4LDEsMiw3LDAsNiwxMywxMSw1LDEyLDEsOSwxMSwxMCwwLDgsMTIsNCwxMywzLDcsMTUsMTQsNSw2LDIsNCwwLDUsOSw3LDEyLDIsMTAsMTQsMSwzLDgsMTEsNiwxNSwxM107dmFyIHJoPVs1LDE0LDcsMCw5LDIsMTEsNCwxMyw2LDE1LDgsMSwxMCwzLDEyLDYsMTEsMyw3LDAsMTMsNSwxMCwxNCwxNSw4LDEyLDQsOSwxLDIsMTUsNSwxLDMsNywxNCw2LDksMTEsOCwxMiwyLDEwLDAsNCwxMyw4LDYsNCwxLDMsMTEsMTUsMCw1LDEyLDIsMTMsOSw3LDEwLDE0LDEyLDE1LDEwLDQsMSw1LDgsNyw2LDIsMTMsMTQsMCwzLDksMTFdO3ZhciBzPVsxMSwxNCwxNSwxMiw1LDgsNyw5LDExLDEzLDE0LDE1LDYsNyw5LDgsNyw2LDgsMTMsMTEsOSw3LDE1LDcsMTIsMTUsOSwxMSw3LDEzLDEyLDExLDEzLDYsNywxNCw5LDEzLDE1LDE0LDgsMTMsNiw1LDEyLDcsNSwxMSwxMiwxNCwxNSwxNCwxNSw5LDgsOSwxNCw1LDYsOCw2LDUsMTIsOSwxNSw1LDExLDYsOCwxMywxMiw1LDEyLDEzLDE0LDExLDgsNSw2XTt2YXIgc2g9WzgsOSw5LDExLDEzLDE1LDE1LDUsNyw3LDgsMTEsMTQsMTQsMTIsNiw5LDEzLDE1LDcsMTIsOCw5LDExLDcsNywxMiw3LDYsMTUsMTMsMTEsOSw3LDE1LDExLDgsNiw2LDE0LDEyLDEzLDUsMTQsMTMsMTMsNyw1LDE1LDUsOCwxMSwxNCwxNCw2LDE0LDYsOSwxMiw5LDEyLDUsMTUsOCw4LDUsMTIsOSwxMiw1LDE0LDYsOCwxMyw2LDUsMTUsMTMsMTEsMTFdO3ZhciByaXBlbWQ9e3JpcGVtZDE2MDpyaXBlbWQxNjB9O1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIEhtYWMoaGFzaCxrZXksZW5jKXtpZighKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlyZXR1cm4gbmV3IEhtYWMoaGFzaCxrZXksZW5jKTt0aGlzLkhhc2g9aGFzaDt0aGlzLmJsb2NrU2l6ZT1oYXNoLmJsb2NrU2l6ZS84O3RoaXMub3V0U2l6ZT1oYXNoLm91dFNpemUvODt0aGlzLmlubmVyPW51bGw7dGhpcy5vdXRlcj1udWxsO3RoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksZW5jKSl9dmFyIGhtYWM9SG1hYztIbWFjLnByb3RvdHlwZS5faW5pdD1mdW5jdGlvbiBpbml0KGtleSl7aWYoa2V5Lmxlbmd0aD50aGlzLmJsb2NrU2l6ZSlrZXk9KG5ldyB0aGlzLkhhc2gpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO21pbmltYWxpc3RpY0Fzc2VydChrZXkubGVuZ3RoPD10aGlzLmJsb2NrU2l6ZSk7Zm9yKHZhciBpPWtleS5sZW5ndGg7aTx0aGlzLmJsb2NrU2l6ZTtpKyspa2V5LnB1c2goMCk7Zm9yKGk9MDtpPGtleS5sZW5ndGg7aSsrKWtleVtpXV49NTQ7dGhpcy5pbm5lcj0obmV3IHRoaXMuSGFzaCkudXBkYXRlKGtleSk7Zm9yKGk9MDtpPGtleS5sZW5ndGg7aSsrKWtleVtpXV49MTA2O3RoaXMub3V0ZXI9KG5ldyB0aGlzLkhhc2gpLnVwZGF0ZShrZXkpfTtIbWFjLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24gdXBkYXRlKG1zZyxlbmMpe3RoaXMuaW5uZXIudXBkYXRlKG1zZyxlbmMpO3JldHVybiB0aGlzfTtIbWFjLnByb3RvdHlwZS5kaWdlc3Q9ZnVuY3Rpb24gZGlnZXN0KGVuYyl7dGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7cmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyl9O3ZhciBoYXNoXzE9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe3ZhciBoYXNoPWV4cG9ydHM7aGFzaC51dGlscz11dGlscztoYXNoLmNvbW1vbj1jb21tb247aGFzaC5zaGE9c2hhO2hhc2gucmlwZW1kPXJpcGVtZDtoYXNoLmhtYWM9aG1hYztoYXNoLnNoYTE9aGFzaC5zaGEuc2hhMTtoYXNoLnNoYTI1Nj1oYXNoLnNoYS5zaGEyNTY7aGFzaC5zaGEyMjQ9aGFzaC5zaGEuc2hhMjI0O2hhc2guc2hhMzg0PWhhc2guc2hhLnNoYTM4NDtoYXNoLnNoYTUxMj1oYXNoLnNoYS5zaGE1MTI7aGFzaC5yaXBlbWQxNjA9aGFzaC5yaXBlbWQucmlwZW1kMTYwfSk7dmFyIGNvbW1vbmpzR2xvYmFsJDE9dHlwZW9mIGdsb2JhbFRoaXMhPT1cInVuZGVmaW5lZFwiP2dsb2JhbFRoaXM6dHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp7fTtmdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyQxKHgpe3JldHVybiB4JiZ4Ll9fZXNNb2R1bGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LFwiZGVmYXVsdFwiKT94W1wiZGVmYXVsdFwiXTp4fWZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlJDEoZm4sYmFzZWRpcixtb2R1bGUpe3JldHVybiBtb2R1bGU9e3BhdGg6YmFzZWRpcixleHBvcnRzOnt9LHJlcXVpcmU6ZnVuY3Rpb24ocGF0aCxiYXNlKXtyZXR1cm4gY29tbW9uanNSZXF1aXJlJDEocGF0aCxiYXNlPT09dW5kZWZpbmVkfHxiYXNlPT09bnVsbD9tb2R1bGUucGF0aDpiYXNlKX19LGZuKG1vZHVsZSxtb2R1bGUuZXhwb3J0cyksbW9kdWxlLmV4cG9ydHN9ZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21OYW1lc3BhY2VJZlByZXNlbnQkMShuKXtyZXR1cm4gbiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJkZWZhdWx0XCIpP25bXCJkZWZhdWx0XCJdOm59ZnVuY3Rpb24gZ2V0RGVmYXVsdEV4cG9ydEZyb21OYW1lc3BhY2VJZk5vdE5hbWVkJDEobil7cmV0dXJuIG4mJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiZGVmYXVsdFwiKSYmT2JqZWN0LmtleXMobikubGVuZ3RoPT09MT9uW1wiZGVmYXVsdFwiXTpufWZ1bmN0aW9uIGdldEF1Z21lbnRlZE5hbWVzcGFjZSQxKG4pe2lmKG4uX19lc01vZHVsZSlyZXR1cm4gbjt2YXIgYT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKGspe3ZhciBkPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobixrKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxrLGQuZ2V0P2Q6e2VudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbltrXX19KX0pO3JldHVybiBhfWZ1bmN0aW9uIGNvbW1vbmpzUmVxdWlyZSQxKCl7dGhyb3cgbmV3IEVycm9yKFwiRHluYW1pYyByZXF1aXJlcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIil9dmFyIG1pbmltYWxpc3RpY0Fzc2VydCQxPWFzc2VydCQxO2Z1bmN0aW9uIGFzc2VydCQxKHZhbCxtc2cpe2lmKCF2YWwpdGhyb3cgbmV3IEVycm9yKG1zZ3x8XCJBc3NlcnRpb24gZmFpbGVkXCIpfWFzc2VydCQxLmVxdWFsPWZ1bmN0aW9uIGFzc2VydEVxdWFsKGwscixtc2cpe2lmKGwhPXIpdGhyb3cgbmV3IEVycm9yKG1zZ3x8XCJBc3NlcnRpb24gZmFpbGVkOiBcIitsK1wiICE9IFwiK3IpfTt2YXIgdXRpbHNfMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgdXRpbHM9ZXhwb3J0cztmdW5jdGlvbiB0b0FycmF5KG1zZyxlbmMpe2lmKEFycmF5LmlzQXJyYXkobXNnKSlyZXR1cm4gbXNnLnNsaWNlKCk7aWYoIW1zZylyZXR1cm5bXTt2YXIgcmVzPVtdO2lmKHR5cGVvZiBtc2chPT1cInN0cmluZ1wiKXtmb3IodmFyIGk9MDtpPG1zZy5sZW5ndGg7aSsrKXJlc1tpXT1tc2dbaV18MDtyZXR1cm4gcmVzfWlmKGVuYz09PVwiaGV4XCIpe21zZz1tc2cucmVwbGFjZSgvW15hLXowLTldKy9naSxcIlwiKTtpZihtc2cubGVuZ3RoJTIhPT0wKW1zZz1cIjBcIittc2c7Zm9yKHZhciBpPTA7aTxtc2cubGVuZ3RoO2krPTIpcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldK21zZ1tpKzFdLDE2KSl9ZWxzZXtmb3IodmFyIGk9MDtpPG1zZy5sZW5ndGg7aSsrKXt2YXIgYz1tc2cuY2hhckNvZGVBdChpKTt2YXIgaGk9Yz4+ODt2YXIgbG89YyYyNTU7aWYoaGkpcmVzLnB1c2goaGksbG8pO2Vsc2UgcmVzLnB1c2gobG8pfX1yZXR1cm4gcmVzfXV0aWxzLnRvQXJyYXk9dG9BcnJheTtmdW5jdGlvbiB6ZXJvMih3b3JkKXtpZih3b3JkLmxlbmd0aD09PTEpcmV0dXJuXCIwXCIrd29yZDtlbHNlIHJldHVybiB3b3JkfXV0aWxzLnplcm8yPXplcm8yO2Z1bmN0aW9uIHRvSGV4KG1zZyl7dmFyIHJlcz1cIlwiO2Zvcih2YXIgaT0wO2k8bXNnLmxlbmd0aDtpKyspcmVzKz16ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtyZXR1cm4gcmVzfXV0aWxzLnRvSGV4PXRvSGV4O3V0aWxzLmVuY29kZT1mdW5jdGlvbiBlbmNvZGUoYXJyLGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdG9IZXgoYXJyKTtlbHNlIHJldHVybiBhcnJ9fSk7dmFyIHV0aWxzXzEkMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgdXRpbHM9ZXhwb3J0czt1dGlscy5hc3NlcnQ9bWluaW1hbGlzdGljQXNzZXJ0JDE7dXRpbHMudG9BcnJheT11dGlsc18xLnRvQXJyYXk7dXRpbHMuemVybzI9dXRpbHNfMS56ZXJvMjt1dGlscy50b0hleD11dGlsc18xLnRvSGV4O3V0aWxzLmVuY29kZT11dGlsc18xLmVuY29kZTtmdW5jdGlvbiBnZXROQUYobnVtLHcsYml0cyl7dmFyIG5hZj1uZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLGJpdHMpKzEpO25hZi5maWxsKDApO3ZhciB3cz0xPDx3KzE7dmFyIGs9bnVtLmNsb25lKCk7Zm9yKHZhciBpPTA7aTxuYWYubGVuZ3RoO2krKyl7dmFyIHo7dmFyIG1vZD1rLmFuZGxuKHdzLTEpO2lmKGsuaXNPZGQoKSl7aWYobW9kPih3cz4+MSktMSl6PSh3cz4+MSktbW9kO2Vsc2Ugej1tb2Q7ay5pc3Vibih6KX1lbHNle3o9MH1uYWZbaV09ejtrLml1c2hybigxKX1yZXR1cm4gbmFmfXV0aWxzLmdldE5BRj1nZXROQUY7ZnVuY3Rpb24gZ2V0SlNGKGsxLGsyKXt2YXIganNmPVtbXSxbXV07azE9azEuY2xvbmUoKTtrMj1rMi5jbG9uZSgpO3ZhciBkMT0wO3ZhciBkMj0wO3ZhciBtODt3aGlsZShrMS5jbXBuKC1kMSk+MHx8azIuY21wbigtZDIpPjApe3ZhciBtMTQ9azEuYW5kbG4oMykrZDEmMzt2YXIgbTI0PWsyLmFuZGxuKDMpK2QyJjM7aWYobTE0PT09MyltMTQ9LTE7aWYobTI0PT09MyltMjQ9LTE7dmFyIHUxO2lmKChtMTQmMSk9PT0wKXt1MT0wfWVsc2V7bTg9azEuYW5kbG4oNykrZDEmNztpZigobTg9PT0zfHxtOD09PTUpJiZtMjQ9PT0yKXUxPS1tMTQ7ZWxzZSB1MT1tMTR9anNmWzBdLnB1c2godTEpO3ZhciB1MjtpZigobTI0JjEpPT09MCl7dTI9MH1lbHNle204PWsyLmFuZGxuKDcpK2QyJjc7aWYoKG04PT09M3x8bTg9PT01KSYmbTE0PT09Mil1Mj0tbTI0O2Vsc2UgdTI9bTI0fWpzZlsxXS5wdXNoKHUyKTtpZigyKmQxPT09dTErMSlkMT0xLWQxO2lmKDIqZDI9PT11MisxKWQyPTEtZDI7azEuaXVzaHJuKDEpO2syLml1c2hybigxKX1yZXR1cm4ganNmfXV0aWxzLmdldEpTRj1nZXRKU0Y7ZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkob2JqLG5hbWUsY29tcHV0ZXIpe3ZhciBrZXk9XCJfXCIrbmFtZTtvYmoucHJvdG90eXBlW25hbWVdPWZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KCl7cmV0dXJuIHRoaXNba2V5XSE9PXVuZGVmaW5lZD90aGlzW2tleV06dGhpc1trZXldPWNvbXB1dGVyLmNhbGwodGhpcyl9fXV0aWxzLmNhY2hlZFByb3BlcnR5PWNhY2hlZFByb3BlcnR5O2Z1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpe3JldHVybiB0eXBlb2YgYnl0ZXM9PT1cInN0cmluZ1wiP3V0aWxzLnRvQXJyYXkoYnl0ZXMsXCJoZXhcIik6Ynl0ZXN9dXRpbHMucGFyc2VCeXRlcz1wYXJzZUJ5dGVzO2Z1bmN0aW9uIGludEZyb21MRShieXRlcyl7cmV0dXJuIG5ldyBibihieXRlcyxcImhleFwiLFwibGVcIil9dXRpbHMuaW50RnJvbUxFPWludEZyb21MRX0pO1widXNlIHN0cmljdFwiO3ZhciBnZXROQUY9dXRpbHNfMSQxLmdldE5BRjt2YXIgZ2V0SlNGPXV0aWxzXzEkMS5nZXRKU0Y7dmFyIGFzc2VydCQxJDE9dXRpbHNfMSQxLmFzc2VydDtmdW5jdGlvbiBCYXNlQ3VydmUodHlwZSxjb25mKXt0aGlzLnR5cGU9dHlwZTt0aGlzLnA9bmV3IGJuKGNvbmYucCwxNik7dGhpcy5yZWQ9Y29uZi5wcmltZT9ibi5yZWQoY29uZi5wcmltZSk6Ym4ubW9udCh0aGlzLnApO3RoaXMuemVybz1uZXcgYm4oMCkudG9SZWQodGhpcy5yZWQpO3RoaXMub25lPW5ldyBibigxKS50b1JlZCh0aGlzLnJlZCk7dGhpcy50d289bmV3IGJuKDIpLnRvUmVkKHRoaXMucmVkKTt0aGlzLm49Y29uZi5uJiZuZXcgYm4oY29uZi5uLDE2KTt0aGlzLmc9Y29uZi5nJiZ0aGlzLnBvaW50RnJvbUpTT04oY29uZi5nLGNvbmYuZ1JlZCk7dGhpcy5fd25hZlQxPW5ldyBBcnJheSg0KTt0aGlzLl93bmFmVDI9bmV3IEFycmF5KDQpO3RoaXMuX3duYWZUMz1uZXcgQXJyYXkoNCk7dGhpcy5fd25hZlQ0PW5ldyBBcnJheSg0KTt0aGlzLl9iaXRMZW5ndGg9dGhpcy5uP3RoaXMubi5iaXRMZW5ndGgoKTowO3ZhciBhZGp1c3RDb3VudD10aGlzLm4mJnRoaXMucC5kaXYodGhpcy5uKTtpZighYWRqdXN0Q291bnR8fGFkanVzdENvdW50LmNtcG4oMTAwKT4wKXt0aGlzLnJlZE49bnVsbH1lbHNle3RoaXMuX21heHdlbGxUcmljaz10cnVlO3RoaXMucmVkTj10aGlzLm4udG9SZWQodGhpcy5yZWQpfX12YXIgYmFzZT1CYXNlQ3VydmU7QmFzZUN1cnZlLnByb3RvdHlwZS5wb2ludD1mdW5jdGlvbiBwb2ludCgpe3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKX07QmFzZUN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbiB2YWxpZGF0ZSgpe3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKX07QmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWw9ZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsayl7YXNzZXJ0JDEkMShwLnByZWNvbXB1dGVkKTt2YXIgZG91Ymxlcz1wLl9nZXREb3VibGVzKCk7dmFyIG5hZj1nZXROQUYoaywxLHRoaXMuX2JpdExlbmd0aCk7dmFyIEk9KDE8PGRvdWJsZXMuc3RlcCsxKS0oZG91Ymxlcy5zdGVwJTI9PT0wPzI6MSk7SS89Mzt2YXIgcmVwcj1bXTt2YXIgajt2YXIgbmFmVztmb3Ioaj0wO2o8bmFmLmxlbmd0aDtqKz1kb3VibGVzLnN0ZXApe25hZlc9MDtmb3IodmFyIGw9aitkb3VibGVzLnN0ZXAtMTtsPj1qO2wtLSluYWZXPShuYWZXPDwxKStuYWZbbF07cmVwci5wdXNoKG5hZlcpfXZhciBhPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKTt2YXIgYj10aGlzLmpwb2ludChudWxsLG51bGwsbnVsbCk7Zm9yKHZhciBpPUk7aT4wO2ktLSl7Zm9yKGo9MDtqPHJlcHIubGVuZ3RoO2orKyl7bmFmVz1yZXByW2pdO2lmKG5hZlc9PT1pKWI9Yi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7ZWxzZSBpZihuYWZXPT09LWkpYj1iLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKX1hPWEuYWRkKGIpfXJldHVybiBhLnRvUCgpfTtCYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsPWZ1bmN0aW9uIF93bmFmTXVsKHAsayl7dmFyIHc9NDt2YXIgbmFmUG9pbnRzPXAuX2dldE5BRlBvaW50cyh3KTt3PW5hZlBvaW50cy53bmQ7dmFyIHduZD1uYWZQb2ludHMucG9pbnRzO3ZhciBuYWY9Z2V0TkFGKGssdyx0aGlzLl9iaXRMZW5ndGgpO3ZhciBhY2M9dGhpcy5qcG9pbnQobnVsbCxudWxsLG51bGwpO2Zvcih2YXIgaT1uYWYubGVuZ3RoLTE7aT49MDtpLS0pe2Zvcih2YXIgbD0wO2k+PTAmJm5hZltpXT09PTA7aS0tKWwrKztpZihpPj0wKWwrKzthY2M9YWNjLmRibHAobCk7aWYoaTwwKWJyZWFrO3ZhciB6PW5hZltpXTthc3NlcnQkMSQxKHohPT0wKTtpZihwLnR5cGU9PT1cImFmZmluZVwiKXtpZih6PjApYWNjPWFjYy5taXhlZEFkZCh3bmRbei0xPj4xXSk7ZWxzZSBhY2M9YWNjLm1peGVkQWRkKHduZFstei0xPj4xXS5uZWcoKSl9ZWxzZXtpZih6PjApYWNjPWFjYy5hZGQod25kW3otMT4+MV0pO2Vsc2UgYWNjPWFjYy5hZGQod25kWy16LTE+PjFdLm5lZygpKX19cmV0dXJuIHAudHlwZT09PVwiYWZmaW5lXCI/YWNjLnRvUCgpOmFjY307QmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZD1mdW5jdGlvbiBfd25hZk11bEFkZChkZWZXLHBvaW50cyxjb2VmZnMsbGVuLGphY29iaWFuUmVzdWx0KXt2YXIgd25kV2lkdGg9dGhpcy5fd25hZlQxO3ZhciB3bmQ9dGhpcy5fd25hZlQyO3ZhciBuYWY9dGhpcy5fd25hZlQzO3ZhciBtYXg9MDt2YXIgaTt2YXIgajt2YXIgcDtmb3IoaT0wO2k8bGVuO2krKyl7cD1wb2ludHNbaV07dmFyIG5hZlBvaW50cz1wLl9nZXROQUZQb2ludHMoZGVmVyk7d25kV2lkdGhbaV09bmFmUG9pbnRzLnduZDt3bmRbaV09bmFmUG9pbnRzLnBvaW50c31mb3IoaT1sZW4tMTtpPj0xO2ktPTIpe3ZhciBhPWktMTt2YXIgYj1pO2lmKHduZFdpZHRoW2FdIT09MXx8d25kV2lkdGhbYl0hPT0xKXtuYWZbYV09Z2V0TkFGKGNvZWZmc1thXSx3bmRXaWR0aFthXSx0aGlzLl9iaXRMZW5ndGgpO25hZltiXT1nZXROQUYoY29lZmZzW2JdLHduZFdpZHRoW2JdLHRoaXMuX2JpdExlbmd0aCk7bWF4PU1hdGgubWF4KG5hZlthXS5sZW5ndGgsbWF4KTttYXg9TWF0aC5tYXgobmFmW2JdLmxlbmd0aCxtYXgpO2NvbnRpbnVlfXZhciBjb21iPVtwb2ludHNbYV0sbnVsbCxudWxsLHBvaW50c1tiXV07aWYocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KT09PTApe2NvbWJbMV09cG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO2NvbWJbMl09cG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSl9ZWxzZSBpZihwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpPT09MCl7Y29tYlsxXT1wb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtjb21iWzJdPXBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKX1lbHNle2NvbWJbMV09cG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7Y29tYlsyXT1wb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKX12YXIgaW5kZXg9Wy0zLC0xLC01LC03LDAsNyw1LDEsM107dmFyIGpzZj1nZXRKU0YoY29lZmZzW2FdLGNvZWZmc1tiXSk7bWF4PU1hdGgubWF4KGpzZlswXS5sZW5ndGgsbWF4KTtuYWZbYV09bmV3IEFycmF5KG1heCk7bmFmW2JdPW5ldyBBcnJheShtYXgpO2ZvcihqPTA7ajxtYXg7aisrKXt2YXIgamE9anNmWzBdW2pdfDA7dmFyIGpiPWpzZlsxXVtqXXwwO25hZlthXVtqXT1pbmRleFsoamErMSkqMysoamIrMSldO25hZltiXVtqXT0wO3duZFthXT1jb21ifX12YXIgYWNjPXRoaXMuanBvaW50KG51bGwsbnVsbCxudWxsKTt2YXIgdG1wPXRoaXMuX3duYWZUNDtmb3IoaT1tYXg7aT49MDtpLS0pe3ZhciBrPTA7d2hpbGUoaT49MCl7dmFyIHplcm89dHJ1ZTtmb3Ioaj0wO2o8bGVuO2orKyl7dG1wW2pdPW5hZltqXVtpXXwwO2lmKHRtcFtqXSE9PTApemVybz1mYWxzZX1pZighemVybylicmVhaztrKys7aS0tfWlmKGk+PTApaysrO2FjYz1hY2MuZGJscChrKTtpZihpPDApYnJlYWs7Zm9yKGo9MDtqPGxlbjtqKyspe3ZhciB6PXRtcFtqXTtwO2lmKHo9PT0wKWNvbnRpbnVlO2Vsc2UgaWYoej4wKXA9d25kW2pdW3otMT4+MV07ZWxzZSBpZih6PDApcD13bmRbal1bLXotMT4+MV0ubmVnKCk7aWYocC50eXBlPT09XCJhZmZpbmVcIilhY2M9YWNjLm1peGVkQWRkKHApO2Vsc2UgYWNjPWFjYy5hZGQocCl9fWZvcihpPTA7aTxsZW47aSsrKXduZFtpXT1udWxsO2lmKGphY29iaWFuUmVzdWx0KXJldHVybiBhY2M7ZWxzZSByZXR1cm4gYWNjLnRvUCgpfTtmdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsdHlwZSl7dGhpcy5jdXJ2ZT1jdXJ2ZTt0aGlzLnR5cGU9dHlwZTt0aGlzLnByZWNvbXB1dGVkPW51bGx9QmFzZUN1cnZlLkJhc2VQb2ludD1CYXNlUG9pbnQ7QmFzZVBvaW50LnByb3RvdHlwZS5lcT1mdW5jdGlvbiBlcSgpe3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKX07QmFzZVBvaW50LnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbiB2YWxpZGF0ZSgpe3JldHVybiB0aGlzLmN1cnZlLnZhbGlkYXRlKHRoaXMpfTtCYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50PWZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLGVuYyl7Ynl0ZXM9dXRpbHNfMSQxLnRvQXJyYXkoYnl0ZXMsZW5jKTt2YXIgbGVuPXRoaXMucC5ieXRlTGVuZ3RoKCk7aWYoKGJ5dGVzWzBdPT09NHx8Ynl0ZXNbMF09PT02fHxieXRlc1swXT09PTcpJiZieXRlcy5sZW5ndGgtMT09PTIqbGVuKXtpZihieXRlc1swXT09PTYpYXNzZXJ0JDEkMShieXRlc1tieXRlcy5sZW5ndGgtMV0lMj09PTApO2Vsc2UgaWYoYnl0ZXNbMF09PT03KWFzc2VydCQxJDEoYnl0ZXNbYnl0ZXMubGVuZ3RoLTFdJTI9PT0xKTt2YXIgcmVzPXRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwxK2xlbiksYnl0ZXMuc2xpY2UoMStsZW4sMSsyKmxlbikpO3JldHVybiByZXN9ZWxzZSBpZigoYnl0ZXNbMF09PT0yfHxieXRlc1swXT09PTMpJiZieXRlcy5sZW5ndGgtMT09PWxlbil7cmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLDErbGVuKSxieXRlc1swXT09PTMpfXRocm93IG5ldyBFcnJvcihcIlVua25vd24gcG9pbnQgZm9ybWF0XCIpfTtCYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQ9ZnVuY3Rpb24gZW5jb2RlQ29tcHJlc3NlZChlbmMpe3JldHVybiB0aGlzLmVuY29kZShlbmMsdHJ1ZSl9O0Jhc2VQb2ludC5wcm90b3R5cGUuX2VuY29kZT1mdW5jdGlvbiBfZW5jb2RlKGNvbXBhY3Qpe3ZhciBsZW49dGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKTt2YXIgeD10aGlzLmdldFgoKS50b0FycmF5KFwiYmVcIixsZW4pO2lmKGNvbXBhY3QpcmV0dXJuW3RoaXMuZ2V0WSgpLmlzRXZlbigpPzI6M10uY29uY2F0KHgpO3JldHVybls0XS5jb25jYXQoeCx0aGlzLmdldFkoKS50b0FycmF5KFwiYmVcIixsZW4pKX07QmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24gZW5jb2RlKGVuYyxjb21wYWN0KXtyZXR1cm4gdXRpbHNfMSQxLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksZW5jKX07QmFzZVBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlPWZ1bmN0aW9uIHByZWNvbXB1dGUocG93ZXIpe2lmKHRoaXMucHJlY29tcHV0ZWQpcmV0dXJuIHRoaXM7dmFyIHByZWNvbXB1dGVkPXtkb3VibGVzOm51bGwsbmFmOm51bGwsYmV0YTpudWxsfTtwcmVjb21wdXRlZC5uYWY9dGhpcy5fZ2V0TkFGUG9pbnRzKDgpO3ByZWNvbXB1dGVkLmRvdWJsZXM9dGhpcy5fZ2V0RG91Ymxlcyg0LHBvd2VyKTtwcmVjb21wdXRlZC5iZXRhPXRoaXMuX2dldEJldGEoKTt0aGlzLnByZWNvbXB1dGVkPXByZWNvbXB1dGVkO3JldHVybiB0aGlzfTtCYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzPWZ1bmN0aW9uIF9oYXNEb3VibGVzKGspe2lmKCF0aGlzLnByZWNvbXB1dGVkKXJldHVybiBmYWxzZTt2YXIgZG91Ymxlcz10aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7aWYoIWRvdWJsZXMpcmV0dXJuIGZhbHNlO3JldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGg+PU1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSsxKS9kb3VibGVzLnN0ZXApfTtCYXNlUG9pbnQucHJvdG90eXBlLl9nZXREb3VibGVzPWZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAscG93ZXIpe2lmKHRoaXMucHJlY29tcHV0ZWQmJnRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylyZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO3ZhciBkb3VibGVzPVt0aGlzXTt2YXIgYWNjPXRoaXM7Zm9yKHZhciBpPTA7aTxwb3dlcjtpKz1zdGVwKXtmb3IodmFyIGo9MDtqPHN0ZXA7aisrKWFjYz1hY2MuZGJsKCk7ZG91Ymxlcy5wdXNoKGFjYyl9cmV0dXJue3N0ZXA6c3RlcCxwb2ludHM6ZG91Ymxlc319O0Jhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cz1mdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCl7aWYodGhpcy5wcmVjb21wdXRlZCYmdGhpcy5wcmVjb21wdXRlZC5uYWYpcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO3ZhciByZXM9W3RoaXNdO3ZhciBtYXg9KDE8PHduZCktMTt2YXIgZGJsPW1heD09PTE/bnVsbDp0aGlzLmRibCgpO2Zvcih2YXIgaT0xO2k8bWF4O2krKylyZXNbaV09cmVzW2ktMV0uYWRkKGRibCk7cmV0dXJue3duZDp3bmQscG9pbnRzOnJlc319O0Jhc2VQb2ludC5wcm90b3R5cGUuX2dldEJldGE9ZnVuY3Rpb24gX2dldEJldGEoKXtyZXR1cm4gbnVsbH07QmFzZVBvaW50LnByb3RvdHlwZS5kYmxwPWZ1bmN0aW9uIGRibHAoayl7dmFyIHI9dGhpcztmb3IodmFyIGk9MDtpPGs7aSsrKXI9ci5kYmwoKTtyZXR1cm4gcn07dmFyIGluaGVyaXRzX2Jyb3dzZXIkMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSl7aWYodHlwZW9mIE9iamVjdC5jcmVhdGU9PT1cImZ1bmN0aW9uXCIpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluaGVyaXRzKGN0b3Isc3VwZXJDdG9yKXtpZihzdXBlckN0b3Ipe2N0b3Iuc3VwZXJfPXN1cGVyQ3RvcjtjdG9yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpjdG9yLGVudW1lcmFibGU6ZmFsc2Usd3JpdGFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZX19KX19fWVsc2V7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaW5oZXJpdHMoY3RvcixzdXBlckN0b3Ipe2lmKHN1cGVyQ3Rvcil7Y3Rvci5zdXBlcl89c3VwZXJDdG9yO3ZhciBUZW1wQ3Rvcj1mdW5jdGlvbigpe307VGVtcEN0b3IucHJvdG90eXBlPXN1cGVyQ3Rvci5wcm90b3R5cGU7Y3Rvci5wcm90b3R5cGU9bmV3IFRlbXBDdG9yO2N0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPWN0b3J9fX19KTtcInVzZSBzdHJpY3RcIjt2YXIgYXNzZXJ0JDI9dXRpbHNfMSQxLmFzc2VydDtmdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpe2Jhc2UuY2FsbCh0aGlzLFwic2hvcnRcIixjb25mKTt0aGlzLmE9bmV3IGJuKGNvbmYuYSwxNikudG9SZWQodGhpcy5yZWQpO3RoaXMuYj1uZXcgYm4oY29uZi5iLDE2KS50b1JlZCh0aGlzLnJlZCk7dGhpcy50aW52PXRoaXMudHdvLnJlZEludm0oKTt0aGlzLnplcm9BPXRoaXMuYS5mcm9tUmVkKCkuY21wbigwKT09PTA7dGhpcy50aHJlZUE9dGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKT09PTA7dGhpcy5lbmRvPXRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTt0aGlzLl9lbmRvV25hZlQxPW5ldyBBcnJheSg0KTt0aGlzLl9lbmRvV25hZlQyPW5ldyBBcnJheSg0KX1pbmhlcml0c19icm93c2VyJDEoU2hvcnRDdXJ2ZSxiYXNlKTt2YXIgc2hvcnRfMT1TaG9ydEN1cnZlO1Nob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc209ZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKXtpZighdGhpcy56ZXJvQXx8IXRoaXMuZ3x8IXRoaXMubnx8dGhpcy5wLm1vZG4oMykhPT0xKXJldHVybjt2YXIgYmV0YTt2YXIgbGFtYmRhO2lmKGNvbmYuYmV0YSl7YmV0YT1uZXcgYm4oY29uZi5iZXRhLDE2KS50b1JlZCh0aGlzLnJlZCl9ZWxzZXt2YXIgYmV0YXM9dGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7YmV0YT1iZXRhc1swXS5jbXAoYmV0YXNbMV0pPDA/YmV0YXNbMF06YmV0YXNbMV07YmV0YT1iZXRhLnRvUmVkKHRoaXMucmVkKX1pZihjb25mLmxhbWJkYSl7bGFtYmRhPW5ldyBibihjb25mLmxhbWJkYSwxNil9ZWxzZXt2YXIgbGFtYmRhcz10aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtpZih0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSk9PT0wKXtsYW1iZGE9bGFtYmRhc1swXX1lbHNle2xhbWJkYT1sYW1iZGFzWzFdO2Fzc2VydCQyKHRoaXMuZy5tdWwobGFtYmRhKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpPT09MCl9fXZhciBiYXNpcztpZihjb25mLmJhc2lzKXtiYXNpcz1jb25mLmJhc2lzLm1hcChmdW5jdGlvbih2ZWMpe3JldHVybnthOm5ldyBibih2ZWMuYSwxNiksYjpuZXcgYm4odmVjLmIsMTYpfX0pfWVsc2V7YmFzaXM9dGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSl9cmV0dXJue2JldGE6YmV0YSxsYW1iZGE6bGFtYmRhLGJhc2lzOmJhc2lzfX07U2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cz1mdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSl7dmFyIHJlZD1udW09PT10aGlzLnA/dGhpcy5yZWQ6Ym4ubW9udChudW0pO3ZhciB0aW52PW5ldyBibigyKS50b1JlZChyZWQpLnJlZEludm0oKTt2YXIgbnRpbnY9dGludi5yZWROZWcoKTt2YXIgcz1uZXcgYm4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO3ZhciBsMT1udGludi5yZWRBZGQocykuZnJvbVJlZCgpO3ZhciBsMj1udGludi5yZWRTdWIocykuZnJvbVJlZCgpO3JldHVybltsMSxsMl19O1Nob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvQmFzaXM9ZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpe3ZhciBhcHJ4U3FydD10aGlzLm4udXNocm4oTWF0aC5mbG9vcih0aGlzLm4uYml0TGVuZ3RoKCkvMikpO3ZhciB1PWxhbWJkYTt2YXIgdj10aGlzLm4uY2xvbmUoKTt2YXIgeDE9bmV3IGJuKDEpO3ZhciB5MT1uZXcgYm4oMCk7dmFyIHgyPW5ldyBibigwKTt2YXIgeTI9bmV3IGJuKDEpO3ZhciBhMDt2YXIgYjA7dmFyIGExO3ZhciBiMTt2YXIgYTI7dmFyIGIyO3ZhciBwcmV2Ujt2YXIgaT0wO3ZhciByO3ZhciB4O3doaWxlKHUuY21wbigwKSE9PTApe3ZhciBxPXYuZGl2KHUpO3I9di5zdWIocS5tdWwodSkpO3g9eDIuc3ViKHEubXVsKHgxKSk7dmFyIHk9eTIuc3ViKHEubXVsKHkxKSk7aWYoIWExJiZyLmNtcChhcHJ4U3FydCk8MCl7YTA9cHJldlIubmVnKCk7YjA9eDE7YTE9ci5uZWcoKTtiMT14fWVsc2UgaWYoYTEmJisraT09PTIpe2JyZWFrfXByZXZSPXI7dj11O3U9cjt4Mj14MTt4MT14O3kyPXkxO3kxPXl9YTI9ci5uZWcoKTtiMj14O3ZhciBsZW4xPWExLnNxcigpLmFkZChiMS5zcXIoKSk7dmFyIGxlbjI9YTIuc3FyKCkuYWRkKGIyLnNxcigpKTtpZihsZW4yLmNtcChsZW4xKT49MCl7YTI9YTA7YjI9YjB9aWYoYTEubmVnYXRpdmUpe2ExPWExLm5lZygpO2IxPWIxLm5lZygpfWlmKGEyLm5lZ2F0aXZlKXthMj1hMi5uZWcoKTtiMj1iMi5uZWcoKX1yZXR1cm5be2E6YTEsYjpiMX0se2E6YTIsYjpiMn1dfTtTaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0PWZ1bmN0aW9uIF9lbmRvU3BsaXQoayl7dmFyIGJhc2lzPXRoaXMuZW5kby5iYXNpczt2YXIgdjE9YmFzaXNbMF07dmFyIHYyPWJhc2lzWzFdO3ZhciBjMT12Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO3ZhciBjMj12MS5iLm5lZygpLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO3ZhciBwMT1jMS5tdWwodjEuYSk7dmFyIHAyPWMyLm11bCh2Mi5hKTt2YXIgcTE9YzEubXVsKHYxLmIpO3ZhciBxMj1jMi5tdWwodjIuYik7dmFyIGsxPWsuc3ViKHAxKS5zdWIocDIpO3ZhciBrMj1xMS5hZGQocTIpLm5lZygpO3JldHVybntrMTprMSxrMjprMn19O1Nob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVg9ZnVuY3Rpb24gcG9pbnRGcm9tWCh4LG9kZCl7eD1uZXcgYm4oeCwxNik7aWYoIXgucmVkKXg9eC50b1JlZCh0aGlzLnJlZCk7dmFyIHkyPXgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO3ZhciB5PXkyLnJlZFNxcnQoKTtpZih5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykhPT0wKXRocm93IG5ldyBFcnJvcihcImludmFsaWQgcG9pbnRcIik7dmFyIGlzT2RkPXkuZnJvbVJlZCgpLmlzT2RkKCk7aWYob2RkJiYhaXNPZGR8fCFvZGQmJmlzT2RkKXk9eS5yZWROZWcoKTtyZXR1cm4gdGhpcy5wb2ludCh4LHkpfTtTaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbiB2YWxpZGF0ZShwb2ludCl7aWYocG9pbnQuaW5mKXJldHVybiB0cnVlO3ZhciB4PXBvaW50Lng7dmFyIHk9cG9pbnQueTt2YXIgYXg9dGhpcy5hLnJlZE11bCh4KTt2YXIgcmhzPXgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtyZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKT09PTB9O1Nob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZD1mdW5jdGlvbiBfZW5kb1duYWZNdWxBZGQocG9pbnRzLGNvZWZmcyxqYWNvYmlhblJlc3VsdCl7dmFyIG5wb2ludHM9dGhpcy5fZW5kb1duYWZUMTt2YXIgbmNvZWZmcz10aGlzLl9lbmRvV25hZlQyO2Zvcih2YXIgaT0wO2k8cG9pbnRzLmxlbmd0aDtpKyspe3ZhciBzcGxpdD10aGlzLl9lbmRvU3BsaXQoY29lZmZzW2ldKTt2YXIgcD1wb2ludHNbaV07dmFyIGJldGE9cC5fZ2V0QmV0YSgpO2lmKHNwbGl0LmsxLm5lZ2F0aXZlKXtzcGxpdC5rMS5pbmVnKCk7cD1wLm5lZyh0cnVlKX1pZihzcGxpdC5rMi5uZWdhdGl2ZSl7c3BsaXQuazIuaW5lZygpO2JldGE9YmV0YS5uZWcodHJ1ZSl9bnBvaW50c1tpKjJdPXA7bnBvaW50c1tpKjIrMV09YmV0YTtuY29lZmZzW2kqMl09c3BsaXQuazE7bmNvZWZmc1tpKjIrMV09c3BsaXQuazJ9dmFyIHJlcz10aGlzLl93bmFmTXVsQWRkKDEsbnBvaW50cyxuY29lZmZzLGkqMixqYWNvYmlhblJlc3VsdCk7Zm9yKHZhciBqPTA7ajxpKjI7aisrKXtucG9pbnRzW2pdPW51bGw7bmNvZWZmc1tqXT1udWxsfXJldHVybiByZXN9O2Z1bmN0aW9uIFBvaW50KGN1cnZlLHgseSxpc1JlZCl7YmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLGN1cnZlLFwiYWZmaW5lXCIpO2lmKHg9PT1udWxsJiZ5PT09bnVsbCl7dGhpcy54PW51bGw7dGhpcy55PW51bGw7dGhpcy5pbmY9dHJ1ZX1lbHNle3RoaXMueD1uZXcgYm4oeCwxNik7dGhpcy55PW5ldyBibih5LDE2KTtpZihpc1JlZCl7dGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTt0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpfWlmKCF0aGlzLngucmVkKXRoaXMueD10aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO2lmKCF0aGlzLnkucmVkKXRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO3RoaXMuaW5mPWZhbHNlfX1pbmhlcml0c19icm93c2VyJDEoUG9pbnQsYmFzZS5CYXNlUG9pbnQpO1Nob3J0Q3VydmUucHJvdG90eXBlLnBvaW50PWZ1bmN0aW9uIHBvaW50KHgseSxpc1JlZCl7cmV0dXJuIG5ldyBQb2ludCh0aGlzLHgseSxpc1JlZCl9O1Nob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT049ZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmoscmVkKXtyZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcyxvYmoscmVkKX07UG9pbnQucHJvdG90eXBlLl9nZXRCZXRhPWZ1bmN0aW9uIF9nZXRCZXRhKCl7aWYoIXRoaXMuY3VydmUuZW5kbylyZXR1cm47dmFyIHByZT10aGlzLnByZWNvbXB1dGVkO2lmKHByZSYmcHJlLmJldGEpcmV0dXJuIHByZS5iZXRhO3ZhciBiZXRhPXRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksdGhpcy55KTtpZihwcmUpe3ZhciBjdXJ2ZT10aGlzLmN1cnZlO3ZhciBlbmRvTXVsPWZ1bmN0aW9uKHApe3JldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSkscC55KX07cHJlLmJldGE9YmV0YTtiZXRhLnByZWNvbXB1dGVkPXtiZXRhOm51bGwsbmFmOnByZS5uYWYmJnt3bmQ6cHJlLm5hZi53bmQscG9pbnRzOnByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKX0sZG91YmxlczpwcmUuZG91YmxlcyYme3N0ZXA6cHJlLmRvdWJsZXMuc3RlcCxwb2ludHM6cHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKX19fXJldHVybiBiZXRhfTtQb2ludC5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uIHRvSlNPTigpe2lmKCF0aGlzLnByZWNvbXB1dGVkKXJldHVyblt0aGlzLngsdGhpcy55XTtyZXR1cm5bdGhpcy54LHRoaXMueSx0aGlzLnByZWNvbXB1dGVkJiZ7ZG91Ymxlczp0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMmJntzdGVwOnRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLHBvaW50czp0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpfSxuYWY6dGhpcy5wcmVjb21wdXRlZC5uYWYmJnt3bmQ6dGhpcy5wcmVjb21wdXRlZC5uYWYud25kLHBvaW50czp0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSl9fV19O1BvaW50LmZyb21KU09OPWZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLG9iaixyZWQpe2lmKHR5cGVvZiBvYmo9PT1cInN0cmluZ1wiKW9iaj1KU09OLnBhcnNlKG9iaik7dmFyIHJlcz1jdXJ2ZS5wb2ludChvYmpbMF0sb2JqWzFdLHJlZCk7aWYoIW9ialsyXSlyZXR1cm4gcmVzO2Z1bmN0aW9uIG9iajJwb2ludChvYmope3JldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sb2JqWzFdLHJlZCl9dmFyIHByZT1vYmpbMl07cmVzLnByZWNvbXB1dGVkPXtiZXRhOm51bGwsZG91YmxlczpwcmUuZG91YmxlcyYme3N0ZXA6cHJlLmRvdWJsZXMuc3RlcCxwb2ludHM6W3Jlc10uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSl9LG5hZjpwcmUubmFmJiZ7d25kOnByZS5uYWYud25kLHBvaW50czpbcmVzXS5jb25jYXQocHJlLm5hZi5wb2ludHMubWFwKG9iajJwb2ludCkpfX07cmV0dXJuIHJlc307UG9pbnQucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24gaW5zcGVjdCgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVyblwiPEVDIFBvaW50IEluZmluaXR5PlwiO3JldHVyblwiPEVDIFBvaW50IHg6IFwiK3RoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsMikrXCIgeTogXCIrdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwyKStcIj5cIn07UG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHk9ZnVuY3Rpb24gaXNJbmZpbml0eSgpe3JldHVybiB0aGlzLmluZn07UG9pbnQucHJvdG90eXBlLmFkZD1mdW5jdGlvbiBhZGQocCl7aWYodGhpcy5pbmYpcmV0dXJuIHA7aWYocC5pbmYpcmV0dXJuIHRoaXM7aWYodGhpcy5lcShwKSlyZXR1cm4gdGhpcy5kYmwoKTtpZih0aGlzLm5lZygpLmVxKHApKXJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsbnVsbCk7aWYodGhpcy54LmNtcChwLngpPT09MClyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLG51bGwpO3ZhciBjPXRoaXMueS5yZWRTdWIocC55KTtpZihjLmNtcG4oMCkhPT0wKWM9Yy5yZWRNdWwodGhpcy54LnJlZFN1YihwLngpLnJlZEludm0oKSk7dmFyIG54PWMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTt2YXIgbnk9Yy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtyZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCxueSl9O1BvaW50LnByb3RvdHlwZS5kYmw9ZnVuY3Rpb24gZGJsKCl7aWYodGhpcy5pbmYpcmV0dXJuIHRoaXM7dmFyIHlzMT10aGlzLnkucmVkQWRkKHRoaXMueSk7aWYoeXMxLmNtcG4oMCk9PT0wKXJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsbnVsbCk7dmFyIGE9dGhpcy5jdXJ2ZS5hO3ZhciB4Mj10aGlzLngucmVkU3FyKCk7dmFyIGR5aW52PXlzMS5yZWRJbnZtKCk7dmFyIGM9eDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7dmFyIG54PWMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO3ZhciBueT1jLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LG55KX07UG9pbnQucHJvdG90eXBlLmdldFg9ZnVuY3Rpb24gZ2V0WCgpe3JldHVybiB0aGlzLnguZnJvbVJlZCgpfTtQb2ludC5wcm90b3R5cGUuZ2V0WT1mdW5jdGlvbiBnZXRZKCl7cmV0dXJuIHRoaXMueS5mcm9tUmVkKCl9O1BvaW50LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24gbXVsKGspe2s9bmV3IGJuKGssMTYpO2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO2Vsc2UgaWYodGhpcy5faGFzRG91YmxlcyhrKSlyZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcyxrKTtlbHNlIGlmKHRoaXMuY3VydmUuZW5kbylyZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoW3RoaXNdLFtrXSk7ZWxzZSByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLGspfTtQb2ludC5wcm90b3R5cGUubXVsQWRkPWZ1bmN0aW9uIG11bEFkZChrMSxwMixrMil7dmFyIHBvaW50cz1bdGhpcyxwMl07dmFyIGNvZWZmcz1bazEsazJdO2lmKHRoaXMuY3VydmUuZW5kbylyZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLGNvZWZmcyk7ZWxzZSByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLHBvaW50cyxjb2VmZnMsMil9O1BvaW50LnByb3RvdHlwZS5qbXVsQWRkPWZ1bmN0aW9uIGptdWxBZGQoazEscDIsazIpe3ZhciBwb2ludHM9W3RoaXMscDJdO3ZhciBjb2VmZnM9W2sxLGsyXTtpZih0aGlzLmN1cnZlLmVuZG8pcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cyxjb2VmZnMsdHJ1ZSk7ZWxzZSByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLHBvaW50cyxjb2VmZnMsMix0cnVlKX07UG9pbnQucHJvdG90eXBlLmVxPWZ1bmN0aW9uIGVxKHApe3JldHVybiB0aGlzPT09cHx8dGhpcy5pbmY9PT1wLmluZiYmKHRoaXMuaW5mfHx0aGlzLnguY21wKHAueCk9PT0wJiZ0aGlzLnkuY21wKHAueSk9PT0wKX07UG9pbnQucHJvdG90eXBlLm5lZz1mdW5jdGlvbiBuZWcoX3ByZWNvbXB1dGUpe2lmKHRoaXMuaW5mKXJldHVybiB0aGlzO3ZhciByZXM9dGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsdGhpcy55LnJlZE5lZygpKTtpZihfcHJlY29tcHV0ZSYmdGhpcy5wcmVjb21wdXRlZCl7dmFyIHByZT10aGlzLnByZWNvbXB1dGVkO3ZhciBuZWdhdGU9ZnVuY3Rpb24ocCl7cmV0dXJuIHAubmVnKCl9O3Jlcy5wcmVjb21wdXRlZD17bmFmOnByZS5uYWYmJnt3bmQ6cHJlLm5hZi53bmQscG9pbnRzOnByZS5uYWYucG9pbnRzLm1hcChuZWdhdGUpfSxkb3VibGVzOnByZS5kb3VibGVzJiZ7c3RlcDpwcmUuZG91Ymxlcy5zdGVwLHBvaW50czpwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSl9fX1yZXR1cm4gcmVzfTtQb2ludC5wcm90b3R5cGUudG9KPWZ1bmN0aW9uIHRvSigpe2lmKHRoaXMuaW5mKXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLG51bGwsbnVsbCk7dmFyIHJlcz10aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsdGhpcy55LHRoaXMuY3VydmUub25lKTtyZXR1cm4gcmVzfTtmdW5jdGlvbiBKUG9pbnQoY3VydmUseCx5LHope2Jhc2UuQmFzZVBvaW50LmNhbGwodGhpcyxjdXJ2ZSxcImphY29iaWFuXCIpO2lmKHg9PT1udWxsJiZ5PT09bnVsbCYmej09PW51bGwpe3RoaXMueD10aGlzLmN1cnZlLm9uZTt0aGlzLnk9dGhpcy5jdXJ2ZS5vbmU7dGhpcy56PW5ldyBibigwKX1lbHNle3RoaXMueD1uZXcgYm4oeCwxNik7dGhpcy55PW5ldyBibih5LDE2KTt0aGlzLno9bmV3IGJuKHosMTYpfWlmKCF0aGlzLngucmVkKXRoaXMueD10aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO2lmKCF0aGlzLnkucmVkKXRoaXMueT10aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO2lmKCF0aGlzLnoucmVkKXRoaXMuej10aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO3RoaXMuek9uZT10aGlzLno9PT10aGlzLmN1cnZlLm9uZX1pbmhlcml0c19icm93c2VyJDEoSlBvaW50LGJhc2UuQmFzZVBvaW50KTtTaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQ9ZnVuY3Rpb24ganBvaW50KHgseSx6KXtyZXR1cm4gbmV3IEpQb2ludCh0aGlzLHgseSx6KX07SlBvaW50LnByb3RvdHlwZS50b1A9ZnVuY3Rpb24gdG9QKCl7aWYodGhpcy5pc0luZmluaXR5KCkpcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCxudWxsKTt2YXIgemludj10aGlzLnoucmVkSW52bSgpO3ZhciB6aW52Mj16aW52LnJlZFNxcigpO3ZhciBheD10aGlzLngucmVkTXVsKHppbnYyKTt2YXIgYXk9dGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO3JldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LGF5KX07SlBvaW50LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24gbmVnKCl7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCx0aGlzLnkucmVkTmVnKCksdGhpcy56KX07SlBvaW50LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24gYWRkKHApe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiBwO2lmKHAuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO3ZhciBwejI9cC56LnJlZFNxcigpO3ZhciB6Mj10aGlzLnoucmVkU3FyKCk7dmFyIHUxPXRoaXMueC5yZWRNdWwocHoyKTt2YXIgdTI9cC54LnJlZE11bCh6Mik7dmFyIHMxPXRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTt2YXIgczI9cC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7dmFyIGg9dTEucmVkU3ViKHUyKTt2YXIgcj1zMS5yZWRTdWIoczIpO2lmKGguY21wbigwKT09PTApe2lmKHIuY21wbigwKSE9PTApcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsbnVsbCxudWxsKTtlbHNlIHJldHVybiB0aGlzLmRibCgpfXZhciBoMj1oLnJlZFNxcigpO3ZhciBoMz1oMi5yZWRNdWwoaCk7dmFyIHY9dTEucmVkTXVsKGgyKTt2YXIgbng9ci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7dmFyIG55PXIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7dmFyIG56PXRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS5taXhlZEFkZD1mdW5jdGlvbiBtaXhlZEFkZChwKXtpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gcC50b0ooKTtpZihwLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpczt2YXIgejI9dGhpcy56LnJlZFNxcigpO3ZhciB1MT10aGlzLng7dmFyIHUyPXAueC5yZWRNdWwoejIpO3ZhciBzMT10aGlzLnk7dmFyIHMyPXAueS5yZWRNdWwoejIpLnJlZE11bCh0aGlzLnopO3ZhciBoPXUxLnJlZFN1Yih1Mik7dmFyIHI9czEucmVkU3ViKHMyKTtpZihoLmNtcG4oMCk9PT0wKXtpZihyLmNtcG4oMCkhPT0wKXJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLG51bGwsbnVsbCk7ZWxzZSByZXR1cm4gdGhpcy5kYmwoKX12YXIgaDI9aC5yZWRTcXIoKTt2YXIgaDM9aDIucmVkTXVsKGgpO3ZhciB2PXUxLnJlZE11bChoMik7dmFyIG54PXIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO3ZhciBueT1yLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO3ZhciBuej10aGlzLnoucmVkTXVsKGgpO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCxueSxueil9O0pQb2ludC5wcm90b3R5cGUuZGJscD1mdW5jdGlvbiBkYmxwKHBvdyl7aWYocG93PT09MClyZXR1cm4gdGhpcztpZih0aGlzLmlzSW5maW5pdHkoKSlyZXR1cm4gdGhpcztpZighcG93KXJldHVybiB0aGlzLmRibCgpO3ZhciBpO2lmKHRoaXMuY3VydmUuemVyb0F8fHRoaXMuY3VydmUudGhyZWVBKXt2YXIgcj10aGlzO2ZvcihpPTA7aTxwb3c7aSsrKXI9ci5kYmwoKTtyZXR1cm4gcn12YXIgYT10aGlzLmN1cnZlLmE7dmFyIHRpbnY9dGhpcy5jdXJ2ZS50aW52O3ZhciBqeD10aGlzLng7dmFyIGp5PXRoaXMueTt2YXIgano9dGhpcy56O3ZhciBqejQ9anoucmVkU3FyKCkucmVkU3FyKCk7dmFyIGp5ZD1qeS5yZWRBZGQoankpO2ZvcihpPTA7aTxwb3c7aSsrKXt2YXIgangyPWp4LnJlZFNxcigpO3ZhciBqeWQyPWp5ZC5yZWRTcXIoKTt2YXIganlkND1qeWQyLnJlZFNxcigpO3ZhciBjPWp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTt2YXIgdDE9angucmVkTXVsKGp5ZDIpO3ZhciBueD1jLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7dmFyIHQyPXQxLnJlZElTdWIobngpO3ZhciBkbnk9Yy5yZWRNdWwodDIpO2RueT1kbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7dmFyIG56PWp5ZC5yZWRNdWwoanopO2lmKGkrMTxwb3cpano0PWp6NC5yZWRNdWwoanlkNCk7ang9bng7ano9bno7anlkPWRueX1yZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsanlkLnJlZE11bCh0aW52KSxqeil9O0pQb2ludC5wcm90b3R5cGUuZGJsPWZ1bmN0aW9uIGRibCgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVybiB0aGlzO2lmKHRoaXMuY3VydmUuemVyb0EpcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtlbHNlIGlmKHRoaXMuY3VydmUudGhyZWVBKXJldHVybiB0aGlzLl90aHJlZURibCgpO2Vsc2UgcmV0dXJuIHRoaXMuX2RibCgpfTtKUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsPWZ1bmN0aW9uIF96ZXJvRGJsKCl7dmFyIG54O3ZhciBueTt2YXIgbno7aWYodGhpcy56T25lKXt2YXIgeHg9dGhpcy54LnJlZFNxcigpO3ZhciB5eT10aGlzLnkucmVkU3FyKCk7dmFyIHl5eXk9eXkucmVkU3FyKCk7dmFyIHM9dGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtzPXMucmVkSUFkZChzKTt2YXIgbT14eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO3ZhciB0PW0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO3ZhciB5eXl5OD15eXl5LnJlZElBZGQoeXl5eSk7eXl5eTg9eXl5eTgucmVkSUFkZCh5eXl5OCk7eXl5eTg9eXl5eTgucmVkSUFkZCh5eXl5OCk7bng9dDtueT1tLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO256PXRoaXMueS5yZWRBZGQodGhpcy55KX1lbHNle3ZhciBhPXRoaXMueC5yZWRTcXIoKTt2YXIgYj10aGlzLnkucmVkU3FyKCk7dmFyIGM9Yi5yZWRTcXIoKTt2YXIgZD10aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTtkPWQucmVkSUFkZChkKTt2YXIgZT1hLnJlZEFkZChhKS5yZWRJQWRkKGEpO3ZhciBmPWUucmVkU3FyKCk7dmFyIGM4PWMucmVkSUFkZChjKTtjOD1jOC5yZWRJQWRkKGM4KTtjOD1jOC5yZWRJQWRkKGM4KTtueD1mLnJlZElTdWIoZCkucmVkSVN1YihkKTtueT1lLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtuej10aGlzLnkucmVkTXVsKHRoaXMueik7bno9bnoucmVkSUFkZChueil9cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS5fdGhyZWVEYmw9ZnVuY3Rpb24gX3RocmVlRGJsKCl7dmFyIG54O3ZhciBueTt2YXIgbno7aWYodGhpcy56T25lKXt2YXIgeHg9dGhpcy54LnJlZFNxcigpO3ZhciB5eT10aGlzLnkucmVkU3FyKCk7dmFyIHl5eXk9eXkucmVkU3FyKCk7dmFyIHM9dGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtzPXMucmVkSUFkZChzKTt2YXIgbT14eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTt2YXIgdD1tLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtueD10O3ZhciB5eXl5OD15eXl5LnJlZElBZGQoeXl5eSk7eXl5eTg9eXl5eTgucmVkSUFkZCh5eXl5OCk7eXl5eTg9eXl5eTgucmVkSUFkZCh5eXl5OCk7bnk9bS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtuej10aGlzLnkucmVkQWRkKHRoaXMueSl9ZWxzZXt2YXIgZGVsdGE9dGhpcy56LnJlZFNxcigpO3ZhciBnYW1tYT10aGlzLnkucmVkU3FyKCk7dmFyIGJldGE9dGhpcy54LnJlZE11bChnYW1tYSk7dmFyIGFscGhhPXRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7YWxwaGE9YWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTt2YXIgYmV0YTQ9YmV0YS5yZWRJQWRkKGJldGEpO2JldGE0PWJldGE0LnJlZElBZGQoYmV0YTQpO3ZhciBiZXRhOD1iZXRhNC5yZWRBZGQoYmV0YTQpO254PWFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpO256PXRoaXMueS5yZWRBZGQodGhpcy56KS5yZWRTcXIoKS5yZWRJU3ViKGdhbW1hKS5yZWRJU3ViKGRlbHRhKTt2YXIgZ2dhbW1hOD1nYW1tYS5yZWRTcXIoKTtnZ2FtbWE4PWdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtnZ2FtbWE4PWdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtnZ2FtbWE4PWdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtueT1hbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCl9cmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LG55LG56KX07SlBvaW50LnByb3RvdHlwZS5fZGJsPWZ1bmN0aW9uIF9kYmwoKXt2YXIgYT10aGlzLmN1cnZlLmE7dmFyIGp4PXRoaXMueDt2YXIgank9dGhpcy55O3ZhciBqej10aGlzLno7dmFyIGp6ND1qei5yZWRTcXIoKS5yZWRTcXIoKTt2YXIgangyPWp4LnJlZFNxcigpO3ZhciBqeTI9ankucmVkU3FyKCk7dmFyIGM9angyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO3ZhciBqeGQ0PWp4LnJlZEFkZChqeCk7anhkND1qeGQ0LnJlZElBZGQoanhkNCk7dmFyIHQxPWp4ZDQucmVkTXVsKGp5Mik7dmFyIG54PWMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTt2YXIgdDI9dDEucmVkSVN1YihueCk7dmFyIGp5ZDg9ankyLnJlZFNxcigpO2p5ZDg9anlkOC5yZWRJQWRkKGp5ZDgpO2p5ZDg9anlkOC5yZWRJQWRkKGp5ZDgpO2p5ZDg9anlkOC5yZWRJQWRkKGp5ZDgpO3ZhciBueT1jLnJlZE11bCh0MikucmVkSVN1YihqeWQ4KTt2YXIgbno9ankucmVkQWRkKGp5KS5yZWRNdWwoanopO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCxueSxueil9O0pQb2ludC5wcm90b3R5cGUudHJwbD1mdW5jdGlvbiB0cnBsKCl7aWYoIXRoaXMuY3VydmUuemVyb0EpcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO3ZhciB4eD10aGlzLngucmVkU3FyKCk7dmFyIHl5PXRoaXMueS5yZWRTcXIoKTt2YXIgeno9dGhpcy56LnJlZFNxcigpO3ZhciB5eXl5PXl5LnJlZFNxcigpO3ZhciBtPXh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7dmFyIG1tPW0ucmVkU3FyKCk7dmFyIGU9dGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtlPWUucmVkSUFkZChlKTtlPWUucmVkQWRkKGUpLnJlZElBZGQoZSk7ZT1lLnJlZElTdWIobW0pO3ZhciBlZT1lLnJlZFNxcigpO3ZhciB0PXl5eXkucmVkSUFkZCh5eXl5KTt0PXQucmVkSUFkZCh0KTt0PXQucmVkSUFkZCh0KTt0PXQucmVkSUFkZCh0KTt2YXIgdT1tLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTt2YXIgeXl1ND15eS5yZWRNdWwodSk7eXl1ND15eXU0LnJlZElBZGQoeXl1NCk7eXl1ND15eXU0LnJlZElBZGQoeXl1NCk7dmFyIG54PXRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7bng9bngucmVkSUFkZChueCk7bng9bngucmVkSUFkZChueCk7dmFyIG55PXRoaXMueS5yZWRNdWwodS5yZWRNdWwodC5yZWRJU3ViKHUpKS5yZWRJU3ViKGUucmVkTXVsKGVlKSkpO255PW55LnJlZElBZGQobnkpO255PW55LnJlZElBZGQobnkpO255PW55LnJlZElBZGQobnkpO3ZhciBuej10aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO3JldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCxueSxueil9O0pQb2ludC5wcm90b3R5cGUubXVsPWZ1bmN0aW9uIG11bChrLGtiYXNlKXtrPW5ldyBibihrLGtiYXNlKTtyZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLGspfTtKUG9pbnQucHJvdG90eXBlLmVxPWZ1bmN0aW9uIGVxKHApe2lmKHAudHlwZT09PVwiYWZmaW5lXCIpcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7aWYodGhpcz09PXApcmV0dXJuIHRydWU7dmFyIHoyPXRoaXMuei5yZWRTcXIoKTt2YXIgcHoyPXAuei5yZWRTcXIoKTtpZih0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSE9PTApcmV0dXJuIGZhbHNlO3ZhciB6Mz16Mi5yZWRNdWwodGhpcy56KTt2YXIgcHozPXB6Mi5yZWRNdWwocC56KTtyZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCk9PT0wfTtKUG9pbnQucHJvdG90eXBlLmVxWFRvUD1mdW5jdGlvbiBlcVhUb1AoeCl7dmFyIHpzPXRoaXMuei5yZWRTcXIoKTt2YXIgcng9eC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHpzKTtpZih0aGlzLnguY21wKHJ4KT09PTApcmV0dXJuIHRydWU7dmFyIHhjPXguY2xvbmUoKTt2YXIgdD10aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTtmb3IoOzspe3hjLmlhZGQodGhpcy5jdXJ2ZS5uKTtpZih4Yy5jbXAodGhpcy5jdXJ2ZS5wKT49MClyZXR1cm4gZmFsc2U7cngucmVkSUFkZCh0KTtpZih0aGlzLnguY21wKHJ4KT09PTApcmV0dXJuIHRydWV9fTtKUG9pbnQucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24gaW5zcGVjdCgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXJldHVyblwiPEVDIEpQb2ludCBJbmZpbml0eT5cIjtyZXR1cm5cIjxFQyBKUG9pbnQgeDogXCIrdGhpcy54LnRvU3RyaW5nKDE2LDIpK1wiIHk6IFwiK3RoaXMueS50b1N0cmluZygxNiwyKStcIiB6OiBcIit0aGlzLnoudG9TdHJpbmcoMTYsMikrXCI+XCJ9O0pQb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eT1mdW5jdGlvbiBpc0luZmluaXR5KCl7cmV0dXJuIHRoaXMuei5jbXBuKDApPT09MH07dmFyIGN1cnZlXzE9Y3JlYXRlQ29tbW9uanNNb2R1bGUkMShmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGN1cnZlPWV4cG9ydHM7Y3VydmUuYmFzZT1iYXNlO2N1cnZlLnNob3J0PXNob3J0XzE7Y3VydmUubW9udD1udWxsO2N1cnZlLmVkd2FyZHM9bnVsbH0pO3ZhciBjdXJ2ZXNfMT1jcmVhdGVDb21tb25qc01vZHVsZSQxKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjt2YXIgY3VydmVzPWV4cG9ydHM7dmFyIGFzc2VydD11dGlsc18xJDEuYXNzZXJ0O2Z1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpe2lmKG9wdGlvbnMudHlwZT09PVwic2hvcnRcIil0aGlzLmN1cnZlPW5ldyBjdXJ2ZV8xLnNob3J0KG9wdGlvbnMpO2Vsc2UgaWYob3B0aW9ucy50eXBlPT09XCJlZHdhcmRzXCIpdGhpcy5jdXJ2ZT1uZXcgY3VydmVfMS5lZHdhcmRzKG9wdGlvbnMpO2Vsc2UgdGhpcy5jdXJ2ZT1uZXcgY3VydmVfMS5tb250KG9wdGlvbnMpO3RoaXMuZz10aGlzLmN1cnZlLmc7dGhpcy5uPXRoaXMuY3VydmUubjt0aGlzLmhhc2g9b3B0aW9ucy5oYXNoO2Fzc2VydCh0aGlzLmcudmFsaWRhdGUoKSxcIkludmFsaWQgY3VydmVcIik7YXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksXCJJbnZhbGlkIGN1cnZlLCBHKk4gIT0gT1wiKX1jdXJ2ZXMuUHJlc2V0Q3VydmU9UHJlc2V0Q3VydmU7ZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSxvcHRpb25zKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLG5hbWUse2NvbmZpZ3VyYWJsZTp0cnVlLGVudW1lcmFibGU6dHJ1ZSxnZXQ6ZnVuY3Rpb24oKXt2YXIgY3VydmU9bmV3IFByZXNldEN1cnZlKG9wdGlvbnMpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsbmFtZSx7Y29uZmlndXJhYmxlOnRydWUsZW51bWVyYWJsZTp0cnVlLHZhbHVlOmN1cnZlfSk7cmV0dXJuIGN1cnZlfX0pfWRlZmluZUN1cnZlKFwicDE5MlwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpcInAxOTJcIixwOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmZcIixhOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmNcIixiOlwiNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjFcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzFcIixoYXNoOmhhc2hfMS5zaGEyNTYsZ1JlZDpmYWxzZSxnOltcIjE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyXCIsXCIwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMVwiXX0pO2RlZmluZUN1cnZlKFwicDIyNFwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpcInAyMjRcIixwOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDFcIixhOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmVcIixiOlwiYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjRcIixuOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2RcIixoYXNoOmhhc2hfMS5zaGEyNTYsZ1JlZDpmYWxzZSxnOltcImI3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxXCIsXCJiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNFwiXX0pO2RlZmluZUN1cnZlKFwicDI1NlwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpudWxsLHA6XCJmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZlwiLGE6XCJmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmY1wiLGI6XCI1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YlwiLG46XCJmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MVwiLGhhc2g6aGFzaF8xLnNoYTI1NixnUmVkOmZhbHNlLGc6W1wiNmIxN2QxZjIgZTEyYzQyNDcgZjhiY2U2ZTUgNjNhNDQwZjIgNzcwMzdkODEgMmRlYjMzYTAgZjRhMTM5NDUgZDg5OGMyOTZcIixcIjRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1XCJdfSk7ZGVmaW5lQ3VydmUoXCJwMzg0XCIse3R5cGU6XCJzaG9ydFwiLHByaW1lOm51bGwscDpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIFwiK1wiZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmZcIixhOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmY1wiLGI6XCJiMzMxMmZhNyBlMjNlZTdlNCA5ODhlMDU2YiBlM2Y4MmQxOSAxODFkOWM2ZSBmZTgxNDExMiAwMzE0MDg4ZiBcIitcIjUwMTM4NzVhIGM2NTYzOThkIDhhMmVkMTlkIDJhODVjOGVkIGQzZWMyYWVmXCIsbjpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxIFwiK1wiZjQzNzJkZGYgNTgxYTBkYjIgNDhiMGE3N2EgZWNlYzE5NmEgY2NjNTI5NzNcIixoYXNoOmhhc2hfMS5zaGEzODQsZ1JlZDpmYWxzZSxnOltcImFhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4IFwiK1wiNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjdcIixcIjM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwIFwiK1wiMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWZcIl19KTtkZWZpbmVDdXJ2ZShcInA1MjFcIix7dHlwZTpcInNob3J0XCIscHJpbWU6bnVsbCxwOlwiMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBcIitcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmXCIsYTpcIjAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIFwiK1wiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmY1wiLGI6XCIwMDAwMDA1MSA5NTNlYjk2MSA4ZTFjOWExZiA5MjlhMjFhMCBiNjg1NDBlZSBhMmRhNzI1YiBcIitcIjk5YjMxNWYzIGI4YjQ4OTkxIDhlZjEwOWUxIDU2MTkzOTUxIGVjN2U5MzdiIDE2NTJjMGJkIFwiK1wiM2JiMWJmMDcgMzU3M2RmODggM2QyYzM0ZjEgZWY0NTFmZDQgNmI1MDNmMDBcIixuOlwiMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgXCIrXCJmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYSA1MTg2ODc4MyBiZjJmOTY2YiA3ZmNjMDE0OCBcIitcImY3MDlhNWQwIDNiYjVjOWI4IDg5OWM0N2FlIGJiNmZiNzFlIDkxMzg2NDA5XCIsaGFzaDpoYXNoXzEuc2hhNTEyLGdSZWQ6ZmFsc2UsZzpbXCIwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSBcIitcIjA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3IFwiK1wiYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjZcIixcIjAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5IFwiK1wiNTc5YjQ0NjggMTdhZmJkMTcgMjczZTY2MmMgOTdlZTcyOTkgNWVmNDI2NDAgYzU1MGI5MDEgXCIrXCIzZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MFwiXX0pO2RlZmluZUN1cnZlKFwiY3VydmUyNTUxOVwiLHt0eXBlOlwibW9udFwiLHByaW1lOlwicDI1NTE5XCIscDpcIjdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWRcIixhOlwiNzZkMDZcIixiOlwiMVwiLG46XCIxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkXCIsaGFzaDpoYXNoXzEuc2hhMjU2LGdSZWQ6ZmFsc2UsZzpbXCI5XCJdfSk7ZGVmaW5lQ3VydmUoXCJlZDI1NTE5XCIse3R5cGU6XCJlZHdhcmRzXCIscHJpbWU6XCJwMjU1MTlcIixwOlwiN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZFwiLGE6XCItMVwiLGM6XCIxXCIsZDpcIjUyMDM2Y2VlMmI2ZmZlNzMgOGNjNzQwNzk3Nzc5ZTg5OCAwMDcwMGE0ZDQxNDFkOGFiIDc1ZWI0ZGNhMTM1OTc4YTNcIixuOlwiMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZFwiLGhhc2g6aGFzaF8xLnNoYTI1NixnUmVkOmZhbHNlLGc6W1wiMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYVwiLFwiNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OFwiXX0pO3ZhciBwcmU7dHJ5e3ByZT1udWxsLmNyYXNoKCl9Y2F0Y2goZSl7cHJlPXVuZGVmaW5lZH1kZWZpbmVDdXJ2ZShcInNlY3AyNTZrMVwiLHt0eXBlOlwic2hvcnRcIixwcmltZTpcImsyNTZcIixwOlwiZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmZcIixhOlwiMFwiLGI6XCI3XCIsbjpcImZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxXCIsaDpcIjFcIixoYXNoOmhhc2hfMS5zaGEyNTYsYmV0YTpcIjdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWVcIixsYW1iZGE6XCI1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyXCIsYmFzaXM6W3thOlwiMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTVcIixiOlwiLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzXCJ9LHthOlwiMTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4XCIsYjpcIjMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1XCJ9XSxnUmVkOmZhbHNlLGc6W1wiNzliZTY2N2VmOWRjYmJhYzU1YTA2Mjk1Y2U4NzBiMDcwMjliZmNkYjJkY2UyOGQ5NTlmMjgxNWIxNmY4MTc5OFwiLFwiNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOFwiLHByZV19KX0pO1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlyZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO3RoaXMuaGFzaD1vcHRpb25zLmhhc2g7dGhpcy5wcmVkUmVzaXN0PSEhb3B0aW9ucy5wcmVkUmVzaXN0O3RoaXMub3V0TGVuPXRoaXMuaGFzaC5vdXRTaXplO3RoaXMubWluRW50cm9weT1vcHRpb25zLm1pbkVudHJvcHl8fHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7dGhpcy5fcmVzZWVkPW51bGw7dGhpcy5yZXNlZWRJbnRlcnZhbD1udWxsO3RoaXMuSz1udWxsO3RoaXMuVj1udWxsO3ZhciBlbnRyb3B5PXV0aWxzXzEudG9BcnJheShvcHRpb25zLmVudHJvcHksb3B0aW9ucy5lbnRyb3B5RW5jfHxcImhleFwiKTt2YXIgbm9uY2U9dXRpbHNfMS50b0FycmF5KG9wdGlvbnMubm9uY2Usb3B0aW9ucy5ub25jZUVuY3x8XCJoZXhcIik7dmFyIHBlcnM9dXRpbHNfMS50b0FycmF5KG9wdGlvbnMucGVycyxvcHRpb25zLnBlcnNFbmN8fFwiaGV4XCIpO21pbmltYWxpc3RpY0Fzc2VydCQxKGVudHJvcHkubGVuZ3RoPj10aGlzLm1pbkVudHJvcHkvOCxcIk5vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogXCIrdGhpcy5taW5FbnRyb3B5K1wiIGJpdHNcIik7dGhpcy5faW5pdChlbnRyb3B5LG5vbmNlLHBlcnMpfXZhciBobWFjRHJiZz1IbWFjRFJCRztIbWFjRFJCRy5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24gaW5pdChlbnRyb3B5LG5vbmNlLHBlcnMpe3ZhciBzZWVkPWVudHJvcHkuY29uY2F0KG5vbmNlKS5jb25jYXQocGVycyk7dGhpcy5LPW5ldyBBcnJheSh0aGlzLm91dExlbi84KTt0aGlzLlY9bmV3IEFycmF5KHRoaXMub3V0TGVuLzgpO2Zvcih2YXIgaT0wO2k8dGhpcy5WLmxlbmd0aDtpKyspe3RoaXMuS1tpXT0wO3RoaXMuVltpXT0xfXRoaXMuX3VwZGF0ZShzZWVkKTt0aGlzLl9yZXNlZWQ9MTt0aGlzLnJlc2VlZEludGVydmFsPTI4MTQ3NDk3NjcxMDY1Nn07SG1hY0RSQkcucHJvdG90eXBlLl9obWFjPWZ1bmN0aW9uIGhtYWMoKXtyZXR1cm4gbmV3IGhhc2hfMS5obWFjKHRoaXMuaGFzaCx0aGlzLkspfTtIbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbiB1cGRhdGUoc2VlZCl7dmFyIGttYWM9dGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLnVwZGF0ZShbMF0pO2lmKHNlZWQpa21hYz1rbWFjLnVwZGF0ZShzZWVkKTt0aGlzLks9a21hYy5kaWdlc3QoKTt0aGlzLlY9dGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO2lmKCFzZWVkKXJldHVybjt0aGlzLks9dGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLnVwZGF0ZShbMV0pLnVwZGF0ZShzZWVkKS5kaWdlc3QoKTt0aGlzLlY9dGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpfTtIbWFjRFJCRy5wcm90b3R5cGUucmVzZWVkPWZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LGVudHJvcHlFbmMsYWRkLGFkZEVuYyl7aWYodHlwZW9mIGVudHJvcHlFbmMhPT1cInN0cmluZ1wiKXthZGRFbmM9YWRkO2FkZD1lbnRyb3B5RW5jO2VudHJvcHlFbmM9bnVsbH1lbnRyb3B5PXV0aWxzXzEudG9BcnJheShlbnRyb3B5LGVudHJvcHlFbmMpO2FkZD11dGlsc18xLnRvQXJyYXkoYWRkLGFkZEVuYyk7bWluaW1hbGlzdGljQXNzZXJ0JDEoZW50cm9weS5sZW5ndGg+PXRoaXMubWluRW50cm9weS84LFwiTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiBcIit0aGlzLm1pbkVudHJvcHkrXCIgYml0c1wiKTt0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkfHxbXSkpO3RoaXMuX3Jlc2VlZD0xfTtIbWFjRFJCRy5wcm90b3R5cGUuZ2VuZXJhdGU9ZnVuY3Rpb24gZ2VuZXJhdGUobGVuLGVuYyxhZGQsYWRkRW5jKXtpZih0aGlzLl9yZXNlZWQ+dGhpcy5yZXNlZWRJbnRlcnZhbCl0aHJvdyBuZXcgRXJyb3IoXCJSZXNlZWQgaXMgcmVxdWlyZWRcIik7aWYodHlwZW9mIGVuYyE9PVwic3RyaW5nXCIpe2FkZEVuYz1hZGQ7YWRkPWVuYztlbmM9bnVsbH1pZihhZGQpe2FkZD11dGlsc18xLnRvQXJyYXkoYWRkLGFkZEVuY3x8XCJoZXhcIik7dGhpcy5fdXBkYXRlKGFkZCl9dmFyIHRlbXA9W107d2hpbGUodGVtcC5sZW5ndGg8bGVuKXt0aGlzLlY9dGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO3RlbXA9dGVtcC5jb25jYXQodGhpcy5WKX12YXIgcmVzPXRlbXAuc2xpY2UoMCxsZW4pO3RoaXMuX3VwZGF0ZShhZGQpO3RoaXMuX3Jlc2VlZCsrO3JldHVybiB1dGlsc18xLmVuY29kZShyZXMsZW5jKX07XCJ1c2Ugc3RyaWN0XCI7dmFyIGFzc2VydCQzPXV0aWxzXzEkMS5hc3NlcnQ7ZnVuY3Rpb24gS2V5UGFpcihlYyxvcHRpb25zKXt0aGlzLmVjPWVjO3RoaXMucHJpdj1udWxsO3RoaXMucHViPW51bGw7aWYob3B0aW9ucy5wcml2KXRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LG9wdGlvbnMucHJpdkVuYyk7aWYob3B0aW9ucy5wdWIpdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLG9wdGlvbnMucHViRW5jKX12YXIga2V5PUtleVBhaXI7S2V5UGFpci5mcm9tUHVibGljPWZ1bmN0aW9uIGZyb21QdWJsaWMoZWMscHViLGVuYyl7aWYocHViIGluc3RhbmNlb2YgS2V5UGFpcilyZXR1cm4gcHViO3JldHVybiBuZXcgS2V5UGFpcihlYyx7cHViOnB1YixwdWJFbmM6ZW5jfSl9O0tleVBhaXIuZnJvbVByaXZhdGU9ZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMscHJpdixlbmMpe2lmKHByaXYgaW5zdGFuY2VvZiBLZXlQYWlyKXJldHVybiBwcml2O3JldHVybiBuZXcgS2V5UGFpcihlYyx7cHJpdjpwcml2LHByaXZFbmM6ZW5jfSl9O0tleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uIHZhbGlkYXRlKCl7dmFyIHB1Yj10aGlzLmdldFB1YmxpYygpO2lmKHB1Yi5pc0luZmluaXR5KCkpcmV0dXJue3Jlc3VsdDpmYWxzZSxyZWFzb246XCJJbnZhbGlkIHB1YmxpYyBrZXlcIn07aWYoIXB1Yi52YWxpZGF0ZSgpKXJldHVybntyZXN1bHQ6ZmFsc2UscmVhc29uOlwiUHVibGljIGtleSBpcyBub3QgYSBwb2ludFwifTtpZighcHViLm11bCh0aGlzLmVjLmN1cnZlLm4pLmlzSW5maW5pdHkoKSlyZXR1cm57cmVzdWx0OmZhbHNlLHJlYXNvbjpcIlB1YmxpYyBrZXkgKiBOICE9IE9cIn07cmV0dXJue3Jlc3VsdDp0cnVlLHJlYXNvbjpudWxsfX07S2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljPWZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LGVuYyl7aWYodHlwZW9mIGNvbXBhY3Q9PT1cInN0cmluZ1wiKXtlbmM9Y29tcGFjdDtjb21wYWN0PW51bGx9aWYoIXRoaXMucHViKXRoaXMucHViPXRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtpZighZW5jKXJldHVybiB0aGlzLnB1YjtyZXR1cm4gdGhpcy5wdWIuZW5jb2RlKGVuYyxjb21wYWN0KX07S2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZT1mdW5jdGlvbiBnZXRQcml2YXRlKGVuYyl7aWYoZW5jPT09XCJoZXhcIilyZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LDIpO2Vsc2UgcmV0dXJuIHRoaXMucHJpdn07S2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFByaXZhdGU9ZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LGVuYyl7dGhpcy5wcml2PW5ldyBibihrZXksZW5jfHwxNik7dGhpcy5wcml2PXRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubil9O0tleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWM9ZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksZW5jKXtpZihrZXkueHx8a2V5Lnkpe2lmKHRoaXMuZWMuY3VydmUudHlwZT09PVwibW9udFwiKXthc3NlcnQkMyhrZXkueCxcIk5lZWQgeCBjb29yZGluYXRlXCIpfWVsc2UgaWYodGhpcy5lYy5jdXJ2ZS50eXBlPT09XCJzaG9ydFwifHx0aGlzLmVjLmN1cnZlLnR5cGU9PT1cImVkd2FyZHNcIil7YXNzZXJ0JDMoa2V5LngmJmtleS55LFwiTmVlZCBib3RoIHggYW5kIHkgY29vcmRpbmF0ZVwiKX10aGlzLnB1Yj10aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LGtleS55KTtyZXR1cm59dGhpcy5wdWI9dGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksZW5jKX07S2V5UGFpci5wcm90b3R5cGUuZGVyaXZlPWZ1bmN0aW9uIGRlcml2ZShwdWIpe2lmKCFwdWIudmFsaWRhdGUoKSl7YXNzZXJ0JDMocHViLnZhbGlkYXRlKCksXCJwdWJsaWMgcG9pbnQgbm90IHZhbGlkYXRlZFwiKX1yZXR1cm4gcHViLm11bCh0aGlzLnByaXYpLmdldFgoKX07S2V5UGFpci5wcm90b3R5cGUuc2lnbj1mdW5jdGlvbiBzaWduKG1zZyxlbmMsb3B0aW9ucyl7cmV0dXJuIHRoaXMuZWMuc2lnbihtc2csdGhpcyxlbmMsb3B0aW9ucyl9O0tleVBhaXIucHJvdG90eXBlLnZlcmlmeT1mdW5jdGlvbiB2ZXJpZnkobXNnLHNpZ25hdHVyZSl7cmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZyxzaWduYXR1cmUsdGhpcyl9O0tleVBhaXIucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24gaW5zcGVjdCgpe3JldHVyblwiPEtleSBwcml2OiBcIisodGhpcy5wcml2JiZ0aGlzLnByaXYudG9TdHJpbmcoMTYsMikpK1wiIHB1YjogXCIrKHRoaXMucHViJiZ0aGlzLnB1Yi5pbnNwZWN0KCkpK1wiID5cIn07XCJ1c2Ugc3RyaWN0XCI7dmFyIGFzc2VydCQ0PXV0aWxzXzEkMS5hc3NlcnQ7ZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsZW5jKXtpZihvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKXJldHVybiBvcHRpb25zO2lmKHRoaXMuX2ltcG9ydERFUihvcHRpb25zLGVuYykpcmV0dXJuO2Fzc2VydCQ0KG9wdGlvbnMuciYmb3B0aW9ucy5zLFwiU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzXCIpO3RoaXMucj1uZXcgYm4ob3B0aW9ucy5yLDE2KTt0aGlzLnM9bmV3IGJuKG9wdGlvbnMucywxNik7aWYob3B0aW9ucy5yZWNvdmVyeVBhcmFtPT09dW5kZWZpbmVkKXRoaXMucmVjb3ZlcnlQYXJhbT1udWxsO2Vsc2UgdGhpcy5yZWNvdmVyeVBhcmFtPW9wdGlvbnMucmVjb3ZlcnlQYXJhbX12YXIgc2lnbmF0dXJlPVNpZ25hdHVyZTtmdW5jdGlvbiBQb3NpdGlvbigpe3RoaXMucGxhY2U9MH1mdW5jdGlvbiBnZXRMZW5ndGgoYnVmLHApe3ZhciBpbml0aWFsPWJ1ZltwLnBsYWNlKytdO2lmKCEoaW5pdGlhbCYxMjgpKXtyZXR1cm4gaW5pdGlhbH12YXIgb2N0ZXRMZW49aW5pdGlhbCYxNTtpZihvY3RldExlbj09PTB8fG9jdGV0TGVuPjQpe3JldHVybiBmYWxzZX12YXIgdmFsPTA7Zm9yKHZhciBpPTAsb2ZmPXAucGxhY2U7aTxvY3RldExlbjtpKyssb2ZmKyspe3ZhbDw8PTg7dmFsfD1idWZbb2ZmXTt2YWw+Pj49MH1pZih2YWw8PTEyNyl7cmV0dXJuIGZhbHNlfXAucGxhY2U9b2ZmO3JldHVybiB2YWx9ZnVuY3Rpb24gcm1QYWRkaW5nKGJ1Zil7dmFyIGk9MDt2YXIgbGVuPWJ1Zi5sZW5ndGgtMTt3aGlsZSghYnVmW2ldJiYhKGJ1ZltpKzFdJjEyOCkmJmk8bGVuKXtpKyt9aWYoaT09PTApe3JldHVybiBidWZ9cmV0dXJuIGJ1Zi5zbGljZShpKX1TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVI9ZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLGVuYyl7ZGF0YT11dGlsc18xJDEudG9BcnJheShkYXRhLGVuYyk7dmFyIHA9bmV3IFBvc2l0aW9uO2lmKGRhdGFbcC5wbGFjZSsrXSE9PTQ4KXtyZXR1cm4gZmFsc2V9dmFyIGxlbj1nZXRMZW5ndGgoZGF0YSxwKTtpZihsZW49PT1mYWxzZSl7cmV0dXJuIGZhbHNlfWlmKGxlbitwLnBsYWNlIT09ZGF0YS5sZW5ndGgpe3JldHVybiBmYWxzZX1pZihkYXRhW3AucGxhY2UrK10hPT0yKXtyZXR1cm4gZmFsc2V9dmFyIHJsZW49Z2V0TGVuZ3RoKGRhdGEscCk7aWYocmxlbj09PWZhbHNlKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZGF0YS5zbGljZShwLnBsYWNlLHJsZW4rcC5wbGFjZSk7cC5wbGFjZSs9cmxlbjtpZihkYXRhW3AucGxhY2UrK10hPT0yKXtyZXR1cm4gZmFsc2V9dmFyIHNsZW49Z2V0TGVuZ3RoKGRhdGEscCk7aWYoc2xlbj09PWZhbHNlKXtyZXR1cm4gZmFsc2V9aWYoZGF0YS5sZW5ndGghPT1zbGVuK3AucGxhY2Upe3JldHVybiBmYWxzZX12YXIgcz1kYXRhLnNsaWNlKHAucGxhY2Usc2xlbitwLnBsYWNlKTtpZihyWzBdPT09MCl7aWYoclsxXSYxMjgpe3I9ci5zbGljZSgxKX1lbHNle3JldHVybiBmYWxzZX19aWYoc1swXT09PTApe2lmKHNbMV0mMTI4KXtzPXMuc2xpY2UoMSl9ZWxzZXtyZXR1cm4gZmFsc2V9fXRoaXMucj1uZXcgYm4ocik7dGhpcy5zPW5ldyBibihzKTt0aGlzLnJlY292ZXJ5UGFyYW09bnVsbDtyZXR1cm4gdHJ1ZX07ZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFycixsZW4pe2lmKGxlbjwxMjgpe2Fyci5wdXNoKGxlbik7cmV0dXJufXZhciBvY3RldHM9MSsoTWF0aC5sb2cobGVuKS9NYXRoLkxOMj4+PjMpO2Fyci5wdXNoKG9jdGV0c3wxMjgpO3doaWxlKC0tb2N0ZXRzKXthcnIucHVzaChsZW4+Pj4ob2N0ZXRzPDwzKSYyNTUpfWFyci5wdXNoKGxlbil9U2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUj1mdW5jdGlvbiB0b0RFUihlbmMpe3ZhciByPXRoaXMuci50b0FycmF5KCk7dmFyIHM9dGhpcy5zLnRvQXJyYXkoKTtpZihyWzBdJjEyOClyPVswXS5jb25jYXQocik7aWYoc1swXSYxMjgpcz1bMF0uY29uY2F0KHMpO3I9cm1QYWRkaW5nKHIpO3M9cm1QYWRkaW5nKHMpO3doaWxlKCFzWzBdJiYhKHNbMV0mMTI4KSl7cz1zLnNsaWNlKDEpfXZhciBhcnI9WzJdO2NvbnN0cnVjdExlbmd0aChhcnIsci5sZW5ndGgpO2Fycj1hcnIuY29uY2F0KHIpO2Fyci5wdXNoKDIpO2NvbnN0cnVjdExlbmd0aChhcnIscy5sZW5ndGgpO3ZhciBiYWNrSGFsZj1hcnIuY29uY2F0KHMpO3ZhciByZXM9WzQ4XTtjb25zdHJ1Y3RMZW5ndGgocmVzLGJhY2tIYWxmLmxlbmd0aCk7cmVzPXJlcy5jb25jYXQoYmFja0hhbGYpO3JldHVybiB1dGlsc18xJDEuZW5jb2RlKHJlcyxlbmMpfTtcInVzZSBzdHJpY3RcIjt2YXIgcmFuZD1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkXCIpfTt2YXIgYXNzZXJ0JDU9dXRpbHNfMSQxLmFzc2VydDtmdW5jdGlvbiBFQyhvcHRpb25zKXtpZighKHRoaXMgaW5zdGFuY2VvZiBFQykpcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtpZih0eXBlb2Ygb3B0aW9ucz09PVwic3RyaW5nXCIpe2Fzc2VydCQ1KE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjdXJ2ZXNfMSxvcHRpb25zKSxcIlVua25vd24gY3VydmUgXCIrb3B0aW9ucyk7b3B0aW9ucz1jdXJ2ZXNfMVtvcHRpb25zXX1pZihvcHRpb25zIGluc3RhbmNlb2YgY3VydmVzXzEuUHJlc2V0Q3VydmUpb3B0aW9ucz17Y3VydmU6b3B0aW9uc307dGhpcy5jdXJ2ZT1vcHRpb25zLmN1cnZlLmN1cnZlO3RoaXMubj10aGlzLmN1cnZlLm47dGhpcy5uaD10aGlzLm4udXNocm4oMSk7dGhpcy5nPXRoaXMuY3VydmUuZzt0aGlzLmc9b3B0aW9ucy5jdXJ2ZS5nO3RoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSsxKTt0aGlzLmhhc2g9b3B0aW9ucy5oYXNofHxvcHRpb25zLmN1cnZlLmhhc2h9dmFyIGVjPUVDO0VDLnByb3RvdHlwZS5rZXlQYWlyPWZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucyl7cmV0dXJuIG5ldyBrZXkodGhpcyxvcHRpb25zKX07RUMucHJvdG90eXBlLmtleUZyb21Qcml2YXRlPWZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsZW5jKXtyZXR1cm4ga2V5LmZyb21Qcml2YXRlKHRoaXMscHJpdixlbmMpfTtFQy5wcm90b3R5cGUua2V5RnJvbVB1YmxpYz1mdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YixlbmMpe3JldHVybiBrZXkuZnJvbVB1YmxpYyh0aGlzLHB1YixlbmMpfTtFQy5wcm90b3R5cGUuZ2VuS2V5UGFpcj1mdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpe2lmKCFvcHRpb25zKW9wdGlvbnM9e307dmFyIGRyYmc9bmV3IGhtYWNEcmJnKHtoYXNoOnRoaXMuaGFzaCxwZXJzOm9wdGlvbnMucGVycyxwZXJzRW5jOm9wdGlvbnMucGVyc0VuY3x8XCJ1dGY4XCIsZW50cm9weTpvcHRpb25zLmVudHJvcHl8fHJhbmQodGhpcy5oYXNoLmhtYWNTdHJlbmd0aCksZW50cm9weUVuYzpvcHRpb25zLmVudHJvcHkmJm9wdGlvbnMuZW50cm9weUVuY3x8XCJ1dGY4XCIsbm9uY2U6dGhpcy5uLnRvQXJyYXkoKX0pO3ZhciBieXRlcz10aGlzLm4uYnl0ZUxlbmd0aCgpO3ZhciBuczI9dGhpcy5uLnN1YihuZXcgYm4oMikpO2Zvcig7Oyl7dmFyIHByaXY9bmV3IGJuKGRyYmcuZ2VuZXJhdGUoYnl0ZXMpKTtpZihwcml2LmNtcChuczIpPjApY29udGludWU7cHJpdi5pYWRkbigxKTtyZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KX19O0VDLnByb3RvdHlwZS5fdHJ1bmNhdGVUb049ZnVuY3Rpb24gX3RydW5jYXRlVG9OKG1zZyx0cnVuY09ubHkpe3ZhciBkZWx0YT1tc2cuYnl0ZUxlbmd0aCgpKjgtdGhpcy5uLmJpdExlbmd0aCgpO2lmKGRlbHRhPjApbXNnPW1zZy51c2hybihkZWx0YSk7aWYoIXRydW5jT25seSYmbXNnLmNtcCh0aGlzLm4pPj0wKXJldHVybiBtc2cuc3ViKHRoaXMubik7ZWxzZSByZXR1cm4gbXNnfTtFQy5wcm90b3R5cGUuc2lnbj1mdW5jdGlvbiBzaWduKG1zZyxrZXksZW5jLG9wdGlvbnMpe2lmKHR5cGVvZiBlbmM9PT1cIm9iamVjdFwiKXtvcHRpb25zPWVuYztlbmM9bnVsbH1pZighb3B0aW9ucylvcHRpb25zPXt9O2tleT10aGlzLmtleUZyb21Qcml2YXRlKGtleSxlbmMpO21zZz10aGlzLl90cnVuY2F0ZVRvTihuZXcgYm4obXNnLDE2KSk7dmFyIGJ5dGVzPXRoaXMubi5ieXRlTGVuZ3RoKCk7dmFyIGJrZXk9a2V5LmdldFByaXZhdGUoKS50b0FycmF5KFwiYmVcIixieXRlcyk7dmFyIG5vbmNlPW1zZy50b0FycmF5KFwiYmVcIixieXRlcyk7dmFyIGRyYmc9bmV3IGhtYWNEcmJnKHtoYXNoOnRoaXMuaGFzaCxlbnRyb3B5OmJrZXksbm9uY2U6bm9uY2UscGVyczpvcHRpb25zLnBlcnMscGVyc0VuYzpvcHRpb25zLnBlcnNFbmN8fFwidXRmOFwifSk7dmFyIG5zMT10aGlzLm4uc3ViKG5ldyBibigxKSk7Zm9yKHZhciBpdGVyPTA7O2l0ZXIrKyl7dmFyIGs9b3B0aW9ucy5rP29wdGlvbnMuayhpdGVyKTpuZXcgYm4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7az10aGlzLl90cnVuY2F0ZVRvTihrLHRydWUpO2lmKGsuY21wbigxKTw9MHx8ay5jbXAobnMxKT49MCljb250aW51ZTt2YXIga3A9dGhpcy5nLm11bChrKTtpZihrcC5pc0luZmluaXR5KCkpY29udGludWU7dmFyIGtwWD1rcC5nZXRYKCk7dmFyIHI9a3BYLnVtb2QodGhpcy5uKTtpZihyLmNtcG4oMCk9PT0wKWNvbnRpbnVlO3ZhciBzPWsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpO3M9cy51bW9kKHRoaXMubik7aWYocy5jbXBuKDApPT09MCljb250aW51ZTt2YXIgcmVjb3ZlcnlQYXJhbT0oa3AuZ2V0WSgpLmlzT2RkKCk/MTowKXwoa3BYLmNtcChyKSE9PTA/MjowKTtpZihvcHRpb25zLmNhbm9uaWNhbCYmcy5jbXAodGhpcy5uaCk+MCl7cz10aGlzLm4uc3ViKHMpO3JlY292ZXJ5UGFyYW1ePTF9cmV0dXJuIG5ldyBzaWduYXR1cmUoe3I6cixzOnMscmVjb3ZlcnlQYXJhbTpyZWNvdmVyeVBhcmFtfSl9fTtFQy5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uIHZlcmlmeShtc2csc2lnbmF0dXJlJDEsa2V5LGVuYyl7bXNnPXRoaXMuX3RydW5jYXRlVG9OKG5ldyBibihtc2csMTYpKTtrZXk9dGhpcy5rZXlGcm9tUHVibGljKGtleSxlbmMpO3NpZ25hdHVyZSQxPW5ldyBzaWduYXR1cmUoc2lnbmF0dXJlJDEsXCJoZXhcIik7dmFyIHI9c2lnbmF0dXJlJDEucjt2YXIgcz1zaWduYXR1cmUkMS5zO2lmKHIuY21wbigxKTwwfHxyLmNtcCh0aGlzLm4pPj0wKXJldHVybiBmYWxzZTtpZihzLmNtcG4oMSk8MHx8cy5jbXAodGhpcy5uKT49MClyZXR1cm4gZmFsc2U7dmFyIHNpbnY9cy5pbnZtKHRoaXMubik7dmFyIHUxPXNpbnYubXVsKG1zZykudW1vZCh0aGlzLm4pO3ZhciB1Mj1zaW52Lm11bChyKS51bW9kKHRoaXMubik7dmFyIHA7aWYoIXRoaXMuY3VydmUuX21heHdlbGxUcmljayl7cD10aGlzLmcubXVsQWRkKHUxLGtleS5nZXRQdWJsaWMoKSx1Mik7aWYocC5pc0luZmluaXR5KCkpcmV0dXJuIGZhbHNlO3JldHVybiBwLmdldFgoKS51bW9kKHRoaXMubikuY21wKHIpPT09MH1wPXRoaXMuZy5qbXVsQWRkKHUxLGtleS5nZXRQdWJsaWMoKSx1Mik7aWYocC5pc0luZmluaXR5KCkpcmV0dXJuIGZhbHNlO3JldHVybiBwLmVxWFRvUChyKX07RUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXk9ZnVuY3Rpb24obXNnLHNpZ25hdHVyZSQxLGosZW5jKXthc3NlcnQkNSgoMyZqKT09PWosXCJUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzXCIpO3NpZ25hdHVyZSQxPW5ldyBzaWduYXR1cmUoc2lnbmF0dXJlJDEsZW5jKTt2YXIgbj10aGlzLm47dmFyIGU9bmV3IGJuKG1zZyk7dmFyIHI9c2lnbmF0dXJlJDEucjt2YXIgcz1zaWduYXR1cmUkMS5zO3ZhciBpc1lPZGQ9aiYxO3ZhciBpc1NlY29uZEtleT1qPj4xO2lmKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpPj0wJiZpc1NlY29uZEtleSl0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGVcIik7aWYoaXNTZWNvbmRLZXkpcj10aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSxpc1lPZGQpO2Vsc2Ugcj10aGlzLmN1cnZlLnBvaW50RnJvbVgocixpc1lPZGQpO3ZhciBySW52PXNpZ25hdHVyZSQxLnIuaW52bShuKTt2YXIgczE9bi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7dmFyIHMyPXMubXVsKHJJbnYpLnVtb2Qobik7cmV0dXJuIHRoaXMuZy5tdWxBZGQoczEscixzMil9O0VDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtPWZ1bmN0aW9uKGUsc2lnbmF0dXJlJDEsUSxlbmMpe3NpZ25hdHVyZSQxPW5ldyBzaWduYXR1cmUoc2lnbmF0dXJlJDEsZW5jKTtpZihzaWduYXR1cmUkMS5yZWNvdmVyeVBhcmFtIT09bnVsbClyZXR1cm4gc2lnbmF0dXJlJDEucmVjb3ZlcnlQYXJhbTtmb3IodmFyIGk9MDtpPDQ7aSsrKXt2YXIgUXByaW1lO3RyeXtRcHJpbWU9dGhpcy5yZWNvdmVyUHViS2V5KGUsc2lnbmF0dXJlJDEsaSl9Y2F0Y2goZSl7Y29udGludWV9aWYoUXByaW1lLmVxKFEpKXJldHVybiBpfXRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvclwiKX07dmFyIGVsbGlwdGljXzE9Y3JlYXRlQ29tbW9uanNNb2R1bGUkMShmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGVsbGlwdGljPWV4cG9ydHM7ZWxsaXB0aWMudmVyc2lvbj17dmVyc2lvbjpcIjYuNS40XCJ9LnZlcnNpb247ZWxsaXB0aWMudXRpbHM9dXRpbHNfMSQxO2VsbGlwdGljLnJhbmQ9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZFwiKX07ZWxsaXB0aWMuY3VydmU9Y3VydmVfMTtlbGxpcHRpYy5jdXJ2ZXM9Y3VydmVzXzE7ZWxsaXB0aWMuZWM9ZWM7ZWxsaXB0aWMuZWRkc2E9bnVsbH0pO3ZhciBFQyQxPWVsbGlwdGljXzEuZWM7Y29uc3QgdmVyc2lvbiRiPVwic2lnbmluZy1rZXkvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkZz1uZXcgTG9nZ2VyKHZlcnNpb24kYik7bGV0IF9jdXJ2ZT1udWxsO2Z1bmN0aW9uIGdldEN1cnZlKCl7aWYoIV9jdXJ2ZSl7X2N1cnZlPW5ldyBFQyQxKFwic2VjcDI1NmsxXCIpfXJldHVybiBfY3VydmV9Y2xhc3MgU2lnbmluZ0tleXtjb25zdHJ1Y3Rvcihwcml2YXRlS2V5KXtkZWZpbmVSZWFkT25seSh0aGlzLFwiY3VydmVcIixcInNlY3AyNTZrMVwiKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJpdmF0ZUtleVwiLGhleGxpZnkocHJpdmF0ZUtleSkpO2NvbnN0IGtleVBhaXI9Z2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicHVibGljS2V5XCIsXCIweFwiK2tleVBhaXIuZ2V0UHVibGljKGZhbHNlLFwiaGV4XCIpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiY29tcHJlc3NlZFB1YmxpY0tleVwiLFwiMHhcIitrZXlQYWlyLmdldFB1YmxpYyh0cnVlLFwiaGV4XCIpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2lzU2lnbmluZ0tleVwiLHRydWUpfV9hZGRQb2ludChvdGhlcil7Y29uc3QgcDA9Z2V0Q3VydmUoKS5rZXlGcm9tUHVibGljKGFycmF5aWZ5KHRoaXMucHVibGljS2V5KSk7Y29uc3QgcDE9Z2V0Q3VydmUoKS5rZXlGcm9tUHVibGljKGFycmF5aWZ5KG90aGVyKSk7cmV0dXJuXCIweFwiK3AwLnB1Yi5hZGQocDEucHViKS5lbmNvZGVDb21wcmVzc2VkKFwiaGV4XCIpfXNpZ25EaWdlc3QoZGlnZXN0KXtjb25zdCBrZXlQYWlyPWdldEN1cnZlKCkua2V5RnJvbVByaXZhdGUoYXJyYXlpZnkodGhpcy5wcml2YXRlS2V5KSk7Y29uc3QgZGlnZXN0Qnl0ZXM9YXJyYXlpZnkoZGlnZXN0KTtpZihkaWdlc3RCeXRlcy5sZW5ndGghPT0zMil7bG9nZ2VyJGcudGhyb3dBcmd1bWVudEVycm9yKFwiYmFkIGRpZ2VzdCBsZW5ndGhcIixcImRpZ2VzdFwiLGRpZ2VzdCl9Y29uc3Qgc2lnbmF0dXJlPWtleVBhaXIuc2lnbihkaWdlc3RCeXRlcyx7Y2Fub25pY2FsOnRydWV9KTtyZXR1cm4gc3BsaXRTaWduYXR1cmUoe3JlY292ZXJ5UGFyYW06c2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0scjpoZXhaZXJvUGFkKFwiMHhcIitzaWduYXR1cmUuci50b1N0cmluZygxNiksMzIpLHM6aGV4WmVyb1BhZChcIjB4XCIrc2lnbmF0dXJlLnMudG9TdHJpbmcoMTYpLDMyKX0pfWNvbXB1dGVTaGFyZWRTZWNyZXQob3RoZXJLZXkpe2NvbnN0IGtleVBhaXI9Z2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtjb25zdCBvdGhlcktleVBhaXI9Z2V0Q3VydmUoKS5rZXlGcm9tUHVibGljKGFycmF5aWZ5KGNvbXB1dGVQdWJsaWNLZXkob3RoZXJLZXkpKSk7cmV0dXJuIGhleFplcm9QYWQoXCIweFwiK2tleVBhaXIuZGVyaXZlKG90aGVyS2V5UGFpci5nZXRQdWJsaWMoKSkudG9TdHJpbmcoMTYpLDMyKX1zdGF0aWMgaXNTaWduaW5nS2V5KHZhbHVlKXtyZXR1cm4hISh2YWx1ZSYmdmFsdWUuX2lzU2lnbmluZ0tleSl9fWZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkoZGlnZXN0LHNpZ25hdHVyZSl7Y29uc3Qgc2lnPXNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSk7Y29uc3QgcnM9e3I6YXJyYXlpZnkoc2lnLnIpLHM6YXJyYXlpZnkoc2lnLnMpfTtyZXR1cm5cIjB4XCIrZ2V0Q3VydmUoKS5yZWNvdmVyUHViS2V5KGFycmF5aWZ5KGRpZ2VzdCkscnMsc2lnLnJlY292ZXJ5UGFyYW0pLmVuY29kZShcImhleFwiLGZhbHNlKX1mdW5jdGlvbiBjb21wdXRlUHVibGljS2V5KGtleSxjb21wcmVzc2VkKXtjb25zdCBieXRlcz1hcnJheWlmeShrZXkpO2lmKGJ5dGVzLmxlbmd0aD09PTMyKXtjb25zdCBzaWduaW5nS2V5PW5ldyBTaWduaW5nS2V5KGJ5dGVzKTtpZihjb21wcmVzc2VkKXtyZXR1cm5cIjB4XCIrZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShieXRlcykuZ2V0UHVibGljKHRydWUsXCJoZXhcIil9cmV0dXJuIHNpZ25pbmdLZXkucHVibGljS2V5fWVsc2UgaWYoYnl0ZXMubGVuZ3RoPT09MzMpe2lmKGNvbXByZXNzZWQpe3JldHVybiBoZXhsaWZ5KGJ5dGVzKX1yZXR1cm5cIjB4XCIrZ2V0Q3VydmUoKS5rZXlGcm9tUHVibGljKGJ5dGVzKS5nZXRQdWJsaWMoZmFsc2UsXCJoZXhcIil9ZWxzZSBpZihieXRlcy5sZW5ndGg9PT02NSl7aWYoIWNvbXByZXNzZWQpe3JldHVybiBoZXhsaWZ5KGJ5dGVzKX1yZXR1cm5cIjB4XCIrZ2V0Q3VydmUoKS5rZXlGcm9tUHVibGljKGJ5dGVzKS5nZXRQdWJsaWModHJ1ZSxcImhleFwiKX1yZXR1cm4gbG9nZ2VyJGcudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBwdWJsaWMgb3IgcHJpdmF0ZSBrZXlcIixcImtleVwiLFwiW1JFREFDVEVEXVwiKX1jb25zdCB2ZXJzaW9uJGM9XCJ0cmFuc2FjdGlvbnMvNS4xLjFcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkaD1uZXcgTG9nZ2VyKHZlcnNpb24kYyk7ZnVuY3Rpb24gaGFuZGxlQWRkcmVzcyh2YWx1ZSl7aWYodmFsdWU9PT1cIjB4XCIpe3JldHVybiBudWxsfXJldHVybiBnZXRBZGRyZXNzKHZhbHVlKX1mdW5jdGlvbiBoYW5kbGVOdW1iZXIodmFsdWUpe2lmKHZhbHVlPT09XCIweFwiKXtyZXR1cm4gWmVybyQxfXJldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSl9Y29uc3QgdHJhbnNhY3Rpb25GaWVsZHM9W3tuYW1lOlwibm9uY2VcIixtYXhMZW5ndGg6MzIsbnVtZXJpYzp0cnVlfSx7bmFtZTpcImdhc1ByaWNlXCIsbWF4TGVuZ3RoOjMyLG51bWVyaWM6dHJ1ZX0se25hbWU6XCJnYXNMaW1pdFwiLG1heExlbmd0aDozMixudW1lcmljOnRydWV9LHtuYW1lOlwidG9cIixsZW5ndGg6MjB9LHtuYW1lOlwidmFsdWVcIixtYXhMZW5ndGg6MzIsbnVtZXJpYzp0cnVlfSx7bmFtZTpcImRhdGFcIn1dO2NvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXMkMT17Y2hhaW5JZDp0cnVlLGRhdGE6dHJ1ZSxnYXNMaW1pdDp0cnVlLGdhc1ByaWNlOnRydWUsbm9uY2U6dHJ1ZSx0bzp0cnVlLHZhbHVlOnRydWV9O2Z1bmN0aW9uIGNvbXB1dGVBZGRyZXNzKGtleSl7Y29uc3QgcHVibGljS2V5PWNvbXB1dGVQdWJsaWNLZXkoa2V5KTtyZXR1cm4gZ2V0QWRkcmVzcyhoZXhEYXRhU2xpY2Uoa2VjY2FrMjU2KGhleERhdGFTbGljZShwdWJsaWNLZXksMSkpLDEyKSl9ZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LHNpZ25hdHVyZSl7cmV0dXJuIGNvbXB1dGVBZGRyZXNzKHJlY292ZXJQdWJsaWNLZXkoYXJyYXlpZnkoZGlnZXN0KSxzaWduYXR1cmUpKX1mdW5jdGlvbiBmb3JtYXROdW1iZXIodmFsdWUsbmFtZSl7Y29uc3QgcmVzdWx0PXN0cmlwWmVyb3MoQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvSGV4U3RyaW5nKCkpO2lmKHJlc3VsdC5sZW5ndGg+MzIpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbGVuZ3RoIGZvciBcIituYW1lLFwidHJhbnNhY3Rpb246XCIrbmFtZSx2YWx1ZSl9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBhY2Nlc3NTZXRpZnkoYWRkcixzdG9yYWdlS2V5cyl7cmV0dXJue2FkZHJlc3M6Z2V0QWRkcmVzcyhhZGRyKSxzdG9yYWdlS2V5czooc3RvcmFnZUtleXN8fFtdKS5tYXAoKHN0b3JhZ2VLZXksaW5kZXgpPT57aWYoaGV4RGF0YUxlbmd0aChzdG9yYWdlS2V5KSE9PTMyKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFjY2VzcyBsaXN0IHN0b3JhZ2VLZXlcIixgYWNjZXNzTGlzdFske2FkZHJ9OiR7aW5kZXh9XWAsc3RvcmFnZUtleSl9cmV0dXJuIHN0b3JhZ2VLZXkudG9Mb3dlckNhc2UoKX0pfX1mdW5jdGlvbiBhY2Nlc3NMaXN0aWZ5KHZhbHVlKXtpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7cmV0dXJuIHZhbHVlLm1hcCgoc2V0LGluZGV4KT0+e2lmKEFycmF5LmlzQXJyYXkoc2V0KSl7aWYoc2V0Lmxlbmd0aD4yKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJhY2Nlc3MgbGlzdCBleHBlY3RlZCB0byBiZSBbIGFkZHJlc3MsIHN0b3JhZ2VLZXlzW10gXVwiLGB2YWx1ZVske2luZGV4fV1gLHNldCl9cmV0dXJuIGFjY2Vzc1NldGlmeShzZXRbMF0sc2V0WzFdKX1yZXR1cm4gYWNjZXNzU2V0aWZ5KHNldC5hZGRyZXNzLHNldC5zdG9yYWdlS2V5cyl9KX1jb25zdCByZXN1bHQ9T2JqZWN0LmtleXModmFsdWUpLm1hcChhZGRyPT57Y29uc3Qgc3RvcmFnZUtleXM9dmFsdWVbYWRkcl0ucmVkdWNlKChhY2N1bSxzdG9yYWdlS2V5KT0+e2FjY3VtW3N0b3JhZ2VLZXldPXRydWU7cmV0dXJuIGFjY3VtfSx7fSk7cmV0dXJuIGFjY2Vzc1NldGlmeShhZGRyLE9iamVjdC5rZXlzKHN0b3JhZ2VLZXlzKS5zb3J0KCkpfSk7cmVzdWx0LnNvcnQoKGEsYik9PmEuYWRkcmVzcy5sb2NhbGVDb21wYXJlKGIuYWRkcmVzcykpO3JldHVybiByZXN1bHR9ZnVuY3Rpb24gZm9ybWF0QWNjZXNzTGlzdCh2YWx1ZSl7cmV0dXJuIGFjY2Vzc0xpc3RpZnkodmFsdWUpLm1hcChzZXQ9PltzZXQuYWRkcmVzcyxzZXQuc3RvcmFnZUtleXNdKX1mdW5jdGlvbiBfc2VyaWFsaXplRWlwMjkzMCh0cmFuc2FjdGlvbixzaWduYXR1cmUpe2NvbnN0IGZpZWxkcz1bZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLmNoYWluSWR8fDAsXCJjaGFpbklkXCIpLGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5ub25jZXx8MCxcIm5vbmNlXCIpLGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5nYXNQcmljZXx8MCxcImdhc1ByaWNlXCIpLGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5nYXNMaW1pdHx8MCxcImdhc0xpbWl0XCIpLHRyYW5zYWN0aW9uLnRvIT1udWxsP2dldEFkZHJlc3ModHJhbnNhY3Rpb24udG8pOlwiMHhcIixmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24udmFsdWV8fDAsXCJ2YWx1ZVwiKSx0cmFuc2FjdGlvbi5kYXRhfHxcIjB4XCIsZm9ybWF0QWNjZXNzTGlzdCh0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0fHxbXSldO2lmKHNpZ25hdHVyZSl7Y29uc3Qgc2lnPXNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSk7ZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy5yZWNvdmVyeVBhcmFtLFwicmVjb3ZlcnlQYXJhbVwiKSk7ZmllbGRzLnB1c2goc3RyaXBaZXJvcyhzaWcucikpO2ZpZWxkcy5wdXNoKHN0cmlwWmVyb3Moc2lnLnMpKX1yZXR1cm4gaGV4Q29uY2F0KFtcIjB4MDFcIixlbmNvZGUoZmllbGRzKV0pfWZ1bmN0aW9uIF9zZXJpYWxpemUodHJhbnNhY3Rpb24sc2lnbmF0dXJlKXtjaGVja1Byb3BlcnRpZXModHJhbnNhY3Rpb24sYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyQxKTtjb25zdCByYXc9W107dHJhbnNhY3Rpb25GaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZEluZm8pe2xldCB2YWx1ZT10cmFuc2FjdGlvbltmaWVsZEluZm8ubmFtZV18fFtdO2NvbnN0IG9wdGlvbnM9e307aWYoZmllbGRJbmZvLm51bWVyaWMpe29wdGlvbnMuaGV4UGFkPVwibGVmdFwifXZhbHVlPWFycmF5aWZ5KGhleGxpZnkodmFsdWUsb3B0aW9ucykpO2lmKGZpZWxkSW5mby5sZW5ndGgmJnZhbHVlLmxlbmd0aCE9PWZpZWxkSW5mby5sZW5ndGgmJnZhbHVlLmxlbmd0aD4wKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIrZmllbGRJbmZvLm5hbWUsXCJ0cmFuc2FjdGlvbjpcIitmaWVsZEluZm8ubmFtZSx2YWx1ZSl9aWYoZmllbGRJbmZvLm1heExlbmd0aCl7dmFsdWU9c3RyaXBaZXJvcyh2YWx1ZSk7aWYodmFsdWUubGVuZ3RoPmZpZWxkSW5mby5tYXhMZW5ndGgpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbGVuZ3RoIGZvciBcIitmaWVsZEluZm8ubmFtZSxcInRyYW5zYWN0aW9uOlwiK2ZpZWxkSW5mby5uYW1lLHZhbHVlKX19cmF3LnB1c2goaGV4bGlmeSh2YWx1ZSkpfSk7bGV0IGNoYWluSWQ9MDtpZih0cmFuc2FjdGlvbi5jaGFpbklkIT1udWxsKXtjaGFpbklkPXRyYW5zYWN0aW9uLmNoYWluSWQ7aWYodHlwZW9mIGNoYWluSWQhPT1cIm51bWJlclwiKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uLmNoYWluSWRcIixcInRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb24pfX1lbHNlIGlmKHNpZ25hdHVyZSYmIWlzQnl0ZXNMaWtlKHNpZ25hdHVyZSkmJnNpZ25hdHVyZS52PjI4KXtjaGFpbklkPU1hdGguZmxvb3IoKHNpZ25hdHVyZS52LTM1KS8yKX1pZihjaGFpbklkIT09MCl7cmF3LnB1c2goaGV4bGlmeShjaGFpbklkKSk7cmF3LnB1c2goXCIweFwiKTtyYXcucHVzaChcIjB4XCIpfWlmKCFzaWduYXR1cmUpe3JldHVybiBlbmNvZGUocmF3KX1jb25zdCBzaWc9c3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtsZXQgdj0yNytzaWcucmVjb3ZlcnlQYXJhbTtpZihjaGFpbklkIT09MCl7cmF3LnBvcCgpO3Jhdy5wb3AoKTtyYXcucG9wKCk7dis9Y2hhaW5JZCoyKzg7aWYoc2lnLnY+MjgmJnNpZy52IT09dil7bG9nZ2VyJGgudGhyb3dBcmd1bWVudEVycm9yKFwidHJhbnNhY3Rpb24uY2hhaW5JZC9zaWduYXR1cmUudiBtaXNtYXRjaFwiLFwic2lnbmF0dXJlXCIsc2lnbmF0dXJlKX19ZWxzZSBpZihzaWcudiE9PXYpe2xvZ2dlciRoLnRocm93QXJndW1lbnRFcnJvcihcInRyYW5zYWN0aW9uLmNoYWluSWQvc2lnbmF0dXJlLnYgbWlzbWF0Y2hcIixcInNpZ25hdHVyZVwiLHNpZ25hdHVyZSl9cmF3LnB1c2goaGV4bGlmeSh2KSk7cmF3LnB1c2goc3RyaXBaZXJvcyhhcnJheWlmeShzaWcucikpKTtyYXcucHVzaChzdHJpcFplcm9zKGFycmF5aWZ5KHNpZy5zKSkpO3JldHVybiBlbmNvZGUocmF3KX1mdW5jdGlvbiBzZXJpYWxpemUodHJhbnNhY3Rpb24sc2lnbmF0dXJlKXtpZih0cmFuc2FjdGlvbi50eXBlPT1udWxsKXtpZih0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0IT1udWxsKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnR5cGVkIHRyYW5zYWN0aW9ucyBkbyBub3Qgc3VwcG9ydCBhY2Nlc3NMaXN0OyBpbmNsdWRlIHR5cGU6IDFcIixcInRyYW5zYWN0aW9uXCIsdHJhbnNhY3Rpb24pfXJldHVybiBfc2VyaWFsaXplKHRyYW5zYWN0aW9uLHNpZ25hdHVyZSl9c3dpdGNoKHRyYW5zYWN0aW9uLnR5cGUpe2Nhc2UgMTpyZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodHJhbnNhY3Rpb24sc2lnbmF0dXJlKTtkZWZhdWx0OmJyZWFrfXJldHVybiBsb2dnZXIkaC50aHJvd0Vycm9yKGB1bnN1cHBvcnRlZCB0cmFuc2FjdGlvbiB0eXBlOiAke3RyYW5zYWN0aW9uLnR5cGV9YCxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2VyaWFsaXplVHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvblR5cGU6dHJhbnNhY3Rpb24udHlwZX0pfWZ1bmN0aW9uIF9wYXJzZUVpcDI5MzAocGF5bG9hZCl7Y29uc3QgdHJhbnNhY3Rpb249ZGVjb2RlKHBheWxvYWQuc2xpY2UoMSkpO2lmKHRyYW5zYWN0aW9uLmxlbmd0aCE9PTgmJnRyYW5zYWN0aW9uLmxlbmd0aCE9PTExKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbXBvbmVudCBjb3VudCBmb3IgdHJhbnNhY3Rpb24gdHlwZTogMVwiLFwicGF5bG9hZFwiLGhleGxpZnkocGF5bG9hZCkpfWNvbnN0IHR4PXt0eXBlOjEsY2hhaW5JZDpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMF0pLnRvTnVtYmVyKCksbm9uY2U6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzFdKS50b051bWJlcigpLGdhc1ByaWNlOmhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsyXSksZ2FzTGltaXQ6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzNdKSx0bzpoYW5kbGVBZGRyZXNzKHRyYW5zYWN0aW9uWzRdKSx2YWx1ZTpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bNV0pLGRhdGE6dHJhbnNhY3Rpb25bNl0sYWNjZXNzTGlzdDphY2Nlc3NMaXN0aWZ5KHRyYW5zYWN0aW9uWzddKX07aWYodHJhbnNhY3Rpb24ubGVuZ3RoPT09OCl7cmV0dXJuIHR4fXRyeXtjb25zdCByZWNpZD1oYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bOF0pLnRvTnVtYmVyKCk7aWYocmVjaWQhPT0wJiZyZWNpZCE9PTEpe3Rocm93IG5ldyBFcnJvcihcImJhZCByZWNpZFwiKX10eC52PXJlY2lkfWNhdGNoKGVycm9yKXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHYgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDFcIixcInZcIix0cmFuc2FjdGlvbls4XSl9dHgucj1oZXhaZXJvUGFkKHRyYW5zYWN0aW9uWzldLDMyKTt0eC5zPWhleFplcm9QYWQodHJhbnNhY3Rpb25bMTBdLDMyKTt0cnl7Y29uc3QgZGlnZXN0PWtlY2NhazI1Nihfc2VyaWFsaXplRWlwMjkzMCh0eCkpO3R4LmZyb209cmVjb3ZlckFkZHJlc3MoZGlnZXN0LHtyOnR4LnIsczp0eC5zLHJlY292ZXJ5UGFyYW06dHgudn0pfWNhdGNoKGVycm9yKXtjb25zb2xlLmxvZyhlcnJvcil9dHguaGFzaD1rZWNjYWsyNTYocGF5bG9hZCk7cmV0dXJuIHR4fWZ1bmN0aW9uIF9wYXJzZShyYXdUcmFuc2FjdGlvbil7Y29uc3QgdHJhbnNhY3Rpb249ZGVjb2RlKHJhd1RyYW5zYWN0aW9uKTtpZih0cmFuc2FjdGlvbi5sZW5ndGghPT05JiZ0cmFuc2FjdGlvbi5sZW5ndGghPT02KXtsb2dnZXIkaC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHJhdyB0cmFuc2FjdGlvblwiLFwicmF3VHJhbnNhY3Rpb25cIixyYXdUcmFuc2FjdGlvbil9Y29uc3QgdHg9e25vbmNlOmhhbmRsZU51bWJlcih0cmFuc2FjdGlvblswXSkudG9OdW1iZXIoKSxnYXNQcmljZTpoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMV0pLGdhc0xpbWl0OmhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsyXSksdG86aGFuZGxlQWRkcmVzcyh0cmFuc2FjdGlvblszXSksdmFsdWU6aGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzRdKSxkYXRhOnRyYW5zYWN0aW9uWzVdLGNoYWluSWQ6MH07aWYodHJhbnNhY3Rpb24ubGVuZ3RoPT09Nil7cmV0dXJuIHR4fXRyeXt0eC52PUJpZ051bWJlci5mcm9tKHRyYW5zYWN0aW9uWzZdKS50b051bWJlcigpfWNhdGNoKGVycm9yKXtjb25zb2xlLmxvZyhlcnJvcik7cmV0dXJuIHR4fXR4LnI9aGV4WmVyb1BhZCh0cmFuc2FjdGlvbls3XSwzMik7dHgucz1oZXhaZXJvUGFkKHRyYW5zYWN0aW9uWzhdLDMyKTtpZihCaWdOdW1iZXIuZnJvbSh0eC5yKS5pc1plcm8oKSYmQmlnTnVtYmVyLmZyb20odHgucykuaXNaZXJvKCkpe3R4LmNoYWluSWQ9dHgudjt0eC52PTB9ZWxzZXt0eC5jaGFpbklkPU1hdGguZmxvb3IoKHR4LnYtMzUpLzIpO2lmKHR4LmNoYWluSWQ8MCl7dHguY2hhaW5JZD0wfWxldCByZWNvdmVyeVBhcmFtPXR4LnYtMjc7Y29uc3QgcmF3PXRyYW5zYWN0aW9uLnNsaWNlKDAsNik7aWYodHguY2hhaW5JZCE9PTApe3Jhdy5wdXNoKGhleGxpZnkodHguY2hhaW5JZCkpO3Jhdy5wdXNoKFwiMHhcIik7cmF3LnB1c2goXCIweFwiKTtyZWNvdmVyeVBhcmFtLT10eC5jaGFpbklkKjIrOH1jb25zdCBkaWdlc3Q9a2VjY2FrMjU2KGVuY29kZShyYXcpKTt0cnl7dHguZnJvbT1yZWNvdmVyQWRkcmVzcyhkaWdlc3Qse3I6aGV4bGlmeSh0eC5yKSxzOmhleGxpZnkodHgucykscmVjb3ZlcnlQYXJhbTpyZWNvdmVyeVBhcmFtfSl9Y2F0Y2goZXJyb3Ipe2NvbnNvbGUubG9nKGVycm9yKX10eC5oYXNoPWtlY2NhazI1NihyYXdUcmFuc2FjdGlvbil9dHgudHlwZT1udWxsO3JldHVybiB0eH1mdW5jdGlvbiBwYXJzZShyYXdUcmFuc2FjdGlvbil7Y29uc3QgcGF5bG9hZD1hcnJheWlmeShyYXdUcmFuc2FjdGlvbik7aWYocGF5bG9hZFswXT4xMjcpe3JldHVybiBfcGFyc2UocGF5bG9hZCl9c3dpdGNoKHBheWxvYWRbMF0pe2Nhc2UgMTpyZXR1cm4gX3BhcnNlRWlwMjkzMChwYXlsb2FkKTtkZWZhdWx0OmJyZWFrfXJldHVybiBsb2dnZXIkaC50aHJvd0Vycm9yKGB1bnN1cHBvcnRlZCB0cmFuc2FjdGlvbiB0eXBlOiAke3BheWxvYWRbMF19YCxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwicGFyc2VUcmFuc2FjdGlvblwiLHRyYW5zYWN0aW9uVHlwZTpwYXlsb2FkWzBdfSl9Y29uc3QgdmVyc2lvbiRkPVwiY29udHJhY3RzLzUuMS4xXCI7XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciQzPXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkaT1uZXcgTG9nZ2VyKHZlcnNpb24kZCk7Y29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5cyQyPXtjaGFpbklkOnRydWUsZGF0YTp0cnVlLGZyb206dHJ1ZSxnYXNMaW1pdDp0cnVlLGdhc1ByaWNlOnRydWUsbm9uY2U6dHJ1ZSx0bzp0cnVlLHZhbHVlOnRydWUsdHlwZTp0cnVlLGFjY2Vzc0xpc3Q6dHJ1ZX07ZnVuY3Rpb24gcmVzb2x2ZU5hbWUocmVzb2x2ZXIsbmFtZU9yUHJvbWlzZSl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBuYW1lPXlpZWxkIG5hbWVPclByb21pc2U7dHJ5e3JldHVybiBnZXRBZGRyZXNzKG5hbWUpfWNhdGNoKGVycm9yKXt9aWYoIXJlc29sdmVyKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwiYSBwcm92aWRlciBvciBzaWduZXIgaXMgbmVlZGVkIHRvIHJlc29sdmUgRU5TIG5hbWVzXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInJlc29sdmVOYW1lXCJ9KX1jb25zdCBhZGRyZXNzPXlpZWxkIHJlc29sdmVyLnJlc29sdmVOYW1lKG5hbWUpO2lmKGFkZHJlc3M9PW51bGwpe2xvZ2dlciRpLnRocm93QXJndW1lbnRFcnJvcihcInJlc29sdmVyIG9yIGFkZHIgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIEVOUyBuYW1lXCIsXCJuYW1lXCIsbmFtZSl9cmV0dXJuIGFkZHJlc3N9KX1mdW5jdGlvbiByZXNvbHZlQWRkcmVzc2VzKHJlc29sdmVyLHZhbHVlLHBhcmFtVHlwZSl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtpZihBcnJheS5pc0FycmF5KHBhcmFtVHlwZSkpe3JldHVybiB5aWVsZCBQcm9taXNlLmFsbChwYXJhbVR5cGUubWFwKChwYXJhbVR5cGUsaW5kZXgpPT57cmV0dXJuIHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsQXJyYXkuaXNBcnJheSh2YWx1ZSk/dmFsdWVbaW5kZXhdOnZhbHVlW3BhcmFtVHlwZS5uYW1lXSxwYXJhbVR5cGUpfSkpfWlmKHBhcmFtVHlwZS50eXBlPT09XCJhZGRyZXNzXCIpe3JldHVybiB5aWVsZCByZXNvbHZlTmFtZShyZXNvbHZlcix2YWx1ZSl9aWYocGFyYW1UeXBlLnR5cGU9PT1cInR1cGxlXCIpe3JldHVybiB5aWVsZCByZXNvbHZlQWRkcmVzc2VzKHJlc29sdmVyLHZhbHVlLHBhcmFtVHlwZS5jb21wb25lbnRzKX1pZihwYXJhbVR5cGUuYmFzZVR5cGU9PT1cImFycmF5XCIpe2lmKCFBcnJheS5pc0FycmF5KHZhbHVlKSl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImludmFsaWQgdmFsdWUgZm9yIGFycmF5XCIpKX1yZXR1cm4geWllbGQgUHJvbWlzZS5hbGwodmFsdWUubWFwKHY9PnJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsdixwYXJhbVR5cGUuYXJyYXlDaGlsZHJlbikpKX1yZXR1cm4gdmFsdWV9KX1mdW5jdGlvbiBwb3B1bGF0ZVRyYW5zYWN0aW9uKGNvbnRyYWN0LGZyYWdtZW50LGFyZ3Mpe3JldHVybiBfX2F3YWl0ZXIkMyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IG92ZXJyaWRlcz17fTtpZihhcmdzLmxlbmd0aD09PWZyYWdtZW50LmlucHV0cy5sZW5ndGgrMSYmdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGgtMV09PT1cIm9iamVjdFwiKXtvdmVycmlkZXM9c2hhbGxvd0NvcHkoYXJncy5wb3AoKSl9bG9nZ2VyJGkuY2hlY2tBcmd1bWVudENvdW50KGFyZ3MubGVuZ3RoLGZyYWdtZW50LmlucHV0cy5sZW5ndGgsXCJwYXNzZWQgdG8gY29udHJhY3RcIik7aWYoY29udHJhY3Quc2lnbmVyKXtpZihvdmVycmlkZXMuZnJvbSl7b3ZlcnJpZGVzLmZyb209cmVzb2x2ZVByb3BlcnRpZXMoe292ZXJyaWRlOnJlc29sdmVOYW1lKGNvbnRyYWN0LnNpZ25lcixvdmVycmlkZXMuZnJvbSksc2lnbmVyOmNvbnRyYWN0LnNpZ25lci5nZXRBZGRyZXNzKCl9KS50aGVuKGNoZWNrPT5fX2F3YWl0ZXIkMyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoZ2V0QWRkcmVzcyhjaGVjay5zaWduZXIpIT09Y2hlY2sub3ZlcnJpZGUpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJDb250cmFjdCB3aXRoIGEgU2lnbmVyIGNhbm5vdCBvdmVycmlkZSBmcm9tXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm92ZXJyaWRlcy5mcm9tXCJ9KX1yZXR1cm4gY2hlY2sub3ZlcnJpZGV9KSl9ZWxzZXtvdmVycmlkZXMuZnJvbT1jb250cmFjdC5zaWduZXIuZ2V0QWRkcmVzcygpfX1lbHNlIGlmKG92ZXJyaWRlcy5mcm9tKXtvdmVycmlkZXMuZnJvbT1yZXNvbHZlTmFtZShjb250cmFjdC5wcm92aWRlcixvdmVycmlkZXMuZnJvbSl9Y29uc3QgcmVzb2x2ZWQ9eWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe2FyZ3M6cmVzb2x2ZUFkZHJlc3Nlcyhjb250cmFjdC5zaWduZXJ8fGNvbnRyYWN0LnByb3ZpZGVyLGFyZ3MsZnJhZ21lbnQuaW5wdXRzKSxhZGRyZXNzOmNvbnRyYWN0LnJlc29sdmVkQWRkcmVzcyxvdmVycmlkZXM6cmVzb2x2ZVByb3BlcnRpZXMob3ZlcnJpZGVzKXx8e319KTtjb25zdCBkYXRhPWNvbnRyYWN0LmludGVyZmFjZS5lbmNvZGVGdW5jdGlvbkRhdGEoZnJhZ21lbnQscmVzb2x2ZWQuYXJncyk7Y29uc3QgdHg9e2RhdGE6ZGF0YSx0bzpyZXNvbHZlZC5hZGRyZXNzfTtjb25zdCBybz1yZXNvbHZlZC5vdmVycmlkZXM7aWYocm8ubm9uY2UhPW51bGwpe3R4Lm5vbmNlPUJpZ051bWJlci5mcm9tKHJvLm5vbmNlKS50b051bWJlcigpfWlmKHJvLmdhc0xpbWl0IT1udWxsKXt0eC5nYXNMaW1pdD1CaWdOdW1iZXIuZnJvbShyby5nYXNMaW1pdCl9aWYocm8uZ2FzUHJpY2UhPW51bGwpe3R4Lmdhc1ByaWNlPUJpZ051bWJlci5mcm9tKHJvLmdhc1ByaWNlKX1pZihyby5mcm9tIT1udWxsKXt0eC5mcm9tPXJvLmZyb219aWYocm8udHlwZSE9bnVsbCl7dHgudHlwZT1yby50eXBlfWlmKHJvLmFjY2Vzc0xpc3QhPW51bGwpe3R4LmFjY2Vzc0xpc3Q9YWNjZXNzTGlzdGlmeShyby5hY2Nlc3NMaXN0KX1pZih0eC5nYXNMaW1pdD09bnVsbCYmZnJhZ21lbnQuZ2FzIT1udWxsKXtsZXQgaW50cmluc2ljPTIxZTM7Y29uc3QgYnl0ZXM9YXJyYXlpZnkoZGF0YSk7Zm9yKGxldCBpPTA7aTxieXRlcy5sZW5ndGg7aSsrKXtpbnRyaW5zaWMrPTQ7aWYoYnl0ZXNbaV0pe2ludHJpbnNpYys9NjR9fXR4Lmdhc0xpbWl0PUJpZ051bWJlci5mcm9tKGZyYWdtZW50LmdhcykuYWRkKGludHJpbnNpYyl9aWYocm8udmFsdWUpe2NvbnN0IHJvVmFsdWU9QmlnTnVtYmVyLmZyb20ocm8udmFsdWUpO2lmKCFyb1ZhbHVlLmlzWmVybygpJiYhZnJhZ21lbnQucGF5YWJsZSl7bG9nZ2VyJGkudGhyb3dFcnJvcihcIm5vbi1wYXlhYmxlIG1ldGhvZCBjYW5ub3Qgb3ZlcnJpZGUgdmFsdWVcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwib3ZlcnJpZGVzLnZhbHVlXCIsdmFsdWU6b3ZlcnJpZGVzLnZhbHVlfSl9dHgudmFsdWU9cm9WYWx1ZX1kZWxldGUgb3ZlcnJpZGVzLm5vbmNlO2RlbGV0ZSBvdmVycmlkZXMuZ2FzTGltaXQ7ZGVsZXRlIG92ZXJyaWRlcy5nYXNQcmljZTtkZWxldGUgb3ZlcnJpZGVzLmZyb207ZGVsZXRlIG92ZXJyaWRlcy52YWx1ZTtkZWxldGUgb3ZlcnJpZGVzLnR5cGU7ZGVsZXRlIG92ZXJyaWRlcy5hY2Nlc3NMaXN0O2NvbnN0IGxlZnRvdmVycz1PYmplY3Qua2V5cyhvdmVycmlkZXMpLmZpbHRlcihrZXk9Pm92ZXJyaWRlc1trZXldIT1udWxsKTtpZihsZWZ0b3ZlcnMubGVuZ3RoKXtsb2dnZXIkaS50aHJvd0Vycm9yKGBjYW5ub3Qgb3ZlcnJpZGUgJHtsZWZ0b3ZlcnMubWFwKGw9PkpTT04uc3RyaW5naWZ5KGwpKS5qb2luKFwiLFwiKX1gLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJvdmVycmlkZXNcIixvdmVycmlkZXM6bGVmdG92ZXJzfSl9cmV0dXJuIHR4fSl9ZnVuY3Rpb24gYnVpbGRQb3B1bGF0ZShjb250cmFjdCxmcmFnbWVudCl7cmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3Mpe3JldHVybiBwb3B1bGF0ZVRyYW5zYWN0aW9uKGNvbnRyYWN0LGZyYWdtZW50LGFyZ3MpfX1mdW5jdGlvbiBidWlsZEVzdGltYXRlKGNvbnRyYWN0LGZyYWdtZW50KXtjb25zdCBzaWduZXJPclByb3ZpZGVyPWNvbnRyYWN0LnNpZ25lcnx8Y29udHJhY3QucHJvdmlkZXI7cmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3Mpe3JldHVybiBfX2F3YWl0ZXIkMyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoIXNpZ25lck9yUHJvdmlkZXIpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJlc3RpbWF0ZSByZXF1aXJlIGEgcHJvdmlkZXIgb3Igc2lnbmVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcImVzdGltYXRlR2FzXCJ9KX1jb25zdCB0eD15aWVsZCBwb3B1bGF0ZVRyYW5zYWN0aW9uKGNvbnRyYWN0LGZyYWdtZW50LGFyZ3MpO3JldHVybiB5aWVsZCBzaWduZXJPclByb3ZpZGVyLmVzdGltYXRlR2FzKHR4KX0pfX1mdW5jdGlvbiBidWlsZENhbGwoY29udHJhY3QsZnJhZ21lbnQsY29sbGFwc2VTaW1wbGUpe2NvbnN0IHNpZ25lck9yUHJvdmlkZXI9Y29udHJhY3Quc2lnbmVyfHxjb250cmFjdC5wcm92aWRlcjtyZXR1cm4gZnVuY3Rpb24oLi4uYXJncyl7cmV0dXJuIF9fYXdhaXRlciQzKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtsZXQgYmxvY2tUYWc9dW5kZWZpbmVkO2lmKGFyZ3MubGVuZ3RoPT09ZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCsxJiZ0eXBlb2YgYXJnc1thcmdzLmxlbmd0aC0xXT09PVwib2JqZWN0XCIpe2NvbnN0IG92ZXJyaWRlcz1zaGFsbG93Q29weShhcmdzLnBvcCgpKTtpZihvdmVycmlkZXMuYmxvY2tUYWchPW51bGwpe2Jsb2NrVGFnPXlpZWxkIG92ZXJyaWRlcy5ibG9ja1RhZ31kZWxldGUgb3ZlcnJpZGVzLmJsb2NrVGFnO2FyZ3MucHVzaChvdmVycmlkZXMpfWlmKGNvbnRyYWN0LmRlcGxveVRyYW5zYWN0aW9uIT1udWxsKXt5aWVsZCBjb250cmFjdC5fZGVwbG95ZWQoYmxvY2tUYWcpfWNvbnN0IHR4PXlpZWxkIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsZnJhZ21lbnQsYXJncyk7Y29uc3QgcmVzdWx0PXlpZWxkIHNpZ25lck9yUHJvdmlkZXIuY2FsbCh0eCxibG9ja1RhZyk7dHJ5e2xldCB2YWx1ZT1jb250cmFjdC5pbnRlcmZhY2UuZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnJhZ21lbnQscmVzdWx0KTtpZihjb2xsYXBzZVNpbXBsZSYmZnJhZ21lbnQub3V0cHV0cy5sZW5ndGg9PT0xKXt2YWx1ZT12YWx1ZVswXX1yZXR1cm4gdmFsdWV9Y2F0Y2goZXJyb3Ipe2lmKGVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKXtlcnJvci5hZGRyZXNzPWNvbnRyYWN0LmFkZHJlc3M7ZXJyb3IuYXJncz1hcmdzO2Vycm9yLnRyYW5zYWN0aW9uPXR4fXRocm93IGVycm9yfX0pfX1mdW5jdGlvbiBidWlsZFNlbmQoY29udHJhY3QsZnJhZ21lbnQpe3JldHVybiBmdW5jdGlvbiguLi5hcmdzKXtyZXR1cm4gX19hd2FpdGVyJDModGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKCFjb250cmFjdC5zaWduZXIpe2xvZ2dlciRpLnRocm93RXJyb3IoXCJzZW5kaW5nIGEgdHJhbnNhY3Rpb24gcmVxdWlyZXMgYSBzaWduZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2VuZFRyYW5zYWN0aW9uXCJ9KX1pZihjb250cmFjdC5kZXBsb3lUcmFuc2FjdGlvbiE9bnVsbCl7eWllbGQgY29udHJhY3QuX2RlcGxveWVkKCl9Y29uc3QgdHhSZXF1ZXN0PXlpZWxkIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsZnJhZ21lbnQsYXJncyk7Y29uc3QgdHg9eWllbGQgY29udHJhY3Quc2lnbmVyLnNlbmRUcmFuc2FjdGlvbih0eFJlcXVlc3QpO2NvbnN0IHdhaXQ9dHgud2FpdC5iaW5kKHR4KTt0eC53YWl0PShjb25maXJtYXRpb25zPT57cmV0dXJuIHdhaXQoY29uZmlybWF0aW9ucykudGhlbihyZWNlaXB0PT57cmVjZWlwdC5ldmVudHM9cmVjZWlwdC5sb2dzLm1hcChsb2c9PntsZXQgZXZlbnQ9ZGVlcENvcHkobG9nKTtsZXQgcGFyc2VkPW51bGw7dHJ5e3BhcnNlZD1jb250cmFjdC5pbnRlcmZhY2UucGFyc2VMb2cobG9nKX1jYXRjaChlKXt9aWYocGFyc2VkKXtldmVudC5hcmdzPXBhcnNlZC5hcmdzO2V2ZW50LmRlY29kZT0oKGRhdGEsdG9waWNzKT0+e3JldHVybiBjb250cmFjdC5pbnRlcmZhY2UuZGVjb2RlRXZlbnRMb2cocGFyc2VkLmV2ZW50RnJhZ21lbnQsZGF0YSx0b3BpY3MpfSk7ZXZlbnQuZXZlbnQ9cGFyc2VkLm5hbWU7ZXZlbnQuZXZlbnRTaWduYXR1cmU9cGFyc2VkLnNpZ25hdHVyZX1ldmVudC5yZW1vdmVMaXN0ZW5lcj0oKCk9PntyZXR1cm4gY29udHJhY3QucHJvdmlkZXJ9KTtldmVudC5nZXRCbG9jaz0oKCk9PntyZXR1cm4gY29udHJhY3QucHJvdmlkZXIuZ2V0QmxvY2socmVjZWlwdC5ibG9ja0hhc2gpfSk7ZXZlbnQuZ2V0VHJhbnNhY3Rpb249KCgpPT57cmV0dXJuIGNvbnRyYWN0LnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKHJlY2VpcHQudHJhbnNhY3Rpb25IYXNoKX0pO2V2ZW50LmdldFRyYW5zYWN0aW9uUmVjZWlwdD0oKCk9PntyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlY2VpcHQpfSk7cmV0dXJuIGV2ZW50fSk7cmV0dXJuIHJlY2VpcHR9KX0pO3JldHVybiB0eH0pfX1mdW5jdGlvbiBidWlsZERlZmF1bHQoY29udHJhY3QsZnJhZ21lbnQsY29sbGFwc2VTaW1wbGUpe2lmKGZyYWdtZW50LmNvbnN0YW50KXtyZXR1cm4gYnVpbGRDYWxsKGNvbnRyYWN0LGZyYWdtZW50LGNvbGxhcHNlU2ltcGxlKX1yZXR1cm4gYnVpbGRTZW5kKGNvbnRyYWN0LGZyYWdtZW50KX1mdW5jdGlvbiBnZXRFdmVudFRhZyhmaWx0ZXIpe2lmKGZpbHRlci5hZGRyZXNzJiYoZmlsdGVyLnRvcGljcz09bnVsbHx8ZmlsdGVyLnRvcGljcy5sZW5ndGg9PT0wKSl7cmV0dXJuXCIqXCJ9cmV0dXJuKGZpbHRlci5hZGRyZXNzfHxcIipcIikrXCJAXCIrKGZpbHRlci50b3BpY3M/ZmlsdGVyLnRvcGljcy5tYXAodG9waWM9PntpZihBcnJheS5pc0FycmF5KHRvcGljKSl7cmV0dXJuIHRvcGljLmpvaW4oXCJ8XCIpfXJldHVybiB0b3BpY30pLmpvaW4oXCI6XCIpOlwiXCIpfWNsYXNzIFJ1bm5pbmdFdmVudHtjb25zdHJ1Y3Rvcih0YWcsZmlsdGVyKXtkZWZpbmVSZWFkT25seSh0aGlzLFwidGFnXCIsdGFnKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZmlsdGVyXCIsZmlsdGVyKTt0aGlzLl9saXN0ZW5lcnM9W119YWRkTGlzdGVuZXIobGlzdGVuZXIsb25jZSl7dGhpcy5fbGlzdGVuZXJzLnB1c2goe2xpc3RlbmVyOmxpc3RlbmVyLG9uY2U6b25jZX0pfXJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKXtsZXQgZG9uZT1mYWxzZTt0aGlzLl9saXN0ZW5lcnM9dGhpcy5fbGlzdGVuZXJzLmZpbHRlcihpdGVtPT57aWYoZG9uZXx8aXRlbS5saXN0ZW5lciE9PWxpc3RlbmVyKXtyZXR1cm4gdHJ1ZX1kb25lPXRydWU7cmV0dXJuIGZhbHNlfSl9cmVtb3ZlQWxsTGlzdGVuZXJzKCl7dGhpcy5fbGlzdGVuZXJzPVtdfWxpc3RlbmVycygpe3JldHVybiB0aGlzLl9saXN0ZW5lcnMubWFwKGk9PmkubGlzdGVuZXIpfWxpc3RlbmVyQ291bnQoKXtyZXR1cm4gdGhpcy5fbGlzdGVuZXJzLmxlbmd0aH1ydW4oYXJncyl7Y29uc3QgbGlzdGVuZXJDb3VudD10aGlzLmxpc3RlbmVyQ291bnQoKTt0aGlzLl9saXN0ZW5lcnM9dGhpcy5fbGlzdGVuZXJzLmZpbHRlcihpdGVtPT57Y29uc3QgYXJnc0NvcHk9YXJncy5zbGljZSgpO3NldFRpbWVvdXQoKCk9PntpdGVtLmxpc3RlbmVyLmFwcGx5KHRoaXMsYXJnc0NvcHkpfSwwKTtyZXR1cm4haXRlbS5vbmNlfSk7cmV0dXJuIGxpc3RlbmVyQ291bnR9cHJlcGFyZUV2ZW50KGV2ZW50KXt9Z2V0RW1pdChldmVudCl7cmV0dXJuW2V2ZW50XX19Y2xhc3MgRXJyb3JSdW5uaW5nRXZlbnQgZXh0ZW5kcyBSdW5uaW5nRXZlbnR7Y29uc3RydWN0b3IoKXtzdXBlcihcImVycm9yXCIsbnVsbCl9fWNsYXNzIEZyYWdtZW50UnVubmluZ0V2ZW50IGV4dGVuZHMgUnVubmluZ0V2ZW50e2NvbnN0cnVjdG9yKGFkZHJlc3MsY29udHJhY3RJbnRlcmZhY2UsZnJhZ21lbnQsdG9waWNzKXtjb25zdCBmaWx0ZXI9e2FkZHJlc3M6YWRkcmVzc307bGV0IHRvcGljPWNvbnRyYWN0SW50ZXJmYWNlLmdldEV2ZW50VG9waWMoZnJhZ21lbnQpO2lmKHRvcGljcyl7aWYodG9waWMhPT10b3BpY3NbMF0pe2xvZ2dlciRpLnRocm93QXJndW1lbnRFcnJvcihcInRvcGljIG1pc21hdGNoXCIsXCJ0b3BpY3NcIix0b3BpY3MpfWZpbHRlci50b3BpY3M9dG9waWNzLnNsaWNlKCl9ZWxzZXtmaWx0ZXIudG9waWNzPVt0b3BpY119c3VwZXIoZ2V0RXZlbnRUYWcoZmlsdGVyKSxmaWx0ZXIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhZGRyZXNzXCIsYWRkcmVzcyk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImludGVyZmFjZVwiLGNvbnRyYWN0SW50ZXJmYWNlKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZnJhZ21lbnRcIixmcmFnbWVudCl9cHJlcGFyZUV2ZW50KGV2ZW50KXtzdXBlci5wcmVwYXJlRXZlbnQoZXZlbnQpO2V2ZW50LmV2ZW50PXRoaXMuZnJhZ21lbnQubmFtZTtldmVudC5ldmVudFNpZ25hdHVyZT10aGlzLmZyYWdtZW50LmZvcm1hdCgpO2V2ZW50LmRlY29kZT0oKGRhdGEsdG9waWNzKT0+e3JldHVybiB0aGlzLmludGVyZmFjZS5kZWNvZGVFdmVudExvZyh0aGlzLmZyYWdtZW50LGRhdGEsdG9waWNzKX0pO3RyeXtldmVudC5hcmdzPXRoaXMuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKHRoaXMuZnJhZ21lbnQsZXZlbnQuZGF0YSxldmVudC50b3BpY3MpfWNhdGNoKGVycm9yKXtldmVudC5hcmdzPW51bGw7ZXZlbnQuZGVjb2RlRXJyb3I9ZXJyb3J9fWdldEVtaXQoZXZlbnQpe2NvbnN0IGVycm9ycz1jaGVja1Jlc3VsdEVycm9ycyhldmVudC5hcmdzKTtpZihlcnJvcnMubGVuZ3RoKXt0aHJvdyBlcnJvcnNbMF0uZXJyb3J9Y29uc3QgYXJncz0oZXZlbnQuYXJnc3x8W10pLnNsaWNlKCk7YXJncy5wdXNoKGV2ZW50KTtyZXR1cm4gYXJnc319Y2xhc3MgV2lsZGNhcmRSdW5uaW5nRXZlbnQgZXh0ZW5kcyBSdW5uaW5nRXZlbnR7Y29uc3RydWN0b3IoYWRkcmVzcyxjb250cmFjdEludGVyZmFjZSl7c3VwZXIoXCIqXCIse2FkZHJlc3M6YWRkcmVzc30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhZGRyZXNzXCIsYWRkcmVzcyk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImludGVyZmFjZVwiLGNvbnRyYWN0SW50ZXJmYWNlKX1wcmVwYXJlRXZlbnQoZXZlbnQpe3N1cGVyLnByZXBhcmVFdmVudChldmVudCk7dHJ5e2NvbnN0IHBhcnNlZD10aGlzLmludGVyZmFjZS5wYXJzZUxvZyhldmVudCk7ZXZlbnQuZXZlbnQ9cGFyc2VkLm5hbWU7ZXZlbnQuZXZlbnRTaWduYXR1cmU9cGFyc2VkLnNpZ25hdHVyZTtldmVudC5kZWNvZGU9KChkYXRhLHRvcGljcyk9PntyZXR1cm4gdGhpcy5pbnRlcmZhY2UuZGVjb2RlRXZlbnRMb2cocGFyc2VkLmV2ZW50RnJhZ21lbnQsZGF0YSx0b3BpY3MpfSk7ZXZlbnQuYXJncz1wYXJzZWQuYXJnc31jYXRjaChlcnJvcil7fX19Y2xhc3MgQmFzZUNvbnRyYWN0e2NvbnN0cnVjdG9yKGFkZHJlc3NPck5hbWUsY29udHJhY3RJbnRlcmZhY2Usc2lnbmVyT3JQcm92aWRlcil7bG9nZ2VyJGkuY2hlY2tOZXcobmV3LnRhcmdldCxDb250cmFjdCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImludGVyZmFjZVwiLGdldFN0YXRpYyhuZXcudGFyZ2V0LFwiZ2V0SW50ZXJmYWNlXCIpKGNvbnRyYWN0SW50ZXJmYWNlKSk7aWYoc2lnbmVyT3JQcm92aWRlcj09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb3ZpZGVyXCIsbnVsbCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInNpZ25lclwiLG51bGwpfWVsc2UgaWYoU2lnbmVyLmlzU2lnbmVyKHNpZ25lck9yUHJvdmlkZXIpKXtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJcIixzaWduZXJPclByb3ZpZGVyLnByb3ZpZGVyfHxudWxsKTtkZWZpbmVSZWFkT25seSh0aGlzLFwic2lnbmVyXCIsc2lnbmVyT3JQcm92aWRlcil9ZWxzZSBpZihQcm92aWRlci5pc1Byb3ZpZGVyKHNpZ25lck9yUHJvdmlkZXIpKXtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJcIixzaWduZXJPclByb3ZpZGVyKTtkZWZpbmVSZWFkT25seSh0aGlzLFwic2lnbmVyXCIsbnVsbCl9ZWxzZXtsb2dnZXIkaS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHNpZ25lciBvciBwcm92aWRlclwiLFwic2lnbmVyT3JQcm92aWRlclwiLHNpZ25lck9yUHJvdmlkZXIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJjYWxsU3RhdGljXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJlc3RpbWF0ZUdhc1wiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZnVuY3Rpb25zXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwb3B1bGF0ZVRyYW5zYWN0aW9uXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJmaWx0ZXJzXCIse30pO3tjb25zdCB1bmlxdWVGaWx0ZXJzPXt9O09iamVjdC5rZXlzKHRoaXMuaW50ZXJmYWNlLmV2ZW50cykuZm9yRWFjaChldmVudFNpZ25hdHVyZT0+e2NvbnN0IGV2ZW50PXRoaXMuaW50ZXJmYWNlLmV2ZW50c1tldmVudFNpZ25hdHVyZV07ZGVmaW5lUmVhZE9ubHkodGhpcy5maWx0ZXJzLGV2ZW50U2lnbmF0dXJlLCguLi5hcmdzKT0+e3JldHVybnthZGRyZXNzOnRoaXMuYWRkcmVzcyx0b3BpY3M6dGhpcy5pbnRlcmZhY2UuZW5jb2RlRmlsdGVyVG9waWNzKGV2ZW50LGFyZ3MpfX0pO2lmKCF1bmlxdWVGaWx0ZXJzW2V2ZW50Lm5hbWVdKXt1bmlxdWVGaWx0ZXJzW2V2ZW50Lm5hbWVdPVtdfXVuaXF1ZUZpbHRlcnNbZXZlbnQubmFtZV0ucHVzaChldmVudFNpZ25hdHVyZSl9KTtPYmplY3Qua2V5cyh1bmlxdWVGaWx0ZXJzKS5mb3JFYWNoKG5hbWU9Pntjb25zdCBmaWx0ZXJzPXVuaXF1ZUZpbHRlcnNbbmFtZV07aWYoZmlsdGVycy5sZW5ndGg9PT0xKXtkZWZpbmVSZWFkT25seSh0aGlzLmZpbHRlcnMsbmFtZSx0aGlzLmZpbHRlcnNbZmlsdGVyc1swXV0pfWVsc2V7bG9nZ2VyJGkud2FybihgRHVwbGljYXRlIGRlZmluaXRpb24gb2YgJHtuYW1lfSAoJHtmaWx0ZXJzLmpvaW4oXCIsIFwiKX0pYCl9fSl9ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9ydW5uaW5nRXZlbnRzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfd3JhcHBlZEVtaXRzXCIse30pO2lmKGFkZHJlc3NPck5hbWU9PW51bGwpe2xvZ2dlciRpLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgY29udHJhY3QgYWRkcmVzcyBvciBFTlMgbmFtZVwiLFwiYWRkcmVzc09yTmFtZVwiLGFkZHJlc3NPck5hbWUpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJhZGRyZXNzXCIsYWRkcmVzc09yTmFtZSk7aWYodGhpcy5wcm92aWRlcil7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInJlc29sdmVkQWRkcmVzc1wiLHJlc29sdmVOYW1lKHRoaXMucHJvdmlkZXIsYWRkcmVzc09yTmFtZSkpfWVsc2V7dHJ5e2RlZmluZVJlYWRPbmx5KHRoaXMsXCJyZXNvbHZlZEFkZHJlc3NcIixQcm9taXNlLnJlc29sdmUoZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSkpfWNhdGNoKGVycm9yKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwicHJvdmlkZXIgaXMgcmVxdWlyZWQgdG8gdXNlIEVOUyBuYW1lIGFzIGNvbnRyYWN0IGFkZHJlc3NcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwibmV3IENvbnRyYWN0XCJ9KX19Y29uc3QgdW5pcXVlTmFtZXM9e307Y29uc3QgdW5pcXVlU2lnbmF0dXJlcz17fTtPYmplY3Qua2V5cyh0aGlzLmludGVyZmFjZS5mdW5jdGlvbnMpLmZvckVhY2goc2lnbmF0dXJlPT57Y29uc3QgZnJhZ21lbnQ9dGhpcy5pbnRlcmZhY2UuZnVuY3Rpb25zW3NpZ25hdHVyZV07aWYodW5pcXVlU2lnbmF0dXJlc1tzaWduYXR1cmVdKXtsb2dnZXIkaS53YXJuKGBEdXBsaWNhdGUgQUJJIGVudHJ5IGZvciAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO3JldHVybn11bmlxdWVTaWduYXR1cmVzW3NpZ25hdHVyZV09dHJ1ZTt7Y29uc3QgbmFtZT1mcmFnbWVudC5uYW1lO2lmKCF1bmlxdWVOYW1lc1tuYW1lXSl7dW5pcXVlTmFtZXNbbmFtZV09W119dW5pcXVlTmFtZXNbbmFtZV0ucHVzaChzaWduYXR1cmUpfWlmKHRoaXNbc2lnbmF0dXJlXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxzaWduYXR1cmUsYnVpbGREZWZhdWx0KHRoaXMsZnJhZ21lbnQsdHJ1ZSkpfWlmKHRoaXMuZnVuY3Rpb25zW3NpZ25hdHVyZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMuZnVuY3Rpb25zLHNpZ25hdHVyZSxidWlsZERlZmF1bHQodGhpcyxmcmFnbWVudCxmYWxzZSkpfWlmKHRoaXMuY2FsbFN0YXRpY1tzaWduYXR1cmVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLmNhbGxTdGF0aWMsc2lnbmF0dXJlLGJ1aWxkQ2FsbCh0aGlzLGZyYWdtZW50LHRydWUpKX1pZih0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb25bc2lnbmF0dXJlXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uLHNpZ25hdHVyZSxidWlsZFBvcHVsYXRlKHRoaXMsZnJhZ21lbnQpKX1pZih0aGlzLmVzdGltYXRlR2FzW3NpZ25hdHVyZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMuZXN0aW1hdGVHYXMsc2lnbmF0dXJlLGJ1aWxkRXN0aW1hdGUodGhpcyxmcmFnbWVudCkpfX0pO09iamVjdC5rZXlzKHVuaXF1ZU5hbWVzKS5mb3JFYWNoKG5hbWU9Pntjb25zdCBzaWduYXR1cmVzPXVuaXF1ZU5hbWVzW25hbWVdO2lmKHNpZ25hdHVyZXMubGVuZ3RoPjEpe3JldHVybn1jb25zdCBzaWduYXR1cmU9c2lnbmF0dXJlc1swXTt0cnl7aWYodGhpc1tuYW1lXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcyxuYW1lLHRoaXNbc2lnbmF0dXJlXSl9fWNhdGNoKGUpe31pZih0aGlzLmZ1bmN0aW9uc1tuYW1lXT09bnVsbCl7ZGVmaW5lUmVhZE9ubHkodGhpcy5mdW5jdGlvbnMsbmFtZSx0aGlzLmZ1bmN0aW9uc1tzaWduYXR1cmVdKX1pZih0aGlzLmNhbGxTdGF0aWNbbmFtZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMuY2FsbFN0YXRpYyxuYW1lLHRoaXMuY2FsbFN0YXRpY1tzaWduYXR1cmVdKX1pZih0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb25bbmFtZV09PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbixuYW1lLHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltzaWduYXR1cmVdKX1pZih0aGlzLmVzdGltYXRlR2FzW25hbWVdPT1udWxsKXtkZWZpbmVSZWFkT25seSh0aGlzLmVzdGltYXRlR2FzLG5hbWUsdGhpcy5lc3RpbWF0ZUdhc1tzaWduYXR1cmVdKX19KX1zdGF0aWMgZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uKXtyZXR1cm4gZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uKX1zdGF0aWMgZ2V0SW50ZXJmYWNlKGNvbnRyYWN0SW50ZXJmYWNlKXtpZihJbnRlcmZhY2UuaXNJbnRlcmZhY2UoY29udHJhY3RJbnRlcmZhY2UpKXtyZXR1cm4gY29udHJhY3RJbnRlcmZhY2V9cmV0dXJuIG5ldyBJbnRlcmZhY2UoY29udHJhY3RJbnRlcmZhY2UpfWRlcGxveWVkKCl7cmV0dXJuIHRoaXMuX2RlcGxveWVkKCl9X2RlcGxveWVkKGJsb2NrVGFnKXtpZighdGhpcy5fZGVwbG95ZWRQcm9taXNlKXtpZih0aGlzLmRlcGxveVRyYW5zYWN0aW9uKXt0aGlzLl9kZXBsb3llZFByb21pc2U9dGhpcy5kZXBsb3lUcmFuc2FjdGlvbi53YWl0KCkudGhlbigoKT0+e3JldHVybiB0aGlzfSl9ZWxzZXt0aGlzLl9kZXBsb3llZFByb21pc2U9dGhpcy5wcm92aWRlci5nZXRDb2RlKHRoaXMuYWRkcmVzcyxibG9ja1RhZykudGhlbihjb2RlPT57aWYoY29kZT09PVwiMHhcIil7bG9nZ2VyJGkudGhyb3dFcnJvcihcImNvbnRyYWN0IG5vdCBkZXBsb3llZFwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtjb250cmFjdEFkZHJlc3M6dGhpcy5hZGRyZXNzLG9wZXJhdGlvbjpcImdldERlcGxveWVkXCJ9KX1yZXR1cm4gdGhpc30pfX1yZXR1cm4gdGhpcy5fZGVwbG95ZWRQcm9taXNlfWZhbGxiYWNrKG92ZXJyaWRlcyl7aWYoIXRoaXMuc2lnbmVyKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwic2VuZGluZyBhIHRyYW5zYWN0aW9ucyByZXF1aXJlIGEgc2lnbmVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInNlbmRUcmFuc2FjdGlvbihmYWxsYmFjaylcIn0pfWNvbnN0IHR4PXNoYWxsb3dDb3B5KG92ZXJyaWRlc3x8e30pO1tcImZyb21cIixcInRvXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KXtpZih0eFtrZXldPT1udWxsKXtyZXR1cm59bG9nZ2VyJGkudGhyb3dFcnJvcihcImNhbm5vdCBvdmVycmlkZSBcIitrZXksTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjprZXl9KX0pO3R4LnRvPXRoaXMucmVzb2x2ZWRBZGRyZXNzO3JldHVybiB0aGlzLmRlcGxveWVkKCkudGhlbigoKT0+e3JldHVybiB0aGlzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odHgpfSl9Y29ubmVjdChzaWduZXJPclByb3ZpZGVyKXtpZih0eXBlb2Ygc2lnbmVyT3JQcm92aWRlcj09PVwic3RyaW5nXCIpe3NpZ25lck9yUHJvdmlkZXI9bmV3IFZvaWRTaWduZXIoc2lnbmVyT3JQcm92aWRlcix0aGlzLnByb3ZpZGVyKX1jb25zdCBjb250cmFjdD1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmFkZHJlc3MsdGhpcy5pbnRlcmZhY2Usc2lnbmVyT3JQcm92aWRlcik7aWYodGhpcy5kZXBsb3lUcmFuc2FjdGlvbil7ZGVmaW5lUmVhZE9ubHkoY29udHJhY3QsXCJkZXBsb3lUcmFuc2FjdGlvblwiLHRoaXMuZGVwbG95VHJhbnNhY3Rpb24pfXJldHVybiBjb250cmFjdH1hdHRhY2goYWRkcmVzc09yTmFtZSl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGFkZHJlc3NPck5hbWUsdGhpcy5pbnRlcmZhY2UsdGhpcy5zaWduZXJ8fHRoaXMucHJvdmlkZXIpfXN0YXRpYyBpc0luZGV4ZWQodmFsdWUpe3JldHVybiBJbmRleGVkLmlzSW5kZXhlZCh2YWx1ZSl9X25vcm1hbGl6ZVJ1bm5pbmdFdmVudChydW5uaW5nRXZlbnQpe2lmKHRoaXMuX3J1bm5pbmdFdmVudHNbcnVubmluZ0V2ZW50LnRhZ10pe3JldHVybiB0aGlzLl9ydW5uaW5nRXZlbnRzW3J1bm5pbmdFdmVudC50YWddfXJldHVybiBydW5uaW5nRXZlbnR9X2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpe2lmKHR5cGVvZiBldmVudE5hbWU9PT1cInN0cmluZ1wiKXtpZihldmVudE5hbWU9PT1cImVycm9yXCIpe3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IEVycm9yUnVubmluZ0V2ZW50KX1pZihldmVudE5hbWU9PT1cImV2ZW50XCIpe3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IFJ1bm5pbmdFdmVudChcImV2ZW50XCIsbnVsbCkpfWlmKGV2ZW50TmFtZT09PVwiKlwiKXtyZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBXaWxkY2FyZFJ1bm5pbmdFdmVudCh0aGlzLmFkZHJlc3MsdGhpcy5pbnRlcmZhY2UpKX1jb25zdCBmcmFnbWVudD10aGlzLmludGVyZmFjZS5nZXRFdmVudChldmVudE5hbWUpO3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IEZyYWdtZW50UnVubmluZ0V2ZW50KHRoaXMuYWRkcmVzcyx0aGlzLmludGVyZmFjZSxmcmFnbWVudCkpfWlmKGV2ZW50TmFtZS50b3BpY3MmJmV2ZW50TmFtZS50b3BpY3MubGVuZ3RoPjApe3RyeXtjb25zdCB0b3BpYz1ldmVudE5hbWUudG9waWNzWzBdO2lmKHR5cGVvZiB0b3BpYyE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgdG9waWNcIil9Y29uc3QgZnJhZ21lbnQ9dGhpcy5pbnRlcmZhY2UuZ2V0RXZlbnQodG9waWMpO3JldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IEZyYWdtZW50UnVubmluZ0V2ZW50KHRoaXMuYWRkcmVzcyx0aGlzLmludGVyZmFjZSxmcmFnbWVudCxldmVudE5hbWUudG9waWNzKSl9Y2F0Y2goZXJyb3Ipe31jb25zdCBmaWx0ZXI9e2FkZHJlc3M6dGhpcy5hZGRyZXNzLHRvcGljczpldmVudE5hbWUudG9waWNzfTtyZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBSdW5uaW5nRXZlbnQoZ2V0RXZlbnRUYWcoZmlsdGVyKSxmaWx0ZXIpKX1yZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBXaWxkY2FyZFJ1bm5pbmdFdmVudCh0aGlzLmFkZHJlc3MsdGhpcy5pbnRlcmZhY2UpKX1fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCl7aWYocnVubmluZ0V2ZW50Lmxpc3RlbmVyQ291bnQoKT09PTApe2RlbGV0ZSB0aGlzLl9ydW5uaW5nRXZlbnRzW3J1bm5pbmdFdmVudC50YWddO2NvbnN0IGVtaXQ9dGhpcy5fd3JhcHBlZEVtaXRzW3J1bm5pbmdFdmVudC50YWddO2lmKGVtaXQmJnJ1bm5pbmdFdmVudC5maWx0ZXIpe3RoaXMucHJvdmlkZXIub2ZmKHJ1bm5pbmdFdmVudC5maWx0ZXIsZW1pdCk7ZGVsZXRlIHRoaXMuX3dyYXBwZWRFbWl0c1tydW5uaW5nRXZlbnQudGFnXX19fV93cmFwRXZlbnQocnVubmluZ0V2ZW50LGxvZyxsaXN0ZW5lcil7Y29uc3QgZXZlbnQ9ZGVlcENvcHkobG9nKTtldmVudC5yZW1vdmVMaXN0ZW5lcj0oKCk9PntpZighbGlzdGVuZXIpe3JldHVybn1ydW5uaW5nRXZlbnQucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO3RoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpfSk7ZXZlbnQuZ2V0QmxvY2s9KCgpPT57cmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0QmxvY2sobG9nLmJsb2NrSGFzaCl9KTtldmVudC5nZXRUcmFuc2FjdGlvbj0oKCk9PntyZXR1cm4gdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbihsb2cudHJhbnNhY3Rpb25IYXNoKX0pO2V2ZW50LmdldFRyYW5zYWN0aW9uUmVjZWlwdD0oKCk9PntyZXR1cm4gdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQobG9nLnRyYW5zYWN0aW9uSGFzaCl9KTtydW5uaW5nRXZlbnQucHJlcGFyZUV2ZW50KGV2ZW50KTtyZXR1cm4gZXZlbnR9X2FkZEV2ZW50TGlzdGVuZXIocnVubmluZ0V2ZW50LGxpc3RlbmVyLG9uY2Upe2lmKCF0aGlzLnByb3ZpZGVyKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwiZXZlbnRzIHJlcXVpcmUgYSBwcm92aWRlciBvciBhIHNpZ25lciB3aXRoIGEgcHJvdmlkZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwib25jZVwifSl9cnVubmluZ0V2ZW50LmFkZExpc3RlbmVyKGxpc3RlbmVyLG9uY2UpO3RoaXMuX3J1bm5pbmdFdmVudHNbcnVubmluZ0V2ZW50LnRhZ109cnVubmluZ0V2ZW50O2lmKCF0aGlzLl93cmFwcGVkRW1pdHNbcnVubmluZ0V2ZW50LnRhZ10pe2NvbnN0IHdyYXBwZWRFbWl0PWxvZz0+e2xldCBldmVudD10aGlzLl93cmFwRXZlbnQocnVubmluZ0V2ZW50LGxvZyxsaXN0ZW5lcik7aWYoZXZlbnQuZGVjb2RlRXJyb3I9PW51bGwpe3RyeXtjb25zdCBhcmdzPXJ1bm5pbmdFdmVudC5nZXRFbWl0KGV2ZW50KTt0aGlzLmVtaXQocnVubmluZ0V2ZW50LmZpbHRlciwuLi5hcmdzKX1jYXRjaChlcnJvcil7ZXZlbnQuZGVjb2RlRXJyb3I9ZXJyb3IuZXJyb3J9fWlmKHJ1bm5pbmdFdmVudC5maWx0ZXIhPW51bGwpe3RoaXMuZW1pdChcImV2ZW50XCIsZXZlbnQpfWlmKGV2ZW50LmRlY29kZUVycm9yIT1udWxsKXt0aGlzLmVtaXQoXCJlcnJvclwiLGV2ZW50LmRlY29kZUVycm9yLGV2ZW50KX19O3RoaXMuX3dyYXBwZWRFbWl0c1tydW5uaW5nRXZlbnQudGFnXT13cmFwcGVkRW1pdDtpZihydW5uaW5nRXZlbnQuZmlsdGVyIT1udWxsKXt0aGlzLnByb3ZpZGVyLm9uKHJ1bm5pbmdFdmVudC5maWx0ZXIsd3JhcHBlZEVtaXQpfX19cXVlcnlGaWx0ZXIoZXZlbnQsZnJvbUJsb2NrT3JCbG9ja2hhc2gsdG9CbG9jayl7Y29uc3QgcnVubmluZ0V2ZW50PXRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudCk7Y29uc3QgZmlsdGVyPXNoYWxsb3dDb3B5KHJ1bm5pbmdFdmVudC5maWx0ZXIpO2lmKHR5cGVvZiBmcm9tQmxvY2tPckJsb2NraGFzaD09PVwic3RyaW5nXCImJmlzSGV4U3RyaW5nKGZyb21CbG9ja09yQmxvY2toYXNoLDMyKSl7aWYodG9CbG9jayE9bnVsbCl7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IHNwZWNpZnkgdG9CbG9jayB3aXRoIGJsb2NraGFzaFwiLFwidG9CbG9ja1wiLHRvQmxvY2spfWZpbHRlci5ibG9ja0hhc2g9ZnJvbUJsb2NrT3JCbG9ja2hhc2h9ZWxzZXtmaWx0ZXIuZnJvbUJsb2NrPWZyb21CbG9ja09yQmxvY2toYXNoIT1udWxsP2Zyb21CbG9ja09yQmxvY2toYXNoOjA7ZmlsdGVyLnRvQmxvY2s9dG9CbG9jayE9bnVsbD90b0Jsb2NrOlwibGF0ZXN0XCJ9cmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpLnRoZW4obG9ncz0+e3JldHVybiBsb2dzLm1hcChsb2c9PnRoaXMuX3dyYXBFdmVudChydW5uaW5nRXZlbnQsbG9nLG51bGwpKX0pfW9uKGV2ZW50LGxpc3RlbmVyKXt0aGlzLl9hZGRFdmVudExpc3RlbmVyKHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudCksbGlzdGVuZXIsZmFsc2UpO3JldHVybiB0aGlzfW9uY2UoZXZlbnQsbGlzdGVuZXIpe3RoaXMuX2FkZEV2ZW50TGlzdGVuZXIodGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50KSxsaXN0ZW5lcix0cnVlKTtyZXR1cm4gdGhpc31lbWl0KGV2ZW50TmFtZSwuLi5hcmdzKXtpZighdGhpcy5wcm92aWRlcil7cmV0dXJuIGZhbHNlfWNvbnN0IHJ1bm5pbmdFdmVudD10aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnROYW1lKTtjb25zdCByZXN1bHQ9cnVubmluZ0V2ZW50LnJ1bihhcmdzKT4wO3RoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpO3JldHVybiByZXN1bHR9bGlzdGVuZXJDb3VudChldmVudE5hbWUpe2lmKCF0aGlzLnByb3ZpZGVyKXtyZXR1cm4gMH1pZihldmVudE5hbWU9PW51bGwpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLl9ydW5uaW5nRXZlbnRzKS5yZWR1Y2UoKGFjY3VtLGtleSk9PntyZXR1cm4gYWNjdW0rdGhpcy5fcnVubmluZ0V2ZW50c1trZXldLmxpc3RlbmVyQ291bnQoKX0sMCl9cmV0dXJuIHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpLmxpc3RlbmVyQ291bnQoKX1saXN0ZW5lcnMoZXZlbnROYW1lKXtpZighdGhpcy5wcm92aWRlcil7cmV0dXJuW119aWYoZXZlbnROYW1lPT1udWxsKXtjb25zdCByZXN1bHQ9W107Zm9yKGxldCB0YWcgaW4gdGhpcy5fcnVubmluZ0V2ZW50cyl7dGhpcy5fcnVubmluZ0V2ZW50c1t0YWddLmxpc3RlbmVycygpLmZvckVhY2gobGlzdGVuZXI9PntyZXN1bHQucHVzaChsaXN0ZW5lcil9KX1yZXR1cm4gcmVzdWx0fXJldHVybiB0aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnROYW1lKS5saXN0ZW5lcnMoKX1yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lKXtpZighdGhpcy5wcm92aWRlcil7cmV0dXJuIHRoaXN9aWYoZXZlbnROYW1lPT1udWxsKXtmb3IoY29uc3QgdGFnIGluIHRoaXMuX3J1bm5pbmdFdmVudHMpe2NvbnN0IHJ1bm5pbmdFdmVudD10aGlzLl9ydW5uaW5nRXZlbnRzW3RhZ107cnVubmluZ0V2ZW50LnJlbW92ZUFsbExpc3RlbmVycygpO3RoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpfXJldHVybiB0aGlzfWNvbnN0IHJ1bm5pbmdFdmVudD10aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnROYW1lKTtydW5uaW5nRXZlbnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7dGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCk7cmV0dXJuIHRoaXN9b2ZmKGV2ZW50TmFtZSxsaXN0ZW5lcil7aWYoIXRoaXMucHJvdmlkZXIpe3JldHVybiB0aGlzfWNvbnN0IHJ1bm5pbmdFdmVudD10aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnROYW1lKTtydW5uaW5nRXZlbnQucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO3RoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpO3JldHVybiB0aGlzfXJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSxsaXN0ZW5lcil7cmV0dXJuIHRoaXMub2ZmKGV2ZW50TmFtZSxsaXN0ZW5lcil9fWNsYXNzIENvbnRyYWN0IGV4dGVuZHMgQmFzZUNvbnRyYWN0e31jbGFzcyBDb250cmFjdEZhY3Rvcnl7Y29uc3RydWN0b3IoY29udHJhY3RJbnRlcmZhY2UsYnl0ZWNvZGUsc2lnbmVyKXtsZXQgYnl0ZWNvZGVIZXg9bnVsbDtpZih0eXBlb2YgYnl0ZWNvZGU9PT1cInN0cmluZ1wiKXtieXRlY29kZUhleD1ieXRlY29kZX1lbHNlIGlmKGlzQnl0ZXMoYnl0ZWNvZGUpKXtieXRlY29kZUhleD1oZXhsaWZ5KGJ5dGVjb2RlKX1lbHNlIGlmKGJ5dGVjb2RlJiZ0eXBlb2YgYnl0ZWNvZGUub2JqZWN0PT09XCJzdHJpbmdcIil7Ynl0ZWNvZGVIZXg9Ynl0ZWNvZGUub2JqZWN0fWVsc2V7Ynl0ZWNvZGVIZXg9XCIhXCJ9aWYoYnl0ZWNvZGVIZXguc3Vic3RyaW5nKDAsMikhPT1cIjB4XCIpe2J5dGVjb2RlSGV4PVwiMHhcIitieXRlY29kZUhleH1pZighaXNIZXhTdHJpbmcoYnl0ZWNvZGVIZXgpfHxieXRlY29kZUhleC5sZW5ndGglMil7bG9nZ2VyJGkudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBieXRlY29kZVwiLFwiYnl0ZWNvZGVcIixieXRlY29kZSl9aWYoc2lnbmVyJiYhU2lnbmVyLmlzU2lnbmVyKHNpZ25lcikpe2xvZ2dlciRpLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgc2lnbmVyXCIsXCJzaWduZXJcIixzaWduZXIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJieXRlY29kZVwiLGJ5dGVjb2RlSGV4KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiaW50ZXJmYWNlXCIsZ2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXRJbnRlcmZhY2VcIikoY29udHJhY3RJbnRlcmZhY2UpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwic2lnbmVyXCIsc2lnbmVyfHxudWxsKX1nZXREZXBsb3lUcmFuc2FjdGlvbiguLi5hcmdzKXtsZXQgdHg9e307aWYoYXJncy5sZW5ndGg9PT10aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzLmxlbmd0aCsxJiZ0eXBlb2YgYXJnc1thcmdzLmxlbmd0aC0xXT09PVwib2JqZWN0XCIpe3R4PXNoYWxsb3dDb3B5KGFyZ3MucG9wKCkpO2Zvcihjb25zdCBrZXkgaW4gdHgpe2lmKCFhbGxvd2VkVHJhbnNhY3Rpb25LZXlzJDJba2V5XSl7dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0cmFuc2FjdGlvbiBvdmVycmlkZSBcIitrZXkpfX19W1wiZGF0YVwiLFwiZnJvbVwiLFwidG9cIl0uZm9yRWFjaChrZXk9PntpZih0eFtrZXldPT1udWxsKXtyZXR1cm59bG9nZ2VyJGkudGhyb3dFcnJvcihcImNhbm5vdCBvdmVycmlkZSBcIitrZXksTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjprZXl9KX0pO2xvZ2dlciRpLmNoZWNrQXJndW1lbnRDb3VudChhcmdzLmxlbmd0aCx0aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzLmxlbmd0aCxcIiBpbiBDb250cmFjdCBjb25zdHJ1Y3RvclwiKTt0eC5kYXRhPWhleGxpZnkoY29uY2F0KFt0aGlzLmJ5dGVjb2RlLHRoaXMuaW50ZXJmYWNlLmVuY29kZURlcGxveShhcmdzKV0pKTtyZXR1cm4gdHh9ZGVwbG95KC4uLmFyZ3Mpe3JldHVybiBfX2F3YWl0ZXIkMyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IG92ZXJyaWRlcz17fTtpZihhcmdzLmxlbmd0aD09PXRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoKzEpe292ZXJyaWRlcz1hcmdzLnBvcCgpfWxvZ2dlciRpLmNoZWNrQXJndW1lbnRDb3VudChhcmdzLmxlbmd0aCx0aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzLmxlbmd0aCxcIiBpbiBDb250cmFjdCBjb25zdHJ1Y3RvclwiKTtjb25zdCBwYXJhbXM9eWllbGQgcmVzb2x2ZUFkZHJlc3Nlcyh0aGlzLnNpZ25lcixhcmdzLHRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMpO3BhcmFtcy5wdXNoKG92ZXJyaWRlcyk7Y29uc3QgdW5zaWduZWRUeD10aGlzLmdldERlcGxveVRyYW5zYWN0aW9uKC4uLnBhcmFtcyk7Y29uc3QgdHg9eWllbGQgdGhpcy5zaWduZXIuc2VuZFRyYW5zYWN0aW9uKHVuc2lnbmVkVHgpO2NvbnN0IGFkZHJlc3M9Z2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJnZXRDb250cmFjdEFkZHJlc3NcIikodHgpO2NvbnN0IGNvbnRyYWN0PWdldFN0YXRpYyh0aGlzLmNvbnN0cnVjdG9yLFwiZ2V0Q29udHJhY3RcIikoYWRkcmVzcyx0aGlzLmludGVyZmFjZSx0aGlzLnNpZ25lcik7ZGVmaW5lUmVhZE9ubHkoY29udHJhY3QsXCJkZXBsb3lUcmFuc2FjdGlvblwiLHR4KTtyZXR1cm4gY29udHJhY3R9KX1hdHRhY2goYWRkcmVzcyl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IuZ2V0Q29udHJhY3QoYWRkcmVzcyx0aGlzLmludGVyZmFjZSx0aGlzLnNpZ25lcil9Y29ubmVjdChzaWduZXIpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmludGVyZmFjZSx0aGlzLmJ5dGVjb2RlLHNpZ25lcil9c3RhdGljIGZyb21Tb2xpZGl0eShjb21waWxlck91dHB1dCxzaWduZXIpe2lmKGNvbXBpbGVyT3V0cHV0PT1udWxsKXtsb2dnZXIkaS50aHJvd0Vycm9yKFwibWlzc2luZyBjb21waWxlciBvdXRwdXRcIixMb2dnZXIuZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQse2FyZ3VtZW50OlwiY29tcGlsZXJPdXRwdXRcIn0pfWlmKHR5cGVvZiBjb21waWxlck91dHB1dD09PVwic3RyaW5nXCIpe2NvbXBpbGVyT3V0cHV0PUpTT04ucGFyc2UoY29tcGlsZXJPdXRwdXQpfWNvbnN0IGFiaT1jb21waWxlck91dHB1dC5hYmk7bGV0IGJ5dGVjb2RlPW51bGw7aWYoY29tcGlsZXJPdXRwdXQuYnl0ZWNvZGUpe2J5dGVjb2RlPWNvbXBpbGVyT3V0cHV0LmJ5dGVjb2RlfWVsc2UgaWYoY29tcGlsZXJPdXRwdXQuZXZtJiZjb21waWxlck91dHB1dC5ldm0uYnl0ZWNvZGUpe2J5dGVjb2RlPWNvbXBpbGVyT3V0cHV0LmV2bS5ieXRlY29kZX1yZXR1cm4gbmV3IHRoaXMoYWJpLGJ5dGVjb2RlLHNpZ25lcil9c3RhdGljIGdldEludGVyZmFjZShjb250cmFjdEludGVyZmFjZSl7cmV0dXJuIENvbnRyYWN0LmdldEludGVyZmFjZShjb250cmFjdEludGVyZmFjZSl9c3RhdGljIGdldENvbnRyYWN0QWRkcmVzcyh0eCl7cmV0dXJuIGdldENvbnRyYWN0QWRkcmVzcyh0eCl9c3RhdGljIGdldENvbnRyYWN0KGFkZHJlc3MsY29udHJhY3RJbnRlcmZhY2Usc2lnbmVyKXtyZXR1cm4gbmV3IENvbnRyYWN0KGFkZHJlc3MsY29udHJhY3RJbnRlcmZhY2Usc2lnbmVyKX19Y2xhc3MgQmFzZVh7Y29uc3RydWN0b3IoYWxwaGFiZXQpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhbHBoYWJldFwiLGFscGhhYmV0KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYmFzZVwiLGFscGhhYmV0Lmxlbmd0aCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9hbHBoYWJldE1hcFwiLHt9KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2xlYWRlclwiLGFscGhhYmV0LmNoYXJBdCgwKSk7Zm9yKGxldCBpPTA7aTxhbHBoYWJldC5sZW5ndGg7aSsrKXt0aGlzLl9hbHBoYWJldE1hcFthbHBoYWJldC5jaGFyQXQoaSldPWl9fWVuY29kZSh2YWx1ZSl7bGV0IHNvdXJjZT1hcnJheWlmeSh2YWx1ZSk7aWYoc291cmNlLmxlbmd0aD09PTApe3JldHVyblwiXCJ9bGV0IGRpZ2l0cz1bMF07Zm9yKGxldCBpPTA7aTxzb3VyY2UubGVuZ3RoOysraSl7bGV0IGNhcnJ5PXNvdXJjZVtpXTtmb3IobGV0IGo9MDtqPGRpZ2l0cy5sZW5ndGg7KytqKXtjYXJyeSs9ZGlnaXRzW2pdPDw4O2RpZ2l0c1tqXT1jYXJyeSV0aGlzLmJhc2U7Y2Fycnk9Y2FycnkvdGhpcy5iYXNlfDB9d2hpbGUoY2Fycnk+MCl7ZGlnaXRzLnB1c2goY2FycnkldGhpcy5iYXNlKTtjYXJyeT1jYXJyeS90aGlzLmJhc2V8MH19bGV0IHN0cmluZz1cIlwiO2ZvcihsZXQgaz0wO3NvdXJjZVtrXT09PTAmJms8c291cmNlLmxlbmd0aC0xOysrayl7c3RyaW5nKz10aGlzLl9sZWFkZXJ9Zm9yKGxldCBxPWRpZ2l0cy5sZW5ndGgtMTtxPj0wOy0tcSl7c3RyaW5nKz10aGlzLmFscGhhYmV0W2RpZ2l0c1txXV19cmV0dXJuIHN0cmluZ31kZWNvZGUodmFsdWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBTdHJpbmdcIil9bGV0IGJ5dGVzPVtdO2lmKHZhbHVlLmxlbmd0aD09PTApe3JldHVybiBuZXcgVWludDhBcnJheShieXRlcyl9Ynl0ZXMucHVzaCgwKTtmb3IobGV0IGk9MDtpPHZhbHVlLmxlbmd0aDtpKyspe2xldCBieXRlPXRoaXMuX2FscGhhYmV0TWFwW3ZhbHVlW2ldXTtpZihieXRlPT09dW5kZWZpbmVkKXt0aHJvdyBuZXcgRXJyb3IoXCJOb24tYmFzZVwiK3RoaXMuYmFzZStcIiBjaGFyYWN0ZXJcIil9bGV0IGNhcnJ5PWJ5dGU7Zm9yKGxldCBqPTA7ajxieXRlcy5sZW5ndGg7KytqKXtjYXJyeSs9Ynl0ZXNbal0qdGhpcy5iYXNlO2J5dGVzW2pdPWNhcnJ5JjI1NTtjYXJyeT4+PTh9d2hpbGUoY2Fycnk+MCl7Ynl0ZXMucHVzaChjYXJyeSYyNTUpO2NhcnJ5Pj49OH19Zm9yKGxldCBrPTA7dmFsdWVba109PT10aGlzLl9sZWFkZXImJms8dmFsdWUubGVuZ3RoLTE7KytrKXtieXRlcy5wdXNoKDApfXJldHVybiBhcnJheWlmeShuZXcgVWludDhBcnJheShieXRlcy5yZXZlcnNlKCkpKX19Y29uc3QgQmFzZTMyPW5ldyBCYXNlWChcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3XCIpO2NvbnN0IEJhc2U1OD1uZXcgQmFzZVgoXCIxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6XCIpO3ZhciBTdXBwb3J0ZWRBbGdvcml0aG07KGZ1bmN0aW9uKFN1cHBvcnRlZEFsZ29yaXRobSl7U3VwcG9ydGVkQWxnb3JpdGhtW1wic2hhMjU2XCJdPVwic2hhMjU2XCI7U3VwcG9ydGVkQWxnb3JpdGhtW1wic2hhNTEyXCJdPVwic2hhNTEyXCJ9KShTdXBwb3J0ZWRBbGdvcml0aG18fChTdXBwb3J0ZWRBbGdvcml0aG09e30pKTtjb25zdCB2ZXJzaW9uJGU9XCJzaGEyLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJGo9bmV3IExvZ2dlcih2ZXJzaW9uJGUpO2Z1bmN0aW9uIHJpcGVtZDE2MCQxKGRhdGEpe3JldHVyblwiMHhcIitoYXNoXzEucmlwZW1kMTYwKCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIil9ZnVuY3Rpb24gc2hhMjU2JDEoZGF0YSl7cmV0dXJuXCIweFwiK2hhc2hfMS5zaGEyNTYoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKX1mdW5jdGlvbiBzaGE1MTIkMShkYXRhKXtyZXR1cm5cIjB4XCIraGFzaF8xLnNoYTUxMigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpfWZ1bmN0aW9uIGNvbXB1dGVIbWFjKGFsZ29yaXRobSxrZXksZGF0YSl7aWYoIVN1cHBvcnRlZEFsZ29yaXRobVthbGdvcml0aG1dKXtsb2dnZXIkai50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgYWxnb3JpdGhtIFwiK2FsZ29yaXRobSxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiaG1hY1wiLGFsZ29yaXRobTphbGdvcml0aG19KX1yZXR1cm5cIjB4XCIraGFzaF8xLmhtYWMoaGFzaF8xW2FsZ29yaXRobV0sYXJyYXlpZnkoa2V5KSkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIil9XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcGJrZGYyKHBhc3N3b3JkLHNhbHQsaXRlcmF0aW9ucyxrZXlsZW4saGFzaEFsZ29yaXRobSl7cGFzc3dvcmQ9YXJyYXlpZnkocGFzc3dvcmQpO3NhbHQ9YXJyYXlpZnkoc2FsdCk7bGV0IGhMZW47bGV0IGw9MTtjb25zdCBESz1uZXcgVWludDhBcnJheShrZXlsZW4pO2NvbnN0IGJsb2NrMT1uZXcgVWludDhBcnJheShzYWx0Lmxlbmd0aCs0KTtibG9jazEuc2V0KHNhbHQpO2xldCByO2xldCBUO2ZvcihsZXQgaT0xO2k8PWw7aSsrKXtibG9jazFbc2FsdC5sZW5ndGhdPWk+PjI0JjI1NTtibG9jazFbc2FsdC5sZW5ndGgrMV09aT4+MTYmMjU1O2Jsb2NrMVtzYWx0Lmxlbmd0aCsyXT1pPj44JjI1NTtibG9jazFbc2FsdC5sZW5ndGgrM109aSYyNTU7bGV0IFU9YXJyYXlpZnkoY29tcHV0ZUhtYWMoaGFzaEFsZ29yaXRobSxwYXNzd29yZCxibG9jazEpKTtpZighaExlbil7aExlbj1VLmxlbmd0aDtUPW5ldyBVaW50OEFycmF5KGhMZW4pO2w9TWF0aC5jZWlsKGtleWxlbi9oTGVuKTtyPWtleWxlbi0obC0xKSpoTGVufVQuc2V0KFUpO2ZvcihsZXQgaj0xO2o8aXRlcmF0aW9ucztqKyspe1U9YXJyYXlpZnkoY29tcHV0ZUhtYWMoaGFzaEFsZ29yaXRobSxwYXNzd29yZCxVKSk7Zm9yKGxldCBrPTA7azxoTGVuO2srKylUW2tdXj1VW2tdfWNvbnN0IGRlc3RQb3M9KGktMSkqaExlbjtjb25zdCBsZW49aT09PWw/cjpoTGVuO0RLLnNldChhcnJheWlmeShUKS5zbGljZSgwLGxlbiksZGVzdFBvcyl9cmV0dXJuIGhleGxpZnkoREspfWNvbnN0IHZlcnNpb24kZj1cIndvcmRsaXN0cy81LjEuMFwiO1widXNlIHN0cmljdFwiO2NvbnN0IGV4cG9ydFdvcmRsaXN0PWZhbHNlO2NvbnN0IGxvZ2dlciRrPW5ldyBMb2dnZXIodmVyc2lvbiRmKTtjbGFzcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcihsb2NhbGUpe2xvZ2dlciRrLmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCxXb3JkbGlzdCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImxvY2FsZVwiLGxvY2FsZSl9c3BsaXQobW5lbW9uaWMpe3JldHVybiBtbmVtb25pYy50b0xvd2VyQ2FzZSgpLnNwbGl0KC8gKy9nKX1qb2luKHdvcmRzKXtyZXR1cm4gd29yZHMuam9pbihcIiBcIil9c3RhdGljIGNoZWNrKHdvcmRsaXN0KXtjb25zdCB3b3Jkcz1bXTtmb3IobGV0IGk9MDtpPDIwNDg7aSsrKXtjb25zdCB3b3JkPXdvcmRsaXN0LmdldFdvcmQoaSk7aWYoaSE9PXdvcmRsaXN0LmdldFdvcmRJbmRleCh3b3JkKSl7cmV0dXJuXCIweFwifXdvcmRzLnB1c2god29yZCl9cmV0dXJuIGlkKHdvcmRzLmpvaW4oXCJcXG5cIikrXCJcXG5cIil9c3RhdGljIHJlZ2lzdGVyKGxhbmcsbmFtZSl7aWYoIW5hbWUpe25hbWU9bGFuZy5sb2NhbGV9aWYoZXhwb3J0V29yZGxpc3Qpe3RyeXtjb25zdCBhbnlHbG9iYWw9d2luZG93O2lmKGFueUdsb2JhbC5fZXRoZXJzJiZhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHMpe2lmKCFhbnlHbG9iYWwuX2V0aGVycy53b3JkbGlzdHNbbmFtZV0pe2RlZmluZVJlYWRPbmx5KGFueUdsb2JhbC5fZXRoZXJzLndvcmRsaXN0cyxuYW1lLGxhbmcpfX19Y2F0Y2goZXJyb3Ipe319fX1cInVzZSBzdHJpY3RcIjtjb25zdCB3b3Jkcz1cIkFiZGlrYWNlQWJlY2VkYUFkcmVzYUFncmVzZUFrY2VBa3RvdmthQWxlakFsa29ob2xBbXB1dGFjZUFuYW5hc0FuZHVsa2FBbmVrZG90YUFua2V0YUFudGlrYUFudWxvdmF0QXJjaGFBcm9nYW5jZUFzZmFsdEFzaXN0ZW50QXNwaXJhY2VBc3RtYUFzdHJvbm9tQXRsYXNBdGxldGlrYUF0b2xBdXRvYnVzQXp5bEJhYmthQmFjaG9yQmFjaWxCYWN1bGthQmFkYXRlbEJhZ2V0YUJhZ3JCYWhub0Jha3RlcmllQmFsYWRhQmFsZXRrYUJhbGtvbkJhbG9uZWtCYWx2YW5CYWx6YUJhbWJ1c0JhbmtvbWF0QmFyYmFyQmFyZXRCYXJtYW5CYXJva29CYXJ2YUJhdGVya2FCYXRvaEJhdmxuYUJhemFsa2FCYXppbGlrYUJhenVrYUJlZG5hQmVyYW5CZXNlZGFCZXN0aWVCZXRvbkJlemlua2FCZXptb2NCZXp0YWtCaWN5a2xCaWRsb0JpZnRla0Jpa2lueUJpbGFuY2VCaW9ncmFmQmlvbG9nQml0dmFCaXpvbkJsYWhvYnl0QmxhdG91Y2hCbGVjaGFCbGVkdWxlQmxlc2tCbGlrYXRCbGl6bmFCbG9rb3ZhdEJsb3VkaXRCbHVkQm9iZWtCb2JyQm9kbGluYUJvZG5vdXRCb2hhdG9zdEJvamtvdEJvam92YXRCb2tvcnlzQm9sZXN0Qm9yZWNCb3JvdmljZUJvdGFCb3ViZWxCb3VjaGF0Qm91ZGFCb3VsZUJvdXJhdEJveGVyQnJhZGF2a2FCcmFtYm9yYUJyYW5rYUJyYXRyQnJlcHRhQnJpa2V0YUJya29CcmxvaEJyb256QnJvc2tldkJydW5ldGthQnJ1c2lua2FCcnpkYUJyenlCdWJsaW5hQnVibm92YXRCdWNodGFCdWRpdGVsQnVka2FCdWRvdmFCdWZldEJ1amFyb3N0QnVrdmljZUJ1bGRva0J1bHZhQnVuZGFCdW5rckJ1cnphQnV0aWtCdXZvbEJ1em9sYUJ5ZGxldEJ5bGluYUJ5dG92a2FCenVrb3RDYXBhcnRDYXJldm5hQ2VkckNlZHVsZUNlamNoQ2VqbkNlbGFDZWxlckNlbGtlbUNlbG5pY2VDZW5pbmFDZW5ub3N0Q2Vub3ZrYUNlbnRydW1DZW56b3JDZXN0b3Bpc0NldGthQ2hhbHVwYUNoYXBhZGxvQ2hhcml0YUNoYXRhQ2hlY2h0YXRDaGVtaWVDaGljaG90Q2hpcnVyZ0NobGFkQ2hsZWJhQ2hsdWJpdENobWVsQ2htdXJhQ2hvYm90Q2hvY2hvbENob2RiYUNob2xlcmFDaG9tb3V0Q2hvcGl0Q2hvcm9iYUNob3ZDaHJhcG90Q2hybGl0Q2hydENocnVwQ2h0aXZvc3RDaHVkaW5hQ2h1dG5hdENodmF0Q2h2aWxrYUNodm9zdENoeWJhQ2h5c3RhdENoeXRpdENpYnVsZUNpZ2FyZXRhQ2loZWxuYUNpaGxhQ2lua290Q2lya3VzQ2lzdGVybmFDaXRhY2VDaXRydXNDaXppbmVjQ2l6b3N0Q2xvbmFDb2tvbGl2Q291dmF0Q3RpdGVsQ3Rub3N0Q3Vkbm9zdEN1a2V0YUN1a3JDdXBvdEN2YWtub3V0Q3ZhbEN2aWtDdnJrb3RDeWtsaXN0YURhbGVrb0RhcmViYURhdGVsRGF0dW1EY2VyYURlYmF0YURlY2hvdmthRGVjaWJlbERlZmljaXREZWZsYWNlRGVrbERla3JldERlbW9rcmF0RGVwcmVzZURlcmJ5RGVza2FEZXRla3RpdkRpa29icmF6RGlrdG92YXREaW9kYURpcGxvbURpc2tEaXNwbGVqRGl2YWRsb0Rpdm9jaERsYWhhRGxvdWhvRGx1aG9waXNEbmVzRG9icm9Eb2J5dGVrRG9jZW50RG9jaHV0aXREb2RuZXNEb2hsZWREb2hvZGFEb2hyYURvamVtRG9qbmljZURva2xhZERva29sYURva3RvckRva3VtZW50RG9sYXJEb2xldmFEb2xpbmFEb21hRG9taW5hbnREb21sdXZpdERvbW92RG9udXRpdERvcGFkRG9waXNEb3Bsbml0RG9wb3N1ZERvcHJvdm9kRG9wdXN0aXREb3Jheml0RG9yb3N0RG9ydERvc2FoRG9zbG92RG9zdGF0ZWtEb3N1ZERvc3l0YURvdGF6RG90ZWtEb3Rrbm91dERvdWZhdERvdXRuYXREb3ZvemNlRG96YWR1RG96bmF0RG96b3JjZURyYWhvdGFEcmFrRHJhbWF0aWtEcmF2ZWNEcmF6ZURyZG9sRHJvYm5vc3REcm9nZXJpZURyb3pkRHJzbm9zdERydGl0RHJ6b3N0RHViZW5EdWNob3Zub0R1ZGVrRHVoYUR1aG92a2FEdXNpdER1c25vRHV0b3N0RHZvamljZUR2b3JlY0R5bmFtaXRFa29sb2dFa29ub21pZUVsZWt0cm9uRWxpcHNhRW1haWxFbWlzZUVtb2NlRW1wYXRpZUVwaXpvZGFFcG9jaGFFcG9wZWpFcG9zRXNlakVzZW5jZUVza29ydGFFc2t5bW9FdGlrZXRhRXVmb3JpZUV2b2x1Y2VFeGVrdWNlRXhrdXJ6ZUV4cGVkaWNlRXhwbG96ZUV4cG9ydEV4dHJha3RGYWNrYUZhamZrYUZha3VsdGFGYW5hdGlrRmFudGF6aWVGYXJtYWNpZUZhdm9yaXRGYXpvbGVGZWRlcmFjZUZlamV0b25GZW5rYUZpYWxrYUZpZ3VyYW50Rmlsb3pvZkZpbHRyRmluYW5jZUZpbnRhRml4YWNlRmpvcmRGbGFuZWxGbGlydEZsb3RpbGFGb25kRm9zZm9yRm90YmFsRm90a2FGb3RvbkZyYWtjZUZyZXNrYUZyb250YUZ1a2FyRnVua2NlRnl6aWthR2FsZWplR2FyYW50R2VuZXRpa2FHZW9sb2dHaWxvdGluYUdsYXp1cmFHbGVqdEdvbGVtR29sZmlzdGFHb3Rpa2FHcmFmR3JhbW9mb25HcmFudWxlR3JlcEdyaWxHcm9nR3JvdGVza2FHdW1hSGFkaWNlSGFkckhhbGFIYWxlbmthSGFuYmFIYW5vcGlzSGFyZmFIYXJwdW5hSGF2cmFuSGVia29zdEhlamthbEhlam5vSGVqdG1hbkhla3RhckhlbG1hSGVtYXRvbUhlcmVjSGVybmFIZXNsb0hlemt5SGlzdG9yaWtIbGFkb3ZrYUhsYXNpdmt5SGxhdmFIbGVkYXRIbGVuSGxvZGF2ZWNIbG9oSGxvdXBvc3RIbHRhdEhsdWJpbmFIbHVjaG90YUhtYXRIbW90YUhteXpIbmlzSG5vaml2b0hub3V0SG9ibGluYUhvYm9qSG9jaEhvZGlueUhvZGxhdEhvZG5vdGFIb2RvdmF0SG9qbm9zdEhva2VqSG9saW5rYUhvbGthSG9sdWJIb21vbGVIb25pdGJhSG9ub3JhY2VIb3JhbEhvcmRhSG9yaXpvbnRIb3Jrb0hvcmxpdmVjSG9ybW9uSG9ybmluYUhvcm9za29wSG9yc3R2b0hvc3BvZGFIb3N0aW5hSG90b3Zvc3RIb3ViYUhvdWZIb3VwYXRIb3Vza2FIb3ZvckhyYWRiYUhyYW5pY2VIcmF2b3N0SHJhemRhSHJib2xla0hyZGluYUhyZGxvSHJkb3N0SHJuZWtIcm9ia2FIcm9tYWRhSHJvdEhyb3VkYUhyb3plbkhyc3RrYUhydWJvc3RIcnl6YXRIdWJlbm9zdEh1Ym5vdXRIdWRiYUh1a290SHVtckh1c2l0YUh1c3RvdGFIdm96ZEh5Ym5vc3RIeWRyYW50SHlnaWVuYUh5bW5hSHlzdGVyaWtJZHlsa2FJaG5lZElrb25hSWx1emVJbXVuaXRhSW5mZWtjZUluZmxhY2VJbmthc29Jbm92YWNlSW5zcGVrY2VJbnRlcm5ldEludmFsaWRhSW52ZXN0b3JJbnplcmNlSXJvbmllSmFibGtvSmFjaHRhSmFob2RhSmFrbWlsZUpha29zdEphbG92ZWNKYW50YXJKYXJtYXJrSmFyb0phc2FuSmFzbm9KYXRrYUphdm9ySmF6eWtKZWRpbmVjSmVkbGVKZWRuYXRlbEplaGxhbkpla290SmVsZW5KZWxpdG9KZW1ub3N0SmVub21KZXBpY2VKZXNldGVySmV2aXRKZXpkZWNKZXplcm9KaW5ha0ppbmR5Smlub2NoSmlza3JhSmlzdG90YUppdHJuaWNlSml6dmFKbWVub3ZhdEpvZ3VydEp1cnRhS2FiYXJldEthYmVsS2FiaW5ldEthY2huYUthZGV0S2FkaWRsb0thaGFuS2FqYWtLYWp1dGFLYWthb0tha3R1c0thbGFtaXRhS2FsaG90eUthbGlickthbG5vc3RLYW1lcmFLYW1rb2xpdkthbW5hS2FuaWJhbEthbm9lS2FudG9yS2FwYWxpbmFLYXBlbGFLYXBpdG9sYUthcGthS2FwbGVLYXBvdGFLYXByS2FwdXN0YUthcHliYXJhS2FyYW1lbEthcm90a2FLYXJ0b25LYXNhS2F0YWxvZ0thdGVkcmFLYXVjZUthdXphS2F2YWxlY0themFqa2FLYXpldGFLYXppdm9zdEtkZWtvbGl2S2Rlc2lLZWRsdWJlbktlbXBLZXJhbWlrYUtpbm9LbGFjZWtLbGFkaXZvS2xhbUtsYXBvdEtsYXNpa2FLbGF1bktsZWNLbGVuYmFLbGVwYXRLbGVzbm91dEtsaWRLbGltYUtsaXNuYUtsb2JvdWtLbG9rYW5LbG9wYUtsb3ViS2x1Ym92bmFLbHVzYXRLbHV6a29zdEttZW5LbWl0YXRLbW90cktuaWhhS25vdEtvYWxpY2VLb2JlcmVjS29ia2FLb2JsaWhhS29ieWxhS29jb3VyS29ob3V0S29qZW5lY0tva29zS29rdGVqbEtvbGFwc0tvbGVkYUtvbGl6ZUtvbG9Lb21hbmRvS29tZXRhS29taWtLb21uYXRhS29tb3JhS29tcGFzS29tdW5pdGFLb25hdEtvbmNlcHRLb25kaWNlS29uZWNLb25mZXNlS29uZ3Jlc0tvbmluYUtvbmt1cnNLb250YWt0S29uemVydmFLb3BhbmVjS29waWVLb3Bub3V0S29wcm92a2FLb3JiZWxLb3Jla3Rvcktvcm1pZGxvS29yb3B0ZXZLb3JwdXNLb3J1bmFLb3J5dG9Lb3J6ZXRLb3NhdGVjS29zdGthS290ZWxLb3RsZXRhS290b3VsS291a2F0S291cGVsbmFLb3VzZWtLb3V6bG9Lb3Zib2pLb3phS296b3JvaEtyYWJpY2VLcmFjaEtyYWppbmFLcmFsb3ZhdEtyYXNvcGlzS3JhdmF0YUtyZWRpdEtyZWpjYXJLcmVzYmFLcmV2ZXRhS3Jpa2V0S3JpdGlrS3JpemVLcmthdmVjS3JtZWxlY0tybWl2b0tyb2Nhbktyb2tLcm9uaWthS3JvcGl0S3JvdXBhS3JvdmthS3J0ZWtLcnVoYWRsb0tydXBpY2VLcnV0b3N0S3J2aW5rYUtyeWNobGVLcnlwdGFLcnlzdGFsS3J5dEt1ZGxhbmthS3Vmckt1am5vc3RLdWtsYUt1bGFqZGFLdWxpY2hLdWxrYUt1bG9tZXRLdWx0dXJhS3VuYUt1cG9kaXZ1S3VydEt1cnpvckt1dGlsS3ZhbGl0YUt2YXNpbmthS3Zlc3Rvckt5bm9sb2dLeXNlbGluYUt5dGFyYUt5dGljZUt5dGthS3l0b3ZlY0t5dmFkbG9MYWJyYWRvckxhY2h0YW5MYWRub3N0TGFpa0xha29tZWNMYW1lbGFMYW1wYUxhbm92a2FMYXNpY2VMYXNvTGFzdHVyYUxhdGlua2FMYXZpbmFMZWJrYUxlY2tkeUxlZGVuTGVkbmljZUxlZG92a2FMZWR2aW5hTGVnZW5kYUxlZ2llTGVncmFjZUxlaGNlTGVoa29zdExlaG5vdXRMZWt0dmFyTGVub2Nob2RMZW50aWxrYUxlcGVua2FMZXBpZGxvTGV0YWRsb0xldGVjTGV0bW9MZXRva3J1aExldmhhcnRMZXZpdGFjZUxldm9ib2tMaWJyYUxpY2hvdGthTGlkb2plZExpZHNrb3N0TGlob3ZpbmFMaWphdmVjTGlsZWtMaW1ldGthTGluaWVMaW5rYUxpbm9sZXVtTGlzdG9wYWRMaXRpbmFMaXRvdmF0TG9iaXN0YUxvZGl2b2RMb2dpa2FMb2dvcGVkTG9rYWxpdGFMb2tldExvbWNvdmF0TG9wYXRhTG9wdWNoTG9yZExvc29zTG90ckxvdWRhbExvdWhMb3VrYUxvdXNrYXRMb3ZlY0xzdGl2b3N0THVjZXJuYUx1Y2lmZXJMdW1wTHVza0x1c3RyYWNlTHZpY2VMeXJhTHlyaWthTHlzaW5hTWFkYW1NYWRsb01hZ2lzdHJNYWhhZ29uTWFqZXRla01haml0ZWxNYWpvcml0YU1ha2FrTWFrb3ZpY2VNYWtyZWxhTWFsYmFNYWxpbmFNYWxvdmF0TWFsdmljZU1hbWlua2FNYW5kbGVNYW5rb01hcm5vc3RNYXNha3JNYXNrb3RNYXNvcHVzdE1hdGljZU1hdHJpa2FNYXR1cml0YU1hemFuZWNNYXppdm9NYXpsaXRNYXp1cmthTWRsb2JhTWVjaGFuaWtNZWRpdGFjZU1lZG92aW5hTWVsYXNhTWVsb3VuTWVudG9sa2FNZXRsYU1ldG9kYU1ldHJNZXplcmFNaWdyYWNlTWlobm91dE1paHVsZU1pa2luYU1pa3JvZm9uTWlsZW5lY01pbGltZXRyTWlsb3N0TWltaWthTWluY292bmFNaW5pYmFyTWlub21ldE1pbnVsb3N0TWlza2FNaXN0ck1peG92YXRNbGFkb3N0TWxoYU1saG92aW5hTWxva01sc2F0TWx1dml0TW5pY2hNbm9oZW1Nb2JpbE1vY25vc3RNb2RlbGthTW9kbGl0YmFNb2h5bGFNb2tyb01vbGVrdWxhTW9tZW50a2FNb25hcmNoYU1vbm9rbE1vbnN0cnVtTW9udG92YXRNb256dW5Nb3Nhek1vc2t5dE1vc3RNb3RpdmFjZU1vdG9ya2FNb3R5a2FNb3VjaGFNb3Vkcm9zdE1vemFpa2FNb3pla01vem9sTXJhbW9yTXJhdmVuZWNNcmtldk1ydHZvbGFNcnpldE1yenV0b3N0TXN0aXRlbE11ZHJjTXVmbG9uTXVsYXRNdW1pZU11bmljZU11c2V0TXV0YWNlTXV6ZXVtTXV6aWthbnRNeXNsaXZlY016ZGFOYWJvdXJhdE5hY2h5dGF0TmFkYWNlTmFkYnl0ZWtOYWRob3pOYWRvYnJvTmFkcGlzTmFobGFzTmFobmF0TmFob2RpbGVOYWhyYWRpdE5haXZpdGFOYWplZG5vdU5hamlzdG9OYWptb3V0TmFrbG9uaXROYWtvbmVjTmFrcm1pdE5hbGV2b05hbWF6YXROYW1sdXZpdE5hbm9tZXRyTmFva29OYW9wYWtOYW9zdHJvTmFwYWRhdE5hcGV2bm9OYXBsbml0TmFwbm91dE5hcG9zbGVkTmFwcm9zdG9OYXJvZGl0TmFydWJ5TmFyeWNobG9OYXNhZGl0TmFzZWthdE5hc2xlcG9OYXN0YXROYXRvbGlrTmF2ZW5la05hdnJjaE5hdnpkb3J5TmF6dmF0TmViZU5lY2hhdE5lY2t5TmVkYWxla29OZWRiYXROZWR1aE5lZ2FjZU5laGV0TmVob2RhTmVqZW5OZWpwcnZlTmVrbGlkTmVsaWJvc3ROZW1pbG9zdE5lbW9jTmVvY2hvdGFOZW9ua2FOZXBva29qTmVyb3N0TmVydk5lc215c2xOZXNvdWxhZE5ldHZvck5ldXJvbk5ldmluYU5lenZ5a2xlTmljb3RhTmlqYWtOaWthbU5pa2R5TmlrbE5pa3RlcmFrTml0cm9Ob2NsZWhOb2hhdmljZU5vbWluYWNlTm9yYU5vcmVrTm9zaXRlbE5vc25vc3ROb3V6ZU5vdmlueU5vdm90YU5vemRyYU51ZGFOdWRsZU51Z2V0TnV0aXROdXRub3N0TnV0cmllTnltZmFPYmFsT2JhcnZpdE9iYXZhT2JkaXZPYmVjT2JlaG5hdE9iZWptb3V0T2Jleml0YU9iaGFqb2JhT2JpbG5pY2VPYmphc25pdE9iamVrdE9ia2xvcGl0T2JsYXN0T2JsZWtPYmxpYmFPYmxvaGFPYmx1ZGFPYm5vc09ib2hhdGl0T2JvamVrT2JvdXRPYnJhemVjT2JybmFPYnJ1YmFPYnJ5c09ic2FoT2JzbHVoYU9ic3RhcmF0T2J1dk9idmF6T2J2aW5pdE9idm9kT2J2eWtsZU9ieXZhdGVsT2J6b3JPY2FzT2NlbE9jZW5pdE9jaGxhZGl0T2Nob3RhT2NocmFuYU9jaXRub3V0T2Rib2pPZGJ5dE9kY2hvZE9kY2l6aXRPZGVicmF0T2Rlc2xhdE9kZXZ6ZGF0T2RlenZhT2RoYWRjZU9kaG9kaXRPZGpldE9kamludWRPZGthek9ka291cGl0T2RsaXZPZGx1a2FPZG1sa2FPZG9sbm9zdE9kcGFkT2RwaXNPZHBsb3V0T2Rwb3JPZHB1c3RpdE9kcHlrYXRPZHJhemthT2Rzb3VkaXRPZHN0dXBPZHN1bk9kdG9rT2R0dWRPZHZhaGFPZHZldGFPZHZvbGF0T2R2cmFjZXRPZHpuYWtPZmluYU9mc2FqZE9obGFzT2huaXNrb09ocmFkYU9ocm96aXRPaHJ5emVrT2thcE9rZW5pY2VPa2xpa2FPa25vT2tvdXpsaXRPa292eU9rcmFzYU9rcmVzT2tyc2VrT2tydWhPa3VwYW50T2t1cmthT2t1c2l0T2xlam5pbmFPbGl6b3ZhdE9tYWtPbWVsZXRhT21leml0T21sYWRpbmFPbWxvdXZhdE9tbHV2YU9teWxPbmVoZHlPcGFrb3ZhdE9wYXNla09wZXJhY2VPcGljZU9waWxvc3RPcGlzb3ZhdE9wb3JhT3BvemljZU9wcmF2ZHVPcHJvdGlPcmJpdGFsT3JjaGVzdHJPcmdpZU9ybGljZU9ybG9qT3J0ZWxPc2FkYU9zY2hub3V0T3Npa2FPc2l2b09zbGF2YU9zbGVwaXRPc2xuaXRPc2xvdml0T3Nub3ZhT3NvYmFPc29saXRPc3BhbGVjT3N0ZW5Pc3RyYWhhT3N0dWRhT3N0eWNoT3N2b2ppdE90ZXBsaXRPdGlza090b3BPdHJoYXRPdHJsb3N0T3Ryb2tPdHJ1YnlPdHZvck92YW5vdXRPdmFyT3Zlc092bGl2bml0T3ZvY2VPeGlkT3pkb2JhUGFjaGF0ZWxQYWNpZW50UGFkb3VjaFBhaG9yZWtQYWt0UGFsYW5kYVBhbGVjUGFsaXZvUGFsdWJhUGFtZmxldFBhbWxzZWtQYW5lbmthUGFuaWthUGFubmFQYW5vdmF0UGFuc3R2b1BhbnRvZmxlUGFwcmlrYVBhcmtldGFQYXJvZGllUGFydGFQYXJ1a2FQYXJ5YmFQYXNla2FQYXNpdml0YVBhc3RlbGthUGF0ZW50UGF0cm9uYVBhdm91a1Bhem5laHRQYXpvdXJla1BlY2thUGVkYWdvZ1BlanNla1Bla2xvUGVsb3RvblBlbmFsdGFQZW5kcmVrUGVuemVQZXJpc2tvcFBlcm9QZXN0cm9zdFBldGFyZGFQZXRpY2VQZXRyb2xlalBldm5pbmFQZXhlc29QaWFuaXN0YVBpaGFQaWphdmljZVBpa2xlUGlrbmlrUGlsaW5hUGlsbm9zdFBpbHVsa2FQaW56ZXRhUGlwZXRhUGlzYXRlbFBpc3RvbGVQaXRldm5hUGl2bmljZVBpdm92YXJQbGFjZW50YVBsYWthdFBsYW1lblBsYW5ldGFQbGFzdGlrYVBsYXRpdFBsYXZpZGxvUGxhelBsZWNoUGxlbWVub1BsZW50YVBsZXNQbGV0aXZvUGxldmVsUGxpdmF0UGxuaXRQbG5vUGxvY2hhUGxvZGluYVBsb21iYVBsb3V0UGx1a1BseW5Qb2Jhdml0UG9ieXRQb2Nob2RQb2NpdFBvY3RpdmVjUG9kYXRQb2RjZW5pdFBvZGVwc2F0UG9kaGxlZFBvZGl2aXRQb2RrbGFkUG9kbWFuaXRQb2RuaWtQb2RvYmFQb2Rwb3JhUG9kcmF6UG9kc3RhdGFQb2R2b2RQb2R6aW1Qb2V6aWVQb2hhbmthUG9obnV0a2FQb2hvdm9yUG9ocm9tYVBvaHliUG9pbnRhUG9qaXN0a2FQb2ptb3V0UG9rYXppdFBva2xlc1Bva29qUG9rcm9rUG9rdXRhUG9reW5Qb2xlZG5lUG9saWJla1BvbGtub3V0UG9sb2hhUG9seW5vbVBvbWFsdVBvbWlub3V0UG9tbGthUG9tb2NQb21zdGFQb215c2xldFBvbmVjaGF0UG9ub3JrYVBvbnVyb3N0UG9wYWRhdFBvcGVsUG9waXNla1BvcGxhY2hQb3Byb3NpdFBvcHNhdFBvcHVkUG9yYWRjZVBvcmNlUG9yb2RQb3J1Y2hhUG9yeXZQb3NhZGl0UG9zZWRQb3NpbGFQb3Nrb2tQb3NsYW5lY1Bvc291ZGl0UG9zcG9sdVBvc3RhdmFQb3N1ZGVrUG9zeXBQb3RhaFBvdGthblBvdGxlc2tQb3RvbWVrUG90cmF2YVBvdHVwYVBvdHZvcmFQb3VrYXpQb3V0b1BvdXpkcm9Qb3ZhaGFQb3ZpZGxhUG92bGFrUG92b3pQb3ZyY2hQb3ZzdGF0UG92eWtQb3Z6ZGVjaFBvemRyYXZQb3plbWVrUG96bmF0ZWtQb3pvclBvenZhdFByYWNvdmF0UHJhaG9yeVByYWt0aWthUHJhbGVzUHJhb3RlY1ByYXBvcmVrUHJhc2VQcmF2ZGFQcmluY2lwUHJrbm9Qcm9idWRpdFByb2NlbnRvUHJvZGVqUHJvZmVzZVByb2hyYVByb2pla3RQcm9sb21pdFByb21pbGVQcm9uaWthdFByb3BhZFByb3Jva1Byb3NiYVByb3RvblByb3V0ZWtQcm92YXpQcnNrYXZrYVByc3RlblBydWRrb3N0UHJ1dFBydmVrUHJ2b2hvcnlQc2FuZWNQc292b2RQc3RydWhQdGFjdHZvUHViZXJ0YVB1Y2hQdWRsUHVrYXZlY1B1a2xpbmFQdWtybGVQdWx0UHVtcGFQdW5jUHVwZW5QdXNhUHVzaW5rYVB1c3RpbmFQdXRvdmF0UHV0eWthUHlyYW1pZGFQeXNrUHl0ZWxSYWNla1JhY2hvdFJhZGlhY2VSYWRuaWNlUmFkb25SYWZ0UmFnYnlSYWtldGFSYWtvdmluYVJhbWVub1JhbXBvdWNoUmFuZGVSYXJhY2hSYXJpdGFSYXNvdm5hUmFzdHJSYXRvbGVzdFJhemFuY2VSYXppZGxvUmVhZ292YXRSZWFrY2VSZWNlcHRSZWRha3RvclJlZmVyZW50UmVmbGV4UmVqbm9rUmVrbGFtYVJla29yZFJla3J1dFJla3RvclJlcHV0YWNlUmV2aXplUmV2bWFSZXZvbHZlclJlemVydmFSaXNrb3ZhdFJpemlrb1JvYm90aWthUm9kb2ttZW5Sb2hvdmthUm9rbGVSb2tva29Sb21hbmV0b1JvcG92b2RSb3B1Y2hhUm9yZWpzUm9zb2xSb3N0bGluYVJvdG1pc3RyUm90b3BlZFJvdHVuZGFSb3ViZW5rYVJvdWNob1JvdXBSb3VyYVJvdmluYVJvdm5pY2VSb3pib3JSb3pjaG9kUm96ZGF0Um96ZXpuYXRSb3pob2RjZVJvemlua2FSb3pqZXpkUm96a2F6Um96bG9oYVJvem1hclJvenBhZFJvenJ1Y2hSb3pzYWhSb3p0b2tSb3p1bVJvenZvZFJ1YnJpa2FSdWNoYWRsb1J1a2F2aWNlUnVrb3Bpc1J5YmFSeWJvbG92UnljaGxvc3RSeWRsb1J5cGFkbG9SeXRpbmFSeXpvc3RTYWRpc3RhU2FoYXRTYWtvU2FtZWNTYW1pemRhdFNhbW90YVNhbml0a2FTYXJkaW5rYVNhc2Fua2FTYXRlbGl0U2F6YmFTYXplbmljZVNib3JTY2hvdmF0U2VicmFua2FTZWNlc2VTZWRhZGxvU2VkaW1lbnRTZWRsb1NlaG5hdFNlam1vdXRTZWtlcmFTZWt0YVNla3VuZGFTZWt2b2plU2VtZW5vU2Vub1NlcnZpc1Nlc2FkaXRTZXNob3JhU2Vza29rU2VzbGF0U2VzdHJhU2VzdXZTZXN5cGF0U2V0YmFTZXRpbmFTZXRrYXRTZXRub3V0U2V0cnZhdFNldmVyU2V6bmFtU2hvZGFTaHJub3V0U2lmb25TaWxuaWNlU2lya2FTaXJvdGVrU2lydXBTaXR1YWNlU2thZmFuZHJTa2FsaXNrb1NrYW56ZW5Ta2F1dFNrZXB0aWtTa2ljYVNrbGFkYmFTa2xlbmljZVNrbG9Ta2x1elNrb2JhU2tva2FuU2tvcm9Ta3JpcHRhU2tyelNrdXBpbmFTa3Zvc3RTa3ZybmFTbGFiaWthU2xhZGlkbG9TbGFuaW5hU2xhc3RTbGF2bm9zdFNsZWRvdmF0U2xlcGVjU2xldmFTbGV6aW5hU2xpYlNsaW5hU2xpem5pY2VTbG9uU2xvdXBla1Nsb3ZvU2x1Y2hTbHVoYVNsdW5jZVNsdXBrYVNsemFTbWFyYWdkU21ldGFuYVNtaWxzdHZvU21sb3V2YVNtb2dTbXJhZFNtcmtTbXJ0a2FTbXV0ZWtTbXlzbFNuYWRTbmFoYVNub2JTb2JvdGFTb2NoYVNvZG92a2FTb2tvbFNvcGthU290dmFTb3Vib2pTb3VjaXRTb3VkY2VTb3VobGFzU291bGFkU291bXJha1NvdXByYXZhU291c2VkU291dG9rU291dmlzZXRTcGFsb3ZuYVNwYXNpdGVsU3Bpc1NwbGF2U3BvZGVrU3BvamVuZWNTcG9sdVNwb256b3JTcG9ybm9zdFNwb3VzdGFTcHJjaGFTcHVzdGl0U3JhbmRhU3JhelNyZGNlU3JuYVNybmVjU3Jvdm5hdFNycGVuU3JzdFNydWJTdGFuaWNlU3Rhcm9zdGFTdGF0aWthU3RhdmJhU3RlaG5vU3RlemthU3RvZG9sYVN0b2xla1N0b3BhU3Rvcm5vU3RvdXBhdFN0cmFjaFN0cmVzU3RyaG5vdXRTdHJvbVN0cnVuYVN0dWRuYVN0dXBuaWNlU3R2b2xTdHlrU3ViamVrdFN1YnRyb3B5U3VjaGFyU3Vkb3N0U3Vrbm9TdW5kYXRTdW5vdXRTdXJpa2F0YVN1cm92aW5hU3ZhaFN2YWxzdHZvU3ZldHJTdmF0YmFTdmF6ZWtTdmlzbGVTdml0ZWtTdm9ib2RhU3ZvZGlkbG9Tdm9ya2FTdnJhYlN5a2F2a2FTeWtvdFN5bmVrU3lub3ZlY1N5cGF0U3lwa29zdFN5cm92b3N0U3lzZWxTeXRvc3RUYWJsZXRrYVRhYnVsZVRhaG91blRhamVtbm9UYWpmdW5UYWpnYVRhaml0VGFqbm9zdFRha3Rpa2FUYW1obGVUYW1wb25UYW5jb3ZhdFRhbmVjVGFua2VyVGFwZXRhVGF2ZW5pbmFUYXphdGVsVGVjaG5pa2FUZWhkeVRla3V0aW5hVGVsZWZvblRlbW5vdGFUZW5kZW5jZVRlbmlzdGFUZW5vclRlcGxvdGFUZXBuYVRlcHJ2ZVRlcmFwaWVUZXJtb3NrYVRleHRpbFRpY2hvVGlza29waXNUaXR1bGVrVGthZGxlY1RrYW5pbmFUbGFwa2FUbGVza2F0VGx1a290VGx1cGFUbWVsVG9hbGV0YVRvcGlua2FUb3BvbFRvcnpvVG91aGFUb3VsZWNUcmFkaWNlVHJha3RvclRyYW1wVHJhc2FUcmF2ZXJ6YVRyZWZpdFRyZXN0VHJlem9yVHJoYXZpbmFUcmhsaW5hVHJvY2h1VHJvamljZVRyb3NrYVRyb3ViYVRycGNlVHJwaXRlbFRycGtvc3RUcnViZWNUcnVjaGxpdFRydWhsaWNlVHJ1c1RydmF0VHVkeVR1aG5vdXRUdWhvc3RUdW5kcmFUdXJpc3RhVHVybmFqVHV6ZW1za29UdmFyb2hUdm9yYmFUdnJkb3N0VHZyelR5Z3JUeWtldlVib2hvc3RVYm96ZVVicmF0VWJyb3VzZWtVYnJ1c1VieXRvdm5hVWNob1VjdGl2b3N0VWRpdml0VWhyYWRpdFVqZWRuYXRVamlzdGl0VWptb3V0VWthemF0ZWxVa2xpZG5pdFVrbG9uaXRVa290dml0VWtyb2ppdFVsaWNlVWxpdGFVbG92aXRVbXl2YWRsb1VuYXZpdFVuaWZvcm1hVW5pa25vdXRVcGFkbm91dFVwbGF0bml0VXBseW5vdXRVcG91dGF0VXByYXZpdFVyYW5VcmF6aXRVc2Vkbm91dFVzaWxvdmF0VXNtcnRpdFVzbmFkbml0VXNub3V0VXNvdWRpdFVzdGxhdFVzdHJub3V0VXRhaG92YXRVdGthdFV0bHVtaXRVdG9ub3V0VXRvcGVuZWNVdHJvdXNpdFV2YWxpdFV2b2xuaXRVdm96b3ZrYVV6ZHJhdml0VXplbFV6ZW5pbmFVemxpbmFVem5hdFZhZ29uVmFsY2hhVmFsb3VuVmFuYVZhbmRhbFZhbmlsa2FWYXJhblZhcmhhbnlWYXJvdmF0VmNlbGt1VmNob2RWZG92YVZlZHJvVmVnZXRhY2VWZWpjZVZlbGJsb3VkVmVsZXRyaFZlbGl0ZWxWZWxtb2NWZWxyeWJhVmVua292VmVyYW5kYVZlcnplVmVzZWxrYVZlc2tyemVWZXNuaWNlVmVzcG9kdVZlc3RhVmV0ZXJpbmFWZXZlcmthVmlicmFjZVZpY2hyVmlkZW9ocmFWaWRpbmFWaWRsZVZpbGFWaW5pY2VWaXNldFZpdGFsaXRhVml6ZVZpeml0a2FWamV6ZFZrbGFkVmt1c1ZsYWprYVZsYWtWbGFzZWNWbGV2b1ZsaGtvc3RWbGl2Vmxub3ZrYVZsb3VwYXRWbnVjb3ZhdFZudWtWb2RhVm9kaXZvc3RWb2Rvem5ha1ZvZHN0dm9Wb2plbnNreVZvam5hVm9qc2tvVm9sYW50Vm9sYmFWb2xpdFZvbG5vVm9za292a2FWb3ppZGxvVm96b3ZuYVZwcmF2b1ZyYWJlY1ZyYWNldFZyYWhWcmF0YVZyYmFWcmNob2xla1ZyaGF0VnJzdHZhVnJ0dWxlVnNhZGl0VnN0b3VwaXRWc3R1cFZ0aXBWeWJhdml0VnlicmF0VnljaG92YXRWeWRhdFZ5ZHJhVnlmb3RpdFZ5aGxlZGF0Vnlobm91dFZ5aG9kaXRWeWhyYWRpdFZ5aHViaXRWeWphc25pdFZ5amV0VnlqbW91dFZ5a2xvcGl0Vnlrb25hdFZ5bGVrYXRWeW1hemF0VnltZXppdFZ5bWl6ZXRWeW15c2xldFZ5bmVjaGF0VnluaWthdFZ5bnV0aXRWeXBhZGF0VnlwbGF0aXRWeXByYXZpdFZ5cHVzdGl0VnlyYXppdFZ5cm92bmF0VnlydmF0VnlzbG92aXRWeXNva29WeXN0YXZpdFZ5c3Vub3V0VnlzeXBhdFZ5dGFzaXRWeXRlc2F0Vnl0cmF0aXRWeXZpbm91dFZ5dm9sYXRWeXZyaGVsVnl6ZG9iaXRWeXpuYXRWemFkdVZ6YnVkaXRWemNob3BpdFZ6ZG9yVnpkdWNoVnpkeWNoYXRWemVzdHVwVnpobGVkZW1WemthelZ6bHlrYXRWem5pa1Z6b3Jla1Z6cG91cmFWenRhaFZ6dGVrWHlsb2ZvblphYnJhdFphYnlkbGV0WmFjaG92YXRaYWRhcm1vWmFkdXNpdFphZm91a2F0WmFobHRpdFphaG9kaXRaYWhyYWRhWmFoeW5vdXRaYWphdGVjWmFqZXRaYWppc3RpdFpha2xlcGF0WmFrb3VwaXRaYWxlcGl0WmFtZXppdFphbW90YXRaYW15c2xldFphbmVjaGF0WmFuaWthdFphcGxhdGl0WmFwb2ppdFphcHNhdFphcmF6aXRaYXN0YXZpdFphc3Vub3V0WmF0YWppdFphdGVtbml0WmF0a25vdXRaYXVqbW91dFphdmFsaXRaYXZlbGV0WmF2aW5pdFphdm9sYXRaYXZydGF0WmF6dm9uaXRaYmF2aXRaYnJ1c3VaYnVkb3ZhdFpieXRla1pkYWxla2FaZGFybWFaZGF0bm9zdFpkaXZvWmRvYml0WmRyb2paZHZpaFpkeW1hZGxvWmVsZW5pbmFaZW1hblplbWluYVplcHRhdFplemFkdVplemRvbGFaaGF0aXRaaGx0bm91dFpobHVib2thWmhvdG92aXRaaHJ1YmFaaW1hWmltbmljZVpqZW1uaXRaa2xhbWF0WmtvdW1hdFprcmF0a2Faa3VtYXZrYVpsYXRvWmxlaGthWmxvYmFabG9tWmxvc3RabG96dnlrWm1hcG92YXRabWFyWm1hdGVrWm1pamVabWl6ZXRabW9jbml0Wm1vZHJhdFptcnpsaW5hWm11dG92YXRabmFrWm5hbG9zdFpuYW1lbmF0Wm5vdnVab2JyYXppdFpvdGF2aXRab3ViZWtab3VmYWxlWnBsb2RpdFpwb21hbGl0WnByYXZhWnByb3N0aXRacHJ1ZGthWnBydnVacmFkYVpyYW5pdFpyY2FkbG9acm5pdG9zdFpybm9acm92bmFacnljaGxpdFpyemF2b3N0WnRpY2hhWnRyYXRpdFp1Ym92aW5hWnViclp2ZWRub3V0WnZlbmt1WnZlc2VsYVp2b25adnJhdFp2dWtvdm9kWnZ5a1wiO2xldCB3b3JkbGlzdD1udWxsO2Z1bmN0aW9uIGxvYWRXb3JkcyhsYW5nKXtpZih3b3JkbGlzdCE9bnVsbCl7cmV0dXJufXdvcmRsaXN0PXdvcmRzLnJlcGxhY2UoLyhbQS1aXSkvZyxcIiAkMVwiKS50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygxKS5zcGxpdChcIiBcIik7aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4MjVmNDQ1NTVmNGFmMjViNTFhNzExMTM2ZTFjN2Q2ZTUwY2U5Zjg5MTdkMzlkNmIxZjA3NmIyYmI0ZDJmYWMxYVwiKXt3b3JkbGlzdD1udWxsO3Rocm93IG5ldyBFcnJvcihcIkJJUDM5IFdvcmRsaXN0IGZvciBlbiAoRW5nbGlzaCkgRkFJTEVEXCIpfX1jbGFzcyBMYW5nQ3ogZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiY3pcIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzKHRoaXMpO3JldHVybiB3b3JkbGlzdFtpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3Jkcyh0aGlzKTtyZXR1cm4gd29yZGxpc3QuaW5kZXhPZih3b3JkKX19Y29uc3QgbGFuZ0N6PW5ldyBMYW5nQ3o7V29yZGxpc3QucmVnaXN0ZXIobGFuZ0N6KTtcInVzZSBzdHJpY3RcIjtjb25zdCB3b3JkcyQxPVwiQWJhbmRvbkFiaWxpdHlBYmxlQWJvdXRBYm92ZUFic2VudEFic29yYkFic3RyYWN0QWJzdXJkQWJ1c2VBY2Nlc3NBY2NpZGVudEFjY291bnRBY2N1c2VBY2hpZXZlQWNpZEFjb3VzdGljQWNxdWlyZUFjcm9zc0FjdEFjdGlvbkFjdG9yQWN0cmVzc0FjdHVhbEFkYXB0QWRkQWRkaWN0QWRkcmVzc0FkanVzdEFkbWl0QWR1bHRBZHZhbmNlQWR2aWNlQWVyb2JpY0FmZmFpckFmZm9yZEFmcmFpZEFnYWluQWdlQWdlbnRBZ3JlZUFoZWFkQWltQWlyQWlycG9ydEFpc2xlQWxhcm1BbGJ1bUFsY29ob2xBbGVydEFsaWVuQWxsQWxsZXlBbGxvd0FsbW9zdEFsb25lQWxwaGFBbHJlYWR5QWxzb0FsdGVyQWx3YXlzQW1hdGV1ckFtYXppbmdBbW9uZ0Ftb3VudEFtdXNlZEFuYWx5c3RBbmNob3JBbmNpZW50QW5nZXJBbmdsZUFuZ3J5QW5pbWFsQW5rbGVBbm5vdW5jZUFubnVhbEFub3RoZXJBbnN3ZXJBbnRlbm5hQW50aXF1ZUFueGlldHlBbnlBcGFydEFwb2xvZ3lBcHBlYXJBcHBsZUFwcHJvdmVBcHJpbEFyY2hBcmN0aWNBcmVhQXJlbmFBcmd1ZUFybUFybWVkQXJtb3JBcm15QXJvdW5kQXJyYW5nZUFycmVzdEFycml2ZUFycm93QXJ0QXJ0ZWZhY3RBcnRpc3RBcnR3b3JrQXNrQXNwZWN0QXNzYXVsdEFzc2V0QXNzaXN0QXNzdW1lQXN0aG1hQXRobGV0ZUF0b21BdHRhY2tBdHRlbmRBdHRpdHVkZUF0dHJhY3RBdWN0aW9uQXVkaXRBdWd1c3RBdW50QXV0aG9yQXV0b0F1dHVtbkF2ZXJhZ2VBdm9jYWRvQXZvaWRBd2FrZUF3YXJlQXdheUF3ZXNvbWVBd2Z1bEF3a3dhcmRBeGlzQmFieUJhY2hlbG9yQmFjb25CYWRnZUJhZ0JhbGFuY2VCYWxjb255QmFsbEJhbWJvb0JhbmFuYUJhbm5lckJhckJhcmVseUJhcmdhaW5CYXJyZWxCYXNlQmFzaWNCYXNrZXRCYXR0bGVCZWFjaEJlYW5CZWF1dHlCZWNhdXNlQmVjb21lQmVlZkJlZm9yZUJlZ2luQmVoYXZlQmVoaW5kQmVsaWV2ZUJlbG93QmVsdEJlbmNoQmVuZWZpdEJlc3RCZXRyYXlCZXR0ZXJCZXR3ZWVuQmV5b25kQmljeWNsZUJpZEJpa2VCaW5kQmlvbG9neUJpcmRCaXJ0aEJpdHRlckJsYWNrQmxhZGVCbGFtZUJsYW5rZXRCbGFzdEJsZWFrQmxlc3NCbGluZEJsb29kQmxvc3NvbUJsb3VzZUJsdWVCbHVyQmx1c2hCb2FyZEJvYXRCb2R5Qm9pbEJvbWJCb25lQm9udXNCb29rQm9vc3RCb3JkZXJCb3JpbmdCb3Jyb3dCb3NzQm90dG9tQm91bmNlQm94Qm95QnJhY2tldEJyYWluQnJhbmRCcmFzc0JyYXZlQnJlYWRCcmVlemVCcmlja0JyaWRnZUJyaWVmQnJpZ2h0QnJpbmdCcmlza0Jyb2Njb2xpQnJva2VuQnJvbnplQnJvb21Ccm90aGVyQnJvd25CcnVzaEJ1YmJsZUJ1ZGR5QnVkZ2V0QnVmZmFsb0J1aWxkQnVsYkJ1bGtCdWxsZXRCdW5kbGVCdW5rZXJCdXJkZW5CdXJnZXJCdXJzdEJ1c0J1c2luZXNzQnVzeUJ1dHRlckJ1eWVyQnV6ekNhYmJhZ2VDYWJpbkNhYmxlQ2FjdHVzQ2FnZUNha2VDYWxsQ2FsbUNhbWVyYUNhbXBDYW5DYW5hbENhbmNlbENhbmR5Q2Fubm9uQ2Fub2VDYW52YXNDYW55b25DYXBhYmxlQ2FwaXRhbENhcHRhaW5DYXJDYXJib25DYXJkQ2FyZ29DYXJwZXRDYXJyeUNhcnRDYXNlQ2FzaENhc2lub0Nhc3RsZUNhc3VhbENhdENhdGFsb2dDYXRjaENhdGVnb3J5Q2F0dGxlQ2F1Z2h0Q2F1c2VDYXV0aW9uQ2F2ZUNlaWxpbmdDZWxlcnlDZW1lbnRDZW5zdXNDZW50dXJ5Q2VyZWFsQ2VydGFpbkNoYWlyQ2hhbGtDaGFtcGlvbkNoYW5nZUNoYW9zQ2hhcHRlckNoYXJnZUNoYXNlQ2hhdENoZWFwQ2hlY2tDaGVlc2VDaGVmQ2hlcnJ5Q2hlc3RDaGlja2VuQ2hpZWZDaGlsZENoaW1uZXlDaG9pY2VDaG9vc2VDaHJvbmljQ2h1Y2tsZUNodW5rQ2h1cm5DaWdhckNpbm5hbW9uQ2lyY2xlQ2l0aXplbkNpdHlDaXZpbENsYWltQ2xhcENsYXJpZnlDbGF3Q2xheUNsZWFuQ2xlcmtDbGV2ZXJDbGlja0NsaWVudENsaWZmQ2xpbWJDbGluaWNDbGlwQ2xvY2tDbG9nQ2xvc2VDbG90aENsb3VkQ2xvd25DbHViQ2x1bXBDbHVzdGVyQ2x1dGNoQ29hY2hDb2FzdENvY29udXRDb2RlQ29mZmVlQ29pbENvaW5Db2xsZWN0Q29sb3JDb2x1bW5Db21iaW5lQ29tZUNvbWZvcnRDb21pY0NvbW1vbkNvbXBhbnlDb25jZXJ0Q29uZHVjdENvbmZpcm1Db25ncmVzc0Nvbm5lY3RDb25zaWRlckNvbnRyb2xDb252aW5jZUNvb2tDb29sQ29wcGVyQ29weUNvcmFsQ29yZUNvcm5Db3JyZWN0Q29zdENvdHRvbkNvdWNoQ291bnRyeUNvdXBsZUNvdXJzZUNvdXNpbkNvdmVyQ295b3RlQ3JhY2tDcmFkbGVDcmFmdENyYW1DcmFuZUNyYXNoQ3JhdGVyQ3Jhd2xDcmF6eUNyZWFtQ3JlZGl0Q3JlZWtDcmV3Q3JpY2tldENyaW1lQ3Jpc3BDcml0aWNDcm9wQ3Jvc3NDcm91Y2hDcm93ZENydWNpYWxDcnVlbENydWlzZUNydW1ibGVDcnVuY2hDcnVzaENyeUNyeXN0YWxDdWJlQ3VsdHVyZUN1cEN1cGJvYXJkQ3VyaW91c0N1cnJlbnRDdXJ0YWluQ3VydmVDdXNoaW9uQ3VzdG9tQ3V0ZUN5Y2xlRGFkRGFtYWdlRGFtcERhbmNlRGFuZ2VyRGFyaW5nRGFzaERhdWdodGVyRGF3bkRheURlYWxEZWJhdGVEZWJyaXNEZWNhZGVEZWNlbWJlckRlY2lkZURlY2xpbmVEZWNvcmF0ZURlY3JlYXNlRGVlckRlZmVuc2VEZWZpbmVEZWZ5RGVncmVlRGVsYXlEZWxpdmVyRGVtYW5kRGVtaXNlRGVuaWFsRGVudGlzdERlbnlEZXBhcnREZXBlbmREZXBvc2l0RGVwdGhEZXB1dHlEZXJpdmVEZXNjcmliZURlc2VydERlc2lnbkRlc2tEZXNwYWlyRGVzdHJveURldGFpbERldGVjdERldmVsb3BEZXZpY2VEZXZvdGVEaWFncmFtRGlhbERpYW1vbmREaWFyeURpY2VEaWVzZWxEaWV0RGlmZmVyRGlnaXRhbERpZ25pdHlEaWxlbW1hRGlubmVyRGlub3NhdXJEaXJlY3REaXJ0RGlzYWdyZWVEaXNjb3ZlckRpc2Vhc2VEaXNoRGlzbWlzc0Rpc29yZGVyRGlzcGxheURpc3RhbmNlRGl2ZXJ0RGl2aWRlRGl2b3JjZURpenp5RG9jdG9yRG9jdW1lbnREb2dEb2xsRG9scGhpbkRvbWFpbkRvbmF0ZURvbmtleURvbm9yRG9vckRvc2VEb3VibGVEb3ZlRHJhZnREcmFnb25EcmFtYURyYXN0aWNEcmF3RHJlYW1EcmVzc0RyaWZ0RHJpbGxEcmlua0RyaXBEcml2ZURyb3BEcnVtRHJ5RHVja0R1bWJEdW5lRHVyaW5nRHVzdER1dGNoRHV0eUR3YXJmRHluYW1pY0VhZ2VyRWFnbGVFYXJseUVhcm5FYXJ0aEVhc2lseUVhc3RFYXN5RWNob0Vjb2xvZ3lFY29ub215RWRnZUVkaXRFZHVjYXRlRWZmb3J0RWdnRWlnaHRFaXRoZXJFbGJvd0VsZGVyRWxlY3RyaWNFbGVnYW50RWxlbWVudEVsZXBoYW50RWxldmF0b3JFbGl0ZUVsc2VFbWJhcmtFbWJvZHlFbWJyYWNlRW1lcmdlRW1vdGlvbkVtcGxveUVtcG93ZXJFbXB0eUVuYWJsZUVuYWN0RW5kRW5kbGVzc0VuZG9yc2VFbmVteUVuZXJneUVuZm9yY2VFbmdhZ2VFbmdpbmVFbmhhbmNlRW5qb3lFbmxpc3RFbm91Z2hFbnJpY2hFbnJvbGxFbnN1cmVFbnRlckVudGlyZUVudHJ5RW52ZWxvcGVFcGlzb2RlRXF1YWxFcXVpcEVyYUVyYXNlRXJvZGVFcm9zaW9uRXJyb3JFcnVwdEVzY2FwZUVzc2F5RXNzZW5jZUVzdGF0ZUV0ZXJuYWxFdGhpY3NFdmlkZW5jZUV2aWxFdm9rZUV2b2x2ZUV4YWN0RXhhbXBsZUV4Y2Vzc0V4Y2hhbmdlRXhjaXRlRXhjbHVkZUV4Y3VzZUV4ZWN1dGVFeGVyY2lzZUV4aGF1c3RFeGhpYml0RXhpbGVFeGlzdEV4aXRFeG90aWNFeHBhbmRFeHBlY3RFeHBpcmVFeHBsYWluRXhwb3NlRXhwcmVzc0V4dGVuZEV4dHJhRXllRXllYnJvd0ZhYnJpY0ZhY2VGYWN1bHR5RmFkZUZhaW50RmFpdGhGYWxsRmFsc2VGYW1lRmFtaWx5RmFtb3VzRmFuRmFuY3lGYW50YXN5RmFybUZhc2hpb25GYXRGYXRhbEZhdGhlckZhdGlndWVGYXVsdEZhdm9yaXRlRmVhdHVyZUZlYnJ1YXJ5RmVkZXJhbEZlZUZlZWRGZWVsRmVtYWxlRmVuY2VGZXN0aXZhbEZldGNoRmV2ZXJGZXdGaWJlckZpY3Rpb25GaWVsZEZpZ3VyZUZpbGVGaWxtRmlsdGVyRmluYWxGaW5kRmluZUZpbmdlckZpbmlzaEZpcmVGaXJtRmlyc3RGaXNjYWxGaXNoRml0Rml0bmVzc0ZpeEZsYWdGbGFtZUZsYXNoRmxhdEZsYXZvckZsZWVGbGlnaHRGbGlwRmxvYXRGbG9ja0Zsb29yRmxvd2VyRmx1aWRGbHVzaEZseUZvYW1Gb2N1c0ZvZ0ZvaWxGb2xkRm9sbG93Rm9vZEZvb3RGb3JjZUZvcmVzdEZvcmdldEZvcmtGb3J0dW5lRm9ydW1Gb3J3YXJkRm9zc2lsRm9zdGVyRm91bmRGb3hGcmFnaWxlRnJhbWVGcmVxdWVudEZyZXNoRnJpZW5kRnJpbmdlRnJvZ0Zyb250RnJvc3RGcm93bkZyb3plbkZydWl0RnVlbEZ1bkZ1bm55RnVybmFjZUZ1cnlGdXR1cmVHYWRnZXRHYWluR2FsYXh5R2FsbGVyeUdhbWVHYXBHYXJhZ2VHYXJiYWdlR2FyZGVuR2FybGljR2FybWVudEdhc0dhc3BHYXRlR2F0aGVyR2F1Z2VHYXplR2VuZXJhbEdlbml1c0dlbnJlR2VudGxlR2VudWluZUdlc3R1cmVHaG9zdEdpYW50R2lmdEdpZ2dsZUdpbmdlckdpcmFmZmVHaXJsR2l2ZUdsYWRHbGFuY2VHbGFyZUdsYXNzR2xpZGVHbGltcHNlR2xvYmVHbG9vbUdsb3J5R2xvdmVHbG93R2x1ZUdvYXRHb2RkZXNzR29sZEdvb2RHb29zZUdvcmlsbGFHb3NwZWxHb3NzaXBHb3Zlcm5Hb3duR3JhYkdyYWNlR3JhaW5HcmFudEdyYXBlR3Jhc3NHcmF2aXR5R3JlYXRHcmVlbkdyaWRHcmllZkdyaXRHcm9jZXJ5R3JvdXBHcm93R3J1bnRHdWFyZEd1ZXNzR3VpZGVHdWlsdEd1aXRhckd1bkd5bUhhYml0SGFpckhhbGZIYW1tZXJIYW1zdGVySGFuZEhhcHB5SGFyYm9ySGFyZEhhcnNoSGFydmVzdEhhdEhhdmVIYXdrSGF6YXJkSGVhZEhlYWx0aEhlYXJ0SGVhdnlIZWRnZWhvZ0hlaWdodEhlbGxvSGVsbWV0SGVscEhlbkhlcm9IaWRkZW5IaWdoSGlsbEhpbnRIaXBIaXJlSGlzdG9yeUhvYmJ5SG9ja2V5SG9sZEhvbGVIb2xpZGF5SG9sbG93SG9tZUhvbmV5SG9vZEhvcGVIb3JuSG9ycm9ySG9yc2VIb3NwaXRhbEhvc3RIb3RlbEhvdXJIb3Zlckh1Ykh1Z2VIdW1hbkh1bWJsZUh1bW9ySHVuZHJlZEh1bmdyeUh1bnRIdXJkbGVIdXJyeUh1cnRIdXNiYW5kSHlicmlkSWNlSWNvbklkZWFJZGVudGlmeUlkbGVJZ25vcmVJbGxJbGxlZ2FsSWxsbmVzc0ltYWdlSW1pdGF0ZUltbWVuc2VJbW11bmVJbXBhY3RJbXBvc2VJbXByb3ZlSW1wdWxzZUluY2hJbmNsdWRlSW5jb21lSW5jcmVhc2VJbmRleEluZGljYXRlSW5kb29ySW5kdXN0cnlJbmZhbnRJbmZsaWN0SW5mb3JtSW5oYWxlSW5oZXJpdEluaXRpYWxJbmplY3RJbmp1cnlJbm1hdGVJbm5lcklubm9jZW50SW5wdXRJbnF1aXJ5SW5zYW5lSW5zZWN0SW5zaWRlSW5zcGlyZUluc3RhbGxJbnRhY3RJbnRlcmVzdEludG9JbnZlc3RJbnZpdGVJbnZvbHZlSXJvbklzbGFuZElzb2xhdGVJc3N1ZUl0ZW1Jdm9yeUphY2tldEphZ3VhckphckphenpKZWFsb3VzSmVhbnNKZWxseUpld2VsSm9iSm9pbkpva2VKb3VybmV5Sm95SnVkZ2VKdWljZUp1bXBKdW5nbGVKdW5pb3JKdW5rSnVzdEthbmdhcm9vS2VlbktlZXBLZXRjaHVwS2V5S2lja0tpZEtpZG5leUtpbmRLaW5nZG9tS2lzc0tpdEtpdGNoZW5LaXRlS2l0dGVuS2l3aUtuZWVLbmlmZUtub2NrS25vd0xhYkxhYmVsTGFib3JMYWRkZXJMYWR5TGFrZUxhbXBMYW5ndWFnZUxhcHRvcExhcmdlTGF0ZXJMYXRpbkxhdWdoTGF1bmRyeUxhdmFMYXdMYXduTGF3c3VpdExheWVyTGF6eUxlYWRlckxlYWZMZWFybkxlYXZlTGVjdHVyZUxlZnRMZWdMZWdhbExlZ2VuZExlaXN1cmVMZW1vbkxlbmRMZW5ndGhMZW5zTGVvcGFyZExlc3NvbkxldHRlckxldmVsTGlhckxpYmVydHlMaWJyYXJ5TGljZW5zZUxpZmVMaWZ0TGlnaHRMaWtlTGltYkxpbWl0TGlua0xpb25MaXF1aWRMaXN0TGl0dGxlTGl2ZUxpemFyZExvYWRMb2FuTG9ic3RlckxvY2FsTG9ja0xvZ2ljTG9uZWx5TG9uZ0xvb3BMb3R0ZXJ5TG91ZExvdW5nZUxvdmVMb3lhbEx1Y2t5THVnZ2FnZUx1bWJlckx1bmFyTHVuY2hMdXh1cnlMeXJpY3NNYWNoaW5lTWFkTWFnaWNNYWduZXRNYWlkTWFpbE1haW5NYWpvck1ha2VNYW1tYWxNYW5NYW5hZ2VNYW5kYXRlTWFuZ29NYW5zaW9uTWFudWFsTWFwbGVNYXJibGVNYXJjaE1hcmdpbk1hcmluZU1hcmtldE1hcnJpYWdlTWFza01hc3NNYXN0ZXJNYXRjaE1hdGVyaWFsTWF0aE1hdHJpeE1hdHRlck1heGltdW1NYXplTWVhZG93TWVhbk1lYXN1cmVNZWF0TWVjaGFuaWNNZWRhbE1lZGlhTWVsb2R5TWVsdE1lbWJlck1lbW9yeU1lbnRpb25NZW51TWVyY3lNZXJnZU1lcml0TWVycnlNZXNoTWVzc2FnZU1ldGFsTWV0aG9kTWlkZGxlTWlkbmlnaHRNaWxrTWlsbGlvbk1pbWljTWluZE1pbmltdW1NaW5vck1pbnV0ZU1pcmFjbGVNaXJyb3JNaXNlcnlNaXNzTWlzdGFrZU1peE1peGVkTWl4dHVyZU1vYmlsZU1vZGVsTW9kaWZ5TW9tTW9tZW50TW9uaXRvck1vbmtleU1vbnN0ZXJNb250aE1vb25Nb3JhbE1vcmVNb3JuaW5nTW9zcXVpdG9Nb3RoZXJNb3Rpb25Nb3Rvck1vdW50YWluTW91c2VNb3ZlTW92aWVNdWNoTXVmZmluTXVsZU11bHRpcGx5TXVzY2xlTXVzZXVtTXVzaHJvb21NdXNpY011c3RNdXR1YWxNeXNlbGZNeXN0ZXJ5TXl0aE5haXZlTmFtZU5hcGtpbk5hcnJvd05hc3R5TmF0aW9uTmF0dXJlTmVhck5lY2tOZWVkTmVnYXRpdmVOZWdsZWN0TmVpdGhlck5lcGhld05lcnZlTmVzdE5ldE5ldHdvcmtOZXV0cmFsTmV2ZXJOZXdzTmV4dE5pY2VOaWdodE5vYmxlTm9pc2VOb21pbmVlTm9vZGxlTm9ybWFsTm9ydGhOb3NlTm90YWJsZU5vdGVOb3RoaW5nTm90aWNlTm92ZWxOb3dOdWNsZWFyTnVtYmVyTnVyc2VOdXRPYWtPYmV5T2JqZWN0T2JsaWdlT2JzY3VyZU9ic2VydmVPYnRhaW5PYnZpb3VzT2NjdXJPY2Vhbk9jdG9iZXJPZG9yT2ZmT2ZmZXJPZmZpY2VPZnRlbk9pbE9rYXlPbGRPbGl2ZU9seW1waWNPbWl0T25jZU9uZU9uaW9uT25saW5lT25seU9wZW5PcGVyYU9waW5pb25PcHBvc2VPcHRpb25PcmFuZ2VPcmJpdE9yY2hhcmRPcmRlck9yZGluYXJ5T3JnYW5PcmllbnRPcmlnaW5hbE9ycGhhbk9zdHJpY2hPdGhlck91dGRvb3JPdXRlck91dHB1dE91dHNpZGVPdmFsT3Zlbk92ZXJPd25Pd25lck94eWdlbk95c3Rlck96b25lUGFjdFBhZGRsZVBhZ2VQYWlyUGFsYWNlUGFsbVBhbmRhUGFuZWxQYW5pY1BhbnRoZXJQYXBlclBhcmFkZVBhcmVudFBhcmtQYXJyb3RQYXJ0eVBhc3NQYXRjaFBhdGhQYXRpZW50UGF0cm9sUGF0dGVyblBhdXNlUGF2ZVBheW1lbnRQZWFjZVBlYW51dFBlYXJQZWFzYW50UGVsaWNhblBlblBlbmFsdHlQZW5jaWxQZW9wbGVQZXBwZXJQZXJmZWN0UGVybWl0UGVyc29uUGV0UGhvbmVQaG90b1BocmFzZVBoeXNpY2FsUGlhbm9QaWNuaWNQaWN0dXJlUGllY2VQaWdQaWdlb25QaWxsUGlsb3RQaW5rUGlvbmVlclBpcGVQaXN0b2xQaXRjaFBpenphUGxhY2VQbGFuZXRQbGFzdGljUGxhdGVQbGF5UGxlYXNlUGxlZGdlUGx1Y2tQbHVnUGx1bmdlUG9lbVBvZXRQb2ludFBvbGFyUG9sZVBvbGljZVBvbmRQb255UG9vbFBvcHVsYXJQb3J0aW9uUG9zaXRpb25Qb3NzaWJsZVBvc3RQb3RhdG9Qb3R0ZXJ5UG92ZXJ0eVBvd2RlclBvd2VyUHJhY3RpY2VQcmFpc2VQcmVkaWN0UHJlZmVyUHJlcGFyZVByZXNlbnRQcmV0dHlQcmV2ZW50UHJpY2VQcmlkZVByaW1hcnlQcmludFByaW9yaXR5UHJpc29uUHJpdmF0ZVByaXplUHJvYmxlbVByb2Nlc3NQcm9kdWNlUHJvZml0UHJvZ3JhbVByb2plY3RQcm9tb3RlUHJvb2ZQcm9wZXJ0eVByb3NwZXJQcm90ZWN0UHJvdWRQcm92aWRlUHVibGljUHVkZGluZ1B1bGxQdWxwUHVsc2VQdW1wa2luUHVuY2hQdXBpbFB1cHB5UHVyY2hhc2VQdXJpdHlQdXJwb3NlUHVyc2VQdXNoUHV0UHV6emxlUHlyYW1pZFF1YWxpdHlRdWFudHVtUXVhcnRlclF1ZXN0aW9uUXVpY2tRdWl0UXVpelF1b3RlUmFiYml0UmFjY29vblJhY2VSYWNrUmFkYXJSYWRpb1JhaWxSYWluUmFpc2VSYWxseVJhbXBSYW5jaFJhbmRvbVJhbmdlUmFwaWRSYXJlUmF0ZVJhdGhlclJhdmVuUmF3UmF6b3JSZWFkeVJlYWxSZWFzb25SZWJlbFJlYnVpbGRSZWNhbGxSZWNlaXZlUmVjaXBlUmVjb3JkUmVjeWNsZVJlZHVjZVJlZmxlY3RSZWZvcm1SZWZ1c2VSZWdpb25SZWdyZXRSZWd1bGFyUmVqZWN0UmVsYXhSZWxlYXNlUmVsaWVmUmVseVJlbWFpblJlbWVtYmVyUmVtaW5kUmVtb3ZlUmVuZGVyUmVuZXdSZW50UmVvcGVuUmVwYWlyUmVwZWF0UmVwbGFjZVJlcG9ydFJlcXVpcmVSZXNjdWVSZXNlbWJsZVJlc2lzdFJlc291cmNlUmVzcG9uc2VSZXN1bHRSZXRpcmVSZXRyZWF0UmV0dXJuUmV1bmlvblJldmVhbFJldmlld1Jld2FyZFJoeXRobVJpYlJpYmJvblJpY2VSaWNoUmlkZVJpZGdlUmlmbGVSaWdodFJpZ2lkUmluZ1Jpb3RSaXBwbGVSaXNrUml0dWFsUml2YWxSaXZlclJvYWRSb2FzdFJvYm90Um9idXN0Um9ja2V0Um9tYW5jZVJvb2ZSb29raWVSb29tUm9zZVJvdGF0ZVJvdWdoUm91bmRSb3V0ZVJveWFsUnViYmVyUnVkZVJ1Z1J1bGVSdW5SdW53YXlSdXJhbFNhZFNhZGRsZVNhZG5lc3NTYWZlU2FpbFNhbGFkU2FsbW9uU2Fsb25TYWx0U2FsdXRlU2FtZVNhbXBsZVNhbmRTYXRpc2Z5U2F0b3NoaVNhdWNlU2F1c2FnZVNhdmVTYXlTY2FsZVNjYW5TY2FyZVNjYXR0ZXJTY2VuZVNjaGVtZVNjaG9vbFNjaWVuY2VTY2lzc29yc1Njb3JwaW9uU2NvdXRTY3JhcFNjcmVlblNjcmlwdFNjcnViU2VhU2VhcmNoU2Vhc29uU2VhdFNlY29uZFNlY3JldFNlY3Rpb25TZWN1cml0eVNlZWRTZWVrU2VnbWVudFNlbGVjdFNlbGxTZW1pbmFyU2VuaW9yU2Vuc2VTZW50ZW5jZVNlcmllc1NlcnZpY2VTZXNzaW9uU2V0dGxlU2V0dXBTZXZlblNoYWRvd1NoYWZ0U2hhbGxvd1NoYXJlU2hlZFNoZWxsU2hlcmlmZlNoaWVsZFNoaWZ0U2hpbmVTaGlwU2hpdmVyU2hvY2tTaG9lU2hvb3RTaG9wU2hvcnRTaG91bGRlclNob3ZlU2hyaW1wU2hydWdTaHVmZmxlU2h5U2libGluZ1NpY2tTaWRlU2llZ2VTaWdodFNpZ25TaWxlbnRTaWxrU2lsbHlTaWx2ZXJTaW1pbGFyU2ltcGxlU2luY2VTaW5nU2lyZW5TaXN0ZXJTaXR1YXRlU2l4U2l6ZVNrYXRlU2tldGNoU2tpU2tpbGxTa2luU2tpcnRTa3VsbFNsYWJTbGFtU2xlZXBTbGVuZGVyU2xpY2VTbGlkZVNsaWdodFNsaW1TbG9nYW5TbG90U2xvd1NsdXNoU21hbGxTbWFydFNtaWxlU21va2VTbW9vdGhTbmFja1NuYWtlU25hcFNuaWZmU25vd1NvYXBTb2NjZXJTb2NpYWxTb2NrU29kYVNvZnRTb2xhclNvbGRpZXJTb2xpZFNvbHV0aW9uU29sdmVTb21lb25lU29uZ1Nvb25Tb3JyeVNvcnRTb3VsU291bmRTb3VwU291cmNlU291dGhTcGFjZVNwYXJlU3BhdGlhbFNwYXduU3BlYWtTcGVjaWFsU3BlZWRTcGVsbFNwZW5kU3BoZXJlU3BpY2VTcGlkZXJTcGlrZVNwaW5TcGlyaXRTcGxpdFNwb2lsU3BvbnNvclNwb29uU3BvcnRTcG90U3ByYXlTcHJlYWRTcHJpbmdTcHlTcXVhcmVTcXVlZXplU3F1aXJyZWxTdGFibGVTdGFkaXVtU3RhZmZTdGFnZVN0YWlyc1N0YW1wU3RhbmRTdGFydFN0YXRlU3RheVN0ZWFrU3RlZWxTdGVtU3RlcFN0ZXJlb1N0aWNrU3RpbGxTdGluZ1N0b2NrU3RvbWFjaFN0b25lU3Rvb2xTdG9yeVN0b3ZlU3RyYXRlZ3lTdHJlZXRTdHJpa2VTdHJvbmdTdHJ1Z2dsZVN0dWRlbnRTdHVmZlN0dW1ibGVTdHlsZVN1YmplY3RTdWJtaXRTdWJ3YXlTdWNjZXNzU3VjaFN1ZGRlblN1ZmZlclN1Z2FyU3VnZ2VzdFN1aXRTdW1tZXJTdW5TdW5ueVN1bnNldFN1cGVyU3VwcGx5U3VwcmVtZVN1cmVTdXJmYWNlU3VyZ2VTdXJwcmlzZVN1cnJvdW5kU3VydmV5U3VzcGVjdFN1c3RhaW5Td2FsbG93U3dhbXBTd2FwU3dhcm1Td2VhclN3ZWV0U3dpZnRTd2ltU3dpbmdTd2l0Y2hTd29yZFN5bWJvbFN5bXB0b21TeXJ1cFN5c3RlbVRhYmxlVGFja2xlVGFnVGFpbFRhbGVudFRhbGtUYW5rVGFwZVRhcmdldFRhc2tUYXN0ZVRhdHRvb1RheGlUZWFjaFRlYW1UZWxsVGVuVGVuYW50VGVubmlzVGVudFRlcm1UZXN0VGV4dFRoYW5rVGhhdFRoZW1lVGhlblRoZW9yeVRoZXJlVGhleVRoaW5nVGhpc1Rob3VnaHRUaHJlZVRocml2ZVRocm93VGh1bWJUaHVuZGVyVGlja2V0VGlkZVRpZ2VyVGlsdFRpbWJlclRpbWVUaW55VGlwVGlyZWRUaXNzdWVUaXRsZVRvYXN0VG9iYWNjb1RvZGF5VG9kZGxlclRvZVRvZ2V0aGVyVG9pbGV0VG9rZW5Ub21hdG9Ub21vcnJvd1RvbmVUb25ndWVUb25pZ2h0VG9vbFRvb3RoVG9wVG9waWNUb3BwbGVUb3JjaFRvcm5hZG9Ub3J0b2lzZVRvc3NUb3RhbFRvdXJpc3RUb3dhcmRUb3dlclRvd25Ub3lUcmFja1RyYWRlVHJhZmZpY1RyYWdpY1RyYWluVHJhbnNmZXJUcmFwVHJhc2hUcmF2ZWxUcmF5VHJlYXRUcmVlVHJlbmRUcmlhbFRyaWJlVHJpY2tUcmlnZ2VyVHJpbVRyaXBUcm9waHlUcm91YmxlVHJ1Y2tUcnVlVHJ1bHlUcnVtcGV0VHJ1c3RUcnV0aFRyeVR1YmVUdWl0aW9uVHVtYmxlVHVuYVR1bm5lbFR1cmtleVR1cm5UdXJ0bGVUd2VsdmVUd2VudHlUd2ljZVR3aW5Ud2lzdFR3b1R5cGVUeXBpY2FsVWdseVVtYnJlbGxhVW5hYmxlVW5hd2FyZVVuY2xlVW5jb3ZlclVuZGVyVW5kb1VuZmFpclVuZm9sZFVuaGFwcHlVbmlmb3JtVW5pcXVlVW5pdFVuaXZlcnNlVW5rbm93blVubG9ja1VudGlsVW51c3VhbFVudmVpbFVwZGF0ZVVwZ3JhZGVVcGhvbGRVcG9uVXBwZXJVcHNldFVyYmFuVXJnZVVzYWdlVXNlVXNlZFVzZWZ1bFVzZWxlc3NVc3VhbFV0aWxpdHlWYWNhbnRWYWN1dW1WYWd1ZVZhbGlkVmFsbGV5VmFsdmVWYW5WYW5pc2hWYXBvclZhcmlvdXNWYXN0VmF1bHRWZWhpY2xlVmVsdmV0VmVuZG9yVmVudHVyZVZlbnVlVmVyYlZlcmlmeVZlcnNpb25WZXJ5VmVzc2VsVmV0ZXJhblZpYWJsZVZpYnJhbnRWaWNpb3VzVmljdG9yeVZpZGVvVmlld1ZpbGxhZ2VWaW50YWdlVmlvbGluVmlydHVhbFZpcnVzVmlzYVZpc2l0VmlzdWFsVml0YWxWaXZpZFZvY2FsVm9pY2VWb2lkVm9sY2Fub1ZvbHVtZVZvdGVWb3lhZ2VXYWdlV2Fnb25XYWl0V2Fsa1dhbGxXYWxudXRXYW50V2FyZmFyZVdhcm1XYXJyaW9yV2FzaFdhc3BXYXN0ZVdhdGVyV2F2ZVdheVdlYWx0aFdlYXBvbldlYXJXZWFzZWxXZWF0aGVyV2ViV2VkZGluZ1dlZWtlbmRXZWlyZFdlbGNvbWVXZXN0V2V0V2hhbGVXaGF0V2hlYXRXaGVlbFdoZW5XaGVyZVdoaXBXaGlzcGVyV2lkZVdpZHRoV2lmZVdpbGRXaWxsV2luV2luZG93V2luZVdpbmdXaW5rV2lubmVyV2ludGVyV2lyZVdpc2RvbVdpc2VXaXNoV2l0bmVzc1dvbGZXb21hbldvbmRlcldvb2RXb29sV29yZFdvcmtXb3JsZFdvcnJ5V29ydGhXcmFwV3JlY2tXcmVzdGxlV3Jpc3RXcml0ZVdyb25nWWFyZFllYXJZZWxsb3dZb3VZb3VuZ1lvdXRoWmVicmFaZXJvWm9uZVpvb1wiO2xldCB3b3JkbGlzdCQxPW51bGw7ZnVuY3Rpb24gbG9hZFdvcmRzJDEobGFuZyl7aWYod29yZGxpc3QkMSE9bnVsbCl7cmV0dXJufXdvcmRsaXN0JDE9d29yZHMkMS5yZXBsYWNlKC8oW0EtWl0pL2csXCIgJDFcIikudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMSkuc3BsaXQoXCIgXCIpO2lmKFdvcmRsaXN0LmNoZWNrKGxhbmcpIT09XCIweDNjOGFjYzFlN2IwOGQ4ZTc2ZjlmZGEwMTVlZjQ4ZGM4YzcxMGE3M2NiN2UwZjc3YjJjMThhOWI1YTdhZGRlNjBcIil7d29yZGxpc3QkMT1udWxsO3Rocm93IG5ldyBFcnJvcihcIkJJUDM5IFdvcmRsaXN0IGZvciBlbiAoRW5nbGlzaCkgRkFJTEVEXCIpfX1jbGFzcyBMYW5nRW4gZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiZW5cIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDEodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDFbaW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkMSh0aGlzKTtyZXR1cm4gd29yZGxpc3QkMS5pbmRleE9mKHdvcmQpfX1jb25zdCBsYW5nRW49bmV3IExhbmdFbjtXb3JkbGlzdC5yZWdpc3RlcihsYW5nRW4pO1widXNlIHN0cmljdFwiO2NvbnN0IHdvcmRzJDI9XCJBL2JhY29BYmRvbWVuQWJlamFBYmllcnRvQWJvZ2Fkb0Fib25vQWJvcnRvQWJyYXpvQWJyaXJBYnVlbG9BYnVzb0FjYWJhckFjYWRlbWlhQWNjZXNvQWNjaW8vbkFjZWl0ZUFjZWxnYUFjZW50b0FjZXB0YXJBL2NpZG9BY2xhcmFyQWNuZS9BY29nZXJBY29zb0FjdGl2b0FjdG9BY3RyaXpBY3R1YXJBY3VkaXJBY3VlcmRvQWN1c2FyQWRpY3RvQWRtaXRpckFkb3B0YXJBZG9ybm9BZHVhbmFBZHVsdG9BZS9yZW9BZmVjdGFyQWZpY2lvL25BZmluYXJBZmlybWFyQS9naWxBZ2l0YXJBZ29uaS9hQWdvc3RvQWdvdGFyQWdyZWdhckFncmlvQWd1YUFndWRvQS9ndWlsYUFndWphQWhvZ29BaG9ycm9BaXJlQWlzbGFyQWplZHJlekFqZW5vQWp1c3RlQWxhY3JhL25BbGFtYnJlQWxhcm1hQWxiYUEvbGJ1bUFsY2FsZGVBbGRlYUFsZWdyZUFsZWphckFsZXJ0YUFsZXRhQWxmaWxlckFsZ2FBbGdvZG8vbkFsaWFkb0FsaWVudG9BbGl2aW9BbG1hQWxtZWphQWxtaS9iYXJBbHRhckFsdGV6YUFsdGl2b0FsdG9BbHR1cmFBbHVtbm9BbHphckFtYWJsZUFtYW50ZUFtYXBvbGFBbWFyZ29BbWFzYXJBL21iYXJBL21iaXRvQW1lbm9BbWlnb0FtaXN0YWRBbW9yQW1wYXJvQW1wbGlvQW5jaG9BbmNpYW5vQW5jbGFBbmRhckFuZGUvbkFuZW1pYUEvbmd1bG9BbmlsbG9BL25pbW9Bbmkvc0Fub3RhckFudGVuYUFudGlndW9BbnRvam9BbnVhbEFudWxhckFudW5jaW9BfmFkaXJBfmVqb0F+b0FwYWdhckFwYXJhdG9BcGV0aXRvQXBpb0FwbGljYXJBcG9kb0Fwb3J0ZUFwb3lvQXByZW5kZXJBcHJvYmFyQXB1ZXN0YUFwdXJvQXJhZG9BcmF+YUFyYXJBL3JiaXRyb0EvcmJvbEFyYnVzdG9BcmNoaXZvQXJjb0FyZGVyQXJkaWxsYUFyZHVvQS9yZWFBL3JpZG9Bcmllc0FybW9uaS9hQXJuZS9zQXJvbWFBcnBhQXJwby9uQXJyZWdsb0Fycm96QXJydWdhQXJ0ZUFydGlzdGFBc2FBc2Fkb0FzYWx0b0FzY2Vuc29Bc2VndXJhckFzZW9Bc2Vzb3JBc2llbnRvQXNpbG9Bc2lzdGlyQXNub0Fzb21icm9BL3NwZXJvQXN0aWxsYUFzdHJvQXN0dXRvQXN1bWlyQXN1bnRvQXRham9BdGFxdWVBdGFyQXRlbnRvQXRlb0EvdGljb0F0bGV0YUEvdG9tb0F0cmFlckF0cm96QXR1L25BdWRhekF1ZGlvQXVnZUF1bGFBdW1lbnRvQXVzZW50ZUF1dG9yQXZhbEF2YW5jZUF2YXJvQXZlQXZlbGxhbmFBdmVuYUF2ZXN0cnV6QXZpby9uQXZpc29BeWVyQXl1ZGFBeXVub0F6YWZyYS9uQXphckF6b3RlQXp1L2NhckF6dWZyZUF6dWxCYWJhQmFib3JCYWNoZUJhaGkvYUJhaWxlQmFqYXJCYWxhbnphQmFsY28vbkJhbGRlQmFtYnUvQmFuY29CYW5kYUJhfm9CYXJiYUJhcmNvQmFybml6QmFycm9CYS9zY3VsYUJhc3RvL25CYXN1cmFCYXRhbGxhQmF0ZXJpL2FCYXRpckJhdHV0YUJhdS9sQmF6YXJCZWJlL0JlYmlkYUJlbGxvQmVzYXJCZXNvQmVzdGlhQmljaG9CaWVuQmluZ29CbGFuY29CbG9xdWVCbHVzYUJvYUJvYmluYUJvYm9Cb2NhQm9jaW5hQm9kYUJvZGVnYUJvaW5hQm9sYUJvbGVyb0JvbHNhQm9tYmFCb25kYWRCb25pdG9Cb25vQm9uc2EvaUJvcmRlQm9ycmFyQm9zcXVlQm90ZUJvdGkvbkJvL3ZlZGFCb3phbEJyYXZvQnJhem9CcmVjaGFCcmV2ZUJyaWxsb0JyaW5jb0JyaXNhQnJvY2FCcm9tYUJyb25jZUJyb3RlQnJ1amFCcnVzY29CcnV0b0J1Y2VvQnVjbGVCdWVub0J1ZXlCdWZhbmRhQnVmby9uQnUvaG9CdWl0cmVCdWx0b0J1cmJ1amFCdXJsYUJ1cnJvQnVzY2FyQnV0YWNhQnV6by9uQ2FiYWxsb0NhYmV6YUNhYmluYUNhYnJhQ2FjYW9DYWRhL3ZlckNhZGVuYUNhZXJDYWZlL0NhaS9kYUNhaW1hL25DYWphQ2Fqby9uQ2FsQ2FsYW1hckNhbGNpb0NhbGRvQ2FsaWRhZENhbGxlQ2FsbWFDYWxvckNhbHZvQ2FtYUNhbWJpb0NhbWVsbG9DYW1pbm9DYW1wb0NhL25jZXJDYW5kaWxDYW5lbGFDYW5ndXJvQ2FuaWNhQ2FudG9DYX5hQ2F+by9uQ2FvYmFDYW9zQ2FwYXpDYXBpdGEvbkNhcG90ZUNhcHRhckNhcHVjaGFDYXJhQ2FyYm8vbkNhL3JjZWxDYXJldGFDYXJnYUNhcml+b0Nhcm5lQ2FycGV0YUNhcnJvQ2FydGFDYXNhQ2FzY29DYXNlcm9DYXNwYUNhc3RvckNhdG9yY2VDYXRyZUNhdWRhbENhdXNhQ2F6b0NlYm9sbGFDZWRlckNlZHJvQ2VsZGFDZS9sZWJyZUNlbG9zb0NlL2x1bGFDZW1lbnRvQ2VuaXphQ2VudHJvQ2VyY2FDZXJkb0NlcmV6YUNlcm9DZXJyYXJDZXJ0ZXphQ2Uvc3BlZENldHJvQ2hhY2FsQ2hhbGVjb0NoYW1wdS9DaGFuY2xhQ2hhcGFDaGFybGFDaGljb0NoaXN0ZUNoaXZvQ2hvcXVlQ2hvemFDaHVsZXRhQ2h1cGFyQ2ljbG8vbkNpZWdvQ2llbG9DaWVuQ2llcnRvQ2lmcmFDaWdhcnJvQ2ltYUNpbmNvQ2luZUNpbnRhQ2lwcmUvc0NpcmNvQ2lydWVsYUNpc25lQ2l0YUNpdWRhZENsYW1vckNsYW5DbGFyb0NsYXNlQ2xhdmVDbGllbnRlQ2xpbWFDbGkvbmljYUNvYnJlQ29jY2lvL25Db2NoaW5vQ29jaW5hQ29jb0NvL2RpZ29Db2RvQ29mcmVDb2dlckNvaGV0ZUNvamkvbkNvam9Db2xhQ29sY2hhQ29sZWdpb0NvbGdhckNvbGluYUNvbGxhckNvbG1vQ29sdW1uYUNvbWJhdGVDb21lckNvbWlkYUNvL21vZG9Db21wcmFDb25kZUNvbmVqb0NvbmdhQ29ub2NlckNvbnNlam9Db250YXJDb3BhQ29waWFDb3Jhem8vbkNvcmJhdGFDb3JjaG9Db3Jkby9uQ29yb25hQ29ycmVyQ29zZXJDb3Ntb3NDb3N0YUNyYS9uZW9DcmEvdGVyQ3JlYXJDcmVjZXJDcmVpL2RvQ3JlbWFDcmkvYUNyaW1lbkNyaXB0YUNyaXNpc0Nyb21vQ3JvL25pY2FDcm9xdWV0YUNydWRvQ3J1ekN1YWRyb0N1YXJ0b0N1YXRyb0N1Ym9DdWJyaXJDdWNoYXJhQ3VlbGxvQ3VlbnRvQ3VlcmRhQ3Vlc3RhQ3VldmFDdWlkYXJDdWxlYnJhQ3VscGFDdWx0b0N1bWJyZUN1bXBsaXJDdW5hQ3VuZXRhQ3VvdGFDdXBvL25DdS9wdWxhQ3VyYXJDdXJpb3NvQ3Vyc29DdXJ2YUN1dGlzRGFtYURhbnphRGFyRGFyZG9EYS90aWxEZWJlckRlL2JpbERlL2NhZGFEZWNpckRlZG9EZWZlbnNhRGVmaW5pckRlamFyRGVsZmkvbkRlbGdhZG9EZWxpdG9EZW1vcmFEZW5zb0RlbnRhbERlcG9ydGVEZXJlY2hvRGVycm90YURlc2F5dW5vRGVzZW9EZXNmaWxlRGVzbnVkb0Rlc3Rpbm9EZXN2aS9vRGV0YWxsZURldGVuZXJEZXVkYURpL2FEaWFibG9EaWFkZW1hRGlhbWFudGVEaWFuYURpYXJpb0RpYnVqb0RpY3RhckRpZW50ZURpZXRhRGllekRpZmkvY2lsRGlnbm9EaWxlbWFEaWx1aXJEaW5lcm9EaXJlY3RvRGlyaWdpckRpc2NvRGlzZX5vRGlzZnJhekRpdmFEaXZpbm9Eb2JsZURvY2VEb2xvckRvbWluZ29Eb25Eb25hckRvcmFkb0Rvcm1pckRvcnNvRG9zRG9zaXNEcmFnby9uRHJvZ2FEdWNoYUR1ZGFEdWVsb0R1ZX5vRHVsY2VEdS9vRHVxdWVEdXJhckR1cmV6YUR1cm9FL2Jhbm9FYnJpb0VjaGFyRWNvRWN1YWRvckVkYWRFZGljaW8vbkVkaWZpY2lvRWRpdG9yRWR1Y2FyRWZlY3RvRWZpY2F6RWplRWplbXBsb0VsZWZhbnRlRWxlZ2lyRWxlbWVudG9FbGV2YXJFbGlwc2VFL2xpdGVFbGl4aXJFbG9naW9FbHVkaXJFbWJ1ZG9FbWl0aXJFbW9jaW8vbkVtcGF0ZUVtcGV+b0VtcGxlb0VtcHJlc2FFbmFub0VuY2FyZ29FbmNodWZlRW5jaS9hRW5lbWlnb0VuZXJvRW5mYWRvRW5mZXJtb0VuZ2F+b0VuaWdtYUVubGFjZUVub3JtZUVucmVkb0Vuc2F5b0Vuc2V+YXJFbnRlcm9FbnRyYXJFbnZhc2VFbnZpL29FL3BvY2FFcXVpcG9Fcml6b0VzY2FsYUVzY2VuYUVzY29sYXJFc2NyaWJpckVzY3Vkb0VzZW5jaWFFc2ZlcmFFc2Z1ZXJ6b0VzcGFkYUVzcGVqb0VzcGkvYUVzcG9zYUVzcHVtYUVzcXVpL0VzdGFyRXN0ZUVzdGlsb0VzdHVmYUV0YXBhRXRlcm5vRS90aWNhRXRuaWFFdmFkaXJFdmFsdWFyRXZlbnRvRXZpdGFyRXhhY3RvRXhhbWVuRXhjZXNvRXhjdXNhRXhlbnRvRXhpZ2lyRXhpbGlvRXhpc3RpckUveGl0b0V4cGVydG9FeHBsaWNhckV4cG9uZXJFeHRyZW1vRmEvYnJpY2FGYS9idWxhRmFjaGFkYUZhL2NpbEZhY3RvckZhZW5hRmFqYUZhbGRhRmFsbG9GYWxzb0ZhbHRhckZhbWFGYW1pbGlhRmFtb3NvRmFyYW8vbkZhcm1hY2lhRmFyb2xGYXJzYUZhc2VGYXRpZ2FGYXVuYUZhdm9yRmF4RmVicmVyb0ZlY2hhRmVsaXpGZW9GZXJpYUZlcm96RmUvcnRpbEZlcnZvckZlc3RpL25GaWFibGVGaWFuemFGaWFyRmlicmFGaWNjaW8vbkZpY2hhRmlkZW9GaWVicmVGaWVsRmllcmFGaWVzdGFGaWd1cmFGaWphckZpam9GaWxhRmlsZXRlRmlsaWFsRmlsdHJvRmluRmluY2FGaW5naXJGaW5pdG9GaXJtYUZsYWNvRmxhdXRhRmxlY2hhRmxvckZsb3RhRmx1aXJGbHVqb0ZsdS9vckZvYmlhRm9jYUZvZ2F0YUZvZ28vbkZvbGlvRm9sbGV0b0ZvbmRvRm9ybWFGb3Jyb0ZvcnR1bmFGb3J6YXJGb3NhRm90b0ZyYWNhc29GcmEvZ2lsRnJhbmphRnJhc2VGcmF1ZGVGcmVpL3JGcmVub0ZyZXNhRnJpL29Gcml0b0ZydXRhRnVlZ29GdWVudGVGdWVyemFGdWdhRnVtYXJGdW5jaW8vbkZ1bmRhRnVyZ28vbkZ1cmlhRnVzaWxGdS90Ym9sRnV0dXJvR2FjZWxhR2FmYXNHYWl0YUdham9HYWxhR2FsZXJpL2FHYWxsb0dhbWJhR2FuYXJHYW5jaG9HYW5nYUdhbnNvR2FyYWplR2FyemFHYXNvbGluYUdhc3RhckdhdG9HYXZpbGEvbkdlbWVsb0dlbWlyR2VuR2UvbmVyb0dlbmlvR2VudGVHZXJhbmlvR2VyZW50ZUdlcm1lbkdlc3RvR2lnYW50ZUdpbW5hc2lvR2lyYXJHaXJvR2xhY2lhckdsb2JvR2xvcmlhR29sR29sZm9Hb2xvc29Hb2xwZUdvbWFHb3Jkb0dvcmlsYUdvcnJhR290YUdvdGVvR296YXJHcmFkYUdyYS9maWNvR3Jhbm9HcmFzYUdyYXRpc0dyYXZlR3JpZXRhR3JpbGxvR3JpcGVHcmlzR3JpdG9Hcm9zb3JHcnUvYUdydWVzb0dydW1vR3J1cG9HdWFudGVHdWFwb0d1YXJkaWFHdWVycmFHdWkvYUd1aX5vR3Vpb25HdWlzb0d1aXRhcnJhR3VzYW5vR3VzdGFySGFiZXJIYS9iaWxIYWJsYXJIYWNlckhhY2hhSGFkYUhhbGxhckhhbWFjYUhhcmluYUhhekhhemF+YUhlYmlsbGFIZWJyYUhlY2hvSGVsYWRvSGVsaW9IZW1icmFIZXJpckhlcm1hbm9IZS9yb2VIZXJ2aXJIaWVsb0hpZXJyb0hpL2dhZG9IaWdpZW5lSGlqb0hpbW5vSGlzdG9yaWFIb2NpY29Ib2dhckhvZ3VlcmFIb2phSG9tYnJlSG9uZ29Ib25vckhvbnJhSG9yYUhvcm1pZ2FIb3Jub0hvc3RpbEhveW9IdWVjb0h1ZWxnYUh1ZXJ0YUh1ZXNvSHVldm9IdWlkYUh1aXJIdW1hbm9IdS9tZWRvSHVtaWxkZUh1bW9IdW5kaXJIdXJhY2Evbkh1cnRvSWNvbm9JZGVhbElkaW9tYUkvZG9sb0lnbGVzaWFJZ2x1L0lndWFsSWxlZ2FsSWx1c2lvL25JbWFnZW5JbWEvbkltaXRhckltcGFySW1wZXJpb0ltcG9uZXJJbXB1bHNvSW5jYXBhekkvbmRpY2VJbmVydGVJbmZpZWxJbmZvcm1lSW5nZW5pb0luaWNpb0lubWVuc29Jbm11bmVJbm5hdG9JbnNlY3RvSW5zdGFudGVJbnRlcmUvc0kvbnRpbW9JbnR1aXJJbnUvdGlsSW52aWVybm9JcmFJcmlzSXJvbmkvYUlzbGFJc2xvdGVKYWJhbGkvSmFiby9uSmFtby9uSmFyYWJlSmFyZGkvbkphcnJhSmF1bGFKYXptaS9uSmVmZUplcmluZ2FKaW5ldGVKb3JuYWRhSm9yb2JhSm92ZW5Kb3lhSnVlcmdhSnVldmVzSnVlekp1Z2Fkb3JKdWdvSnVndWV0ZUp1aWNpb0p1bmNvSnVuZ2xhSnVuaW9KdW50YXJKdS9waXRlckp1cmFySnVzdG9KdXZlbmlsSnV6Z2FyS2lsb0tvYWxhTGFiaW9MYWNpb0xhY3JhTGFkb0xhZHJvL25MYWdhcnRvTGEvZ3JpbWFMYWd1bmFMYWljb0xhbWVyTGEvbWluYUxhL21wYXJhTGFuYUxhbmNoYUxhbmdvc3RhTGFuemFMYS9waXpMYXJnb0xhcnZhTGEvc3RpbWFMYXRhTGEvdGV4TGF0aXJMYXVyZWxMYXZhckxhem9MZWFsTGVjY2lvL25MZWNoZUxlY3RvckxlZXJMZWdpby9uTGVndW1icmVMZWphbm9MZW5ndWFMZW50b0xlfmFMZW8vbkxlb3BhcmRvTGVzaW8vbkxldGFsTGV0cmFMZXZlTGV5ZW5kYUxpYmVydGFkTGlicm9MaWNvckxpL2RlckxpZGlhckxpZW56b0xpZ2FMaWdlcm9MaW1hTGkvbWl0ZUxpbW8vbkxpbXBpb0xpbmNlTGluZG9MaS9uZWFMaW5nb3RlTGlub0xpbnRlcm5hTGkvcXVpZG9MaXNvTGlzdGFMaXRlcmFMaXRpb0xpdHJvTGxhZ2FMbGFtYUxsYW50b0xsYXZlTGxlZ2FyTGxlbmFyTGxldmFyTGxvcmFyTGxvdmVyTGx1dmlhTG9ib0xvY2lvL25Mb2NvTG9jdXJhTG8vZ2ljYUxvZ3JvTG9tYnJpekxvbW9Mb25qYUxvdGVMdWNoYUx1Y2lyTHVnYXJMdWpvTHVuYUx1bmVzTHVwYUx1c3Ryb0x1dG9MdXpNYWNldGFNYWNob01hZGVyYU1hZHJlTWFkdXJvTWFlc3Ryb01hZmlhTWFnaWFNYWdvTWFpL3pNYWxkYWRNYWxldGFNYWxsYU1hbG9NYW1hL01hbWJvTWFtdXRNYW5jb01hbmRvTWFuZWphck1hbmdhTWFuaXF1aS9NYW5qYXJNYW5vTWFuc29NYW50YU1hfmFuYU1hcGFNYS9xdWluYU1hck1hcmNvTWFyZWFNYXJmaWxNYXJnZW5NYXJpZG9NYS9ybW9sTWFycm8vbk1hcnRlc01hcnpvTWFzYU1hL3NjYXJhTWFzaXZvTWF0YXJNYXRlcmlhTWF0aXpNYXRyaXpNYS94aW1vTWF5b3JNYXpvcmNhTWVjaGFNZWRhbGxhTWVkaW9NZS9kdWxhTWVqaWxsYU1lam9yTWVsZW5hTWVsby9uTWVtb3JpYU1lbm9yTWVuc2FqZU1lbnRlTWVudS9NZXJjYWRvTWVyZW5ndWVNZS9yaXRvTWVzTWVzby9uTWV0YU1ldGVyTWUvdG9kb01ldHJvTWV6Y2xhTWllZG9NaWVsTWllbWJyb01pZ2FNaWxNaWxhZ3JvTWlsaXRhck1pbGxvL25NaW1vTWluYU1pbmVyb01pL25pbW9NaW51dG9NaW9wZU1pcmFyTWlzYU1pc2VyaWFNaXNpbE1pc21vTWl0YWRNaXRvTW9jaGlsYU1vY2lvL25Nb2RhTW9kZWxvTW9ob01vamFyTW9sZGVNb2xlck1vbGlub01vbWVudG9Nb21pYU1vbmFyY2FNb25lZGFNb25qYU1vbnRvTW9+b01vcmFkYU1vcmRlck1vcmVub01vcmlyTW9ycm9Nb3JzYU1vcnRhbE1vc2NhTW9zdHJhck1vdGl2b01vdmVyTW8vdmlsTW96b011Y2hvTXVkYXJNdWVibGVNdWVsYU11ZXJ0ZU11ZXN0cmFNdWdyZU11amVyTXVsYU11bGV0YU11bHRhTXVuZG9NdX5lY2FNdXJhbE11cm9NdS9zY3Vsb011c2VvTXVzZ29NdS9zaWNhTXVzbG9OYS9jYXJOYWNpby9uTmFkYXJOYWlwZU5hcmFuamFOYXJpek5hcnJhck5hc2FsTmF0YWxOYXRpdm9OYXR1cmFsTmEvdXNlYU5hdmFsTmF2ZU5hdmlkYWROZWNpb05lL2N0YXJOZWdhck5lZ29jaW9OZWdyb05lby9uTmVydmlvTmV0b05ldXRyb05ldmFyTmV2ZXJhTmljaG9OaWRvTmllYmxhTmlldG9OaX5lek5pfm9OaS90aWRvTml2ZWxOb2JsZXphTm9jaGVOby9taW5hTm9yaWFOb3JtYU5vcnRlTm90YU5vdGljaWFOb3ZhdG9Ob3ZlbGFOb3Zpb051YmVOdWNhTnUvY2xlb051ZGlsbG9OdWRvTnVlcmFOdWV2ZU51ZXpOdWxvTnUvbWVyb051dHJpYU9hc2lzT2Jlc29PYmlzcG9PYmpldG9PYnJhT2JyZXJvT2JzZXJ2YXJPYnRlbmVyT2J2aW9PY2FPY2Fzb09jZS9hbm9PY2hlbnRhT2Nob09jaW9PY3JlT2N0YXZvT2N0dWJyZU9jdWx0b09jdXBhck9jdXJyaXJPZGlhck9kaW9PZGlzZWFPZXN0ZU9mZW5zYU9mZXJ0YU9maWNpb09mcmVjZXJPZ3JvT2kvZG9PaS9yT2pvT2xhT2xlYWRhT2xmYXRvT2xpdm9PbGxhT2xtb09sb3JPbHZpZG9PbWJsaWdvT25kYU9uemFPcGFjb09wY2lvL25PL3BlcmFPcGluYXJPcG9uZXJPcHRhck8vcHRpY2FPcHVlc3RvT3JhY2lvL25PcmFkb3JPcmFsTy9yYml0YU9yY2FPcmRlbk9yZWphTy9yZ2Fub09yZ2kvYU9yZ3VsbG9PcmllbnRlT3JpZ2VuT3JpbGxhT3JvT3JxdWVzdGFPcnVnYU9zYWRpL2FPc2N1cm9Pc2V6bm9Pc29Pc3RyYU90b35vT3Ryb092ZWphTy92dWxvTy94aWRvT3hpL2dlbm9PeWVudGVPem9ub1BhY3RvUGFkcmVQYWVsbGFQYS9naW5hUGFnb1BhaS9zUGEvamFyb1BhbGFicmFQYWxjb1BhbGV0YVBhL2xpZG9QYWxtYVBhbG9tYVBhbHBhclBhblBhbmFsUGEvbmljb1BhbnRlcmFQYX51ZWxvUGFwYS9QYXBlbFBhcGlsbGFQYXF1ZXRlUGFyYXJQYXJjZWxhUGFyZWRQYXJpclBhcm9QYS9ycGFkb1BhcnF1ZVBhL3JyYWZvUGFydGVQYXNhclBhc2VvUGFzaW8vblBhc29QYXN0YVBhdGFQYXRpb1BhdHJpYVBhdXNhUGF1dGFQYXZvUGF5YXNvUGVhdG8vblBlY2Fkb1BlY2VyYVBlY2hvUGVkYWxQZWRpclBlZ2FyUGVpbmVQZWxhclBlbGRhfm9QZWxlYVBlbGlncm9QZWxsZWpvUGVsb1BlbHVjYVBlbmFQZW5zYXJQZX5vL25QZW8vblBlb3JQZXBpbm9QZXF1ZX5vUGVyYVBlcmNoYVBlcmRlclBlcmV6YVBlcmZpbFBlcmljb1BlcmxhUGVybWlzb1BlcnJvUGVyc29uYVBlc2FQZXNjYVBlL3NpbW9QZXN0YX5hUGUvdGFsb1BldHJvL2xlb1BlelBlenV+YVBpY2FyUGljaG8vblBpZVBpZWRyYVBpZXJuYVBpZXphUGlqYW1hUGlsYXJQaWxvdG9QaW1pZW50YVBpbm9QaW50b3JQaW56YVBpfmFQaW9qb1BpcGFQaXJhdGFQaXNhclBpc2NpbmFQaXNvUGlzdGFQaXRvL25QaXpjYVBsYWNhUGxhblBsYXRhUGxheWFQbGF6YVBsZWl0b1BsZW5vUGxvbW9QbHVtYVBsdXJhbFBvYnJlUG9jb1BvZGVyUG9kaW9Qb2VtYVBvZXNpL2FQb2V0YVBvbGVuUG9saWNpL2FQb2xsb1BvbHZvUG9tYWRhUG9tZWxvUG9tb1BvbXBhUG9uZXJQb3JjaW8vblBvcnRhbFBvc2FkYVBvc2VlclBvc2libGVQb3N0ZVBvdGVuY2lhUG90cm9Qb3pvUHJhZG9QcmVjb3pQcmVndW50YVByZW1pb1ByZW5zYVByZXNvUHJldmlvUHJpbW9QcmkvbmNpcGVQcmlzaW8vblByaXZhclByb2FQcm9iYXJQcm9jZXNvUHJvZHVjdG9Qcm9lemFQcm9mZXNvclByb2dyYW1hUHJvbGVQcm9tZXNhUHJvbnRvUHJvcGlvUHJvL3hpbW9QcnVlYmFQdS9ibGljb1B1Y2hlcm9QdWRvclB1ZWJsb1B1ZXJ0YVB1ZXN0b1B1bGdhUHVsaXJQdWxtby9uUHVscG9QdWxzb1B1bWFQdW50b1B1fmFsUHV+b1B1cGFQdXBpbGFQdXJlL1F1ZWRhclF1ZWphUXVlbWFyUXVlcmVyUXVlc29RdWlldG9RdWkvbWljYVF1aW5jZVF1aXRhclJhL2Jhbm9SYWJpYVJhYm9SYWNpby9uUmFkaWNhbFJhaS96UmFtYVJhbXBhUmFuY2hvUmFuZ29SYXBhelJhL3BpZG9SYXB0b1Jhc2dvUmFzcGFSYXRvUmF5b1JhemFSYXpvL25SZWFjY2lvL25SZWFsaWRhZFJlYmF+b1JlYm90ZVJlY2FlclJlY2V0YVJlY2hhem9SZWNvZ2VyUmVjcmVvUmVjdG9SZWN1cnNvUmVkUmVkb25kb1JlZHVjaXJSZWZsZWpvUmVmb3JtYVJlZnJhL25SZWZ1Z2lvUmVnYWxvUmVnaXJSZWdsYVJlZ3Jlc29SZWhlL25SZWlub1JlaS9yUmVqYVJlbGF0b1JlbGV2b1JlbGlldmVSZWxsZW5vUmVsb2pSZW1hclJlbWVkaW9SZW1vUmVuY29yUmVuZGlyUmVudGFSZXBhcnRvUmVwZXRpclJlcG9zb1JlcHRpbFJlc1Jlc2NhdGVSZXNpbmFSZXNwZXRvUmVzdG9SZXN1bWVuUmV0aXJvUmV0b3Jub1JldHJhdG9SZXVuaXJSZXZlL3NSZXZpc3RhUmV5UmV6YXJSaWNvUmllZ29SaWVuZGFSaWVzZ29SaWZhUmkvZ2lkb1JpZ29yUmluY28vblJpfm8vblJpL29SaXF1ZXphUmlzYVJpdG1vUml0b1Jpem9Sb2JsZVJvY2VSb2NpYXJSb2RhclJvZGVvUm9kaWxsYVJvZXJSb2ppem9Sb2pvUm9tZXJvUm9tcGVyUm9uUm9uY29Sb25kYVJvcGFSb3Blcm9Sb3NhUm9zY2FSb3N0cm9Sb3RhclJ1YmkvUnVib3JSdWRvUnVlZGFSdWdpclJ1aWRvUnVpbmFSdWxldGFSdWxvUnVtYm9SdW1vclJ1cHR1cmFSdXRhUnV0aW5hU2EvYmFkb1NhYmVyU2FiaW9TYWJsZVNhY2FyU2FnYXpTYWdyYWRvU2FsYVNhbGRvU2FsZXJvU2FsaXJTYWxtby9uU2Fsby9uU2Fsc2FTYWx0b1NhbHVkU2FsdmFyU2FtYmFTYW5jaW8vblNhbmRpL2FTYW5lYXJTYW5ncmVTYW5pZGFkU2Fub1NhbnRvU2Fwb1NhcXVlU2FyZGluYVNhcnRlL25TYXN0cmVTYXRhL25TYXVuYVNheG9mby9uU2VjY2lvL25TZWNvU2VjcmV0b1NlY3RhU2VkU2VndWlyU2Vpc1NlbGxvU2VsdmFTZW1hbmFTZW1pbGxhU2VuZGFTZW5zb3JTZX5hbFNlfm9yU2VwYXJhclNlcGlhU2VxdWkvYVNlclNlcmllU2VybW8vblNlcnZpclNlc2VudGFTZXNpby9uU2V0YVNldGVudGFTZXZlcm9TZXhvU2V4dG9TaWRyYVNpZXN0YVNpZXRlU2lnbG9TaWdub1NpL2xhYmFTaWxiYXJTaWxlbmNpb1NpbGxhU2kvbWJvbG9TaW1pb1NpcmVuYVNpc3RlbWFTaXRpb1NpdHVhclNvYnJlU29jaW9Tb2Rpb1NvbFNvbGFwYVNvbGRhZG9Tb2xlZGFkU28vbGlkb1NvbHRhclNvbHVjaW8vblNvbWJyYVNvbmRlb1Nvbmlkb1Nvbm9yb1NvbnJpc2FTb3BhU29wbGFyU29wb3J0ZVNvcmRvU29ycHJlc2FTb3J0ZW9Tb3N0ZS9uU28vdGFub1N1YXZlU3ViaXJTdWNlc29TdWRvclN1ZWdyYVN1ZWxvU3Vlfm9TdWVydGVTdWZyaXJTdWpldG9TdWx0YS9uU3VtYXJTdXBlcmFyU3VwbGlyU3Vwb25lclN1cHJlbW9TdXJTdXJjb1N1cmV+b1N1cmdpclN1c3RvU3V0aWxUYWJhY29UYWJpcXVlVGFibGFUYWJ1L1RhY29UYWN0b1Rham9UYWxhclRhbGNvVGFsZW50b1RhbGxhVGFsby9uVGFtYX5vVGFtYm9yVGFuZ29UYW5xdWVUYXBhVGFwZXRlVGFwaWFUYXBvL25UYXF1aWxsYVRhcmRlVGFyZWFUYXJpZmFUYXJqZXRhVGFyb3RUYXJyb1RhcnRhVGF0dWFqZVRhdXJvVGF6YVRhem8vblRlYXRyb1RlY2hvVGVjbGFUZS9jbmljYVRlamFkb1RlamVyVGVqaWRvVGVsYVRlbGUvZm9ub1RlbWFUZW1vclRlbXBsb1RlbmF6VGVuZGVyVGVuZXJUZW5pc1RlbnNvVGVvcmkvYVRlcmFwaWFUZXJjb1RlL3JtaW5vVGVybnVyYVRlcnJvclRlc2lzVGVzb3JvVGVzdGlnb1RldGVyYVRleHRvVGV6VGliaW9UaWJ1cm8vblRpZW1wb1RpZW5kYVRpZXJyYVRpZXNvVGlncmVUaWplcmFUaWxkZVRpbWJyZVRpL21pZG9UaW1vVGludGFUaS9vVGkvcGljb1RpcG9UaXJhVGlyby9uVGl0YS9uVGkvdGVyZVRpL3R1bG9UaXphVG9hbGxhVG9iaWxsb1RvY2FyVG9jaW5vVG9kb1RvZ2FUb2xkb1RvbWFyVG9ub1RvbnRvVG9wYXJUb3BlVG9xdWVUby9yYXhUb3Jlcm9Ub3JtZW50YVRvcm5lb1Rvcm9Ub3JwZWRvVG9ycmVUb3Jzb1RvcnR1Z2FUb3NUb3Njb1Rvc2VyVG8veGljb1RyYWJham9UcmFjdG9yVHJhZXJUcmEvZmljb1RyYWdvVHJhamVUcmFtb1RyYW5jZVRyYXRvVHJhdW1hVHJhemFyVHJlL2JvbFRyZWd1YVRyZWludGFUcmVuVHJlcGFyVHJlc1RyaWJ1VHJpZ29UcmlwYVRyaXN0ZVRyaXVuZm9Ucm9mZW9Ucm9tcGFUcm9uY29Ucm9wYVRyb3RlVHJvem9UcnVjb1RydWVub1RydWZhVHViZXJpL2FUdWJvVHVlcnRvVHVtYmFUdW1vclR1L25lbFR1L25pY2FUdXJiaW5hVHVyaXNtb1R1cm5vVHV0b3JVYmljYXJVL2xjZXJhVW1icmFsVW5pZGFkVW5pclVuaXZlcnNvVW5vVW50YXJVfmFVcmJhbm9VcmJlVXJnZW50ZVVybmFVc2FyVXN1YXJpb1UvdGlsVXRvcGkvYVV2YVZhY2FWYWNpL29WYWN1bmFWYWdhclZhZ29WYWluYVZhamlsbGFWYWxlVmEvbGlkb1ZhbGxlVmFsb3JWYS9sdnVsYVZhbXBpcm9WYXJhVmFyaWFyVmFyby9uVmFzb1ZlY2lub1ZlY3RvclZlaGkvY3Vsb1ZlaW50ZVZlamV6VmVsYVZlbGVyb1ZlbG96VmVuYVZlbmNlclZlbmRhVmVuZW5vVmVuZ2FyVmVuaXJWZW50YVZlbnVzVmVyVmVyYW5vVmVyYm9WZXJkZVZlcmVkYVZlcmphVmVyc29WZXJ0ZXJWaS9hVmlhamVWaWJyYXJWaWNpb1ZpL2N0aW1hVmlkYVZpL2Rlb1ZpZHJpb1ZpZWpvVmllcm5lc1ZpZ29yVmlsVmlsbGFWaW5hZ3JlVmlub1ZpfmVkb1Zpb2xpL25WaXJhbFZpcmdvVmlydHVkVmlzb3JWaS9zcGVyYVZpc3RhVml0YW1pbmFWaXVkb1ZpdmF6Vml2ZXJvVml2aXJWaXZvVm9sY2EvblZvbHVtZW5Wb2x2ZXJWb3JhelZvdGFyVm90b1ZvelZ1ZWxvVnVsZ2FyWWFjZXJZYXRlWWVndWFZZW1hWWVybm9ZZXNvWW9kb1lvZ2FZb2d1clphZmlyb1phbmphWmFwYXRvWmFyemFab25hWm9ycm9adW1vWnVyZG9cIjtjb25zdCBsb29rdXA9e307bGV0IHdvcmRsaXN0JDI9bnVsbDtmdW5jdGlvbiBkcm9wRGlhY3JpdGljKHdvcmQpe2xvZ2dlciRrLmNoZWNrTm9ybWFsaXplKCk7cmV0dXJuIHRvVXRmOFN0cmluZyhBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwodG9VdGY4Qnl0ZXMod29yZC5ub3JtYWxpemUoXCJORkRcIikudG9Mb3dlckNhc2UoKSksYz0+e3JldHVybiBjPj02NSYmYzw9OTB8fGM+PTk3JiZjPD0xMjN9KSl9ZnVuY3Rpb24gZXhwYW5kKHdvcmQpe2NvbnN0IG91dHB1dD1bXTtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRvVXRmOEJ5dGVzKHdvcmQpLGM9PntpZihjPT09NDcpe291dHB1dC5wdXNoKDIwNCk7b3V0cHV0LnB1c2goMTI5KX1lbHNlIGlmKGM9PT0xMjYpe291dHB1dC5wdXNoKDExMCk7b3V0cHV0LnB1c2goMjA0KTtvdXRwdXQucHVzaCgxMzEpfWVsc2V7b3V0cHV0LnB1c2goYyl9fSk7cmV0dXJuIHRvVXRmOFN0cmluZyhvdXRwdXQpfWZ1bmN0aW9uIGxvYWRXb3JkcyQyKGxhbmcpe2lmKHdvcmRsaXN0JDIhPW51bGwpe3JldHVybn13b3JkbGlzdCQyPXdvcmRzJDIucmVwbGFjZSgvKFtBLVpdKS9nLFwiICQxXCIpLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDEpLnNwbGl0KFwiIFwiKS5tYXAodz0+ZXhwYW5kKHcpKTt3b3JkbGlzdCQyLmZvckVhY2goKHdvcmQsaW5kZXgpPT57bG9va3VwW2Ryb3BEaWFjcml0aWMod29yZCldPWluZGV4fSk7aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4Zjc0ZmI3MDkyYWVhY2RmYmY4OTU5NTU3ZGUyMjA5OGRhNTEyMjA3ZmI5ZjEwOWNiNTI2OTk0OTM4Y2Y0MDMwMFwiKXt3b3JkbGlzdCQyPW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGVzIChTcGFuaXNoKSBGQUlMRURcIil9fWNsYXNzIExhbmdFcyBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoXCJlc1wiKX1nZXRXb3JkKGluZGV4KXtsb2FkV29yZHMkMih0aGlzKTtyZXR1cm4gd29yZGxpc3QkMltpbmRleF19Z2V0V29yZEluZGV4KHdvcmQpe2xvYWRXb3JkcyQyKHRoaXMpO3JldHVybiBsb29rdXBbZHJvcERpYWNyaXRpYyh3b3JkKV19fWNvbnN0IGxhbmdFcz1uZXcgTGFuZ0VzO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdFcyk7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgd29yZHMkMz1cIkFiYWlzc2VyQWJhbmRvbkFiZGlxdWVyQWJlaWxsZUFib2xpckFib3JkZXJBYm91dGlyQWJveWVyQWJyYXNpZkFicmV1dmVyQWJyaXRlckFicm9nZXJBYnJ1cHRBYnNlbmNlQWJzb2x1QWJzdXJkZUFidXNpZkFieXNzYWxBY2FkZS9taWVBY2Fqb3VBY2FyaWVuQWNjYWJsZXJBY2NlcHRlckFjY2xhbWVyQWNjb2xhZGVBY2Nyb2NoZUFjY3VzZXJBY2VyYmVBY2hhdEFjaGV0ZXJBY2lkdWxlckFjaWVyQWNvbXB0ZUFjcXVlL3JpckFjcm9ueW1lQWN0ZXVyQWN0aWZBY3R1ZWxBZGVwdGVBZGUvcXVhdEFkaGUvc2lmQWRqZWN0aWZBZGp1Z2VyQWRtZXR0cmVBZG1pcmVyQWRvcHRlckFkb3JlckFkb3VjaXJBZHJlc3NlQWRyb2l0QWR1bHRlQWR2ZXJiZUFlL3JlckFlL3JvbmVmQWZmYWlyZUFmZmVjdGVyQWZmaWNoZUFmZnJldXhBZmZ1YmxlckFnYWNlckFnZW5jZXJBZ2lsZUFnaXRlckFncmFmZXJBZ3JlL2FibGVBZ3J1bWVBaWRlckFpZ3VpbGxlQWlsaWVyQWltYWJsZUFpc2FuY2VBam91dGVyQWp1c3RlckFsYXJtZXJBbGNoaW1pZUFsZXJ0ZUFsZ2UtYnJlQWxndWVBbGllL25lckFsaW1lbnRBbGxlL2dlckFsbGlhZ2VBbGxvdWVyQWxsdW1lckFsb3VyZGlyQWxwYWdhQWx0ZXNzZUFsdmUvb2xlQW1hdGV1ckFtYmlndUFtYnJlQW1lL25hZ2VyQW1lcnR1bWVBbWlkb25BbWlyYWxBbW9yY2VyQW1vdXJBbW92aWJsZUFtcGhpYmllQW1wbGV1ckFtdXNhbnRBbmFseXNlQW5hcGhvcmVBbmFyY2hpZUFuYXRvbWllQW5jaWVuQW5lL2FudGlyQW5nbGVBbmdvaXNzZUFuZ3VsZXV4QW5pbWFsQW5uZXhlckFubm9uY2VBbm51ZWxBbm9kaW5Bbm9tYWxpZUFub255bWVBbm9ybWFsQW50ZW5uZUFudGlkb3RlQW54aWV1eEFwYWlzZXJBcGUvcml0aWZBcGxhbmlyQXBvbG9naWVBcHBhcmVpbEFwcGVsZXJBcHBvcnRlckFwcHV5ZXJBcXVhcml1bUFxdWVkdWNBcmJpdHJlQXJidXN0ZUFyZGV1ckFyZG9pc2VBcmdlbnRBcmxlcXVpbkFybWF0dXJlQXJtZW1lbnRBcm1vaXJlQXJtdXJlQXJwZW50ZXJBcnJhY2hlckFycml2ZXJBcnJvc2VyQXJzZW5pY0FydGUvcmllbEFydGljbGVBc3BlY3RBc3BoYWx0ZUFzcGlyZXJBc3NhdXRBc3NlcnZpckFzc2lldHRlQXNzb2NpZXJBc3N1cmVyQXN0aWNvdEFzdHJlQXN0dWNlQXRlbGllckF0b21lQXRyaXVtQXRyb2NlQXR0YXF1ZUF0dGVudGlmQXR0aXJlckF0dHJhcGVyQXViYWluZUF1YmVyZ2VBdWRhY2VBdWRpYmxlQXVndXJlckF1cm9yZUF1dG9tbmVBdXRydWNoZUF2YWxlckF2YW5jZXJBdmFyaWNlQXZlbmlyQXZlcnNlQXZldWdsZUF2aWF0ZXVyQXZpZGVBdmlvbkF2aXNlckF2b2luZUF2b3VlckF2cmlsQXhpYWxBeGlvbWVCYWRnZUJhZm91ZXJCYWdhZ2VCYWd1ZXR0ZUJhaWduYWRlQmFsYW5jZXJCYWxjb25CYWxlaW5lQmFsaXNhZ2VCYW1iaW5CYW5jYWlyZUJhbmRhZ2VCYW5saWV1ZUJhbm5pZS1yZUJhbnF1aWVyQmFyYmllckJhcmlsQmFyb25CYXJxdWVCYXJyYWdlQmFzc2luQmFzdGlvbkJhdGFpbGxlQmF0ZWF1QmF0dGVyaWVCYXVkcmllckJhdmFyZGVyQmVsZXR0ZUJlL2xpZXJCZWxvdGVCZS9uZS9maWNlQmVyY2VhdUJlcmdlckJlcmxpbmVCZXJtdWRhQmVzYWNlQmVzb2duZUJlL3RhaWxCZXVycmVCaWJlcm9uQmljeWNsZUJpZHVsZUJpam91QmlsYW5CaWxpbmd1ZUJpbGxhcmRCaW5haXJlQmlvbG9naWVCaW9wc2llQmlvdHlwZUJpc2N1aXRCaXNvbkJpc3RvdXJpQml0dW1lQml6YXJyZUJsYWZhcmRCbGFndWVCbGFuY2hpckJsZXNzYW50QmxpbmRlckJsb25kQmxvcXVlckJsb3Vzb25Cb2JhcmRCb2JpbmVCb2lyZUJvaXNlckJvbGlkZUJvbmJvbkJvbmRpckJvbmhldXJCb25pZmllckJvbnVzQm9yZHVyZUJvcm5lQm90dGVCb3VjbGVCb3VldXhCb3VnaWVCb3Vsb25Cb3VxdWluQm91cnNlQm91c3NvbGVCb3V0aXF1ZUJveGV1ckJyYW5jaGVCcmFzaWVyQnJhdmVCcmViaXNCcmUtY2hlQnJldXZhZ2VCcmljb2xlckJyaWdhZGVCcmlsbGFudEJyaW9jaGVCcmlxdWVCcm9jaHVyZUJyb2RlckJyb256ZXJCcm91c3NlQnJveWV1ckJydW1lQnJ1c3F1ZUJydXRhbEJydXlhbnRCdWZmbGVCdWlzc29uQnVsbGV0aW5CdXJlYXVCdXJpbkJ1c3RpZXJCdXRpbmVyQnV0b2lyQnV2YWJsZUJ1dmV0dGVDYWJhbm9uQ2FiaW5lQ2FjaGV0dGVDYWRlYXVDYWRyZUNhZmUvaW5lQ2FpbGxvdUNhaXNzb25DYWxjdWxlckNhbGVwaW5DYWxpYnJlQ2FsbWVyQ2Fsb21uaWVDYWx2YWlyZUNhbWFyYWRlQ2FtZS9yYUNhbWlvbkNhbXBhZ25lQ2FuYWxDYW5ldG9uQ2Fub25DYW50aW5lQ2FudWxhckNhcGFibGVDYXBvcmFsQ2FwcmljZUNhcHN1bGVDYXB0ZXJDYXB1Y2hlQ2FyYWJpbmVDYXJib25lQ2FyZXNzZXJDYXJpYm91Q2FybmFnZUNhcm90dGVDYXJyZWF1Q2FydG9uQ2FzY2FkZUNhc2llckNhc3F1ZUNhc3N1cmVDYXVzZXJDYXV0aW9uQ2F2YWxpZXJDYXZlcm5lQ2F2aWFyQ2UvZGlsbGVDZWludHVyZUNlL2xlc3RlQ2VsbHVsZUNlbmRyaWVyQ2Vuc3VyZXJDZW50cmFsQ2VyY2xlQ2UvcmUvYnJhbENlcmlzZUNlcm5lckNlcnZlYXVDZXNzZXJDaGFncmluQ2hhaXNlQ2hhbGV1ckNoYW1icmVDaGFuY2VDaGFwaXRyZUNoYXJib25DaGFzc2V1ckNoYXRvbkNoYXVzc29uQ2hhdmlyZXJDaGVtaXNlQ2hlbmlsbGVDaGUvcXVpZXJDaGVyY2hlckNoZXZhbENoaWVuQ2hpZmZyZUNoaWdub25DaGltZS1yZUNoaW90Q2hsb3J1cmVDaG9jb2xhdENob2lzaXJDaG9zZUNob3VldHRlQ2hyb21lQ2h1dGVDaWdhcmVDaWdvZ25lQ2ltZW50ZXJDaW5lL21hQ2ludHJlckNpcmN1bGVyQ2lyZXJDaXJxdWVDaXRlcm5lQ2l0b3llbkNpdHJvbkNpdmlsQ2xhaXJvbkNsYW1ldXJDbGFxdWVyQ2xhc3NlQ2xhdmllckNsaWVudENsaWduZXJDbGltYXRDbGl2YWdlQ2xvY2hlQ2xvbmFnZUNsb3BvcnRlQ29iYWx0Q29icmFDb2Nhc3NlQ29jb3RpZXJDb2RlckNvZGlmaWVyQ29mZnJlQ29nbmVyQ29oZS9zaW9uQ29pZmZlckNvaW5jZXJDb2xlLXJlQ29saWJyaUNvbGxpbmVDb2xtYXRlckNvbG9uZWxDb21iYXRDb21lL2RpZUNvbW1hbmRlQ29tcGFjdENvbmNlcnRDb25kdWlyZUNvbmZpZXJDb25nZWxlckNvbm5vdGVyQ29uc29ubmVDb250YWN0Q29udmV4ZUNvcGFpbkNvcGllQ29yYWlsQ29yYmVhdUNvcmRhZ2VDb3JuaWNoZUNvcnB1c0NvcnJlY3RDb3J0ZS1nZUNvc21pcXVlQ29zdHVtZUNvdG9uQ291ZGVDb3VwdXJlQ291cmFnZUNvdXRlYXVDb3V2cmlyQ295b3RlQ3JhYmVDcmFpbnRlQ3JhdmF0ZUNyYXlvbkNyZS9hdHVyZUNyZS9kaXRlckNyZS9tZXV4Q3JldXNlckNyZXZldHRlQ3JpYmxlckNyaWVyQ3Jpc3RhbENyaXRlLXJlQ3JvaXJlQ3JvcXVlckNyb3RhbGVDcnVjaWFsQ3J1ZWxDcnlwdGVyQ3ViaXF1ZUN1ZWlsbGlyQ3VpbGxlLXJlQ3Vpc2luZUN1aXZyZUN1bG1pbmVyQ3VsdGl2ZXJDdW11bGVyQ3VwaWRlQ3VyYXRpZkN1cnNldXJDeWFudXJlQ3ljbGVDeWxpbmRyZUN5bmlxdWVEYWlnbmVyRGFtaWVyRGFuZ2VyRGFuc2V1ckRhdXBoaW5EZS9iYXR0cmVEZS9iaXRlckRlL2JvcmRlckRlL2JyaWRlckRlL2J1dGFudERlL2NhbGVyRGUvY2VtYnJlRGUvY2hpcmVyRGUvY2lkZXJEZS9jbGFyZXJEZS9jb3JlckRlL2NyaXJlRGUvY3VwbGVyRGUvZGFsZURlL2R1Y3RpZkRlL2Vzc2VEZS9mZW5zaWZEZS9maWxlckRlL2ZyYXllckRlL2dhZ2VyRGUvZ2l2cmVyRGUvZ2x1dGlyRGUvZ3JhZmVyRGUvamV1bmVyRGUvbGljZURlL2xvZ2VyRGVtYW5kZXJEZW1ldXJlckRlL21vbGlyRGUvbmljaGVyRGUvbm91ZXJEZW50ZWxsZURlL251ZGVyRGUvcGFydERlL3BlbnNlckRlL3BoYXNlckRlL3BsYWNlckRlL3Bvc2VyRGUvcmFuZ2VyRGUvcm9iZXJEZS9zYXN0cmVEZXNjZW50ZURlL3NlcnREZS9zaWduZXJEZS9zb2JlL2lyRGVzc2luZXJEZXN0cmllckRlL3RhY2hlckRlL3Rlc3RlckRlL3RvdXJlckRlL3RyZXNzZURldmFuY2VyRGV2ZW5pckRldmluZXJEZXZvaXJEaWFibGVEaWFsb2d1ZURpYW1hbnREaWN0ZXJEaWZmZS9yZXJEaWdlL3JlckRpZ2l0YWxEaWduZURpbHVlckRpbWFuY2hlRGltaW51ZXJEaW94eWRlRGlyZWN0aWZEaXJpZ2VyRGlzY3V0ZXJEaXNwb3NlckRpc3NpcGVyRGlzdGFuY2VEaXZlcnRpckRpdmlzZXJEb2NpbGVEb2N0ZXVyRG9nbWVEb2lndERvbWFpbmVEb21pY2lsZURvbXB0ZXJEb25hdGV1ckRvbmpvbkRvbm5lckRvcGFtaW5lRG9ydG9pckRvcnVyZURvc2FnZURvc2V1ckRvc3NpZXJEb3RhdGlvbkRvdWFuaWVyRG91YmxlRG91Y2V1ckRvdXRlckRveWVuRHJhZ29uRHJhcGVyRHJlc3NlckRyaWJibGVyRHJvaXR1cmVEdXBlcmllRHVwbGV4ZUR1cmFibGVEdXJjaXJEeW5hc3RpZUUvYmxvdWlyRS9jYXJ0ZXJFL2NoYXJwZUUvY2hlbGxlRS9jbGFpcmVyRS9jbGlwc2VFL2Nsb3JlRS9jbHVzZUUvY29sZUUvY29ub21pZUUvY29yY2VFL2NvdXRlckUvY3Jhc2VyRS9jcmUvbWVyRS9jcml2YWluRS9jcm91RS9jdW1lRS9jdXJldWlsRS9kaWZpZXJFL2R1cXVlckVmZmFjZXJFZmZlY3RpZkVmZmlnaWVFZmZvcnRFZmZyYXllckVmZnVzaW9uRS9nYWxpc2VyRS9nYXJlckUvamVjdGVyRS9sYWJvcmVyRS9sYXJnaXJFL2xlY3Ryb25FL2xlL2dhbnRFL2xlL3BoYW50RS9sZS12ZUUvbGlnaWJsZUUvbGl0aXNtZUUvbG9nZUUvbHVjaWRlckUvbHVkZXJFbWJhbGxlckVtYmVsbGlyRW1icnlvbkUvbWVyYXVkZUUvbWlzc2lvbkVtbWVuZXJFL21vdGlvbkUvbW91dm9pckVtcGVyZXVyRW1wbG95ZXJFbXBvcnRlckVtcHJpc2VFL211bHNpb25FbmNhZHJlckVuY2hlLXJlRW5jbGF2ZUVuY29jaGVFbmRpZ3VlckVuZG9zc2VyRW5kcm9pdEVuZHVpcmVFL25lcmdpZUVuZmFuY2VFbmZlcm1lckVuZm91aXJFbmdhZ2VyRW5naW5Fbmdsb2JlckUvbmlnbWVFbmphbWJlckVuamV1RW5sZXZlckVubmVtaUVubnV5ZXV4RW5yaWNoaXJFbnJvYmFnZUVuc2VpZ25lRW50YXNzZXJFbnRlbmRyZUVudGllckVudG91cmVyRW50cmF2ZXJFL251bWUvcmVyRW52YWhpckVudmlhYmxlRW52b3llckVuenltZUUvb2xpZW5FL3BhaXNzaXJFL3BhcmduZUUvcGF0YW50RS9wYXVsZUUvcGljZXJpZUUvcGlkZS9taWVFL3BpZXJFL3BpbG9ndWVFL3BpbmVFL3Bpc29kZUUvcGl0YXBoZUUvcG9xdWVFL3ByZXV2ZUUvcHJvdXZlckUvcHVpc2FudEUvcXVlcnJlRS9xdWlwZUUvcmlnZXJFL3Jvc2lvbkVycmV1ckUvcnVwdGlvbkVzY2FsaWVyRXNwYWRvbkVzcGUtY2VFc3BpZS1nbGVFc3BvaXJFc3ByaXRFc3F1aXZlckVzc2F5ZXJFc3NlbmNlRXNzaWV1RXNzb3JlckVzdGltZUVzdG9tYWNFc3RyYWRlRS90YWdlLXJlRS90YWxlckUvdGFuY2hlRS90YXRpcXVlRS90ZWluZHJlRS90ZW5kb2lyRS90ZXJuZWxFL3RoYW5vbEUvdGhpcXVlRXRobmllRS90aXJlckUvdG9mZmVyRS90b2lsZUUvdG9ubmFudEUvdG91cmRpckUvdHJhbmdlRS90cm9pdEUvdHVkZUV1cGhvcmllRS92YWx1ZXJFL3Zhc2lvbkUvdmVudGFpbEUvdmlkZW5jZUUvdml0ZXJFL3ZvbHV0aWZFL3ZvcXVlckV4YWN0RXhhZ2UvcmVyRXhhdWNlckV4Y2VsbGVyRXhjaXRhbnRFeGNsdXNpZkV4Y3VzZUV4ZS9jdXRlckV4ZW1wbGVFeGVyY2VyRXhoYWxlckV4aG9ydGVyRXhpZ2VuY2VFeGlsZXJFeGlzdGVyRXhvdGlxdWVFeHBlL2RpZXJFeHBsb3JlckV4cG9zZXJFeHByaW1lckV4cXVpc0V4dGVuc2lmRXh0cmFpcmVFeHVsdGVyRmFibGVGYWJ1bGV1eEZhY2V0dGVGYWNpbGVGYWN0dXJlRmFpYmxpckZhbGFpc2VGYW1ldXhGYW1pbGxlRmFyY2V1ckZhcmZlbHVGYXJpbmVGYXJvdWNoZUZhc2NpbmVyRmF0YWxGYXRpZ3VlRmF1Y29uRmF1dGlmRmF2ZXVyRmF2b3JpRmUvYnJpbGVGZS9jb25kZXJGZS9kZS9yZXJGZS9saW5GZW1tZUZlL211ckZlbmRvaXJGZS9vZGFsRmVybWVyRmUvcm9jZUZlcnZldXJGZXN0aXZhbEZldWlsbGVGZXV0cmVGZS92cmllckZpYXNjb0ZpY2VsZXJGaWN0aWZGaWRlLWxlRmlndXJlRmlsYXR1cmVGaWxldGFnZUZpbGllLXJlRmlsbGV1bEZpbG1lckZpbG91RmlsdHJlckZpbmFuY2VyRmluaXJGaW9sZUZpcm1lRmlzc3VyZUZpeGVyRmxhaXJlckZsYW1tZUZsYXNxdWVGbGF0dGV1ckZsZS9hdUZsZS1jaGVGbGV1ckZsZXhpb25GbG9jb25GbG9yZUZsdWN0dWVyRmx1aWRlRmx1dmlhbEZvbGllRm9uZGVyaWVGb25naWJsZUZvbnRhaW5lRm9yY2VyRm9yZ2Vyb25Gb3JtdWxlckZvcnR1bmVGb3NzaWxlRm91ZHJlRm91Z2UtcmVGb3VpbGxlckZvdWx1cmVGb3VybWlGcmFnaWxlRnJhaXNlRnJhbmNoaXJGcmFwcGVyRnJheWV1ckZyZS9nYXRlRnJlaW5lckZyZWxvbkZyZS9taXJGcmUvbmUvc2llRnJlLXJlRnJpYWJsZUZyaWN0aW9uRnJpc3NvbkZyaXZvbGVGcm9pZEZyb21hZ2VGcm9udGFsRnJvdHRlckZydWl0RnVnaXRpZkZ1aXRlRnVyZXVyRnVyaWV1eEZ1cnRpZkZ1c2lvbkZ1dHVyR2FnbmVyR2FsYXhpZUdhbGVyaWVHYW1iYWRlckdhcmFudGlyR2FyZGllbkdhcm5pckdhcnJpZ3VlR2F6ZWxsZUdhem9uR2UvYW50R2UvbGF0aW5lR2UvbHVsZUdlbmRhcm1lR2UvbmUvcmFsR2UvbmllR2Vub3VHZW50aWxHZS9vbG9naWVHZS9vbWUtdHJlR2UvcmFuaXVtR2VybWVHZXN0dWVsR2V5c2VyR2liaWVyR2ljbGVyR2lyYWZlR2l2cmVHbGFjZUdsYWl2ZUdsaXNzZXJHbG9iZUdsb2lyZUdsb3JpZXV4R29sZmV1ckdvbW1lR29uZmxlckdvcmdlR29yaWxsZUdvdWRyb25Hb3VmZnJlR291bG90R291cGlsbGVHb3VybWFuZEdvdXR0ZUdyYWR1ZWxHcmFmZml0aUdyYWluZUdyYW5kR3JhcHBpbkdyYXR1aXRHcmF2aXJHcmVuYXRHcmlmZnVyZUdyaWxsZXJHcmltcGVyR3JvZ25lckdyb25kZXJHcm90dGVHcm91cGVHcnVnZXJHcnV0aWVyR3J1eWUtcmVHdWUvcGFyZEd1ZXJyaWVyR3VpZGVHdWltYXV2ZUd1aXRhcmVHdXN0YXRpZkd5bW5hc3RlR3lyb3N0YXRIYWJpdHVkZUhhY2hvaXJIYWx0ZUhhbWVhdUhhbmdhckhhbm5ldG9uSGFyaWNvdEhhcm1vbmllSGFycG9uSGFzYXJkSGUvbGl1bUhlL21hdG9tZUhlcmJlSGUvcmlzc29uSGVybWluZUhlL3JvbkhlL3NpdGVySGV1cmV1eEhpYmVybmVySGlib3VIaWxhcmFudEhpc3RvaXJlSGl2ZXJIb21hcmRIb21tYWdlSG9tb2dlLW5lSG9ubmV1ckhvbm9yZXJIb250ZXV4SG9yZGVIb3Jpem9uSG9ybG9nZUhvcm1vbmVIb3JyaWJsZUhvdWxldXhIb3Vzc2VIdWJsb3RIdWlsZXV4SHVtYWluSHVtYmxlSHVtaWRlSHVtb3VySHVybGVySHlkcm9tZWxIeWdpZS1uZUh5bW5lSHlwbm9zZUlkeWxsZUlnbm9yZXJJZ3VhbmVJbGxpY2l0ZUlsbHVzaW9uSW1hZ2VJbWJpYmVySW1pdGVySW1tZW5zZUltbW9iaWxlSW1tdWFibGVJbXBhY3RJbXBlL3JpYWxJbXBsb3JlckltcG9zZXJJbXByaW1lckltcHV0ZXJJbmNhcm5lckluY2VuZGllSW5jaWRlbnRJbmNsaW5lckluY29sb3JlSW5kZXhlckluZGljZUluZHVjdGlmSW5lL2RpdEluZXB0aWVJbmV4YWN0SW5maW5pSW5mbGlnZXJJbmZvcm1lckluZnVzaW9uSW5nZS9yZXJJbmhhbGVySW5oaWJlckluamVjdGVySW5qdXJlSW5ub2NlbnRJbm9jdWxlcklub25kZXJJbnNjcmlyZUluc2VjdGVJbnNpZ25lSW5zb2xpdGVJbnNwaXJlckluc3RpbmN0SW5zdWx0ZXJJbnRhY3RJbnRlbnNlSW50aW1lSW50cmlndWVJbnR1aXRpZkludXRpbGVJbnZhc2lvbkludmVudGVySW52aXRlckludm9xdWVySXJvbmlxdWVJcnJhZGllcklycmUvZWxJcnJpdGVySXNvbGVySXZvaXJlSXZyZXNzZUphZ3VhckphaWxsaXJKYW1iZUphbnZpZXJKYXJkaW5KYXVnZXJKYXVuZUphdmVsb3RKZXRhYmxlSmV0b25KZXVkaUpldW5lc3NlSm9pbmRyZUpvbmNoZXJKb25nbGVySm91ZXVySm91aXNzaWZKb3VybmFsSm92aWFsSm95YXVKb3lldXhKdWJpbGVySnVnZW1lbnRKdW5pb3JKdXBvbkp1cmlzdGVKdXN0aWNlSnV0ZXV4SnV2ZS9uaWxlS2F5YWtLaW1vbm9LaW9zcXVlTGFiZWxMYWJpYWxMYWJvdXJlckxhY2UvcmVyTGFjdG9zZUxhZ3VuZUxhaW5lTGFpc3NlckxhaXRpZXJMYW1iZWF1TGFtZWxsZUxhbXBlTGFuY2V1ckxhbmdhZ2VMYW50ZXJuZUxhcGluTGFyZ2V1ckxhcm1lTGF1cmllckxhdmFib0xhdm9pckxlY3R1cmVMZS9nYWxMZS9nZXJMZS9ndW1lTGVzc2l2ZUxldHRyZUxldmllckxleGlxdWVMZS96YXJkTGlhc3NlTGliZS9yZXJMaWJyZUxpY2VuY2VMaWNvcm5lTGllLWdlTGllLXZyZUxpZ2F0dXJlTGlnb3RlckxpZ3VlTGltZXJMaW1pdGVMaW1vbmFkZUxpbXBpZGVMaW5lL2FpcmVMaW5nb3RMaW9uY2VhdUxpcXVpZGVMaXNpZS1yZUxpc3RlckxpdGhpdW1MaXRpZ2VMaXR0b3JhbExpdnJldXJMb2dpcXVlTG9pbnRhaW5Mb2lzaXJMb21icmljTG90ZXJpZUxvdWVyTG91cmRMb3V0cmVMb3V2ZUxveWFsTHViaWVMdWNpZGVMdWNyYXRpZkx1ZXVyTHVndWJyZUx1aXNhbnRMdW1pZS1yZUx1bmFpcmVMdW5kaUx1cm9uTHV0dGVyTHV4dWV1eE1hY2hpbmVNYWdhc2luTWFnZW50YU1hZ2lxdWVNYWlncmVNYWlsbG9uTWFpbnRpZW5NYWlyaWVNYWlzb25NYWpvcmVyTWFsYXhlck1hbGUvZmljZU1hbGhldXJNYWxpY2VNYWxsZXR0ZU1hbW1vdXRoTWFuZGF0ZXJNYW5pYWJsZU1hbnF1YW50TWFudGVhdU1hbnVlbE1hcmF0aG9uTWFyYnJlTWFyY2hhbmRNYXJkaU1hcml0aW1lTWFycXVldXJNYXJyb25NYXJ0ZWxlck1hc2NvdHRlTWFzc2lmTWF0ZS9yaWVsTWF0aWUtcmVNYXRyYXF1ZU1hdWRpcmVNYXVzc2FkZU1hdXZlTWF4aW1hbE1lL2NoYW50TWUvY29ubnVNZS9kYWlsbGVNZS9kZWNpbk1lL2RpdGVyTWUvZHVzZU1laWxsZXVyTWUvbGFuZ2VNZS9sb2RpZU1lbWJyZU1lL21vaXJlTWVuYWNlck1lbmVyTWVuaGlyTWVuc29uZ2VNZW50b3JNZXJjcmVkaU1lL3JpdGVNZXJsZU1lc3NhZ2VyTWVzdXJlTWUvdGFsTWUvdGUvb3JlTWUvdGhvZGVNZS90aWVyTWV1YmxlTWlhdWxlck1pY3JvYmVNaWV0dGVNaWdub25NaWdyZXJNaWxpZXVNaWxsaW9uTWltaXF1ZU1pbmNlTWluZS9yYWxNaW5pbWFsTWlub3Jlck1pbnV0ZU1pcmFjbGVNaXJvaXRlck1pc3NpbGVNaXh0ZU1vYmlsZU1vZGVybmVNb2VsbGV1eE1vbmRpYWxNb25pdGV1ck1vbm5haWVNb25vdG9uZU1vbnN0cmVNb250YWduZU1vbnVtZW50TW9xdWV1ck1vcmNlYXVNb3JzdXJlTW9ydGllck1vdGV1ck1vdGlmTW91Y2hlTW91ZmxlTW91bGluTW91c3Nvbk1vdXRvbk1vdXZhbnRNdWx0aXBsZU11bml0aW9uTXVyYWlsbGVNdXJlLW5lTXVybXVyZU11c2NsZU11c2UvdW1NdXNpY2llbk11dGF0aW9uTXV0ZXJNdXR1ZWxNeXJpYWRlTXlydGlsbGVNeXN0ZS1yZU15dGhpcXVlTmFnZXVyTmFwcGVOYXJxdW9pc05hcnJlck5hdGF0aW9uTmF0aW9uTmF0dXJlTmF1ZnJhZ2VOYXV0aXF1ZU5hdmlyZU5lL2J1bGV1eE5lY3Rhck5lL2Zhc3RlTmUvZ2F0aW9uTmUvZ2xpZ2VyTmUvZ29jaWVyTmVpZ2VOZXJ2ZXV4TmV0dG95ZXJOZXVyb25lTmV1dHJvbk5ldmV1TmljaGVOaWNrZWxOaXRyYXRlTml2ZWF1Tm9ibGVOb2NpZk5vY3R1cm5lTm9pcmNldXJOb2lzZXR0ZU5vbWFkZU5vbWJyZXV4Tm9tbWVyTm9ybWF0aWZOb3RhYmxlTm90aWZpZXJOb3RvaXJlTm91cnJpck5vdXZlYXVOb3ZhdGV1ck5vdmVtYnJlTm92aWNlTnVhZ2VOdWFuY2VyTnVpcmVOdWlzaWJsZU51bWUvcm9OdXB0aWFsTnVxdWVOdXRyaXRpZk9iZS9pck9iamVjdGlmT2JsaWdlck9ic2N1ck9ic2VydmVyT2JzdGFjbGVPYnRlbmlyT2J0dXJlck9jY2FzaW9uT2NjdXBlck9jZS9hbk9jdG9icmVPY3Ryb3llck9jdHVwbGVyT2N1bGFpcmVPZGV1ck9kb3JhbnRPZmZlbnNlck9mZmljaWVyT2ZmcmlyT2dpdmVPaXNlYXVPaXNpbGxvbk9sZmFjdGlmT2xpdmllck9tYnJhZ2VPbWV0dHJlT25jdHVldXhPbmR1bGVyT25lL3JldXhPbmlyaXF1ZU9wYWxlT3BhcXVlT3BlL3Jlck9waW5pb25PcHBvcnR1bk9wcHJpbWVyT3B0ZXJPcHRpcXVlT3JhZ2V1eE9yYW5nZU9yYml0ZU9yZG9ubmVyT3JlaWxsZU9yZ2FuZU9yZ3VlaWxPcmlmaWNlT3JuZW1lbnRPcnF1ZU9ydGllT3NjaWxsZXJPc21vc2VPc3NhdHVyZU90YXJpZU91cmFnYW5PdXJzb25PdXRpbE91dHJhZ2VyT3V2cmFnZU92YXRpb25PeHlkZU94eWdlLW5lT3pvbmVQYWlzaWJsZVBhbGFjZVBhbG1hcmUtc1BhbG91cmRlUGFscGVyUGFuYWNoZVBhbmRhUGFuZ29saW5QYW5pcXVlclBhbm5lYXVQYW5vcmFtYVBhbnRhbG9uUGFwYXllUGFwaWVyUGFwb3RlclBhcHlydXNQYXJhZG94ZVBhcmNlbGxlUGFyZXNzZVBhcmZ1bWVyUGFybGVyUGFyb2xlUGFycmFpblBhcnNlbWVyUGFydGFnZXJQYXJ1cmVQYXJ2ZW5pclBhc3Npb25QYXN0ZS1xdWVQYXRlcm5lbFBhdGllbmNlUGF0cm9uUGF2aWxsb25QYXZvaXNlclBheWVyUGF5c2FnZVBlaWduZVBlaW50cmVQZWxhZ2VQZS9saWNhblBlbGxlUGVsb3VzZVBlbHVjaGVQZW5kdWxlUGUvbmUvdHJlclBlL25pYmxlUGVuc2lmUGUvbnVyaWVQZS9waXRlUGUvcGx1bVBlcmRyaXhQZXJmb3JlclBlL3Jpb2RlUGVybXV0ZXJQZXJwbGV4ZVBlcnNpbFBlcnRlUGVzZXJQZS90YWxlUGV0aXRQZS90cmlyUGV1cGxlUGhhcmFvblBob2JpZVBob3F1ZVBob3RvblBocmFzZVBoeXNpcXVlUGlhbm9QaWN0dXJhbFBpZS1jZVBpZXJyZVBpZXV2cmVQaWxvdGVQaW5jZWF1UGlwZXR0ZVBpcXVlclBpcm9ndWVQaXNjaW5lUGlzdG9uUGl2b3RlclBpeGVsUGl6emFQbGFjYXJkUGxhZm9uZFBsYWlzaXJQbGFuZXJQbGFxdWVQbGFzdHJvblBsYXRlYXVQbGV1cmVyUGxleHVzUGxpYWdlUGxvbWJQbG9uZ2VyUGx1aWVQbHVtYWdlUG9jaGV0dGVQb2Uvc2llUG9lLXRlUG9pbnRlUG9pcmllclBvaXNzb25Qb2l2cmVQb2xhaXJlUG9saWNpZXJQb2xsZW5Qb2x5Z29uZVBvbW1hZGVQb21waWVyUG9uY3R1ZWxQb25kZS9yZXJQb25leVBvcnRpcXVlUG9zaXRpb25Qb3NzZS9kZXJQb3N0dXJlUG90YWdlclBvdGVhdVBvdGlvblBvdWNlUG91bGFpblBvdW1vblBvdXJwcmVQb3Vzc2luUG91dm9pclByYWlyaWVQcmF0aXF1ZVByZS9jaWV1eFByZS9kaXJlUHJlL2ZpeGVQcmUvbHVkZVByZS9ub21QcmUvc2VuY2VQcmUvdGV4dGVQcmUvdm9pclByaW1pdGlmUHJpbmNlUHJpc29uUHJpdmVyUHJvYmxlLW1lUHJvY2UvZGVyUHJvZGlnZVByb2ZvbmRQcm9ncmUtc1Byb2llUHJvamV0ZXJQcm9sb2d1ZVByb21lbmVyUHJvcHJlUHJvc3BlLXJlUHJvdGUvZ2VyUHJvdWVzc2VQcm92ZXJiZVBydWRlbmNlUHJ1bmVhdVBzeWNob3NlUHVibGljUHVjZXJvblB1aXNlclB1bHBlUHVsc2FyUHVuYWlzZVB1bml0aWZQdXBpdHJlUHVyaWZpZXJQdXp6bGVQeXJhbWlkZVF1YXNhclF1ZXJlbGxlUXVlc3Rpb25RdWllL3R1ZGVRdWl0dGVyUXVvdGllbnRSYWNpbmVSYWNvbnRlclJhZGlldXhSYWdvbmRpblJhaWRldXJSYWlzaW5SYWxlbnRpclJhbGxvbmdlUmFtYXNzZXJSYXBpZGVSYXNhZ2VSYXRpc3NlclJhdmFnZXJSYXZpblJheW9ubmVyUmUvYWN0aWZSZS9hZ2lyUmUvYWxpc2VyUmUvYW5pbWVyUmVjZXZvaXJSZS9jaXRlclJlL2NsYW1lclJlL2NvbHRlclJlY3J1dGVyUmVjdWxlclJlY3ljbGVyUmUvZGlnZXJSZWRvdXRlclJlZmFpcmVSZS9mbGV4ZVJlL2Zvcm1lclJlZnJhaW5SZWZ1Z2VSZS9nYWxpZW5SZS9naW9uUmUvZ2xhZ2VSZS9ndWxpZXJSZS9pdGUvcmVyUmVqZXRlclJlam91ZXJSZWxhdGlmUmVsZXZlclJlbGllZlJlbWFycXVlUmVtZS1kZVJlbWlzZVJlbW9udGVyUmVtcGxpclJlbXVlclJlbmFyZFJlbmZvcnRSZW5pZmxlclJlbm9uY2VyUmVudHJlclJlbnZvaVJlcGxpZXJSZXBvcnRlclJlcHJpc2VSZXB0aWxlUmVxdWluUmUvc2VydmVSZS9zaW5ldXhSZS9zb3VkcmVSZXNwZWN0UmVzdGVyUmUvc3VsdGF0UmUvdGFibGlyUmV0ZW5pclJlL3RpY3VsZVJldG9tYmVyUmV0cmFjZXJSZS91bmlvblJlL3Vzc2lyUmV2YW5jaGVSZXZpdnJlUmUvdm9sdGVSZS92dWxzaWZSaWNoZXNzZVJpZGVhdVJpZXVyUmlnaWRlUmlnb2xlclJpbmNlclJpcG9zdGVyUmlzaWJsZVJpc3F1ZVJpdHVlbFJpdmFsUml2aWUtcmVSb2NoZXV4Um9tYW5jZVJvbXByZVJvbmNlUm9uZGluUm9zZWF1Um9zaWVyUm90YXRpZlJvdG9yUm90dWxlUm91Z2VSb3VpbGxlUm91bGVhdVJvdXRpbmVSb3lhdW1lUnViYW5SdWJpc1J1Y2hlUnVlbGxlUnVndWV1eFJ1aW5lclJ1aXNzZWF1UnVzZXJSdXN0aXF1ZVJ5dGhtZVNhYmxlclNhYm90ZXJTYWJyZVNhY29jaGVTYWZhcmlTYWdlc3NlU2Fpc2lyU2FsYWRlU2FsaXZlU2Fsb25TYWx1ZXJTYW1lZGlTYW5jdGlvblNhbmdsaWVyU2FyY2FzbWVTYXJkaW5lU2F0dXJlclNhdWdyZW51U2F1bW9uU2F1dGVyU2F1dmFnZVNhdmFudFNhdm9ubmVyU2NhbHBlbFNjYW5kYWxlU2NlL2xlL3JhdFNjZS9uYXJpb1NjZXB0cmVTY2hlL21hU2NpZW5jZVNjaW5kZXJTY29yZVNjcnV0aW5TY3VscHRlclNlL2FuY2VTZS9jYWJsZVNlL2NoZXJTZWNvdWVyU2UvY3JlL3RlclNlL2RhdGlmU2UvZHVpcmVTZWlnbmV1clNlL2pvdXJTZS9sZWN0aWZTZW1haW5lU2VtYmxlclNlbWVuY2VTZS9taW5hbFNlL25hdGV1clNlbnNpYmxlU2VudGVuY2VTZS9wYXJlclNlL3F1ZW5jZVNlcmVpblNlcmdlbnRTZS9yaWV1eFNlcnJ1cmVTZS9ydW1TZXJ2aWNlU2Uvc2FtZVNlL3ZpclNldnJhZ2VTZXh0dXBsZVNpZGUvcmFsU2llLWNsZVNpZS9nZXJTaWZmbGVyU2lnbGVTaWduYWxTaWxlbmNlU2lsaWNpdW1TaW1wbGVTaW5jZS1yZVNpbmlzdHJlU2lwaG9uU2lyb3BTaXNtaXF1ZVNpdHVlclNraWVyU29jaWFsU29jbGVTb2RpdW1Tb2lnbmV1eFNvbGRhdFNvbGVpbFNvbGl0dWRlU29sdWJsZVNvbWJyZVNvbW1laWxTb21ub2xlclNvbmRlU29uZ2V1clNvbm5ldHRlU29ub3JlU29yY2llclNvcnRpclNvc2llU290dGlzZVNvdWNpZXV4U291ZHVyZVNvdWZmbGVTb3VsZXZlclNvdXBhcGVTb3VyY2VTb3V0aXJlclNvdXZlbmlyU3BhY2lldXhTcGF0aWFsU3BlL2NpYWxTcGhlLXJlU3BpcmFsU3RhYmxlU3RhdGlvblN0ZXJudW1TdGltdWx1c1N0aXB1bGVyU3RyaWN0U3R1ZGlldXhTdHVwZXVyU3R5bGlzdGVTdWJsaW1lU3Vic3RyYXRTdWJ0aWxTdWJ2ZW5pclN1Y2NlLXNTdWNyZVN1ZmZpeGVTdWdnZS9yZXJTdWl2ZXVyU3VsZmF0ZVN1cGVyYmVTdXBwbGllclN1cmZhY2VTdXJpY2F0ZVN1cm1lbmVyU3VycHJpc2VTdXJzYXV0U3VydmllU3VzcGVjdFN5bGxhYmVTeW1ib2xlU3ltZS90cmllU3luYXBzZVN5bnRheGVTeXN0ZS1tZVRhYmFjVGFibGllclRhY3RpbGVUYWlsbGVyVGFsZW50VGFsaXNtYW5UYWxvbm5lclRhbWJvdXJUYW1pc2VyVGFuZ2libGVUYXBpc1RhcXVpbmVyVGFyZGVyVGFyaWZUYXJ0aW5lVGFzc2VUYXRhbWlUYXRvdWFnZVRhdXBlVGF1cmVhdVRheGVyVGUvbW9pblRlbXBvcmVsVGVuYWlsbGVUZW5kcmVUZW5ldXJUZW5pclRlbnNpb25UZXJtaW5lclRlcm5lVGVycmlibGVUZS90aW5lVGV4dGVUaGUtbWVUaGUvb3JpZVRoZS9yYXBpZVRob3JheFRpYmlhVGllLWRlVGltaWRlVGlyZWxpcmVUaXJvaXJUaXNzdVRpdGFuZVRpdHJlVGl0dWJlclRvYm9nZ2FuVG9sZS9yYW50VG9tYXRlVG9uaXF1ZVRvbm5lYXVUb3BvbnltZVRvcmNoZVRvcmRyZVRvcm5hZGVUb3JwaWxsZVRvcnJlbnRUb3JzZVRvcnR1ZVRvdGVtVG91Y2hlclRvdXJuYWdlVG91c3NlclRveGluZVRyYWN0aW9uVHJhZmljVHJhZ2lxdWVUcmFoaXJUcmFpblRyYW5jaGVyVHJhdmFpbFRyZS1mbGVUcmVtcGVyVHJlL3NvclRyZXVpbFRyaWFnZVRyaWJ1bmFsVHJpY290ZXJUcmlsb2dpZVRyaW9tcGhlVHJpcGxlclRyaXR1cmVyVHJpdmlhbFRyb21ib25lVHJvbmNUcm9waWNhbFRyb3VwZWF1VHVpbGVUdWxpcGVUdW11bHRlVHVubmVsVHVyYmluZVR1dGV1clR1dG95ZXJUdXlhdVR5bXBhblR5cGhvblR5cGlxdWVUeXJhblVidWVzcXVlVWx0aW1lVWx0cmFzb25VbmFuaW1lVW5pZmllclVuaW9uVW5pcXVlVW5pdGFpcmVVbml2ZXJzVXJhbml1bVVyYmFpblVydGljYW50VXNhZ2VVc2luZVVzdWVsVXN1cmVVdGlsZVV0b3BpZVZhY2FybWVWYWNjaW5WYWdhYm9uZFZhZ3VlVmFpbGxhbnRWYWluY3JlVmFpc3NlYXVWYWxhYmxlVmFsaXNlVmFsbG9uVmFsdmVWYW1waXJlVmFuaWxsZVZhcGV1clZhcmllclZhc2V1eFZhc3NhbFZhc3RlVmVjdGV1clZlZGV0dGVWZS9nZS90YWxWZS9oaWN1bGVWZWluYXJkVmUvbG9jZVZlbmRyZWRpVmUvbmUvcmVyVmVuZ2VyVmVuaW1ldXhWZW50b3VzZVZlcmR1cmVWZS9yaW5WZXJuaXJWZXJyb3VWZXJzZXJWZXJ0dVZlc3RvblZlL3RlL3JhblZlL3R1c3RlVmV4YW50VmV4ZXJWaWFkdWNWaWFuZGVWaWN0b2lyZVZpZGFuZ2VWaWRlL29WaWduZXR0ZVZpZ3VldXJWaWxhaW5WaWxsYWdlVmluYWlncmVWaW9sb25WaXBlLXJlVmlyZW1lbnRWaXJ0dW9zZVZpcnVzVmlzYWdlVmlzZXVyVmlzaW9uVmlzcXVldXhWaXN1ZWxWaXRhbFZpdGVzc2VWaXRpY29sZVZpdHJpbmVWaXZhY2VWaXZpcGFyZVZvY2F0aW9uVm9ndWVyVm9pbGVWb2lzaW5Wb2l0dXJlVm9sYWlsbGVWb2xjYW5Wb2x0aWdlclZvbHVtZVZvcmFjZVZvcnRleFZvdGVyVm91bG9pclZveWFnZVZveWVsbGVXYWdvblhlL25vbllhY2h0WmUtYnJlWmUvbml0aFplc3RlWm9vbG9naWVcIjtsZXQgd29yZGxpc3QkMz1udWxsO2NvbnN0IGxvb2t1cCQxPXt9O2Z1bmN0aW9uIGRyb3BEaWFjcml0aWMkMSh3b3JkKXtsb2dnZXIkay5jaGVja05vcm1hbGl6ZSgpO3JldHVybiB0b1V0ZjhTdHJpbmcoQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHRvVXRmOEJ5dGVzKHdvcmQubm9ybWFsaXplKFwiTkZEXCIpLnRvTG93ZXJDYXNlKCkpLGM9PntyZXR1cm4gYz49NjUmJmM8PTkwfHxjPj05NyYmYzw9MTIzfSkpfWZ1bmN0aW9uIGV4cGFuZCQxKHdvcmQpe2NvbnN0IG91dHB1dD1bXTtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRvVXRmOEJ5dGVzKHdvcmQpLGM9PntpZihjPT09NDcpe291dHB1dC5wdXNoKDIwNCk7b3V0cHV0LnB1c2goMTI5KX1lbHNlIGlmKGM9PT00NSl7b3V0cHV0LnB1c2goMjA0KTtvdXRwdXQucHVzaCgxMjgpfWVsc2V7b3V0cHV0LnB1c2goYyl9fSk7cmV0dXJuIHRvVXRmOFN0cmluZyhvdXRwdXQpfWZ1bmN0aW9uIGxvYWRXb3JkcyQzKGxhbmcpe2lmKHdvcmRsaXN0JDMhPW51bGwpe3JldHVybn13b3JkbGlzdCQzPXdvcmRzJDMucmVwbGFjZSgvKFtBLVpdKS9nLFwiICQxXCIpLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDEpLnNwbGl0KFwiIFwiKS5tYXAodz0+ZXhwYW5kJDEodykpO3dvcmRsaXN0JDMuZm9yRWFjaCgod29yZCxpbmRleCk9Pntsb29rdXAkMVtkcm9wRGlhY3JpdGljJDEod29yZCldPWluZGV4fSk7aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4NTFkZWI3YWUwMDkxNDlkYzYxYTZiZDE4YTkxOGViN2FjNzhkMjc3NTcyNmM2OGU1OThiOTJkMDAyNTE5YjA0NVwiKXt3b3JkbGlzdCQzPW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGZyIChGcmVuY2gpIEZBSUxFRFwiKX19Y2xhc3MgTGFuZ0ZyIGV4dGVuZHMgV29yZGxpc3R7Y29uc3RydWN0b3IoKXtzdXBlcihcImZyXCIpfWdldFdvcmQoaW5kZXgpe2xvYWRXb3JkcyQzKHRoaXMpO3JldHVybiB3b3JkbGlzdCQzW2luZGV4XX1nZXRXb3JkSW5kZXgod29yZCl7bG9hZFdvcmRzJDModGhpcyk7cmV0dXJuIGxvb2t1cCQxW2Ryb3BEaWFjcml0aWMkMSh3b3JkKV19fWNvbnN0IGxhbmdGcj1uZXcgTGFuZ0ZyO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdGcik7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgZGF0YT1bXCJBUVJBU1JBR0JBR1VBSVJBSEJBZ2hBVVJBZEJBZGNBbm9BTUVBRkJBRkNCS0ZCUVJCU0ZCQ1hCQ0RCQ0hCR0ZCRVFCcEJCcFFCSWtCSE5CZU9CZ0ZCVkNCaEJCaE5CbU9CbVJCaUhCaUZCVUZCWkRCdkZCc1hCa0ZCbGNCallCd0RCTUJCVEJCVFJCV0JCV1hYYVFYYVJYUVdYU1JYQ0ZYWUJYcEhYT1FYSFJYaFJYdVJYbVhYYlJYbFhYd0RYVFJYckNYV1FYV0dhQldhS2NhWWdhc0ZhZFFhbG1hTUJhY0FLYVJLS0JLS1hLS2pLUVJLRFJLQ1lLQ1JLSURLZVZLSGNLbFhLakhLcllOQUhOQldOYVJOS2NOSUJOSU9ObVhOc1hOZFhObkJOTUJOUkJOclhOV0ROV01ORk9RQUJRQUhRQnJRWEJRWEZRYVJRS1hRS0RRS09RS0ZRTkJRTkRRUWdRQ1hRQ0RRR0JRR0RRR2RRWVhRcEJRcFFRcEhRTFhRSHVRZ0JRaEJRaENRdUZRbVhRaURRVUZRWkRRc0ZRZFJRa0hRYlJRbE9RbG1RUERRakRRd1hRTUJRTURRY0ZRVEJRVEhRckREWFFETkZER0JER1FER1JEcEZEaEZEbVhEWlhEYlJETVlEUmREVFJEclhTQWhTQkNTQnJTR1FTRVFTSEJTVlJTaFlTaGtTeVFTdUZTaUJTZGNTb0VTb2NTbG1TTUJTRkJTRktTRk5TRmRTRmNDQnlDYVJDS2NDU0JDU1JDQ3JDR2JDRUhDWVhDcEJDcFFDSUJDSUhDZU5DZ0JDZ0ZDVkVDVmNDbWtDbXdDWlhDWkZDZFJDbE9DbG1DbEZDakRDamRDblhDd0JDd1hDY1JDRlFDRmpHWGhHTmhHREVHRE1HQ0RHQ0hHSUZHZ0JHVlhHVkVHVlJHbVhHc1hHZFlHb1NHYlJHblhHd1hHd0RHV1JHRk5HRkxHRk9HRmRHRmtFQUJFQkRFQkZFWE9FYUJFS1NFTkJFTkRFWVhFSWdFSWtFZ0JFZ1FFZ0hFaEZFdWRFdUZFaUJFaUhFaUZFWkRFdkJFc1hFc0ZFZFhFZFJFa0ZFYkJFYlJFbEZFUENFZmtFRk5ZQUVZQWhZQk5ZUWRZRFhZU1JZQ0VZWW9ZZ1FZZ1JZdVJZbUNZWlRZZEJZYkVZbFhZalFZUmJZV1JwS1hwUW9wUW5wU0ZwQ1hwSUJwSVNwaE5wZEJwZFJwYlJwY1pwRkJwRk5wRkRwRm9wRnJMQURMQnVMWFFMWGNMYUZMQ1hMRWhMcEJMcEZMSFhMZVZMaElMZEhMZFJMb0RMYlJMclhJQUJJQlFJQkNJQnNJQm9JQk1JQlJJWGFJYVJJS1lJS1JJTkJJTnVJQ0RJR0JJSURJSWtJZ1JJeEZJeVFJaUhJZFJJYllJYlJJbEhJd1JJTVlJY1JJUlZJVFJJRkJJRk5JRlFPQUJPQUZPQlFPYUZPTkJPTk1PUUZPU0ZPQ0RPR0JPRVFPcEJPTFhPSUJPSUZPZ1FPZ0ZPeVFPeWNPbVhPc1hPZElPa0hPTUVPTWtPV1dIQk5IWE5IWFdITlhIRHVIRFJIU3VIU1JISG9IaGtIbVJIZFJIa1FIbGNIbFJId0JIV2NnQUVnQWdnQWtnQk5nQlFnQkVnWE9nWWNnTFhnSGpneVFnaUJnc0ZnZGFnTVlnV1NnRlFnRkVWQlRWWEVWS0JWS05WS0RWS1lWS1JWTkJWTllWREJWRHhWU0JWU1JWQ2pWR05WTFhWSUZWaEJWaGNWc1hWZFJWYlJWbFJoQlloS1loRFloR1NoeFdobU5oZGFoZGtoYlJoam9oTVhoVFJ4QVh4WFN4S0J4TkJ4RVF4ZU54ZVF4aFh4c0Z4ZGJ4bEh4amN4RkJ4Rk54RlF4Rk94Rm95Tll5WW95YmN5TVl1QlF1QlJ1QnJ1RE11Q291SEJ1ZFF1a2t1b0J1bFZ1TVh1RkVtQ1ltQ1JtcFJtZURtaU1tamRtVEZtRlFpQURpQk9pYVJpS1JpTkJpTlJpU0ZpR2tpR0ZpRVJpcFJpTEZpSUZpaFlpYkhpakJpakVpTVhpV0JpRkJpRkNVQlFVWEZVYVJVTkRVTmNVTlJVTkZVREJVU0hVQ0RVR0JVR0ZVRXFVTE5VTG9VSVJVZUVVZVlVZ0JVaEZVdVJVaUZVc1hVZEZVa0hVYkJValNVallVd1hVTURVY0hVUmRVVEJVckJVclhVclFaQUZaWFpaYVJaS0ZaTkJaUUZaQ1haR0JaWWRacEJaTERaSUZaSFhaSE5aZVFaVlJaVkZabVhaaUJadkZaZEZaa0ZaYkhaYkZad1haY0NaY1JaUkJ2QlF2Qkd2Qkx2Qld2Q292TVlzQUZzQkRzYVJzS0ZzTkZzRHJzU0hzU0ZzQ1hzQ1JzRUJzRUhzRWZzcEJzTEJzTERzSWdzSVJzZUdzYlJzRkJzRlFzRlNkTkJkU1JkQ1ZkR0hkWURkSGNkVmJkeVNkdURkc1hkbFJkd1hkV1lkV2NkV1JrQk1rWE9rYVJrTklrTkZrU0ZrQ0ZrWUJrcFJrZU5rZ0JraFZrbVhrc0ZrbFZrTUJrV0RrRk5vQk5vYVFvYUZvTkJvTlhvTmFvTkVvU1JvRXJvWVhvWUNvWWJvcFJvcEZvbVhvamtvd1hvckZiQkViRUliZEJiallsYVJsREVsTVhsRkRqS2pqU1JqR0JqWUJqWWtqcFJqTFhqSUJqT0ZqZVZqYlJqd0JuWFFuU0hucEZuTFhuSU5uTUJuVFJ3WEJ3WE53WFl3TkZ3UUZ3U0J3R0Z3TFh3TER3ZU53Z0J3dUh3akR3blhNQlhNcEZNSUJNZU5NVEhjYVFjTkJjREhjU0ZjQ1hjcEJjTFhjTERjZ0ZjdUZjblhjd1hjY0RjVFFjckZUUUVyWE5yQ0hycEZyZ0ZyYkZyVEhyRmNXTllXTmJXRUhXTVhXVFJcIixcIkFCR0hBQklKQUVBVkFZSlFBTFpKQUlhUkFITlhBSGRjQUhiUkFaSk1BWkpSQVpUUkFkVkpBa2xtQWJjTkFqZFJBTW5SQU1XWUFXcFJBV2dSQUZnQkFGaEJBRmRjQk5KQkJOSkRCUUtCQlFoY0JRbG1CREVKQllKa0JZSlRCcE5CQnBKRkJJSkJCSUpEQkljQUJPS1hCT0VKQk9WSkJPaUpCT1pKQmVwQkJlTFhCZUlGQmVnQkJnR0pCVkpYQnVvY0JpSlJCVUpRQmxYVkJsSVRCd05GQk1ZVkJjcVhCVGxtQldORkJXaUpCV25SQkZHSEJGd1hYS0dKWE5KQlhOWkpYRFRUWFNIU1hTVlJYU2xIWENKRFhHUUpYRWhYWFlRSlhZYlJYT2ZYWGVOY1hWSkZYaFFKWGhFSlhkVFJYamRYWE1oQlhjUVRYUkdCWFRFQlhUblFYRkNYWEZPRlhGZ0ZhQmFGYUJOSmFCQ0phQnBCYUJ3WGFOSkthTkpEYVFJQmFEcFJhRVBEYUhNRmFtREphbEVKYU1aSmFGYUZhRk5CYUZRSmFGTERhRlZIS0JDWUtCRUJLQkhES1hhRktYR2RLWEVKS1hwSEtYSUJLWFpES1h3WEtLd0xLTmFjS05ZSktOSm9LTldjS0RHZEtEVFJLQ2hYS0dhUktHaEJLR2JSS0VCVEtFYVJLRVBUS0xNREtMV1JLT0hES1ZKY0tkQmNLbElCS2xPUEtGU0JLRkVQS0ZwRk5CTkpOSkJRTkJHSE5CRVBOQkhYTkJnRk5CVlhOQlpETkJzWE5Cd1hOTmFSTk5KRE5OSkVOTkprTkRDSk5EVkROR0pSTkppRE5aSk5Oc0NKTkpGTk5GU0JORkNYTkZFUE5GTFhORklGUUpCRlFDYVJRSkVRUUxKRFFMSkZRSWFSUU9xWFFIYUZRSEhRUVZKWFFWSkRRaE5KUW1FSVFaSkZRc0pYUUpyRlFXYlJESkFCREJZSkRYTkZEWENYRFhMWERYWkREWHNKRFFxWERTSkZESkNYREVQa0RFcVhEWW1RRHBTSkRPQ2tET0dRREhFSURWSkREdUR1RFdFQkRKRmdTQk5EU0JTRlNCR0hTQklCU0JUUVNLVllTSlFOU0pRaVNKQ1hTRXFYU0pZVlNJaUpTT01ZU0hBSFNIYVFTZUNGU2VwUVNlZ0JTSGRIU0hyRlNoU0pTSnVIU0pVRlNrTlJTclNyU1dFQlNGYUhTSkZRU0ZDWFNGR0RTRllYU0ZPRFNGZ0JTRlZYU0ZoQlNGeEZTRmtGU0ZiQlNGTUZDQURkQ0pYQkNYYUZDWEtGQ1hORkNYQ1hDWEdCQ1hFSkNYWUJDWExEQ1hJQkNYT1BDWEhYQ1hnQkNYaEJDWGlCQ1hsRENYY0hDSk5CQ0pORkNEQ0pDREdCQ0RWWENEaEJDRGlEQ0RKZENDbU5DcEpGQ0lhUkNPcVhDSENIQ0haSkNWaUpDdUN1Q21kZENKaUZDZE5CQ2RIaENsRUpDblVKQ3JlU0NXbGdDV1RSQ0ZCRkNGTkJDRllCQ0ZWRkNGaEZDRmRTQ0ZUQkNGV0RHQk5CR0JRRkdKQkNHQkVxR0JwQkdCZ1FHTkJFR05KWUdOa09HTkpSR0RVRkdKcFFHSGFCR0plTkdKZUVHVkJsR1ZLakdpSkRHdkpIR3NWSkdrRUJHTUlKR1dqTkdGQkZHRkNYR0ZHQkdGWVhHRnBCR0ZNRkVBU0pFQVdwRUpORkVDSlZFSVhTRUlRSkVPcVhFT2NGRWVOY0VIRUpFSGxGRUpnRkVobG1FbURKRW1aSkVpTUJFVXFYRW9TUkVQQkZFUFhGRVBLRkVQU0ZFUEVGRVBwRkVQTFhFUElCRUpQZEVQY0ZFUFRCRUpuWEVxbEhFTXBSRUZDWEVGT0RFRmNGWUFTSllKQUZZQmFCWUJWWFlYcEZZRGhCWUNKQllKR0ZZWWJSWWVOY1lKZVZZaUlKWVpKY1l2SmdZdkpSWUpzWFlzSkZZTVlNWXJlVnBCTkhwQkVKcEJ3WHBReEZwWUVKcGVORHBKZURwZVNGcGVDSHBIVUpwSGJCcEhjSHBtVUpwaWlKcFVKcnBzSnVwbElUcEZhQnBGUXFwRkdCcEZFZnBGWUJwRnBCcEZMSnBGSURwRmdCcEZWWHBGeVFwRnVGcEZsRnBGakRwRm5YcEZ3WHBKRk1wRlRCTFhDSkxYRUZMWGhGTFhVSkxYYkZMYWxtTE5KQkxTSlFMQ0xDTEdKQkxMREpMSGFGTGVORkxlU0hMZUNYTGVwRkxoYVJMWnNKTHNKRExzSnJMb2NhTGxMbExNZGJMRk5CTEZTQkxGRUhMRmtGSUJCRklCWEZJQmFRSUJLWElCU0ZJQnBISUJMWElCZ0JJQmhCSUJ1SElCbVhJQmlGSUJaWElCdkZJQmJGSUJqUUlCd1hJQldGSUtUUklRVUpJREdGSUNqUUlZU1JJSU5YSUplQ0lWYVJJbUVrSVpKRkl2SlJJc0pYSWRDSklKb1JJYkJRSWpZQkljcVhJVEZWSXJlVklGS0ZJRlNGSUZDSklGR0ZJRkxESUZJQklKRk9JRmdCSUZWWElKRmhJRnhGSUZtWElGZEhJRmJCSUpGcklKRldPQkdCT1FmWE9PS2pPVXFYT2ZYQk9xWEVPY3FYT1JWSk9GSUJPRmxESEJJT0hYaUZITlRSSENKWEhJYVJISEpESEhFSkhWYlJIWkpZSGJJQkhSc0pIUmtESFdsbWdCS0ZnQlNCZ0JDRGdCR0hnQnBCZ0JJQmdCVkpnQnVCZ0J2RmdLRFRnUVZYZ0RVSmdHU0pnT3FYZ21VTWdaSUpnVFVKZ1dJRWdGQkZnRk5CZ0ZESmdGU0ZnRkdCZ0ZZWGdKRk9nRmdRZ0ZWWGdGaEJnRmJIZ0pGV1ZKQUJWUUtjVkRnRlZPZlhWZURGVmhhUlZtR2RWaUpZVk1hUlZGTkhoQk5EaEJDWGhCRXFoQnBGaEJMWGhOSkJoU0pSaGVWWGhoS0VoeGxtaFpJSmhkQlFoa0lKaGJNTmhNVUpoTVpKeE5KZ3hRVUp4REVreERkRnhTSlJ4cGxteGVTQnhlQ1h4ZUdGeGVZWHhlcFF4ZWdCeFdWY3hGRVF4RkxYeEZJQnhGZ0J4RnhEeEZadHhGZGN4RmJCeEZ3WHlESlh5RGxjdUFTSnVESnB1RElCdUNwSnVHU0p1SUpGdWVFRnVaSUp1c0pYdWRXRXVvSUJ1V0dKdUZCY3VGS0V1Rk5GdUZRRnVGREp1RkdKdUZWSnVGVXR1RmRIdUZUQm1CWUptTkpZbVFoa21MSkRtTEpvbUlkWG1pSlltdkpSbXNKUm1rbG1tTUJ5bU11Q21jbG1tY25RaUpBQmlKQk5pSkJEaUJTRmlCQ0ppQkVGaUJZQmlCcEZpQkxYaUJUSGlKTmNpREVmaUNaSmlFQ0ppSkVxaU9rSGlIS0ZpZU5EaUhKUWllUWNpZURIaWVTRmllQ1hpZUdGaWVFRmllSUhpZWdGaWhVSml4Tm9pb05YaUZhQmlGS0ZpRk5EaUZFUGlGWVhpdEZPaXRGSGlGZ0JpRlZFaUZtWGlGaXRpRmJCaUZNRmlGckZVQ1hRVUlvUVVJSmNVSFFKVWVDRVVId1hVVUpEVVVxWFVkV2NVY3FYVXJuUVVGTkRVRlNIVUZDRlVGRWZVRkxYVXRGT1pCWE9aWFNCWlhwRlpYVlhaRVFKWkVKa1pwREpaT3FYWmVOSFplQ0RaVXFYWkZCUVpGRUhaRkxYdkJBRnZCS0Z2QkNYdkJFUHZCcEh2QklEdkJnRnZCdUh2UU5KdkZORnZGR0J2RklCdkpGY3NYQ0RzWExYc1hzWHNYbEZzWGNIc1FxWHNKUUZzRXFYc2VJRnNGRUhzRmpEZEJ4T2ROcFJkTkpSZEVKYmRwSlJkaFpKZG5TSmRyak5kRk5KZEZRSGRGaE5rTkpEa1lhUmtITlJrSFNSa1ZiUmt1TVJralNKa2NxRG9TSkZvRWlKb1laSm9PZlhvaEVCb01HUW9jcVhiQkFGYkJYRmJCYUZiQk5EYkJHQmJCTFhiQlRCYkJXRGJHSlliSUpIYkZRcWJGcFFsRGdRbE9yRmxWSlJqR0VCalpKUm5YdkpuWGJCbkVmSG5PUERuZ0pSbnhmWG5VSld3WEVKd05wSndEcEJ3RWZYd3JFQk1EQ0pNREdITURJSk1MSkRjUUdEY1FwSGNxWGNjcU5GY3FDWGNGQ0pSQlNCUkJHQlJCRUpSQnBRVEJORlRCUUpUQnBCVEJWWFRGQUJURlNCVEZDRlRGR0JURk1EclhDSnJYTERyRE5KckVmSHJGUUpyRml0V05qZFdOVFJcIixcIkFLTEpNQU5PUEZBU05KSUFFSldYQVlKTlJBSUliUkFJY2RhQWVFZkRBZ2lkUkFkak5ZQU1ZRUpBTUliUkFGTkpCQUZwSkZCQklKWUJEWkpGQlNpSmhCR2RFQkJFSmZYQkVKcVhCRUpXUkJwYVVKQkxYclhCSVlKTUJPY2ZYQmVFZkZCZXN0WEJqTkpSQmNESk9CRkVxWFhOdkpSWERNQmhYQ0pOWVhPQVdwWE9OSldYSERFQlhlSWFSWGhZSkRYWkpTSlhNREpPWGNBU0pYRlZKWGFCUXFYYUJaSkZhc1hkUWFGU0pRYUZFZlhhRnBKSGFGT3FYS0JOU1JLWHZKQktRSmhYS0VKUUpLRUpHRktJTkpCS0lKak5LZ0pOU0tWRWxtS1ZoRUJLaUpHRktsQmdKS2puVUpLd3NKWUtNRklKS0ZOSkRLRklKRktGT2ZYTkpCU0ZOSkJDWE5CcEpGTkpCdlFOSkJNQk5KTEpYTkpPcVhOSmVDWE5KZUdGTmRzSkNOYlRLRk53WFVKUU5GRVBRRGlKY1FETVNKUVNGcEJRR01RSlFKZU9jUXlDSkVRVUpFQlFKRkJyUUZFSnFEWERKRkRKWHBCREpYSU1ER2lKaERJSkdSREplWWNESHJESkRWWGdGRGtBV3BEa0lnUkRqREVxRE12SlJESkZORkRKRklCU0tjbG1TSlFPRlNKUVZIU0pRakRTSkdKQlNKR0pGU0VDSm9TSEVKcVNKSFRCU0pWSkRTVmlKWVNaSk5CU0pzSkRTRlNKRlNGRWZYU0pGTFhDQlVKVkNKWFNCQ0pYcEJDWFZKWENKWHNYQ0pYZEZDSk5KSENMSUpnQ0hpSkZDVk5KTUNoQ0poQ1VIRUpDc0pUUkNKZFljQ29RSkNDRkVmWENGSUpnQ0ZVSnhDRnN0RkdKQmFRR0pCSURHUUpxWEdZSk5SR0pIS0ZHZVFxREdIRUpGR0plTFhHSElpSkdIZEJsR1VKRUJHa0lKVEdGUVBER0pGRXFFQUdlZ0VKSUpCRUpWSlhFaFFKVEVpSk5jRUpaSkZFSm9FcUVqREVxRVBEc1hFUEdKQkVQT3FYRVBlUUZFZkRpREVKZkVGRWZlcFFFZk1pSkVxWE5CRXFESURFcWVTRkVxVkpYRU12SlJZWE5KRFlYRUpIWUtWSmNZWUpFQllKZUVjWUpVcVhZRnBKRllGc3RYcEFaSk1wQlNKRnBOQk5GcGVRUERwSExKRHBISUpGcEhnSkZwZWl0RnBIWkpGcEpGQURwRlNKRnBKRkNKcEZPcVhwRml0QnBKRlpKTFhJSkZMSUpnUkxWTkpXTFZISk1Md05wSkxGR0pCTEZMSkRMRk9xWExKRlVKSUJESlhJQkdKQklKQllRSUpCSUJJQk9xWElCY3FESUVHSkZJTE5KVElJSkVCSU9pSmhJSmVOQklKZUlCSWhpSklJV29UUklKRkFISUpGcEJJSkZ1SElGVXRGSUpGVEhPU0JZSk9FY3FYT0hFSnFPdkJwRk9rVkpyT2JCVkpPbmNxRE9jTkprSGhOSlJIdUhKdUhkTWhCZ0JVcVhnQnNKWGdPTkpCZ0hOSkRnSEhKUWdKZWl0Z0hzSlhnSnlOYWd5REpCZ1pKRHJnc1ZKUWdrRUpOZ2tqU0pnSkZBSGdGQ0pEZ0ZadE1WSlhORlZYUWZYVkpYREpWWG9RSlZRVkpRVkRFZlhWRHZKSFZFcU5GVmVRZlhWSHBKRlZIeGZYVlZKU1JWVm1hUlZsSUpPaENYVkpoSGpZa2h4Q0pWaFdWVUpoV2lKY3hCTkpJeGVFcUR4ZlhCRnhjRkVQeEZTSkZ4RllKWHlCRFFKeWRhVUp5Rk9QRHVZQ0pZdUx2SlJ1SExKWHVaSkxEdUZPUER1RlpKSHVGY3FYbUtISmRtQ1FKY21Pc1ZKaUpBR0ZpdExDRmllT2ZYaWVzdFhpWkpNRWlrTkpRaXJYekZpRlFxWGlGSUpGaUZaSkZpRnZ0RlVIcEpGVXRlSWNVdGVPY1VWQ0prVWhkSGNVYkVKRVVKcVhRVU1OSmhVUmpZa1VGaXRGWkRHSkhaSkl4RFpKVkpYWkpGREpaSkZwUXZCTkpCdkJTSkZ2SnhCcnNlUXFEc1ZGVkpkRkxKRGtFSk5Ca21OSllrRkxKRG9RSk9Qb0dzSlJvRUFIQm9FSmZGYkJRcURiQlpKSGJGVkpYbEZJSkJqWUlyWGplaXRjampDRUJqV01OQndYUWZYd1hPYUZ3RHNKWHdDSlRSd3JDWkpNRE5KUWNEREpGY3FET1BSWWlKRlRCc0pYVFFJSkJURkVmWFRGTEpEclhFSkZyRUpYTXJGWkpGV0VKZEVXWVRsbVwiLFwiQUJDREVGQUNOSlRSQU1CREpkQWNOSlZYQkxOSkVCWFNJZFdSWEVyTkprWFlESk1CWFpKQ0phWE1OSmFZS0tWSktjS0RFSnFYS0RjTkpoS1ZKck5ZS2JnSlZYS0ZWSlNCTkJZQndETkplUWZYTkplRXFYTmhHSldFTkpGaUpSUWxJSmJFUUpmWHhEUXFYY2ZYUUZOREVKUUZ3WFVKRFljblVKREpJQmdRRElVSlRSREpGRXFEU0pRU0pGU0pRSUpGU09QZVp0U0pGWkpIQ0pYUWZYQ1RERXFGR0pCU0pGR0pCT2ZYR0pCY3FYR0pITkpER0pSTGlKRUpmWEVxRUpGRUpQRUZwQkVKWUpCWkpGWUJ3WFVKWWlKTUVCWUpaSnlUWVRPTkpYcFFNRlhGcGVHSURkcEpGc3RYcEpGY1BETEJWU0pSTEhRSnFYTEpGWkpGSUpCTkpESUpCVXFYSUJrRkRKSUpFSlBUSVlKR1dSSUplUVBESUplRWZISUpGc0pYT3FHRFNGSFhFSnFYZ0pDc0pDZ0dRSnFYZ2RRWUpFZ0ZNRk5CZ0pGY3FEVkp3WFVKVkpGWkpjaElnSkNDeE9FSnFYeE93WFVKeURKQlZSdXNjaXNjaUpCaUpCaWVVdHFYaUpGREpraUZzSlhRVUdFWkpjVUpGc0pYWnRYSXJYWkRaSkRyWkpGTkpEWkpGc3RYdkpGUXFYdkpGQ0pFc0pYUUpxa2hrTkdCYkRKZFRSYllKTUVCbER3WFVKTUVGaUpGY2ZYTkpEUmNOSldNVEJMSlhDXCIsXCJCcmFGVXRIQkZTSkZkYk5CTEpYVkpRb1lKTkVCU0pCRUpmSFNKSHdYVUpDSmRBWkpNR2phRlZKWEVKUE5KQmxFSmZGaUpGcEZiRkVKcUlKQlZKQ3JJQmRIaUpoT1BGQ2h2SlZKWkpOSld4R0ZOSUZMdWVJQlFKcVVIRUpmVUZzdE9aSkRybFhFQVNKUmxYVkpYU0Z3VkpOSldEXCIsXCJRSkVKTk5KRFFKRUpJQlNGUUpFSnhlZ0JRSkVKZkhFUFNKQm1YRUpGU0pDREVKcVhMWE5KRlFxWEljUXNGTkpGSUZFSnFYVUpnRnNKWElKQlVKRUpmSE5Gdkp4RXFYTkpuWFVKRlFxRFwiLFwiSUpCRUpxWFpKXCJdO2NvbnN0IG1hcHBpbmc9XCJ+fkF6Qn5YfmF+S05+UX5EflN+Q35HfkV+WX5wfkx+SX5PfmVIfmd+Vn5oeHl1bWl+flV+flp+fnZ+fnN+fmRrb2JsUGpmbnF3TWNSVHJ+V35+fkZ+fn5+fkp0XCI7bGV0IHdvcmRsaXN0JDQ9bnVsbDtmdW5jdGlvbiBoZXgod29yZCl7cmV0dXJuIGhleGxpZnkodG9VdGY4Qnl0ZXMod29yZCkpfWNvbnN0IEtpWW9LdT1cIjB4ZTM4MThkZTM4Mjg0ZTM4MThmXCI7Y29uc3QgS3lvS3U9XCIweGUzODE4ZGUzODI4M2UzODE4ZlwiO2Z1bmN0aW9uIGxvYWRXb3JkcyQ0KGxhbmcpe2lmKHdvcmRsaXN0JDQhPT1udWxsKXtyZXR1cm59d29yZGxpc3QkND1bXTtjb25zdCB0cmFuc2Zvcm09e307dHJhbnNmb3JtW3RvVXRmOFN0cmluZyhbMjI3LDEzMCwxNTRdKV09ZmFsc2U7dHJhbnNmb3JtW3RvVXRmOFN0cmluZyhbMjI3LDEzMCwxNTNdKV09ZmFsc2U7dHJhbnNmb3JtW3RvVXRmOFN0cmluZyhbMjI3LDEzMCwxMzNdKV09dG9VdGY4U3RyaW5nKFsyMjcsMTMwLDEzNF0pO3RyYW5zZm9ybVt0b1V0ZjhTdHJpbmcoWzIyNywxMjksMTYzXSldPXRvVXRmOFN0cmluZyhbMjI3LDEyOSwxNjRdKTt0cmFuc2Zvcm1bdG9VdGY4U3RyaW5nKFsyMjcsMTMwLDEzMV0pXT10b1V0ZjhTdHJpbmcoWzIyNywxMzAsMTMyXSk7dHJhbnNmb3JtW3RvVXRmOFN0cmluZyhbMjI3LDEzMCwxMzVdKV09dG9VdGY4U3RyaW5nKFsyMjcsMTMwLDEzNl0pO2Z1bmN0aW9uIG5vcm1hbGl6ZSh3b3JkKXtsZXQgcmVzdWx0PVwiXCI7Zm9yKGxldCBpPTA7aTx3b3JkLmxlbmd0aDtpKyspe2xldCBrYW5hPXdvcmRbaV07Y29uc3QgdGFyZ2V0PXRyYW5zZm9ybVtrYW5hXTtpZih0YXJnZXQ9PT1mYWxzZSl7Y29udGludWV9aWYodGFyZ2V0KXtrYW5hPXRhcmdldH1yZXN1bHQrPWthbmF9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBzb3J0SmFwYW5lc2UoYSxiKXthPW5vcm1hbGl6ZShhKTtiPW5vcm1hbGl6ZShiKTtpZihhPGIpe3JldHVybi0xfWlmKGE+Yil7cmV0dXJuIDF9cmV0dXJuIDB9Zm9yKGxldCBsZW5ndGg9MztsZW5ndGg8PTk7bGVuZ3RoKyspe2NvbnN0IGQ9ZGF0YVtsZW5ndGgtM107Zm9yKGxldCBvZmZzZXQ9MDtvZmZzZXQ8ZC5sZW5ndGg7b2Zmc2V0Kz1sZW5ndGgpe2NvbnN0IHdvcmQ9W107Zm9yKGxldCBpPTA7aTxsZW5ndGg7aSsrKXtjb25zdCBrPW1hcHBpbmcuaW5kZXhPZihkW29mZnNldCtpXSk7d29yZC5wdXNoKDIyNyk7d29yZC5wdXNoKGsmNjQ/MTMwOjEyOSk7d29yZC5wdXNoKChrJjYzKSsxMjgpfXdvcmRsaXN0JDQucHVzaCh0b1V0ZjhTdHJpbmcod29yZCkpfX13b3JkbGlzdCQ0LnNvcnQoc29ydEphcGFuZXNlKTtpZihoZXgod29yZGxpc3QkNFs0NDJdKT09PUtpWW9LdSYmaGV4KHdvcmRsaXN0JDRbNDQzXSk9PT1LeW9LdSl7Y29uc3QgdG1wPXdvcmRsaXN0JDRbNDQyXTt3b3JkbGlzdCQ0WzQ0Ml09d29yZGxpc3QkNFs0NDNdO3dvcmRsaXN0JDRbNDQzXT10bXB9aWYoV29yZGxpc3QuY2hlY2sobGFuZykhPT1cIjB4Y2IzNmIwOWU2YmFhOTM1Nzg3ZmQ3NjJjZTY1ZTgwYjBjNmE4ZGFiZGZiYzNhN2Y4NmFjMGUyYzRmZDExMTYwMFwiKXt3b3JkbGlzdCQ0PW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGphIChKYXBhbmVzZSkgRkFJTEVEXCIpfX1jbGFzcyBMYW5nSmEgZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiamFcIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDQodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDRbaW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkNCh0aGlzKTtyZXR1cm4gd29yZGxpc3QkNC5pbmRleE9mKHdvcmQpfXNwbGl0KG1uZW1vbmljKXtsb2dnZXIkay5jaGVja05vcm1hbGl6ZSgpO3JldHVybiBtbmVtb25pYy5zcGxpdCgvKD86XFx1MzAwMHwgKSsvZyl9am9pbih3b3Jkcyl7cmV0dXJuIHdvcmRzLmpvaW4oXCJcdTMwMDBcIil9fWNvbnN0IGxhbmdKYT1uZXcgTGFuZ0phO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdKYSk7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgZGF0YSQxPVtcIk9ZQWFcIixcIkFUQVpvQVRCbDNBVENUckFUQ2w4QVREbG9BVEdnM0FUSFQ4QVRKVDhBVEpsM0FUTGx2QVRMbjRBVE1UOEFUTVg4QVRNYm9BVE1nb0FUb0xiQVRvTVRBVHJIZ0FUdkhuQVQzQW5BVDNKYkFUM01UQVQ4RGJBVDhKVEFUOExtQVQ4TVlBVDhNYkFUI0xuQVVIVDhBVUhadkFVSlhyQVVKWDhBVUxuckFYSm52QVhMVW9BWExndkFYTW42QVhSZzNBWHJNYkFYM0pUQVgzUWJBWUxuM0FaTGd2QVpyU1VBWnZBY0FaOEFhQVo4QWJBWjhBbkFaOEhuQVo4TGdBWjhNWUFaOE1nQVo4T25BYUFib0FhRFRyQWFGVHJBYUpUckFhSmJvQWFMVm9BYU1YdkFhT2w4QWFTZW9BYkFVb0FiQWc4QWJBbDRBYkduckFiTVQ4QWJNWHJBYk1uNEFiUWI4QWJTVjhBYnZSbEFiOEFVQWI4QW5BYjhIZ0FiOEpUQWI4TlRBYjhSYkFjR2JvQWNMbnZBY01UOEFjTVg4QWNTVG9BY3JBYUFjckZuQWM4QWJBYzhNZ0FmR2dyQWZIYm9BZkpudkFmTFY4QWZMa29BZk1UOEFmTW5vQWZRYjhBZlNjckFmU2dyQWdBWjhBZ0ZsM0FnR1g4QWdIWnZBZ0hnckFnSlhvQWdKWDhBZ0pib0FnTFpvQWdMbjRBZ09YOEFnb0FUQWdvQW5BZ29DVUFnb0pnQWdvTFhBZ29NWUFnb1NlQWdyRFVBZ3JKVEFockZuQWhyTGpBaHJRZ0FqQWdvQWpKbnJBa01YOEFrT25vQWxDVHZBbENWOEFsQ2x2QWxGZzRBbEZsNkFsRm4zQWxvU25BbHJBWEFsckFmQWxyRlVBbHJGYkFsckdnQWxyT1hBbHZLbkFsdk1UQWwzQWJBbDNNbkFuQVRyQW5BY3JBbkNaM0FuQ2w4QW5EZzhBbkZib0FuRmwzQW5IWDRBbkhickFuSGdyQW5JbDNBbkpndkFuTFhvQW5MWDRBbkxickFuTGdyQW5MaHJBbk1Yb0FuTWdyQW5PbjNBblNickFuU2VvQW52TG5BbjNPbkNUR2d2Q1RTbHZDVHZBVUNUdktuQ1R2TlRDVDNDWkNUM0dVQ1QzTVRDVDhIbkNVQ1pyQ1VMZjhDVUxudkNVM0huQ1UzSlVDWTZOVUNiRGI4Q2JGWm9DYkxuckNib09UQ2JvU2NDYnJGbkNidkxuQ2I4QWdDYjhIZ0NiJExuQ2tMZm9DbEJuM0Nsb0RVRFRIVDhEVExsM0RUU1U4RFRyQWFEVHJMWERUckxqRFRyT1lEVHJPZ0RUdkZYRFR2Rm5EVDNIVURUM0xmRFVDVDlEVURUNERVRlZvRFVGVjhEVUZrb0RVR2dyRFVKbnJEVUxsOERVTVQ4RFVNWHJEVU1YNERVTWc4RFVPVW9EVU9ndkRVT2c4RFVTVG9EVVNaOERiRFhvRGJEZ29EYkdUOERiSm4zRGJMZzNEYkxuNERiTVhyRGJNZzhEYk9Ub0Rib0pYR1RDbHZHVERUOEdURlpyR1RMVm9HVExsdkdUTGwzR1RNZzhHVE9UdkdUU2xyR1RvQ1VHVHJEZ0dUckpZR1RyU2NHVHRMbkdUdkFuR1R2UWdHVUNackdVRFR2R1VGWm9HVUhYckdVTG52R1VNVDhHVW9NZ0dYb0xuR1hyTVhHWHJNbkdYdkZuR1lMbnZHWk9udkdadk9uR1o4TGFHWjhMbUdiQWwzR2JEWXZHYkRsckdiSFgzR2JKbDRHYkxWOEdiTG4zR2JNbjRHYm9KVEdib1JmR2J2RlVHYjNHVUdiNEpuR2dEWDNHZ0ZsJEdnSmxyR2dMWDZHZ0xab0dnTGY4R2dPWG9HZ3JBZ0dnckpYR2dyTVlHZ3JTY0dndkFUR2d2T1lHbkFnb0duSmd2R25MWm9HbkxnM0duTG5yR25RbjhHblNickduck1nSFRDbHZIVERUb0hURlQzSFRRVDhIVG9KVEhUb0pnSFRyRFVIVHJNbkhUdkZZSFR2UmZIVDhNbkhUOFNVSFVBWjhIVUJiNEhVRFR2SFVvTVlIWEZsNkhYSlg2SFhRbHJIWHJBVUhYck1uSFhyU2JIWHZGWUhYdktYSFgzTGpIWDNNZUhZdlFsSFpyU2NIWnZEYkhiQWNySGJGVDNIYkZsM0hiSlQ4SGJMVHJIYk1UOEhiTVhySGJNYnJIYlFiOEhiU1gzSGJvRGJIYm9KVEhickZVSGJySGdIYnJKVEhiOEpUSGI4TW5IYjhRZ0hnQWxySGdEVDNIZ0dnckhnSGdySGdKVHJIZ0pUOEhnTFhASGdMbnJIZ01UOEhnTVg4SGdNYm9IZ09uckhnUVRvSGdSZzNIZ29IZ0hnckNiSGdyRm5IZ3JMVkhndkFjSGd2QWZIbkFsb0huQ1RySG5DbnZIbkdUckhuR1o4SG5HbnZIbkpUOEhuTGY4SG5Ma3ZIbk1nOEhuUlRySVR2RlVJVHZGbkpUQVhySlRDVjhKVEZUM0pURlQ4SlRGbjRKVEdndkpUSFQ4SlRKVDhKVEpYdkpUSmwzSlRKbnZKVExYNEpUTGY4SlRMaHZKVE1UOEpUTVhySlRNbnJKVE9ickpUUVQ4SlRTbHZKVDhEVUpUOEZrSlQ4TVRKVDhPWEpUOE9nSlQ4UVVKVDhSZkpVSFpvSlhGVDRKWEZsckpYR1o4SlhHbnJKWExWOEpYTGd2SlhNWG9KWE1YM0pYTmJvSlhQbHZKWG9KVEpYb0xrSlhyQVhKWHJIVUpYckpnSlh2SlRKWHZPbkpYNEtuSllBbDNKWUpUOEpZTGh2SllRVG9KWXJRWEpZNk5VSmJBbDNKYkNackpiRGxvSmJHVDhKYkdnckpiSlh2SmJKYm9KYkxmOEpiTGhySmJMbDNKYk1udkpiUmc4SmJTWjhKYm9EYkpickNaSmJyU1VKYjNLbkpiOExuSmZSbjhKZ0FYckpnQ1pySmdEVHJKZ0dackpnR1o4SmdIVG9KZ0pUOEpnSlhvSmdKZ3ZKZ0xYNEpnTFozSmdMWjhKZ0xuNEpnTWdySmdNbjRKZ09ndkpnUFg2SmdSbnZKZ1NUb0pnb0NaSmdvSmJKZ29NWUpnckpYSmdySmdKZ3JMakpnNk1USmxDbjNKbEdndkpsSmw4Smw0QW5KbDhGbkpsOEhnSm5BVG9KbkFUckpuQWJ2Sm5EVW9KbkduckpuSlhySm5KWHZKbkxodkpuTG5ySm5MbnZKbk1Ub0puTVQ4Sm5NWHZKbk1YM0puTWc4Sm5NbHJKbk1uNEpuT1g4Sm5TVDRKblNYM0pub0FnSm5vQW5Kbm9KVEpub09iSm5yQWJKbnJBa0puckhuSm5ySlRKbnJKWUpuck9ZSm5yU2NKbnZDVUpudkZhSm52SmdKbnZKbkpudk9ZSm52UVVKbnZSVUpuM0ZuSm4zSlRLbkZsM0tuTFQ2TFREbHZMVE1ub0xUT24zTFRSbDNMVFNiNExUU2xyTFRvQW5MVG9KZ0xUckFVTFRyQWNMVHJDVUxUckhnTFRyTWdMVDNKbkxVTG5yTFVNWDhMVW9KZ0xWQVRyTFZEVHJMVkxiOExWb0pnTFY4TWdMVjhSVExYRGczTFhGbHJMWHJDbkxYckxYTFgzR1RMWDRHZ0xYNE9ZTFpBWHJMWkFjckxaQWdyTFpBaHJMWkRYeUxaRGxyTFpGYnJMWkZsM0xaSlg2TFpKWDhMWkxjOExaTG5yTFpTVThMWm9KVExab0puTFpyQWdMWnJBbkxackpZTFpyTFVMWnJNZ0xaclNrTFp2QW5MWnZHVUxadkplTFp2T1RMWjNGWkxaNEpYTFo4U1RMWjhTY0xhQVQzTGFBbDNMYUhUOExhSlRyTGFKVDhMYUpYckxhSmd2TGFKbDRMYUxWb0xhTVhyTGFNWHZMYU1YOExiQ2x2TGJGVG9MYkhsckxiSm40TGJMWjNMYkxodkxiTVhyTGJNbm9MYnZTVUxjTG5yTGM4SG5MYzhNVExkck1uTGVBZ29MZU9ndkxlT24zTGZBbDNMZkxudkxmTWwzTGZPWDhMZjhBbkxmOEpYTGY4TFhMZ0pUckxnSlhyTGdKbDhMZ01YOExnUlpyTGhDVG9MaHJBYkxockZVTGhySlhMaHZKWUxqSFRyTGpIWDRMakpYOExqTGhyTGpTWDNMalNaNExrRlg0TGtHWjhMa0dndkxrSlRyTGtNWG9Ma1NUb0xrU1U4TGtTWjhMa29PWUxsM0ZmTGwzTWdMbUFackxtQ2JyTG1HZ3JMbUhib0xtSm5vTG1KbjNMbUxmb0xtTGhyTG1TVG9MbkFYNkxuQWI2TG5DWjNMbkNiM0xuRFR2TG5EYjhMbkZsM0xuR25yTG5IWnZMbkhndkxuSVR2TG5KVDhMbkpYOExuSmx2TG5MZjhMbkxnNkxuTGh2TG5Mbm9Mbk1YckxuTWc4TG5RbHZMblNickxuckFnTG5yQW5MbnJEYkxuckZrTG5ySmRMbnJNVUxuck9ZTG5yU1RMbnZBbkxudkRVTG52SGdMbnZPWUxudk9uTG4zR2dMbjREVUxuNEpUTG40Sm5NVEFab01UQWxvTVREYjhNVEZUOE1USm5vTVRKbnJNVExack1UTGhyTVRMa3ZNVE1YOE1UUlRyTVRvQVRNVHJEbk1Uck9uTVQzSm5NVDRNbk1UOEZVTVQ4RmFNVDhGbE1UOEdUTVQ4R2JNVDhHbk1UOEhuTVQ4SlRNVDhKYk1UOE9UTVVDbDhNVUpUck1VSlU4TVVNWDhNVVJUck1VU1RvTVhBWDZNWEFiNk1YQ1pvTVhGWHJNWEhYck1YTGd2TVhPZ29NWHJBVU1YckFuTVhySGdNWHJKWU1YckpuTVhyTVRNWHJNZ01Yck9ZTVhyU1pNWHJTZ01YdkRVTVh2T1RNWDNKZ01YM09UTVg0Sm5NWDhEYk1YOEZuTVg4SGJNWDhIZ01YOEhuTVg4TGJNWDhNbk1YOE9uTVlBYjhNWUdib01ZSFR2TVlIWDRNWUxUck1ZTG52TVlNVG9NWU9ndk1ZUmczTVlTVHJNYkFUb01iQVhyTWJBbDNNYkFuOE1iR1o4TWJKVDhNYkpYck1iTVh2TWJNWDhNYk1ub01ick1VTWI4QWZNYjhGYk1iOEZrTWNKWG9NZUxuck1nRmwzTWdHVHZNZ0dYb01nR2dyTWdHbnJNZ0hUOE1nSFpyTWdKbm9NZ0xuck1nTG52TWdNVDhNZ1FVb01nckhuTWd2QW5NZzhIZ01nOEpZTWc4TGZNbG9Kbk1sOEFUTWw4QVhNbDhKWU1uQVRvTW5BVDRNbkFaOE1uQWwzTW5BbDRNbkNsOE1uSFQ4TW5IZzhNbkpub01uTFpvTW5MaHJNbk1Yb01uTVgzTW5NbnJNbk9ndk1uckZiTW5yRmZNbnJGbk1uck5UTW52SlhOVE1sOE9UQ1QzT1RGVjhPVEZuM09USFp2T1RKWHJPVE9sM09UM0FUT1QzSlVPVDNMWk9UM0xlT1QzTWJPVDhBVE9UOEFiT1Q4QWdPVDhNYk9VQ1h2T1VNWDNPWEhYdk9YTGwzT1hyTVVPWHZEYk9YNk5VT1g4SmJPWUZab09ZTGJyT1lMa29PWU1nOE9ZU1gzT2JIVHJPYkhUNE9iSmdyT2JMaHJPYk1YM09iT1g4T2I4Rm5PZUFsck9lSlQ4T2VKWHJPZUpuck9lTFRvT2VNYjhPZ0pYb09nTFhvT2dNbnJPZ09Yck9nT2xvT2dvQWdPZ29KYk9nb01ZT2dvU1RPZzhBYk9qTFg0T2pNbm9PalNWOE9uTFZvT25yQWdPbjNEVVBYUWxyUFh2RlhQYnZGVFBkQVQzUGxGbjNQbnZGYlFUTG40UVRvQWdRVG9NVFFVTFY4UVVSZzhRVW9KblFYQ1h2UWJGYnJRYjhBYVFiOEFjUWI4RmJRYjhNWVFiOFNjUWVBbHJRZUxoclFqQW4zUWxGWG9RbG9KZ1Fsb1NuUlRMbnZSVHJHVVJUckpUUlVKWnJSVW9KbFJVclFuUlpyTG1SWnJNblJaclNuUlo4QVRSWjhKYlJaOFNjUmJNVDhSYlNUM1JmR1pyUmZNWDhSZk1nclJmU1pyUm5BYnJSbkdUOFJudkpnUm52TGZSbnZNVFJuOEFhU1RDbHZTVEpnclNUT1hyU1RSZzNTVFJudlNUb0FjU1RvQWZTVG9BblNUb0huU1RvTGpTVG9NVFNUckFhU1RyRVVTVDNCWVNUOEFnU1Q4TG1TVUFadlNVQWdyU1VEVDRTVURUOFNVR2d2U1VKWG9TVUpYdlNVTFRyU1U4SlRTVThMalNWOEFuU1Y4SmdTWEZUb1NYTGY4U1l2QW5TWnJEVVNack1VU1pyTW5TWjhIZ1NaOEpUU1o4SmdTWjhNWVNaOFFVU2FRVW9TYkNUM1NiSFRvU2JRWXZTYlNsNFNib0puU2J2RmJTYjhIYlNiOEpnU2I4T1RTY0daclNjSGdyU2NKVHZTY01UOFNjU1RvU2NvSGJTY3JNVFNjdkFuU2VBWnJTZUFjclNlSGJvU2VKVW9TZUxoclNlTVQ4U2VNWHJTZTZKZ1NnSFRyU2tKbm9Ta0xudlNrOENVU2xGbDNTbHJTblNsOEduU21BYm9TbUdUOFNtSlU4XCIsXCJBVExuRGxBVHJBWm9BVHJKWDRBVHJNVDhBVHJNWDRBVHJSVHJBVHZEbDhBVHZKVW9BVHZNbDhBVDNBVG9BVDNNWDhBVDhDVDNBVDhEVDhBVDhIWnJBVDhIZ29BVUFnRm5BVUNURm5BWG9NWDhBWHJBVDhBWHJHZ3ZBWHJKWHZBWHJPZ29BWHZMbDNBWnZBZ29BWnZGYnJBWnZKWG9BWnZKbDhBWnZKbjNBWnZNWDhBWnZTYnJBWjhGWm9BWjhMWjhBWjhNVThBWjhPVHZBWjhTVjhBWjhTWDNBYkFnRlpBYm9Kbm9BYnZHYm9BYjhBVHJBYjhBWm9BYjhBZ3JBYjhBbDRBYjhEYjhBYjhKbm9BYjhMWDRBYjhMWnJBYjhMaHJBYjhNVDhBYjhPVW9BYjhRYjhBYjhTVDhBY3JBVW9BY3JBYzhBY3JDWjNBY3JGVDNBY3JGWnJBY3JKbDRBY3JKbjNBY3JNWDNBY3JPVHZBYzhBWjhBYzhNVDhBZkFjSlhBZ29GbjRBZ29HZ3ZBZ29HbnJBZ29MYzhBZ29NWG9BZ3JMbnJBa3JTWjhBbEZYQ1RBbG9IYm9BbHJIYnJBbHJMaHJBbHJMa29BbDNDWnJBbDNMVW9BbDNMWnJBbnJBbDRBbnJNVDhBbjNIVDRCVDNJVG9CWDRNbnZCYiFMbiRDVEdYTW5DVG9MWjRDVHJIVDhDVDNKVHJDVDNSWnJDVCNHVHZDVTZHZ3ZDVThEYjhDVThHWnJDVThIVDhDYm9MbDNDYnJHZ3JDYnJNVThDYjhEVDNDYjhHbnJDYjhMWDRDYjhNVDhDYjhPYnJDZ3JHZ3ZDZ3JLWDRDbDhGWm9EVHJBYnZEVHJEYm9EVHJHVDZEVHJKZ3JEVHJNWDNEVHJSWnJEVHJSZzhEVHZBVnZEVHZGWm9EVDNEVDhEVDNMbjNEVDRIWnJEVDRNVDhEVDhBbHJEVDhNVDhEVUFrR2JEVURiSm5EWUxuUWxEYkRVT1lEYk1UQW5EYk1YU25EYm9BVDNEYm9GbjREYm9MbnZEajZKVHJHVENnRlRHVEdnRm5HVEpUTW5HVExuUGxHVG9KVDhHVHJDVDNHVHJMVm9HVHJMbnZHVHJNWDNHVHJNYm9HVHZLbDNHWkNsRm5HWnJEVDNHWjhEVHJHWjhGWjhHWjhNWHZHWjhPbjhHWjhTVDNHYkNuUVhHYk1iRm5HYm9GYm9HYm9KZzNHYm9NWG9HYjNKVHZHYjNKYm9HYjNNbjZHYjNRYjhHZ0RYTGpHZ01uQVVHZ3JEbG9HZ3JIWDRHZ3JTVG9HZ3ZBWHJHZ3ZBWnZHZ3ZGYnJHZ3ZMbDNHZ3ZNbnZHbkRuTFhHbnJBVHJHbnJNYm9HbnVMbDNIVEFUTW5IVEFnQ25IVENUQ1RIVHJHVHZIVHJIVHZIVHJKWDhIVHJMbDhIVHJNVDhIVHJNZ29IVHJPVHJIVHVPbjNIVHZBWnJIVHZEVHZIVHZHYm9IVHZKVThIVHZMbDNIVHZNWHJIVHZRYjRIVDRHVDZIVDRKVDhIVDRKYiNIVDhBbDNIVDhHWnJIVDhHZ3JIVDhIWDRIVDhKYjhIVDhKbm9IVDhMVHJIVDhMZ3ZIVDhTVG9IVDhTVjhIVW9KVW9IVW9KWDhIVW9MbnJIWHJMWm9IWHZBbDNIWDNMbnJIWDRGa3ZIWDRMaHJIWDRNWG9IWDRPbm9IWnJBWjhIWnJEYjhIWnJHWjhIWnJKbnJIWnZHWjhIWnZMbnZIWjhKbnZIWjhMaHJIYkNYSmxIYk1UQW5IYm9KbDRIYnBMbDNIYnJKWDhIYnJMbnJIYnJNbnZIYnZSWXJIZ29TVHJIZ3JGVjhIZ3JHWjhIZ3JKWG9IZ3JSbnZIZ3ZCYiFIZ3ZHVHJIZ3ZIWDRIZ3ZIbiFIZ3ZMVHJIZ3ZTVThIbkRuTGJIbkZiSmJIbnZEbjhIbjZHZ3ZIbiFCVHZKVENUTG5KVFFnRm5KVHJBbnZKVHJMWDRKVHJPVW9KVHZGbjNKVHZMbnJKVHZOVG9KVDNBZ29KVDNKbjRKVDNMaHZKVDNPYnJKVDhBY3JKVDhBbDNKVDhKVDhKVDhKbm9KVDhMWDRKVDhMbnJKVDhNWDNKVDhSZzNKVDhTYzhKVW9CVHZKVThBVG9KVThHWjhKVThHZ3ZKVThKVHJKVThKWHJKVThKbnJKVThMbnZKVThTY3ZKWEhuSmxKWHJHZ3ZKWHJKVThKWHJMaHJKWHJNVDhKWHJNWHJKWHJRVW9KWHZDVHZKWHZHWjhKWHZHZ3JKWHZRVDhKWDhBYjhKWDhEVDhKWDhHWjhKWDhIWnZKWDhMbnJKWDhNVDhKWDhNWG9KWDhNbnZKWDhTVDNKWUduQ1RKYkFrR2JKYkNUQW5KYkxUQWNKYm9EVDNKYm9MYjZKYnJBbnZKYnJDbjNKYnJEbDhKYnJHYm9KYnJJWm9KYnJKbnZKYnJNbnZKYnJRYjRKYjhSWnJKZUFiQW5KZ0puRmJKZ1NjQW5KZ3JBVHJKZ3ZIWjhKZ3ZNbjRKbEpsRmJKbExpUVhKbExqT25KbFJiT2xKbHZOWG9KbHZSbDNKbDRBY3JKbDhBVW9KbDhNbnJKbkZuTWxKbkhnR2JKbm9EVDhKbm9GVjhKbm9HZ3ZKbm9JVDhKbm9RVG9Kbm9SZzNKbnJDWjNKbnJHZ3JKbnJIVHZKbnJMZjhKbnJPWDhKbnZBVDNKbnZGWm9KbnZHVDhKbnZKbDRKbnZNVDhKbnZNWDhKbnZPWHJKbnZQWDZKbnZTWDNKbnZTWnJKbjNNVDhKbjNNWDhKbjNSVHJMVEFUS25MVEpuTFRMVE1YS25MVFJUUWxMVG9HYjhMVHJBWjhMVHJDWjhMVHJEYjhMVHJIVDhMVDNQWDZMVDRGWm9MVCRDVHZMVCRHZ3JMVXZIWDNMVm9BVHJMVm9BZ29MVm9KYm9MVm9NWDNMVm9SZzNMVjhDWjNMVjhGWm9MVjhHVHZMWHJEWG9MWHJGYnJMWHZBZ3ZMWHZGbHJMWHZMbDNMWHZSbjZMWDRNYjhMWDhHVDhMWUNYTW5MWXJNbnJMWm9TVHZMWnJBWnZMWnJBbG9MWnJGVG9MWnJKWHZMWnJKYm9MWnJKbDRMWnJMbnJMWnJNVDhMWnJPZ3ZMWnJSbnZMWnJTVDRMWnZNWDhMWnZTbHZMWjhBZ29MWjhDVDNMWjhKVDhMWjhMVjhMWjhMWm9MWjhMZzhMWjhTVjhMWjhTYnJMWiRIVDhMWiRNbjRMYTZDVHZMYkZiTW5MYlJZRlRMYlNuRlpMYm9KVDhMYnJBVDlMYnJHYjNMYnJRYjhMY3JKWDhMY3JNWHJMZXJIVHZMZXJKYnJMZXJOYm9MZ3JEYjhMZ3JHWjhMZ3JIVHJMZ3JNWHJMZ3JTVThMZ3ZKVHJMZ3ZMbDNMZzZMbDNMaHJMbnJMaHJNVDhMaHZBbDRMaUxuUVhMa29BZ3JMa29KVDhMa29KbjRMbHJTVThMbDNGWm9MbDNIVHJMbDNKWDhMbDNKbm9MbDNMVG9MbUxlRmJMbkRVRmJMbkxWQW5MbnJBVHJMbnJBWm9MbnJBYjhMbnJBbHJMbnJHZ3ZMbnJKVThMbnJMWnJMbnJMaHJMbnJNYjhMbnJPWHJMbnJTWjhMbnZBYjRMbnZEVHJMbnZEbDhMbnZIVHJMbnZIYnJMbnZKVDhMbnZKVThMbnZKYnJMbnZMaHZMbnZNWDhMbnZNYjhMbnZObm9MbnZTVThMbjNBbDNMbjRGWm9MbjRHVDZMbjRKZ3ZMbjRMaHJMbjRNVDhMbjRTVG9NVG9DWnJNVG9KWDhNVG9MWDRNVG9MZjhNVG9SZzNNVHJFbG9NVHZHYjZNVDNCVHJNVDNMYjZNVDhBY3JNVDhBZ3JNVDhHWnJNVDhKbm9NVDhMbnJNVDhNWDNNVU9VQW5NWEFiRm5NWG9BbG9NWG9KWDhNWG9MZjhNWG9MbDhNWHJBYjhNWHJEVHZNWHJHVDhNWHJHZ3JNWHJIVHJNWHJMZjhNWHJNVThNWHJPWHZNWHJRYjhNWHZHVDhNWHZIVHJNWHZMVm9NWDNBWDNNWDNKbjNNWDNMaHJNWDNNWDNNWDRBbHJNWDRPYm9NWDhHVHZNWDhHWnJNWDhHZ3JNWDhKVDhNWDhKWDhNWDhMaHJNWDhNVDhNWURVRmJNWU1nRGJNYkduRmZNYnZMWDRNYnZMbDNNYjhNYjhNYjhTVDRNZ0dYQ25NZzhBVHJNZzhBZ29NZzhDWnJNZzhEVHJNZzhEYm9NZzhIVHJNZzhKZ3JNZzhMVDhNbG9KWG9NbDhBaHJNbDhKVDhNbkxnQVVNbm9KWHJNbm9MWDRNbm9MaHJNbm9NVDhNbnJBbDRNbnJEYjhNbnJPVHZNbnJPZ3ZNbnJRYjhNbnJTVThNbnZHZ3JNbnZIWjhNbjNNVG9NbjREVHJNbjRMVHJNbjRNZzhObkJYQW5PVEZURm5PVG9BVG9PVHJHZ3ZPVHJKWDhPVDNKWG9PVDZNVHJPVDhHZ3JPVDhIVHBPVDhNVG9PVW9IVDhPVW9KVDhPVW9MbjNPWHJBZ29PWHJEZzhPWHJNVDhPWHZTVG9PWDZDVHZPWDhDWnJPWDhPZ3JPYjZIZ3ZPYjhBVG9PYjhNVDhPY3ZMWjhPZ3ZBbHJPZ3ZIVHZPZ3ZKVHJPZ3ZKbnJPZ3ZMWnJPZ3ZMbjRPZ3ZNVDhPZ3ZSVHJPZzhBWm9PZzhEYnZPbnJPWG9PbnZKbjRPbnZMaHZPbnZSVHJPbjNHZ29PbjNKbnZPbjZKYnZPbjhPVHJQVEdZRlRQYkJuRm5QYkduRG5QZ0RZUVRQbHJBbnZQbHJFVHZQbHJMbnZQbHJNWHZQbHZGWDRRVE1UQW5RVHJKVThRWUNuSmxRWUpsUWxRYkdUUWJRYjhKbnJRYjhMWm9RYjhMbnZRYjhNVDhRYjhNbDhRYjhTVDRRbG9BbDRRbG9IWnZRbG9KWDhRbG9NbjhRbkpaT2xSVHJBWnZSVHJEVHJSVHZKbjRSVHZMaHZSVDRKYjhSWnJBWnJSWjhBa3JSWjhKVThSWjhMVjhSWjhMbnZSYkpsUVhSZzNHYm9SZzNNbnZSZzhBWjhSZzhKYm9SZzhKbDRSbkxUQ2JSbnZGbDNSbnZRYjhTVG9BbDRTVG9DWnJTVG9GWm9TVG9IWHJTVG9KVThTVG9KZ3ZTVG9KbDRTVG9MaHJTVG9NWDNTVHJBbHZTVHJDVDlTVHJDZ3JTVHJHZ3JTVHJIWHJTVHJIYm9TVHJKbm9TVHJOYm9TVHZMbnJTVDRBWm9TVDhBYjhTVDhKVDhTVW9KbjNTVTZIWiNTVTZKVHZTVThEYjhTVThIYm9TVThMZ3JTVjhKVDhTWnJBY3JTWnJBbDNTWnJKVDhTWnJKbnZTWnJNVDhTWnZMVW9TWjRGWm9TWjhKbm9TWjhSWnJTY29MbnJTY29NVDhTY29NWDhTY3JBVDRTY3JBWjhTY3JMWjhTY3JMa3ZTY3ZEYjhTY3ZMZjhTY3ZOVG9TZ3JGWnJTaHZLbnJTbG9IVW9TbG9MbnJTbHJNWG9TbDhIZ3JTbXJKVW9TbjNCWDZcIixcIkFURmxPbjNBVExnckRZQVQ0TVRBbkFUOExUTW5BWUpuUlRyQWJHZ0puckFiTFY4TG5BYnZOVEFuQWVGYkxnM0FnT1lNWG9BbFFiRmJvQW5EYm9BZkFuSmdvSlRCVG9EZ0FuQlVKYkFsM0Jib0RVQW5DVERsdkxuQ1RGVHJTbkNZb1FUTG5EVHdBYkFuRFVEVHJTbkRVSGdIZ3JEWDhMWEZuRGJKWEFjckVUdkxUTG5HVEZUUWJyR1RNbkdUb0dUM0RVRmJHVUpsUFgzR2JRZzhMbkdib0piRm5HYjNHZ0FZR2dBZzhTY0dnTWJBWHJHZ3ZBYkFuR25KVExudkdudkFURmdIVERUNkFUSFRyRGxKbkhZTG5NbjhIWnJTYkpUSFo4TFRGbkhiRlRKVW9IZ1NlTVQ4SGdyTGpBbkhndkFiQW5IbEZVckRsSG5EZ3ZBbkhuSFRGVDNIblFUR25ySlRBYU1YdkpUR2JDbjNKVE9nckFuSlh2QVhNbkpiTWc4U25KYk1uUmczSmI4TFRNbkpuQWwzT25KbkdZclFsSm5KbFFZM0xURGxDbjNMVEpqTGczTFRMZ3ZGWExUTWczR1RMVjhIVU9nTFhGWkxnM0xYTlhyTW5MWDhRWEZuTFg5QWxNWUxZTFhQWHJMWkFiSlU4TFpEVUpVOExaTVhyU25MWiRBZ0ZuTGFQWHJEVUxiRllyTW5MYk1uOExYTGJvSmdKZ0xlRmJMZzNMZ0xaclNuTGdPWUFnb0xoclJuSmxMa0NUclNuTGtPbkxockxuRlglQVlMbkZab0pYTG5IVHZKYkxuTGxvQWJNVEFUTGY4TVRIZ0puM01UTVhyQVhNVDNNVEZuTVVJVHZGbk1YRlglQVlNWE1YdkZiTVhyRlREYk1ZQWNNWDNNYkxmOFNuTWI4SmJGbk1nTVhyTVRNZ3ZBWEZuTWd2R2dDbU1uQWxvU25NbkZuSlRyT1h2TVhTbk9YOEhUTW5PYkpUOFNjT2JMWkZsM09iTVhDWm9QVExnclFYUFVGbm9RWFBVM1JYSmxQWDNSa1FYUGJySlhRbFBsckpiRm5RVUFockRiUVhHbkNYdlFZTG5IbHZRYkxmTG52UlRPZ3ZKYlJYSllyUWxSWUxuclFsUmJMbnJRbFJsRlQ4SmxSbEZuclFYU1RDbENuM1NUSFRyQW5TVExaUWxyU1RNbkdUclNUb0hnR2JTVHJHVERuU1R2R1hDblNUM0hnRmJTVTNIWEFYU2JBbkpuM1NiRlQ4TG5TY0xmTG52XCIsXCJBVDNKZ0pYOEFUOEZab1NuQVQ4SmdGVjhBVDhMaHJEYkFaOEpUOERiQWI4R2dMaHJBYjhTa0xudkFlOE1UOFNuQWxNWUpYTFZBbDNHWURUdkFsM0xmTG52QlVEVHZMbDNDVE9uM0hUckNUM0RVR2dyQ1U4TVQ4QWJDYkZUckpVb0NnckRiOE1URFRMVjhKWDhEVExuTFhRbERUOExaclNuRFVRYjhGWjhEVVNUNEpudkRiOFNjT1VvRGo2R2JKbDRHVExmQ1lNbEdUb0FYdkZuR2JvQVh2TG5HZ0FjckpuM0dndkZuU1RvR25MZjhKbnZHbiNIVERUb0hUTG5GWEpsSFR2QVRGVG9IVHZIVERUb0hUdk1UQWdvSFQzU1RDbHZIVDRBbEZsNkhUOEhURFRvSFVvRGdKVHJIVW9TY01YM0hiUlpyTVhvSGJvSmc4TFRIZ0RiOEpUckhnTVRvTGY4SGd2TG5Mbm9IbkhuM0hUNEhuNk1ndkFuSlRKVThTY3ZKVDNBYVFUOEpUOEhUckFuSlhyUmc4QW5KYkFsb01Yb0pickFURlRvSmJ2TW5vU25KZ0RiNkdndkpnRGI4TVhvSmdTWDNKVThKZ3VBVEZUb0psUFlMblFsSmxRa0RuTGJKbFFsRllKbEpsOExmOE9USm5DVEZuTGJKbkxUSFhNbkpuTFhHWENuSm5vRmZSZzNKbnJNWVJnM0puM0hnRmwzS1Q4RGc4TG5MVFJsRm5QVExUdlBiTGJ2TFZvU2JyQ1pMWE1ZNkhUM0xYTlU3RGxyTFhOWERUQVRMWDhEWDhMbkxaRGI4SlU4TFpNbm9MaHJMWlNUb0pVOExackxhTG5yTFp2Sm4zU25MWjhMaHJTbkxhSm5vTVQ4TGJGbHJIVHZMYnJGVExuckxidkFUTGx2TGI2T1RGbjNMY0xuSlpPbExlQVQ2TW40TGVKVDNPYnJMZzZMWEZsckxockpnOExuTGh2RGxQWDRMaHZMZkxudkxqNkpURlQzTG5GYnJNWG9MblFsdUNUdkxuclFYQ1k2TG52TGZMbnZMbnZNZ0xudkxudlNlTGY4TVRNYnJKbjNNVDNKZ1NUM01UOEFuQVRyTVQ4TFVMbnJNVU1Ub0Nack1VU2N2TGY4TVhvRFQ4U25NWDZBVEZUb01YOEFYTVQ4TVg4RmtNVDhNWDhIVHJEVU1YOFNjb1NuTVlKVDZDVHZNZ0Fjck1Yb01nOFNUb0FmTWx2QVhMZzNNbkZsM0Fudk9UM0FuRmwzT1VvQVRIVDhPVTNSbkxYck9Yck9YclNuT2JQYnZGbjZPZzhIZ3JTbk9nOE9YOERiUFR2QWdvSmdQVTNSWUxuclBYckRuSlpyUGI4Q1RHZ3ZQbHJMVERsdlBsdkZVSm5vUVV2RlhyUWxRZU1ub0FsM1FsclFsclNuUlRGVHJKVW9TVERsTGlMWFNURmc2SFQzU1RKZ29NbjRTVHJGVEpUclNUckxaRmwzU1Q0Rm5NWG9TVXJEbEhVb1NjdkhUdlNuU2ZMa3ZNWG9cIixcIkFVb0Fjck1Yb0FaOEhib0FnOEFiT2c2QVRGZ0FnOEFsb01Yb0FsM0FUOEpUckFsOE1YOE1Yb0NUM1NUb0pVOENsOERiOE1Yb0RUOEhnckFUckRib09UOE1Yb0dUT1RyQVRNbkdUOExockFaOEdudkZuR25RWEhUb0dndkFjckhUdkFYdkxsM0hickFab01Yb0hnQmxGWExnM0hnTW5GWHJTbkhnclNiOEpVb0huNkhUOExndklUdkFUckpVb0pVb0xaclJudkpVOEhUOEpiOEpYdkZYOFFUOEpYdkxUb0pUckpZclFuR25RWEpnckpub0FUckpub0pVOFNjdkpudk1udk1Yb0xUQ1RMZ3JKWExUSmxSVHZRbExiUm5KbFFZdkxick1iOExudkxidkZuM1Jub0xkQ1ZTVEdackxlU1R2R1hDbkxnM01ub0xuM01Ub0xsckVUdk1UOFNUb0FsM01ickRVNkdUdk1iOExYNExoclBsckxYR1hDblNUb0xmOFJnM1NUckRiOExUclNUdkxUSFhNblNiM1JZTG5NblNnT2c2QVRGZ1wiLFwiSFVEbEduclFYckpUckhnTG5yQWNKWU1iOERVTGM4TFR2RmdHbkNrM01nOEpiQW5MWDRRWXZGWUhuTVhyUlVvSm5HbnZGblJsdkZUSmxRbm9TVHJCWEhYckxZU1VKZ0xmb01UOFNlOERUckhiRGJcIixcIkFiRGw4U1RvSlU4QW4zUmJBYjhTVDhEVVNUckduckFnb0xiRlU2RGI4TFRyTWc4QWFIVDhKYjhPYkRsOFNUb0pVOFBiM1JsdkZZb0psXCJdO2NvbnN0IGNvZGVzPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkhQCMkJV4mKlwiO2Z1bmN0aW9uIGdldEhhbmd1bChjb2RlKXtpZihjb2RlPj00MCl7Y29kZT1jb2RlKzE2OC00MH1lbHNlIGlmKGNvZGU+PTE5KXtjb2RlPWNvZGUrOTctMTl9cmV0dXJuIHRvVXRmOFN0cmluZyhbMjI1LChjb2RlPj42KSsxMzIsKGNvZGUmNjMpKzEyOF0pfWxldCB3b3JkbGlzdCQ1PW51bGw7ZnVuY3Rpb24gbG9hZFdvcmRzJDUobGFuZyl7aWYod29yZGxpc3QkNSE9bnVsbCl7cmV0dXJufXdvcmRsaXN0JDU9W107ZGF0YSQxLmZvckVhY2goKGRhdGEsbGVuZ3RoKT0+e2xlbmd0aCs9NDtmb3IobGV0IGk9MDtpPGRhdGEubGVuZ3RoO2krPWxlbmd0aCl7bGV0IHdvcmQ9XCJcIjtmb3IobGV0IGo9MDtqPGxlbmd0aDtqKyspe3dvcmQrPWdldEhhbmd1bChjb2Rlcy5pbmRleE9mKGRhdGFbaStqXSkpfXdvcmRsaXN0JDUucHVzaCh3b3JkKX19KTt3b3JkbGlzdCQ1LnNvcnQoKTtpZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PVwiMHhmOWVkZGVhY2U5YzVkM2RhOWM5M2NmN2QzY2QzOGY2YTEzZWQzYWZmYjkzMzI1OWFlODY1NzE0ZThhM2FlNzFhXCIpe3dvcmRsaXN0JDU9bnVsbDt0aHJvdyBuZXcgRXJyb3IoXCJCSVAzOSBXb3JkbGlzdCBmb3Iga28gKEtvcmVhbikgRkFJTEVEXCIpfX1jbGFzcyBMYW5nS28gZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwia29cIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDUodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDVbaW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkNSh0aGlzKTtyZXR1cm4gd29yZGxpc3QkNS5pbmRleE9mKHdvcmQpfX1jb25zdCBsYW5nS289bmV3IExhbmdLbztXb3JkbGlzdC5yZWdpc3RlcihsYW5nS28pO1widXNlIHN0cmljdFwiO2NvbnN0IHdvcmRzJDQ9XCJBYmFjb0FiYmFnbGlvQWJiaW5hdG9BYmV0ZUFiaXNzb0Fib2xpcmVBYnJhc2l2b0Ficm9nYXRvQWNjYWRlcmVBY2Nlbm5vQWNjdXNhdG9BY2V0b25lQWNoaWxsZUFjaWRvQWNxdWFBY3JlQWNyaWxpY29BY3JvYmF0YUFjdXRvQWRhZ2lvQWRkZWJpdG9BZGRvbWVBZGVndWF0b0FkZXJpcmVBZGlwZUFkb3R0YXJlQWR1bGFyZUFmZmFiaWxlQWZmZXR0b0FmZmlzc29BZmZyYW50b0Fmb3Jpc21hQWZvc29BZnJpY2Fub0FnYXZlQWdlbnRlQWdldm9sZUFnZ2FuY2lvQWdpcmVBZ2l0YXJlQWdvbmlzbW9BZ3JpY29sb0FncnVtZXRvQWd1enpvQWxhYmFyZGFBbGF0b0FsYmF0cm9BbGJlcmF0b0FsYm9BbGJ1bWVBbGNlQWxjb2xpY29BbGV0dG9uZUFsZmFBbGdlYnJhQWxpYW50ZUFsaWJpQWxpbWVudG9BbGxhZ2F0b0FsbGVncm9BbGxpZXZvQWxsb2RvbGFBbGx1c2l2b0FsbWVub0Fsb2dlbm9BbHBhY2FBbHBlc3RyZUFsdGFsZW5hQWx0ZXJub0FsdGljY2lvQWx0cm92ZUFsdW5ub0FsdmVvbG9BbHphcmVBbWFsZ2FtYUFtYW5pdGFBbWFyZW5hQW1iaXRvQW1icmF0b0FtZWJhQW1lcmljYUFtZXRpc3RhQW1pY29BbW1hc3NvQW1tZW5kYUFtbWlyYXJlQW1tb25pdG9BbW9yZUFtcGlvQW1wbGlhcmVBbXVsZXRvQW5hY2FyZG9BbmFncmFmZUFuYWxpc3RhQW5hcmNoaWFBbmF0cmFBbmNhQW5jZWxsYUFuY29yYUFuZGFyZUFuZHJlYUFuZWxsb0FuZ2Vsb0FuZ29sYXJlQW5ndXN0b0FuaW1hQW5uZWdhcmVBbm5pZGF0b0Fubm9Bbm51bmNpb0Fub25pbW9BbnRpY2lwb0FuemlBcGF0aWNvQXBlcnR1cmFBcG9kZUFwcGFyaXJlQXBwZXRpdG9BcHBvZ2dpb0FwcHJvZG9BcHB1bnRvQXByaWxlQXJhYmljYUFyYWNoaWRlQXJhZ29zdGFBcmFsZGljYUFyYW5jaW9BcmF0dXJhQXJhenpvQXJiaXRyb0FyY2hpdmlvQXJkaXRvQXJlbmlsZUFyZ2VudG9BcmdpbmVBcmd1dG9BcmlhQXJtb25pYUFybmVzZUFycmVkYXRvQXJyaW5nYUFycm9zdG9BcnNlbmljb0Fyc29BcnRlZmljZUFyemlsbG9Bc2NpdXR0b0FzY29sdG9Bc2Vwc2lBc2V0dGljb0FzZmFsdG9Bc2lub0Fzb2xhQXNwaXJhdG9Bc3Byb0Fzc2FnZ2lvQXNzZUFzc29sdXRvQXNzdXJkb0FzdGFBc3RlbnV0b0FzdGljZUFzdHJhdHRvQXRhdmljb0F0ZWlzbW9BdG9taWNvQXRvbm9BdHRlc2FBdHRpdmFyZUF0dG9ybm9BdHRyaXRvQXR0dWFsZUF1c2lsaW9BdXN0cmlhQXV0aXN0YUF1dG9ub21vQXV0dW5ub0F2YW56YXRvQXZlcmVBdnZlbmlyZUF2dmlzb0F2dm9sZ2VyZUF6aW9uZUF6b3RvQXp6aW1vQXp6dXJyb0JhYmVsZUJhY2Nhbm9CYWNpbm9CYWNvQmFkZXNzYUJhZGlsYXRhQmFnbmF0b0JhaXRhQmFsY29uZUJhbGRvQmFsZW5hQmFsbGF0YUJhbHphbm9CYW1iaW5vQmFuZGlyZUJhcmFvbmRhQmFyYmFyb0JhcmNhQmFyaXRvbm9CYXJsdW1lQmFyb2Njb0Jhc2lsaWNvQmFzc29CYXRvc3RhQmF0dHV0b0JhdWxlQmF2YUJhdm9zYUJlY2NvQmVmZmFCZWxnaW9CZWx2YUJlbmRhQmVuZXZvbGVCZW5pZ25vQmVuemluYUJlcmVCZXJsaW5hQmV0YUJpYml0YUJpY2lCaWRvbmVCaWZpZG9CaWdhQmlsYW5jaWFCaW1ib0Jpbm9jb2xvQmlvbG9nb0JpcGVkZUJpcG9sYXJlQmlyYmFudGVCaXJyYUJpc2NvdHRvQmlzZXN0b0Jpc25vbm5vQmlzb250ZUJpc3R1cmlCaXp6YXJyb0JsYW5kb0JsYXR0YUJvbGxpdG9Cb25pZmljb0JvcmRvQm9zY29Cb3Rhbmljb0JvdHRpbm9Cb3p6b2xvQnJhY2Npb0JyYWRpcG9CcmFtYUJyYW5jYUJyYXZ1cmFCcmV0ZWxsYUJyZXZldHRvQnJlenphQnJpZ2xpYUJyaWxsYW50ZUJyaW5kYXJlQnJvY2NvbG9Ccm9kb0Jyb256aW5hQnJ1bGxvQnJ1bm9CdWJib25lQnVjYUJ1ZGlub0J1ZmZvbmVCdWlvQnVsYm9CdW9ub0J1cmxvbmVCdXJyYXNjYUJ1c3NvbGFCdXN0YUNhZGV0dG9DYWR1Y29DYWxhbWFyb0NhbGNvbG9DYWxlc3NlQ2FsaWJyb0NhbG1vQ2Fsb3JpYUNhbWJ1c2FDYW1lcmF0YUNhbWljaWFDYW1taW5vQ2Ftb2xhQ2FtcGFsZUNhbmFwYUNhbmRlbGFDYW5lQ2FuaW5vQ2Fub3R0b0NhbnRpbmFDYXBhY2VDYXBlbGxvQ2FwaXRvbG9DYXBvZ2lyb0NhcHBlcm9DYXByYUNhcHN1bGFDYXJhcGFjZUNhcmNhc3NhQ2FyZG9DYXJpc21hQ2Fyb3ZhbmFDYXJyZXR0b0NhcnRvbGluYUNhc2FjY2lvQ2FzY2F0YUNhc2VybWFDYXNvQ2Fzc29uZUNhc3RlbGxvQ2FzdWFsZUNhdGFzdGFDYXRlbmFDYXRyYW1lQ2F1dG9DYXZpbGxvQ2VkaWJpbGVDZWRyYXRhQ2VmYWxvQ2VsZWJyZUNlbGx1bGFyZUNlbmFDZW5vbmVDZW50ZXNpbW9DZXJhbWljYUNlcmNhcmVDZXJ0b0NlcnVtZUNlcnZlbGxvQ2Vzb2lhQ2VzcG9DZXRvQ2hlbGFDaGlhcm9DaGljY2FDaGllZGVyZUNoaW1lcmFDaGluYUNoaXJ1cmdvQ2hpdGFycmFDaWFvQ2ljbGlzbW9DaWZyYXJlQ2lnbm9DaWxpbmRyb0Npb3R0b2xvQ2lyY2FDaXJyb3NpQ2l0cmljb0NpdHRhZGlub0NpdWZmb0NpdmV0dGFDaXZpbGVDbGFzc2ljb0NsaW5pY2FDbG9yb0NvY2NvQ29kYXJkb0NvZGljZUNvZXJlbnRlQ29nbm9tZUNvbGxhcmVDb2xtYXRvQ29sb3JlQ29scG9zb0NvbHRpdmF0b0NvbHphQ29tYUNvbWV0YUNvbW1hbmRvQ29tb2RvQ29tcHV0ZXJDb211bmVDb25jaXNvQ29uZHVycmVDb25mZXJtYUNvbmdlbGFyZUNvbml1Z2VDb25uZXNzb0Nvbm9zY2VyZUNvbnN1bW9Db250aW51b0NvbnZlZ25vQ29wZXJ0b0NvcGlvbmVDb3BwaWFDb3ByaWNhcG9Db3JhenphQ29yZGF0YUNvcmljYXRvQ29ybmljZUNvcm9sbGFDb3Jwb0NvcnJlZG9Db3JzaWFDb3J0ZXNlQ29zbWljb0Nvc3RhbnRlQ290dHVyYUNvdmF0b0NyYXRlcmVDcmF2YXR0YUNyZWF0b0NyZWRlcmVDcmVtb3NvQ3Jlc2NpdGFDcmV0YUNyaWNldG9DcmluYWxlQ3Jpc2lDcml0aWNvQ3JvY2VDcm9uYWNhQ3Jvc3RhdGFDcnVjaWFsZUNydXNjYUN1Y2lyZUN1Y3Vsb0N1Z2lub0N1bGxhdG9DdXBvbGFDdXJhdG9yZUN1cnNvcmVDdXJ2b0N1c2Npbm9DdXN0b2RlRGFkb0RhaW5vRGFsbWF0YURhbWVyaW5vRGFuaWVsYURhbm5vc29EYW56YXJlRGF0YXRvRGF2YW50aURhdnZlcm9EZWJ1dHRvRGVjZW5uaW9EZWNpc29EZWNsaW5vRGVjb2xsb0RlY3JldG9EZWRpY2F0b0RlZmluaXRvRGVmb3JtZURlZ25vRGVsZWdhcmVEZWxmaW5vRGVsaXJpb0RlbHRhRGVtZW56YURlbm90YXRvRGVudHJvRGVwb3NpdG9EZXJhcGF0YURlcml2YXJlRGVyb2dhRGVzY3JpdHRvRGVzZXJ0b0Rlc2lkZXJpb0Rlc3VtZXJlRGV0ZXJzaXZvRGV2b3RvRGlhbWV0cm9EaWNlbWJyZURpZWRyb0RpZmVzb0RpZmZ1c29EaWdlcmlyZURpZ2l0YWxlRGlsdXZpb0RpbmFtaWNvRGlubmFuemlEaXBpbnRvRGlwbG9tYURpcG9sb0RpcmFkYXJlRGlyZURpcm90dG9EaXJ1cG9EaXNhZ2lvRGlzY3JldG9EaXNmYXJlRGlzZ2Vsb0Rpc3Bvc3RvRGlzdGFuemFEaXN1bWFub0RpdG9EaXZhbm9EaXZlbHRvRGl2aWRlcmVEaXZvcmF0b0RvYmxvbmVEb2NlbnRlRG9nYW5hbGVEb2dtYURvbGNlRG9tYXRvRG9tZW5pY2FEb21pbmFyZURvbmRvbG9Eb25vRG9ybWlyZURvdGVEb3R0b3JlRG92dXRvRG96emluYURyYWdvRHJ1aWRvRHViYmlvRHViaXRhcmVEdWNhbGVEdW5hRHVvbW9EdXBsaWNlRHVyYXR1cm9FYmFub0VjY2Vzc29FY2NvRWNsaXNzaUVjb25vbWlhRWRlcmFFZGljb2xhRWRpbGVFZGl0b3JpYUVkdWNhcmVFZ2Vtb25pYUVnbGlFZ29pc21vRWdyZWdpb0VsYWJvcmF0b0VsYXJnaXJlRWxlZ2FudGVFbGVuY2F0b0VsZXR0b0VsZXZhcmVFbGZpY29FbGljYUVsbW9FbHNhRWx1c29FbWFuYXRvRW1ibGVtYUVtZXNzb0VtaXJvRW1vdGl2b0Vtb3ppb25lRW1waXJpY29FbXVsb0VuZGVtaWNvRW5kdXJvRW5lcmdpYUVuZmFzaUVub3RlY2FFbnRyYXJlRW56aW1hRXBhdGl0ZUVwaWxvZ29FcGlzb2Rpb0Vwb2NhbGVFcHB1cmVFcXVhdG9yZUVyYXJpb0VyYmFFcmJvc29FcmVkZUVyZW1pdGFFcmlnZXJlRXJtZXRpY29Fcm9lRXJvc2l2b0VycmFudGVFc2Fnb25vRXNhbWVFc2FuaW1lRXNhdWRpcmVFc2NhRXNlbXBpb0VzZXJjaXRvRXNpYml0b0VzaWdlbnRlRXNpc3RlcmVFc2l0b0Vzb2ZhZ29Fc29ydGF0b0Vzb3NvRXNwYW5zb0VzcHJlc3NvRXNzZW56YUVzc29Fc3Rlc29Fc3RpbWFyZUVzdG9uaWFFc3Ryb3NvRXN1bHRhcmVFdGlsaWNvRXRuaWNvRXRydXNjb0V0dG9FdWNsaWRlb0V1cm9wYUV2YXNvRXZpZGVuemFFdml0YXRvRXZvbHV0b0V2dml2YUZhYmJyaWNhRmFjY2VuZGFGYWNoaXJvRmFsY29GYW1pZ2xpYUZhbmFsZUZhbmZhcmFGYW5nb0ZhbnRhc21hRmFyZUZhcmZhbGxhRmFyaW5vc29GYXJtYWNvRmFzY2lhRmFzdG9zb0Zhc3VsbG9GYXRpY2FyZUZhdG9GYXZvbG9zb0ZlYmJyZUZlY29sYUZlZGVGZWdhdG9GZWxwYUZlbHRyb0ZlbW1pbmFGZW5kZXJlRmVub21lbm9GZXJtZW50b0ZlcnJvRmVydGlsZUZlc3N1cmFGZXN0aXZvRmV0dGFGZXVkb0ZpYWJhRmlkdWNpYUZpZmFGaWd1cmF0b0ZpbG9GaW5hbnphRmluZXN0cmFGaW5pcmVGaW9yZUZpc2NhbGVGaXNpY29GaXVtZUZsYWNvbmVGbGFtZW5jb0ZsZWJvRmxlbW1hRmxvcmlkb0ZsdWVudGVGbHVvcm9Gb2JpY29Gb2NhY2NpYUZvY29zb0ZvZGVyYXRvRm9nbGlvRm9sYXRhRm9sY2xvcmVGb2xnb3JlRm9uZGVudGVGb25ldGljb0ZvbmlhRm9udGFuYUZvcmJpdG9Gb3JjaGV0dGFGb3Jlc3RhRm9ybWljYUZvcm5haW9Gb3JvRm9ydGV6emFGb3J6YXJlRm9zZmF0b0Zvc3NvRnJhY2Fzc29GcmFuYUZyYXNzaW5vRnJhdGVsbG9GcmVjY2V0dGFGcmVuYXRhRnJlc2NvRnJpZ29Gcm9sbGlub0Zyb25kZUZydWdhbGVGcnV0dGFGdWNpbGF0YUZ1Y3NpYUZ1Z2dlbnRlRnVsbWluZUZ1bHZvRnVtYW50ZUZ1bWV0dG9GdW1vc29GdW5lRnVuemlvbmVGdW9jb0Z1cmJvRnVyZ29uZUZ1cm9yZUZ1c29GdXRpbGVHYWJiaWFub0dhZmZlR2FsYXRlb0dhbGxpbmFHYWxvcHBvR2FtYmVyb0dhbW1hR2FyYW56aWFHYXJib0dhcm9mYW5vR2Fyem9uZUdhc2RvdHRvR2Fzb2xpb0dhc3RyaWNvR2F0dG9HYXVkaW9HYXplYm9HYXp6ZWxsYUdlY29HZWxhdGluYUdlbHNvR2VtZWxsb0dlbW1hdG9HZW5lR2VuaXRvcmVHZW5uYWlvR2Vub3RpcG9HZXJnb0doZXBhcmRvR2hpYWNjaW9HaGlzYUdpYWxsb0dpbGRhR2luZXByb0dpb2NhcmVHaW9pZWxsb0dpb3Jub0dpb3ZlR2lyYXRvR2lyb25lR2l0dGF0YUdpdWRpemlvR2l1cmF0b0dpdXN0b0dsb2J1bG9HbHV0aW5lR25vbW9Hb2JiYUdvbGZHb21pdG9Hb21tb25lR29uZmlvR29ubmFHb3Zlcm5vR3JhY2lsZUdyYWRvR3JhZmljb0dyYW1tb0dyYW5kZUdyYXR0YXJlR3Jhdm9zb0dyYXppYUdyZWNhR3JlZ2dlR3JpZm9uZUdyaWdpb0dyaW56YUdyb3R0YUdydXBwb0d1YWRhZ25vR3VhaW9HdWFudG9HdWFyZGFyZUd1Zm9HdWlkYXJlSWJlcm5hdG9JY29uYUlkZW50aWNvSWRpbGxpb0lkb2xvSWRyYUlkcmljb0lkcm9nZW5vSWdpZW5lSWduYXJvSWdub3JhdG9JbGFyZUlsbGVzb0lsbG9naWNvSWxsdWRlcmVJbWJhbGxvSW1iZXZ1dG9JbWJvY2NvSW1idXRvSW1tYW5lSW1tZXJzb0ltbW9sYXRvSW1wYWNjb0ltcGV0b0ltcGllZ29JbXBvcnRvSW1wcm9udGFJbmFsYXJlSW5hcmNhcmVJbmF0dGl2b0luY2FudG9JbmNlbmRpb0luY2hpbm9JbmNpc2l2b0luY2x1c29JbmNvbnRyb0luY3JvY2lvSW5jdWJvSW5kYWdpbmVJbmRpYUluZG9sZUluZWRpdG9JbmZhdHRpSW5maWxhcmVJbmZsaXR0b0luZ2FnZ2lvSW5nZWdub0luZ2xlc2VJbmdvcmRvSW5ncm9zc29Jbm5lc2NvSW5vZG9yZUlub2x0cmFyZUlub25kYXRvSW5zYW5vSW5zZXR0b0luc2llbWVJbnNvbm5pYUluc3VsaW5hSW50YXNhdG9JbnRlcm9JbnRvbmFjb0ludHVpdG9JbnVtaWRpcmVJbnZhbGlkb0ludmVjZUludml0b0lwZXJib2xlSXBub3RpY29JcG90ZXNpSXBwaWNhSXJpZGVJcmxhbmRhSXJvbmljb0lycmlnYXRvSXJyb3JhcmVJc29sYXRvSXNvdG9wb0lzdGVyaWNvSXN0aXR1dG9Jc3RyaWNlSXRhbGlhSXRlcmFyZUxhYmJyb0xhYmlyaW50b0xhY2NhTGFjZXJhdG9MYWNyaW1hTGFjdW5hTGFkZG92ZUxhZ29MYW1wb0xhbmNldHRhTGFudGVybmFMYXJkb3NvTGFyZ2FMYXJpbmdlTGFzdHJhTGF0ZW56YUxhdGlub0xhdHR1Z2FMYXZhZ25hTGF2b3JvTGVnYWxlTGVnZ2Vyb0xlbWJvTGVudGV6emFMZW56YUxlb25lTGVwcmVMZXNpdm9MZXNzYXRvTGVzdG9MZXR0ZXJhbGVMZXZhTGV2aWdhdG9MaWJlcm9MaWRvTGlldml0b0xpbGxhTGltYXR1cmFMaW1pdGFyZUxpbXBpZG9MaW5lYXJlTGluZ3VhTGlxdWlkb0xpcmFMaXJpY2FMaXNjYUxpdGVMaXRpZ2lvTGl2cmVhTG9jYW5kYUxvZGVMb2dpY2FMb21iYXJlTG9uZHJhTG9uZ2V2b0xvcXVhY2VMb3JlbnpvTG90b0xvdHRlcmlhTHVjZUx1Y2lkYXRvTHVtYWNhTHVtaW5vc29MdW5nb0x1cG9MdXBwb2xvTHVzaW5nYUx1c3NvTHV0dG9NYWNhYnJvTWFjY2hpbmFNYWNlcm9NYWNpbmF0b01hZGFtYU1hZ2ljb01hZ2xpYU1hZ25ldGVNYWdyb01haW9saWNhTWFsYWZlZGVNYWxncmFkb01hbGludGVzb01hbHNhbm9NYWx0b01hbHVtb3JlTWFuYU1hbmNpYU1hbmRvcmxhTWFuZ2lhcmVNYW5pZmVzdG9NYW5uYXJvTWFub3ZyYU1hbnNhcmRhTWFudGlkZU1hbnVicmlvTWFwcGFNYXJhdG9uYU1hcmNpcmVNYXJldHRhTWFybW9NYXJzdXBpb01hc2NoZXJhTWFzc2FpYU1hc3Rpbm9NYXRlcmFzc29NYXRyaWNvbGFNYXR0b25lTWF0dXJvTWF6dXJjYU1lYW5kcm9NZWNjYW5pY29NZWNlbmF0ZU1lZGVzaW1vTWVkaXRhcmVNZWdhTWVsYXNzYU1lbGlzTWVsb2RpYU1lbmluZ2VNZW5vTWVuc29sYU1lcmN1cmlvTWVyZW5kYU1lcmxvTWVzY2hpbm9NZXNlTWVzc2VyZU1lc3RvbG9NZXRhbGxvTWV0b2RvTWV0dGVyZU1pYWdvbGFyZU1pY2FNaWNlbGlvTWljaGVsZU1pY3JvYm9NaWRvbGxvTWllbGVNaWdsaW9yZU1pbGFub01pbGl0ZU1pbW9zYU1pbmVyYWxlTWluaU1pbm9yZU1pcmlub01pcnRpbGxvTWlzY2VsYU1pc3NpdmFNaXN0b01pc3VyYXJlTWl0ZXp6YU1pdGlnYXJlTWl0cmFNaXR0ZW50ZU1uZW1vbmljb01vZGVsbG9Nb2RpZmljYU1vZHVsb01vZ2Fub01vZ2lvTW9sZU1vbG9zc29Nb25hc3Rlcm9Nb25jb01vbmRpbmFNb25ldGFyaW9Nb25pbGVNb25vdG9ub01vbnNvbmVNb250YXRvTW9udmlzb01vcmFNb3JkZXJlTW9yc2ljYXRvTW9zdHJvTW90aXZhdG9Nb3Rvc2VnYU1vdHRvTW92ZW56YU1vdmltZW50b01venpvTXVjY2FNdWNvc2FNdWZmYU11Z2hldHRvTXVnbmFpb011bGF0dG9NdWxpbmVsbG9NdWx0aXBsb011bW1pYU11bnRvTXVvdmVyZU11cmFsZU11c2FNdXNjb2xvTXVzaWNhTXV0ZXZvbGVNdXRvTmFiYWJib05hZnRhTmFub21ldHJvTmFyY2lzb05hcmljZU5hcnJhdG9OYXNjZXJlTmFzdHJhcmVOYXR1cmFsZU5hdXRpY2FOYXZpZ2xpb05lYnVsb3NhTmVjcm9zaU5lZ2F0aXZvTmVnb3ppb05lbW1lbm9OZW9maXRhTmVyZXR0b05lcnZvTmVzc3Vub05ldHR1bm9OZXV0cmFsZU5ldmVOZXZyb3RpY29OaWNjaGlhTmluZmFOaXRpZG9Ob2JpbGVOb2Npdm9Ob2RvTm9tZU5vbWluYU5vcmRpY29Ob3JtYWxlTm9ydmVnZXNlTm9zdHJhbm9Ob3RhcmVOb3RpemlhTm90dHVybm9Ob3ZlbGxhTnVjbGVvTnVsbGFOdW1lcm9OdW92b051dHJpcmVOdXZvbGFOdXppYWxlT2FzaU9iYmVkaXJlT2JibGlnb09iZWxpc2NvT2JsaW9PYm9sb09ic29sZXRvT2NjYXNpb25lT2NjaGlvT2NjaWRlbnRlT2Njb3JyZXJlT2NjdWx0YXJlT2NyYU9jdWxhdG9PZGllcm5vT2RvcmFyZU9mZmVydGFPZmZyaXJlT2ZmdXNjYXRvT2dnZXR0b09nZ2lPZ251bm9PbGFuZGVzZU9sZmF0dG9PbGlhdG9PbGl2YU9sb2dyYW1tYU9sdHJlT21hZ2dpb09tYmVsaWNvT21icmFPbWVnYU9taXNzaW9uZU9uZG9zb09uZXJlT25pY2VPbm5pdm9yb09ub3Jldm9sZU9udGFPcGVyYXRvT3BpbmlvbmVPcHBvc3RvT3JhY29sb09yYWZvT3JkaW5lT3JlY2NoaW5vT3JlZmljZU9yZmFub09yZ2FuaWNvT3JpZ2luZU9yaXp6b250ZU9ybWFPcm1lZ2dpb09ybmF0aXZvT3JvbG9naW9PcnJlbmRvT3JyaWJpbGVPcnRlbnNpYU9ydGljYU9yemF0YU9yem9Pc2FyZU9zY3VyYXJlT3Ntb3NpT3NwZWRhbGVPc3BpdGVPc3NhT3NzaWRhcmVPc3RhY29sb09zdGVPdGl0ZU90cmVPdHRhZ29ub090dGltb090dG9icmVPdmFsZU92ZXN0T3Zpbm9PdmlwYXJvT3ZvY2l0b092dW5xdWVPdnZpYXJlT3ppb1BhY2NoZXR0b1BhY2VQYWNpZmljb1BhZGVsbGFQYWRyb25lUGFlc2VQYWdhUGFnaW5hUGFsYXp6aW5hUGFsZXNhcmVQYWxsaWRvUGFsb1BhbHVkZVBhbmRvcm9QYW5uZWxsb1Bhb2xvUGFvbmF6em9QYXByaWNhUGFyYWJvbGFQYXJjZWxsYVBhcmVyZVBhcmdvbG9QYXJpUGFybGF0b1Bhcm9sYVBhcnRpcmVQYXJ2ZW56YVBhcnppYWxlUGFzc2l2b1Bhc3RpY2NhUGF0YWNjYVBhdG9sb2dpYVBhdHR1bWVQYXZvbmVQZWNjYXRvUGVkYWxhcmVQZWRvbmFsZVBlZ2dpb1BlbG9zb1BlbmFyZVBlbmRpY2VQZW5pc29sYVBlbm51dG9QZW5vbWJyYVBlbnNhcmVQZW50b2xhUGVwZVBlcGl0YVBlcmJlbmVQZXJjb3Jzb1BlcmRvbmF0b1BlcmZvcmFyZVBlcmdhbWVuYVBlcmlvZG9QZXJtZXNzb1Blcm5vUGVycGxlc3NvUGVyc3Vhc29QZXJ0dWdpb1BlcnZhc29QZXNhdG9yZVBlc2lzdGFQZXNvUGVzdGlmZXJvUGV0YWxvUGV0dGluZVBldHVsYW50ZVBlenpvUGlhY2VyZVBpYW50YVBpYXR0aW5vUGljY2lub1BpY296emFQaWVnYVBpZXRyYVBpZmZlcm9QaWdpYW1hUGlnb2xpb1BpZ3JvUGlsYVBpbGlmZXJvUGlsbG9sYVBpbG90YVBpbXBhbnRlUGluZXRhUGlubmFQaW5vbG9QaW9nZ2lhUGlvbWJvUGlyYW1pZGVQaXJldGljb1Bpcml0ZVBpcm9saXNpUGl0b25lUGl6emljb1BsYWNlYm9QbGFuYXJlUGxhc21hUGxhdGFub1BsZW5hcmlvUG9jaGV6emFQb2Rlcm9zb1BvZGlzbW9Qb2VzaWFQb2dnaWFyZVBvbGVudGFQb2xpZ29ub1BvbGxpY2VQb2xtb25pdGVQb2xwZXR0YVBvbHNvUG9sdHJvbmFQb2x2ZXJlUG9taWNlUG9tb2Rvcm9Qb250ZVBvcG9sb3NvUG9yZmlkb1Bvcm9zb1BvcnBvcmFQb3JyZVBvcnRhdGFQb3NhUG9zaXRpdm9Qb3NzZXNzb1Bvc3R1bGF0b1BvdGFzc2lvUG90ZXJlUHJhbnpvUHJhc3NpUHJhdGljYVByZWNsdXNvUHJlZGljYVByZWZpc3NvUHJlZ2lhdG9QcmVsaWV2b1ByZW1lcmVQcmVub3RhcmVQcmVwYXJhdG9QcmVzZW56YVByZXRlc3RvUHJldmFsc29QcmltYVByaW5jaXBlUHJpdmF0b1Byb2JsZW1hUHJvY3VyYVByb2R1cnJlUHJvZnVtb1Byb2dldHRvUHJvbHVuZ2FQcm9tZXNzYVByb25vbWVQcm9wb3N0YVByb3JvZ2FQcm90ZXNvUHJvdmFQcnVkZW50ZVBydWduYVBydXJpdG9Qc2ljaGVQdWJibGljb1B1ZGljYVB1Z2lsYXRvUHVnbm9QdWxjZVB1bGl0b1B1bHNhbnRlUHVudGFyZVB1cGF6em9QdXBpbGxhUHVyb1F1YWRyb1F1YWxjb3NhUXVhc2lRdWVyZWxhUXVvdGFSYWNjb2x0b1JhZGRvcHBpb1JhZGljYWxlUmFkdW5hdG9SYWZmaWNhUmFnYXp6b1JhZ2lvbmVSYWdub1JhbWFycm9SYW1pbmdvUmFtb1JhbmRhZ2lvUmFudG9sYXJlUmFwYXRvUmFwaW5hUmFwcHJlc29SYXNhdHVyYVJhc2NoaWF0b1Jhc2VudGVSYXNzZWduYVJhc3RyZWxsb1JhdGFSYXZ2ZWR1dG9SZWFsZVJlY2VwaXJlUmVjaW50b1JlY2x1dGFSZWNvbmRpdG9SZWN1cGVyb1JlZGRpdG9SZWRpbWVyZVJlZ2FsYXRvUmVnaXN0cm9SZWdvbGFSZWdyZXNzb1JlbGF6aW9uZVJlbWFyZVJlbW90b1Jlbm5hUmVwbGljYVJlcHJpbWVyZVJlcHV0YXJlUmVzYVJlc2lkZW50ZVJlc3BvbnNvUmVzdGF1cm9SZXRlUmV0aW5hUmV0b3JpY2FSZXR0aWZpY2FSZXZvY2F0b1JpYXNzdW50b1JpYmFkaXJlUmliZWxsZVJpYnJlenpvUmljYXJpY2FSaWNjb1JpY2V2ZXJlUmljaWNsYXRvUmljb3Jkb1JpY3JlZHV0b1JpZGljb2xvUmlkdXJyZVJpZmFzYXJlUmlmbGVzc29SaWZvcm1hUmlmdWdpb1JpZ2FyZVJpZ2V0dGF0b1JpZ2hlbGxvUmlsYXNzYXRvUmlsZXZhdG9SaW1hbmVyZVJpbWJhbHpvUmltZWRpb1JpbW9yY2hpb1JpbmFzY2l0YVJpbmNhcm9SaW5mb3J6b1Jpbm5vdm9SaW5vbWF0b1JpbnNhdml0b1JpbnRvY2NvUmludW5jaWFSaW52ZW5pcmVSaXBhcmF0b1JpcGV0dXRvUmlwaWVub1JpcG9ydGFyZVJpcHJlc2FSaXB1bGlyZVJpc2F0YVJpc2NoaW9SaXNlcnZhUmlzaWJpbGVSaXNvUmlzcGV0dG9SaXN0b3JvUmlzdWx0YXRvUmlzdm9sdG9SaXRhcmRvUml0ZWdub1JpdG1pY29SaXRyb3ZvUml1bmlvbmVSaXZhUml2ZXJzb1JpdmluY2l0YVJpdm9sdG9SaXpvbWFSb2JhUm9ib3RpY29Sb2J1c3RvUm9jY2lhUm9jb1JvZGFnZ2lvUm9kZXJlUm9kaXRvcmVSb2dpdG9Sb2xsaW9Sb21hbnRpY29Sb21wZXJlUm9uemlvUm9zb2xhcmVSb3Nwb1JvdGFudGVSb3RvbmRvUm90dWxhUm92ZXNjaW9SdWJpenpvUnVicmljYVJ1Z2FSdWxsaW5vUnVtaW5lUnVtb3Jvc29SdW9sb1J1cGVSdXNzYXJlUnVzdGljb1NhYmF0b1NhYmJpYXJlU2Fib3RhdG9TYWdvbWFTYWxhc3NvU2FsZGF0dXJhU2FsZ2VtbWFTYWxpdmFyZVNhbG1vbmVTYWxvbmVTYWx0YXJlU2FsdXRvU2Fsdm9TYXBlcmVTYXBpZG9TYXBvcml0b1NhcmFjZW5vU2FyY2FzbW9TYXJ0b1Nhc3Nvc29TYXRlbGxpdGVTYXRpcmFTYXRvbGxvU2F0dXJub1NhdmFuYVNhdmlvU2F6aWF0b1NiYWRpZ2xpb1NiYWx6b1NiYW5jYXRvU2JhcnJhU2JhdHRlcmVTYmF2YXJlU2JlbmRhcmVTYmlyY2lhcmVTYmxvY2NhdG9TYm9jY2lhdG9TYnJpbmFyZVNicnVmZm9uZVNidWZmYXJlU2NhYnJvc29TY2FkZW56YVNjYWxhU2NhbWJpYXJlU2NhbmRhbG9TY2Fwb2xhU2NhcnNvU2NhdGVuYXJlU2NhdmF0b1NjZWx0b1NjZW5pY29TY2V0dHJvU2NoZWRhU2NoaWVuYVNjaWFycGFTY2llbnphU2NpbmRlcmVTY2lwcG9TY2lyb3Bwb1NjaXZvbG9TY2xlcmFyZVNjb2RlbGxhU2NvbHBpdG9TY29tcGFydG9TY29uZm9ydG9TY29wcmlyZVNjb3J0YVNjb3Nzb25lU2Nvenplc2VTY3JpYmFTY3JvbGxhcmVTY3J1dGluaW9TY3VkZXJpYVNjdWx0b3JlU2N1b2xhU2N1cm9TY3VzYXJlU2RlYml0YXJlU2RvZ2FuYXJlU2VjY2F0dXJhU2Vjb25kb1NlZGFub1NlZ2dpb2xhU2VnbmFsYXRvU2VncmVnYXRvU2VndWl0b1NlbGNpYXRvU2VsZXR0aXZvU2VsbGFTZWx2YWdnaW9TZW1hZm9yb1NlbWJyYXJlU2VtZVNlbWluYXRvU2VtcHJlU2Vuc29TZW50aXJlU2Vwb2x0b1NlcXVlbnphU2VyYXRhU2VyYmF0b1NlcmVub1NlcmlvU2VycGVudGVTZXJyYWdsaW9TZXJ2aXJlU2VzdGluYVNldG9sYVNldHRpbWFuYVNmYWNlbG9TZmFsZGFyZVNmYW1hdG9TZmFyem9zb1NmYXRpY2F0b1NmZXJhU2ZpZGFTZmlsYXRvU2ZpbmdlU2ZvY2F0b1Nmb2RlcmFyZVNmb2dvU2ZvbHRpcmVTZm9yemF0b1NmcmF0dG9TZnJ1dHRhdG9TZnVnZ2l0b1NmdW1hcmVTZnVzb1NnYWJlbGxvU2dhcmJhdG9TZ29uZmlhcmVTZ29yYmlvU2dyYXNzYXRvU2d1YXJkb1NpYmlsb1NpY2NvbWVTaWVycmFTaWdsYVNpZ25vcmVTaWxlbnppb1NpbGxhYmFTaW1ib2xvU2ltcGF0aWNvU2ltdWxhdG9TaW5mb25pYVNpbmdvbG9TaW5pc3Ryb1Npbm9TaW50ZXNpU2ludXNvaWRlU2lwYXJpb1Npc21hU2lzdG9sZVNpdHVhdG9TbGl0dGFTbG9nYXR1cmFTbG92ZW5vU21hcnJpdG9TbWVtb3JhdG9TbWVudGl0b1NtZXJhbGRvU21pbHpvU21vbnRhcmVTbW90dGF0b1NtdXNzYXRvU25lbGxpcmVTbmVydmF0b1Nub2RvU29iYmFsem9Tb2JyaW9Tb2Njb3Jzb1NvY2lhbGVTb2RhbGVTb2ZmaXR0b1NvZ25vU29sZGF0b1NvbGVubmVTb2xpZG9Tb2xsYXp6b1NvbG9Tb2x1YmlsZVNvbHZlbnRlU29tYXRpY29Tb21tYVNvbmRhU29uZXR0b1Nvbm5pZmVyb1NvcGlyZVNvcHBlc29Tb3ByYVNvcmdlcmVTb3JwYXNzb1NvcnJpc29Tb3Jzb1NvcnRlZ2dpb1NvcnZvbGF0b1Nvc3Bpcm9Tb3N0YVNvdHRpbGVTcGFkYVNwYWxsYVNwYXJnZXJlU3BhdG9sYVNwYXZlbnRvU3BhenpvbGFTcGVjaWVTcGVkaXJlU3BlZ25lcmVTcGVsYXR1cmFTcGVyYW56YVNwZXNzb3JlU3BldHRyYWxlU3BlenphdG9TcGlhU3BpZ29sb3NvU3BpbGxhdG9TcGlub3NvU3BpcmFsZVNwbGVuZGlkb1Nwb3J0aXZvU3Bvc29TcHJhbmdhU3ByZWNhcmVTcHJvbmF0b1NwcnV6em9TcHVudGlub1NxdWlsbG9TcmFkaWNhcmVTcm90b2xhdG9TdGFiaWxlU3RhY2NvU3RhZmZhU3RhZ25hcmVTdGFtcGF0b1N0YW50aW9TdGFybnV0b1N0YXNlcmFTdGF0dXRvU3RlbG9TdGVwcGFTdGVyem9TdGlsZXR0b1N0aW1hU3RpcnBlU3RpdmFsZVN0aXp6b3NvU3RvbmF0b1N0b3JpY29TdHJhcHBvU3RyZWdhdG9TdHJpZHVsb1N0cm96emFyZVN0cnV0dG9TdHVjY2FyZVN0dWZvU3R1cGVuZG9TdWJlbnRyb1N1Y2Nvc29TdWRvcmVTdWdnZXJpdG9TdWdvU3VsdGFub1N1b25hcmVTdXBlcmJvU3VwcG9ydG9TdXJnZWxhdG9TdXJyb2dhdG9TdXNzdXJyb1N1dHVyYVN2YWdhcmVTdmVkZXNlU3ZlZ2xpb1N2ZWxhcmVTdmVudXRvU3ZlemlhU3ZpbHVwcG9TdmlzdGFTdml6emVyYVN2b2x0YVN2dW90YXJlVGFiYWNjb1RhYnVsYXRvVGFjY2lhcmVUYWNpdHVybm9UYWxlVGFsaXNtYW5vVGFtcG9uZVRhbm5pbm9UYXJhVGFyZGl2b1RhcmdhdG9UYXJpZmZhVGFycGFyZVRhcnRhcnVnYVRhc3RvVGF0dGljb1RhdmVybmFUYXZvbGF0YVRhenphVGVjYVRlY25pY29UZWxlZm9ub1RlbWVyYXJpb1RlbXBvVGVtdXRvVGVuZG9uZVRlbmVyb1RlbnNpb25lVGVudGFjb2xvVGVvcmVtYVRlcm1lVGVycmF6em9UZXJ6ZXR0b1Rlc2lUZXNzZXJhdG9UZXN0YXRvVGV0cm9UZXR0b2lhVGlmYXJlVGlnZWxsYVRpbWJyb1RpbnRvVGlwaWNvVGlwb2dyYWZvVGlyYWdnaW9UaXJvVGl0YW5pb1RpdG9sb1RpdHViYW50ZVRpemlvVGl6em9uZVRvY2NhcmVUb2xsZXJhcmVUb2x0b1RvbWJvbGFUb21vVG9uZm9Ub25zaWxsYVRvcGF6aW9Ub3BvbG9naWFUb3BwYVRvcmJhVG9ybmFyZVRvcnJvbmVUb3J0b3JhVG9zY2Fub1Rvc3NpcmVUb3N0YXR1cmFUb3Rhbm9UcmFib2Njb1RyYWNoZWFUcmFmaWxhVHJhZ2VkaWFUcmFsY2lvVHJhbW9udG9UcmFuc2l0b1RyYXBhbm9UcmFycmVUcmFzbG9jb1RyYXR0YXRvVHJhdmVUcmVjY2lhVHJlbW9saW9UcmVzcG9sb1RyaWJ1dG9UcmljaGVjb1RyaWZvZ2xpb1RyaWxsb1RyaW5jZWFUcmlvVHJpc3RlenphVHJpdHVyYXRvVHJpdmVsbGFUcm9tYmFUcm9ub1Ryb3Bwb1Ryb3R0b2xhVHJvdmFyZVRydWNjYXRvVHViYXR1cmFUdWZmYXRvVHVsaXBhbm9UdW11bHRvVHVuaXNpYVR1cmJhcmVUdXJjaGlub1R1dGFUdXRlbGFVYmljYXRvVWNjZWxsb1VjY2lzb3JlVWRpcmVVZGl0aXZvVWZmYVVmZmljaW9VZ3VhbGVVbGlzc2VVbHRpbWF0b1VtYW5vVW1pbGVVbW9yaXNtb1VuY2luZXR0b1VuZ2VyZVVuZ2hlcmVzZVVuaWNvcm5vVW5pZmljYXRvVW5pc29ub1VuaXRhcmlvVW50ZVVvdm9VcHVwYVVyYWdhbm9VcmdlbnphVXJsb1VzYW56YVVzYXRvVXNjaXRvVXNpZ25vbG9Vc3VyYWlvVXRlbnNpbGVVdGlsaXp6b1V0b3BpYVZhY2FudGVWYWNjaW5hdG9WYWdhYm9uZG9WYWdsaWF0b1ZhbGFuZ2FWYWxnb1ZhbGljb1ZhbGxldHRhVmFsb3Jvc29WYWx1dGFyZVZhbHZvbGFWYW1wYXRhVmFuZ2FyZVZhbml0b3NvVmFub1ZhbnRhZ2dpb1ZhbnZlcmFWYXBvcmVWYXJhbm9WYXJjYXRvVmFyaWFudGVWYXNjYVZlZGV0dGFWZWRvdmFWZWR1dG9WZWdldGFsZVZlaWNvbG9WZWxjcm9WZWxpbmFWZWxsdXRvVmVsb2NlVmVuYXRvVmVuZGVtbWlhVmVudG9WZXJhY2VWZXJiYWxlVmVyZ29nbmFWZXJpZmljYVZlcm9WZXJydWNhVmVydGljYWxlVmVzY2ljYVZlc3NpbGxvVmVzdGFsZVZldGVyYW5vVmV0cmluYVZldHVzdG9WaWFuZGFudGVWaWJyYW50ZVZpY2VuZGFWaWNoaW5nb1ZpY2luYW56YVZpZGltYXJlVmlnaWxpYVZpZ25ldG9WaWdvcmVWaWxlVmlsbGFub1ZpbWluaVZpbmNpdG9yZVZpb2xhVmlwZXJhVmlyZ29sYVZpcm9sb2dvVmlydWxlbnRvVmlzY29zb1Zpc2lvbmVWaXNwb1Zpc3N1dG9WaXN1cmFWaXRhVml0ZWxsb1ZpdHRpbWFWaXZhbmRhVml2aWRvVml6aWFyZVZvY2VWb2dhVm9sYXRpbGVWb2xlcmVWb2xwZVZvcmFnaW5lVnVsY2Fub1phbXBvZ25hWmFubmFaYXBwYXRvWmF0dGVyYVphdm9ycmFaZWZpcm9aZWxhbnRlWmVsb1plbnplcm9aZXJiaW5vWmliZXR0b1ppbmNvWmlyY29uZVppdHRvWm9sbGFab3RpY29adWNjaGVyb1p1Zm9sb1p1bHVadXBwYVwiO2xldCB3b3JkbGlzdCQ2PW51bGw7ZnVuY3Rpb24gbG9hZFdvcmRzJDYobGFuZyl7aWYod29yZGxpc3QkNiE9bnVsbCl7cmV0dXJufXdvcmRsaXN0JDY9d29yZHMkNC5yZXBsYWNlKC8oW0EtWl0pL2csXCIgJDFcIikudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMSkuc3BsaXQoXCIgXCIpO2lmKFdvcmRsaXN0LmNoZWNrKGxhbmcpIT09XCIweDVjMTM2MmQ4OGZkNGNmNjE0YTk2ZjMyMzQ5NDFkMjlmN2QzN2MwOGM1MjkyZmRlMDNiZjYyYzJkYjZmZjc2MjBcIil7d29yZGxpc3QkNj1udWxsO3Rocm93IG5ldyBFcnJvcihcIkJJUDM5IFdvcmRsaXN0IGZvciBpdCAoSXRhbGlhbikgRkFJTEVEXCIpfX1jbGFzcyBMYW5nSXQgZXh0ZW5kcyBXb3JkbGlzdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKFwiaXRcIil9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDYodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDZbaW5kZXhdfWdldFdvcmRJbmRleCh3b3JkKXtsb2FkV29yZHMkNih0aGlzKTtyZXR1cm4gd29yZGxpc3QkNi5pbmRleE9mKHdvcmQpfX1jb25zdCBsYW5nSXQ9bmV3IExhbmdJdDtXb3JkbGlzdC5yZWdpc3RlcihsYW5nSXQpO1widXNlIHN0cmljdFwiO2NvbnN0IGRhdGEkMj1cIn1hRSM0QT1ZdiZjbyM0TiM2Rz1jSiZTTSM2NnwvWiM0dCZrbn40NiM0S340cSViOT1JUiM3bCxtQiM3V19YMipkbH1Vb343c31VZiZJdyM5YyZjd342TyZINiZ3eCZJRyV2NT1JUX44YSZQdiM0NyRQUiY1MCVLbyZRTSYzbCM1ZixEOSM0THwvSCZ0UTt2MH42bl1uTjxkaSxBTT1XNSVRTyZrYSZ1YSxoTV50bT16Vj1KQT13UiYrWF03UCZOQiM0SiM1THwvYltkQX10SjxEbyY2bSZ1MltVMSZLYi5ITSZtQz13MCZNVzxyWSxIcSM2TX1RRywxMyZ3UH1KcF1PdyV1ZSZLZzxIUDxEOX40a345VCZJMl9jNiQ5VCM5L1tDNX43T340YT1jcyZPNz1LSz1BbiZsOSQ2VSQ4QSZ1RCZRSXwvWSZiZ31VeCZGMiM2Yn1FMiZKTiZrVyZrcD1VLyZiYj1YbDxDan1rK341SiM2TCY1eiY5aX1iNCZGbyxobyhYMF9nM340TyRGeiZRRTxITj1Xd102LyVHRi1Wdz10aiYvRCZQTiM5Zz1ZT31jTCZPZiZQSX41SSZJcD12VT1JVyM5Rzswby13VX1zcyZRUjxCVCZSOT10ayRQWV9kaCZQcS15aF03VCxuai5YdT1FUCY3Nj1jSSZGcypYZ316NyRHYiYrST1ERixBRj1jQX1yTCM3aj1EeiYzeTxBYSQ1Mj1QUX1iMChpWSRGYX1vTCZ4ViM2VT1lYz1XWix4aCVSWTxkcCM5TiZGbCY0ND1XSCpBNz1zaCZUQiY4UD0wNzt1KyZQS311aH1KNSM3MilWLz14QyxBQiRrMCZmNjsxRXwrNT0xQiwzdl02biZ3UiViKyZ4eF03Zj1PbH1mbDsrRF53R103RTtuQjt1aF5JciZsNT1KTCxuUz1jZj1nNTt1NnwvUSRHYz1NSCVIZyM1ZCVNNl44Nj1VKyRHeixsLyxpcl41eSZCYSYvRi1JWSZGSSZiZSVJWiM3NyZQV19OdSRrRShZZiZOWF03WixKeSZGSihYbyZOeiMvZD15NyZNWDxBZ31aKztuRV1EdChpRyM0RD0xMyZQan40YyV2OCZabyVPTCYvWCM0VzxIUiZpZX42Sl8xTyhZMj15NT1BZCpjdl9lQiM2ayZQWDpCVSM3QTt1ayZGdCZGeF9kRD1VMjt2Qj1VNT00Rn0rTyZHTi5ISDo5cz1iMCVOVihqTyZJSD1KVH1aOT1WWjxBZixLeF40bSZ1SiVjNiw2cjs5bSMrTH1jZiVLaCZGM340SD12UH1idSxIenwrKywxd11udn1rNjt1dSRqdypLbCpXWCZ1TVt4NyZGclttNyROTyZRTl1odT1KTn1uUl44ZyMvaChwc3xLQzt2ZH14ej1WMH1wNiZGRCRHMSM3SzxiR180cH44ZyZjZjt1ND10bH0rayU1L31mejt1dzxjQT11MX1nVX1WTT1MSj1lWCYrTCZQciM0VX1wMjpuQywyS103SDpqRiY5eH11WCM5Tz1NQjxmen44WH41bSY0RCZrTiZ1NSVFLyhoNyhaRiZWRzxkZShxTXwvZS1XdD0zeChhKywvUl1mLyZORCRSbyZuVX0wZz1LQSVrSCZOSyRLZTxkU31jQiZJWH41ZyRUTl02bT1VdixJcyZQeT1FZiVLeiMrLyViaSYrQTxGNCRPRyY0QyZGTCM5Vjxaaz0ySV9lRSY2Y11udyZrcSRIR315KyZBOCRQM31PSD1YUF03MCVJUyhBSl9nSCVHWiZ0WSZBWj12Yn42eSYvcj1WST1XdjxaaT1mbD14ZiZlTH1jOH1PTD1NSj1nOCRGNz1ZVH05dT0wK154Q31KSCZuTF5OMH40VF1LMixDeSVPQyM2czt2RyhBQ154ZV5jRyZNRn1CciM5UDt3RC03aCRPLyZ4QX1Gbl5QQ102aV03RyY4ViRRczt2bChUQn43M340bDxtVyY2Vj0yeSZ1WSYrMylhUH1YRjtMUCZreCR3VT10Nzt1eTxGTiZseik3RT1PbypZKzt3SX05cX1sZTtKNiZSaSY0dCZRciM4Qj1jYiZ2Rz1KNXxRbChoNTxZeX40K31RRCxMeD13biVLLyZSSz1kTyZQdyxROT1jbyU0dTs5dX1nMEA2YV40SSViMD16b3wvYyZ0WD1kUT1PUyMrYj15el9BQiZ3QiZQbT1XOSRIUF9nUj02Mj1BTz10aT1oSSxvQSZqciZkSD10bSZiNiRQMih4OD16aTtuR343RjswNV0wbltJeCYzbX1yZz1YcD1jZCZ1el03dDs5Nz1jTjt2VjxqZiZGRiZGMT02USZJaypLayZQNCwyej1mUV03RCYzdSxIMD1kL31VdzxaTjw3Un1LdjswZiRINyxNRF03biRGMCM4OH45WiVkYT1ieTsrVCMvdT1WRiZmTyZrcl5rZjxBQl1zVSxJNSROZyZQejswaSZRRCZ2TT1ZbDpCTTtuSl94Sl1VNyZLZiYzMCwzZnxaOSpkQylqZV9qQSZRNCZLcCROSChZeiM2UyZJZCVJYj1LWCxBRD1LViVkUH10VyZQa14rRV9OaT1jcSwzUn1WWihTaT1iK31ydjswan1yWl11QSwvdyhTeCZKdiR3OSY0ZCZ3RSxOSiRHeT1KL11McyM3azxaUTxZLyZ1al1PdiRQTTt2MywyRiYrdTp1cD1PbiYzZSxKdjs5MD1KKyZRbV02cX1iSyMrZH44WShoMl1oQTs5OSZBUz1JL31xQiZkUX15Si1WTX1WbCZ1aSxpQiZHM3xEY103ZD1lUSVkWCVKQ18xTH40ZF5OUDt2SiYvMSlaSSM3Tl05WFtiUSZQTD0wTChVWixMbSZrYyZJUn1uNyhpUjxBUTxkZz0zMz12Tn1mdH1hdV03SSxCYT14OT1kUn42UiZUcT1YaSwzZCROciZCY31ESSZrdSZ2Zl1EbiwvRiZpRCxMbCZOdz0weSZJNz1Mcz0vQSZ0VT1RZX1VYSZ1ayYrRj1nND1naD1WaiMrMSZRbn1VeSo0NCM1RixQYyZSeipYbj1vaD01Vzswbl9OZihpRTxZNz12cj1adV1veiM1WiVtST1rTj1Cdl9KcChUMjt2dF9NbDxGUyZ1ST1MLyY2UF02NCRNN304NjxibyVRWChTSSVJWSZWSz1BbCZVeDt2djt1dCpFLyV1aDxaRXxPMyxNMih5Y115dT1XayZ0cDpFeH1ocixDbCZXRSkrWj04VX1JMl80USxoQV9zaT1pdz1PTT10TT15WiVJYT1VNzt3VH1iKzt1bz1aYX15UyE1eH1IRH1mYiM1T19kQTtOdiV1Qih5QjswMShTZn1Gazt2N31QdCM4djxtWiM3TCwvciZQbH40dyZmNT1QaCRGd19MRiY4bSxiTD15SiZCSH1wLypKbn10VX41UTt3QihoNl1EZl04cF4rQjtFNCZXYz1kKztFYSZidyQ4QyZGTixETT1ZZn1tUH41dz1mVCM2Vj1tQz1GaT1BVn1qQiZBTn1sV31hSCMvRClkWjtobDt2RX0vNyxDSjszMSZ3OCxoaiV1OV9Kcz1qSiY0TX44az1UTiZlQ31uTCZ1Yy13aSZsWH1kaj1Ndj1lMiM2dT1jciR1cSQ2R104V31KYjpubT1ZZzxiMyhVQTt2WCY2biZ4Rj1LVCxqQyxEZSZSOCZvWT1adiZvQl03Lz1aMiZPYX1iZixoaCg0aF50WiY3MiZOeDtEMiZ4TH41aH40MClaRyloKz1PSiZSQV1CdiR5Qj1PcT1kZixBUSVKbn1PSjsxMSwzeiZUbCZ0ajt2K15IdixEaChpZD1zK103TiZOMyk5UX44ZixTND11Vz13NCZ1WCxMWCYzZF1DSiZ5cCY4eDxiMl9kbyZsUD15LzxjeV9kRz1PaT03UihWSChsdF8xVCxJcV9BQTsxMl42VCVrNiM4S1tCMXtvTzxBVVtCdDsxYiQ5UyZQczw4VD1TdHtiWSxqQihacCY2MyZVdiQ5VixQTV02diZBZn16V1tiV19vcX1zbX1uQiZLcSZnQyZmZl9lcV8ybSY1RiZUSX1yZn1HZjtacl96OTtFUiZqa31pel9zbjxCTn4rbiZ2bz1WaSU5N3xaUj1XYyxXRSY2dF02eiU4NShseSM4ND1LWSk2bV81Lz1hWCxOM31UbSZoZSY2S110Ul9CMi1JMzt1LyZoVSZsSDxBUD1pQiZJQT1YTDsvNSZOaD13djxCSCM3OT12Uz16bDxBQT0wWF9SR31CdyY5cCROVyxBWCZrUF9McCYvWihUY11NdX1ocyM2SX01QiZjSTxicSZIOSM2bT1LOX12SChZMShZMCM0QiZ3NiwvOSZnRzxiRSwvTz16Yn1JNF9sODxCLzt3TCVRbzxIT1tNcT1YWH0wdiZCUCZGNChtR30waX1ubSxFQz05dXtJMyx4RyYvOT1KWSpESyZoUilCWD1FST1jeD1iL3s2a315WCVBKyZ3YX1YYj1sYTt3aV5sTDswdH1qbyZRYj14Zz1YQn1pTzxxb3tiUj1OViY4Zj1hMCZKeTswdj11SylISzt2TiM2aCZqQihoLyV1ZCZOSSV3WS5YNz1QdH1DdS11TCZHc19obCVtSCx0bV03OD1MYl5RMCM3WT0xdTxCdCYrUT1Db19SSCx3MzsxZX11eDxhVTt1aX1VMyZRNSVidF02MyZVUXwwbCZ1TH1PNyYzbyxBViZkbXxOaihYdCo1KyhVdSZIaChwNyhVRj1WUj1CcF5KbCZIZFtpeCk5Lz1JcV1DODw2N102Nn1tQiU2Zn1iYn1KSV04VCRIQX1kYj1ZTSZwYT0ySn10UyZZMD1QUyZ5ND1jWCQ2RSxoWCxYUCZuUjswNCxGUSZsMCZWbV9EdiM1WX44Wj1CaSVNQV02eD1KTzorcCxBeiY5cSxIan42L31TRD1LMTpFSn1uQTtRbyMvRV05UixJZSY2WCVXM102MSZ2ND14WF9NQz0wcTswNihYcT1mc31JR31Edj0wbH1vNyRpWjs5diZMSCZEUC03YSZPWSxTWixLeixDdiZkaD1meHxOaCxGL343cT1YRiZ3Kzs5biZHdzswaH1aNzw3TyZKSyhTNyZMUzxBRDxhYz13bzxEdCZ6dyU0Qj00diM4UDs5b342cCp2Vj1UbSxPciZJNj0xcX1uWT1QMD1ncSZCbCZVdSxDaCV5Yn1VWT16aH1kaH1ybChUNF94ayhZQSM4Uip4SCxJTn1Kbl03Vn1DNCZUeX1qM103cD1jTD0zaCZ3VyVRdjxaMz1mMCZSSSYrUyhpY196cX1vTiYvWT16MTtUZD1MVz0wZT1PSShWYywrYl5qdShVTDswcjpaYSU4dj1ScD16dyY1OCY3MyZ3S31xWF02eSY4RSlhMn1XUj13UF51ciZuUTxjSH1SZT1BcSZ3a31RMCYrcT1QUCxHY3wvZF5rNSxGd104WX1QZ11wMz1qdT1lZH1yNV95ZiZDc103eiQvRzxDbSZKcCY1NF8xR19nUF9MbH1KWjswdV1rOF83ayhTZ102NXs5aT1MTiZTeCZXSyxpVyZmRCZMa3s5YX1FbS05YyM4TiZpbz1zeV04ZCZuVCZJSyhseCM3LyRsVyhUZDxzOH40OSwzbzw3WT1NVyhUK19KciZXZCxpTH1DdD14aCY1Vjt2NCY4biVLeD1pRiZsMl8wQntCKyxJZihKMCxMdjt1OD1LeC12Qj1IQyZ2Uz1aNiZmVSZ2RV54SzszRD00aD1NUiM0NTpKdzswZH1pdz1MVX1JNT1JMF1nQippbSxLOX1HVSwxa180VSZUdD1WcyhpWCZsVShURiM3eSxaT31vQSZtNSM1UH1QTn1Vej1oTTxCMSZGQjxhRyxlNn43VDx0UChVUV9aVD13dSZGOClhUV1pTiwxcl9MbyYvZzpDRH04NHtKMV9LaSZOYSYzbiRqeiZGRT1kYzt1djt2YX1pbn1sbD1mdihoMSYzaH1mcD1DeX1CTSgrRX44bX1sbyV2Nz1oQyhUNiRjaj1CUT1CdyhEUiwyaj1LcyxOU3xGKzswMD1mVT03MH1NYihZVTsrRyZtNyZocj1TayVDb110KyhYNV9Kd30wcn1nQyhBUy1JUCZRSzxaMiM4USRXQ11XWH1UMiZwR19LYSxIQz1SNCYvTjtaKztjaChDNyxENCQzcF9NayZCMiQ4RD1uOSVLeSM1eihDVCZRSiM3Ql1EQ11nV31uZn41TTtJdyM4MH1UY18xRiM0Wi1hQ31IbD1waD1meiwvMz1hV31KTX1ubjtERzt2bX13biw0UH1UMzt3eCZSRyR1K316Sz0wYjsrSl9Fa3tyZTxhWj1BU315WSM1RF03cSxDcH14Tj1WUCoyQ31HWn1hR34rbV9Dcz1PWSM2cl02ZzxHU31MQyhVQj0zQT1Cb31KeTxjNH1JczsxUDxBR31PcDxaMX1sZH1uUz0xWix5TSY5NSY5OD1DSig0dDoyTCRIaz1ab31WYzsrSX1ucCZOMX05eT1pdn1DTyo3cD1qTClweF10Yl56aCZHUyZWbCV2Lzt2Uj0xND16SiY0OXwvZl1oRn1XRzswMz04UH1vLyZHZyZycDtEQixLdn1KaSZQYjthQV5sbCg0aiV5dH0rSyRIdCM0eSZoWV03WTxGMSxlTn1iRyhVaCU2Wl10NSVHNzsrRl9SRTtpdH10TD1MUyZEYT1YeChTKyg0Zj04Rz15SX1jSn1XUD0zNz1qU31wWH1oZClmcDxBOD1KdH4rbyRISj1NNn1pWD1nOX1DUz1kdj1DaihtUCVLZCx4cXwrOSZMRCg0Lz1YbSZRUD1MY31MWCZmTDsrSz1PcChsdT1Rcy5xQzorZSZMKz1KaiM4dztTTF03UyhiKyM0ST1jMSZuR19MZiZ1SDsrUilaVjxiViVCLyxURSYwSCZKcSZBaCVPRiZTcyhwMixXdiZJMz1XbH1WcTsxTCZsSiM5Yl8xSD04cj1iOD1KSChTWj1oRD1KMiM3VSwvVSMvWH42UCxGVTxlTD1qeCxtRz1oRz1DRSZQVT1TZShxWCZMWT1YNj15NCZ0ayZRUSZ0Zj00ZyZ4SX1XKyZtWj1EYyM3d31MZztEQTt3UV9LYihjSj1oUiV5WCZZYixod3tiWF80WDtFUDsxV18yTX1VYz1iNShZRixDTSZUcF5PSntERF02cz12Rj1Zb344cX1YSH1GdSVQNShTSj1RdDtNT11zODxGMyZCMyY4VChVbC1CUypkdyZkUjw4N30vOF02MiRQWl1MeDxBdX05UV03Yz1qYT1LUixHbyxVcyZ2Nihxa31wRyZHMj1ldl5HTSV3NCZINF03RiZkdl1KNn1Fdzo5dz1zai1aTH1ZbSQraChVdChVbX40bj1YcyhVNyVlRT1RY19KUjxDQSM2dDxGdnwvSSxJUyxFRzxGMihYeSQvbjxGYShoOX0rOV8ybyZONCM3WDxacXwrZl9EcD1kdCZuYSxDYT1OSilqWT04Qz1ZRz1zNiZRKzxET31EMz14QiZSMShsdztRbjxiRihDdXwvQn1IVj1TUyZuNywxMCZ1MF1EbSVBNl40UT1XUihURD1YbzxHSCxSaihsOCliUCZuLz1MTSZDRixGNSZtbD1QSjswaz1MRz10cSxSaCxENkA0aT0xcCYrOT1ZQyVlcl9NaDtuSTswcT1Gd104MD14cT1GTSRHdjt2NiZuYzt3SyVIMiZLajt2cyxBQT1ZUCw2Nn1iSShxUn41VT02cX40YiROaT1LNS5YMyRTbyZJdShwK104Rz1DZj1SWShUU19PMyhpSCY1Nz1mRT1EZ19EbyM5eiM3SDtGS3txZF8yayVKUn1lbiZnaF96ODtSeH05cDxjTl9OZSxETztMTl83b34vcD1ORj01WX1nTjxjZTxDMSxRRV1Xdj0zdTxCQ31HS115cX1EWSZ1L19oaj1JSShweiZyQyxqViYrWn11dD1OUTtDZy1TUl9aUywrbz11LztPeV9SS19RRihGeCZ4UH1XciZUQSxVaCZnMT15cntheFtWRiRQZyhZQjtPeD1WeTsrVyhTcH1YViVkZCYzMyhsL11sNCM0WX1PRT02Yz1idyhBNyY5dCV3ZCZOLyZtbyxKSCZRZSlmbT1Bb31mdT10SFwiO2NvbnN0IGRlbHRhRGF0YT1cIkZBWkRDNkJBTGNMWkNBK0dCQVJDVzh3TkNjRERaOExWRkJPcXFEVWlvdStNNDJURkF5RVJYRmI3RWpoUCt2bUJGcEZyVXBmRFYyRjdlQitlQ2x0Q0hKRldMRkNFRCtwV1RvakVJSEZYYzNhRm40RjY4enFqRXVLaWRTMVFCVlBERWhFN05BNG1oTUY3b1RoRDQ5b3QzRmd0ekhGQ0swYWNXMXg4REgxRW1Mb0lscldGQkxFK3k1K05BM0N4NjV3SkhUYUVaVmFLMW1XQW1QR3hnWUNkeHdPalRESXQvZmFPRWhUbDF2cU5zS3RKQ09oSld1aW8yZzA3S0xaRVFzRkJVcE50d0VCeUJneEZzbEZoZUZiaUVQdmk2MW1zRHZBcHhDekI2ckJDem94N2pvWUE1VWREYytDYjRGU2dJYWJwWEZBajNiamttRkF4Q1pFK21EL1NGZi8wRUxlY1lDdDNuTG94QzZXRVpmMnRLREI0b1p2ckVtcUZrS2s3QndJTEE3Z3RZQnBzVHEvL0Q0akQwRjB3RUI5cHlRMUJENUJhMG9ZSERJK3NiREZodnJIWGRESGZnRkVJSkxpNXI4cWVyY05GQmdGTEM0Ym81RVJKdGFtV0JERnk3M0tDRWI2TThWcG1FdDMzMHlnQ1RLNThFSUlGa1lnRjg0Z3RHQTlVeWgzbTY4aVZyRmJXRmJjYnFpQ1lIWjlKMWplUlBiTDh5c3doTWlEYmhFaGROb1N3RmJackxUNzQwQUJFcWdDa084SjFCTGQxVmhLS1I0c0QxeVVvMHorRkY1OU12ZzcxQ0ZieUVoYkhTRkJLRUlLeW9RTmdRcHBxOVQwS0FxZVB1MFpGR3JYT0hkS0pxa29URmhZdnBETnl1dXpuck44NHRoSmJzQ29PNkN1Nlhsdm50dnkwUVl1QUV4UUVZdFRVQmYzQ29DcXdnR0ZaNHUxSEpGekRWd0V5M2NqY3BWNFF2c1BhQkMzckNHeUNGMjNvNEszcHAyZ2JlckdnRkVKRUhvNG5ISUN0eUtIMlpxeXhoTjA1S0JCSklRbEtoL091anYvREgzMlZybHFGZElGQzdGejlDdDRrYXFGTUUwVUVUTHBybk45a2Z5K2tGbXRRQkIwKzVDRnUwTjlJajhsL1Z2SkRoMm9xM2hUNkV6alRIS0ZON1pqWndvVHNBWjRFeHNrbzZGcGE2V0Mrc2R1ejhqeXJMcGVnVHYyaDFFQmVZcExwbTJjelFXMEtvQ2NTMGJDVlhDbXVXSkRCak4xblFOTGRGNThTRkowaDdpM3BDM29FT0t5L0ZqQmtsTDcwWHZCRUVJV3AyeVowNHhPYnpBV0RESkc3ZitEYnFCRUE3THlpUjk1ajdNRFZkRFZpejJSRTV2V2xCTXY1ZTQrVmZoUDNhWE5QaHZMU3luYjlPMng0dUZCViszanF1NmQ1cENHMjgvc0VUQnl2bXUvK0lKMEwzd2I0cmo5RE5PTEJGNlhQSU9EcjRMMTlVOVJSb2ZBRzZOeHlkaThCa2k4QmhHSmJCQUpLemJKeGtaU2xGOVEyQ3U4b0txZ2dCOWhCQXJ3TExxRUJXRXRGb3d5OFhLOGJFeXc5c25UK0JleUZrMVpDU3JkbWdmRXdGZVBUZ0NqRUxCRW5JYmphRERQSm0zNnJHOXB6dGNFelQ4ZEdrMjNTQmhYQkIxSDR6K09XemUwb29Geno4cERCWUZ2cDlqOXR2RkJ5Zjl5NEVGZFZuejAyNkNHUjVxTXI3ZnhNSE44VVVkbHlKQXpsVEJEUkMyOGsrTDRGQjgwNzhsanlEOTF0VWoxb2NuVHM4dmRFZjd6bmJ6bStHSWpFWm5vWkU1cm5MTDcwMFhjN3lIZnowNW5XeHkwM3ZCQjlZR0hZT1d4Z01RR0JDUjI0Q1ZZTkUxaHBmS3hOMHpLbmZKRG1tTWdNbUJXcU5iamZTeUZDQldTQ0dDZ1I4eUZYaUh5RWorVnREMUZCM0ZwQzF6STBrRmJ6aWZpS1RMbTl5cTV6Rm11citxOEZIcWpvT0JXc0JQaURibkNDMkVydW5WNmNKNlR5Z1hGWUhZcDdNS045UlVsU0lTOC94QkFHWUx6ZXFVbkJGNFFic1R1VWtVcUdzNkNhaURXS1dqUUs5RUpranBrVG1OQ1BZWExcIjtjb25zdCB3b3JkbGlzdCQ3PXt6aF9jbjpudWxsLHpoX3R3Om51bGx9O2NvbnN0IENoZWNrcz17emhfY246XCIweDE3YmNjNGQ4NTQ3ZTVhNzEzNWUzNjVkMWFiNDQzYWFhZTk1ZTc2ZDgyMzBjMjc4MmM2NzMwNWQ0ZjIxNDk3YTFcIix6aF90dzpcIjB4NTFlNzIwZTkwYzdiODdiZWMxZDcwZWI2ZTc0YTIxYTQ0OWJkM2VjOWMwMjBiMDFkM2E0MGVkOTkxYjYwY2U1ZFwifTtjb25zdCBjb2RlcyQxPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO2NvbnN0IHN0eWxlPVwifiFAIyQlXiYqXy09W117fXw7OiwuKCk8Pj9cIjtmdW5jdGlvbiBsb2FkV29yZHMkNyhsYW5nKXtpZih3b3JkbGlzdCQ3W2xhbmcubG9jYWxlXSE9PW51bGwpe3JldHVybn13b3JkbGlzdCQ3W2xhbmcubG9jYWxlXT1bXTtsZXQgZGVsdGFPZmZzZXQ9MDtmb3IobGV0IGk9MDtpPDIwNDg7aSsrKXtjb25zdCBzPXN0eWxlLmluZGV4T2YoZGF0YSQyW2kqM10pO2NvbnN0IGJ5dGVzPVsyMjgrKHM+PjIpLDEyOCtjb2RlcyQxLmluZGV4T2YoZGF0YSQyW2kqMysxXSksMTI4K2NvZGVzJDEuaW5kZXhPZihkYXRhJDJbaSozKzJdKV07aWYobGFuZy5sb2NhbGU9PT1cInpoX3R3XCIpe2NvbnN0IGNvbW1vbj1zJTQ7Zm9yKGxldCBpPWNvbW1vbjtpPDM7aSsrKXtieXRlc1tpXT1jb2RlcyQxLmluZGV4T2YoZGVsdGFEYXRhW2RlbHRhT2Zmc2V0KytdKSsoaT09MD8yMjg6MTI4KX19d29yZGxpc3QkN1tsYW5nLmxvY2FsZV0ucHVzaCh0b1V0ZjhTdHJpbmcoYnl0ZXMpKX1pZihXb3JkbGlzdC5jaGVjayhsYW5nKSE9PUNoZWNrc1tsYW5nLmxvY2FsZV0pe3dvcmRsaXN0JDdbbGFuZy5sb2NhbGVdPW51bGw7dGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIFwiK2xhbmcubG9jYWxlK1wiIChDaGluZXNlKSBGQUlMRURcIil9fWNsYXNzIExhbmdaaCBleHRlbmRzIFdvcmRsaXN0e2NvbnN0cnVjdG9yKGNvdW50cnkpe3N1cGVyKFwiemhfXCIrY291bnRyeSl9Z2V0V29yZChpbmRleCl7bG9hZFdvcmRzJDcodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDdbdGhpcy5sb2NhbGVdW2luZGV4XX1nZXRXb3JkSW5kZXgod29yZCl7bG9hZFdvcmRzJDcodGhpcyk7cmV0dXJuIHdvcmRsaXN0JDdbdGhpcy5sb2NhbGVdLmluZGV4T2Yod29yZCl9c3BsaXQobW5lbW9uaWMpe21uZW1vbmljPW1uZW1vbmljLnJlcGxhY2UoLyg/OlxcdTMwMDB8ICkrL2csXCJcIik7cmV0dXJuIG1uZW1vbmljLnNwbGl0KFwiXCIpfX1jb25zdCBsYW5nWmhDbj1uZXcgTGFuZ1poKFwiY25cIik7V29yZGxpc3QucmVnaXN0ZXIobGFuZ1poQ24pO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdaaENuLFwiemhcIik7Y29uc3QgbGFuZ1poVHc9bmV3IExhbmdaaChcInR3XCIpO1dvcmRsaXN0LnJlZ2lzdGVyKGxhbmdaaFR3KTtjb25zdCB3b3JkbGlzdHM9e2N6OmxhbmdDeixlbjpsYW5nRW4sZXM6bGFuZ0VzLGZyOmxhbmdGcixpdDpsYW5nSXQsamE6bGFuZ0phLGtvOmxhbmdLbyx6aDpsYW5nWmhDbix6aF9jbjpsYW5nWmhDbix6aF90dzpsYW5nWmhUd307XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgdmVyc2lvbiRnPVwiaGRub2RlLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJGw9bmV3IExvZ2dlcih2ZXJzaW9uJGcpO2NvbnN0IE49QmlnTnVtYmVyLmZyb20oXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDFcIik7Y29uc3QgTWFzdGVyU2VjcmV0PXRvVXRmOEJ5dGVzKFwiQml0Y29pbiBzZWVkXCIpO2NvbnN0IEhhcmRlbmVkQml0PTIxNDc0ODM2NDg7ZnVuY3Rpb24gZ2V0VXBwZXJNYXNrKGJpdHMpe3JldHVybigxPDxiaXRzKS0xPDw4LWJpdHN9ZnVuY3Rpb24gZ2V0TG93ZXJNYXNrKGJpdHMpe3JldHVybigxPDxiaXRzKS0xfWZ1bmN0aW9uIGJ5dGVzMzIodmFsdWUpe3JldHVybiBoZXhaZXJvUGFkKGhleGxpZnkodmFsdWUpLDMyKX1mdW5jdGlvbiBiYXNlNThjaGVjayhkYXRhKXtyZXR1cm4gQmFzZTU4LmVuY29kZShjb25jYXQoW2RhdGEsaGV4RGF0YVNsaWNlKHNoYTI1NiQxKHNoYTI1NiQxKGRhdGEpKSwwLDQpXSkpfWZ1bmN0aW9uIGdldFdvcmRsaXN0KHdvcmRsaXN0KXtpZih3b3JkbGlzdD09bnVsbCl7cmV0dXJuIHdvcmRsaXN0c1tcImVuXCJdfWlmKHR5cGVvZiB3b3JkbGlzdD09PVwic3RyaW5nXCIpe2NvbnN0IHdvcmRzPXdvcmRsaXN0c1t3b3JkbGlzdF07aWYod29yZHM9PW51bGwpe2xvZ2dlciRsLnRocm93QXJndW1lbnRFcnJvcihcInVua25vd24gbG9jYWxlXCIsXCJ3b3JkbGlzdFwiLHdvcmRsaXN0KX1yZXR1cm4gd29yZHN9cmV0dXJuIHdvcmRsaXN0fWNvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkJDM9e307Y29uc3QgZGVmYXVsdFBhdGg9XCJtLzQ0Jy82MCcvMCcvMC8wXCI7Y2xhc3MgSEROb2Rle2NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yR3VhcmQscHJpdmF0ZUtleSxwdWJsaWNLZXkscGFyZW50RmluZ2VycHJpbnQsY2hhaW5Db2RlLGluZGV4LGRlcHRoLG1uZW1vbmljT3JQYXRoKXtsb2dnZXIkbC5jaGVja05ldyhuZXcudGFyZ2V0LEhETm9kZSk7aWYoY29uc3RydWN0b3JHdWFyZCE9PV9jb25zdHJ1Y3Rvckd1YXJkJDMpe3Rocm93IG5ldyBFcnJvcihcIkhETm9kZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGRpcmVjdGx5XCIpfWlmKHByaXZhdGVLZXkpe2NvbnN0IHNpZ25pbmdLZXk9bmV3IFNpZ25pbmdLZXkocHJpdmF0ZUtleSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByaXZhdGVLZXlcIixzaWduaW5nS2V5LnByaXZhdGVLZXkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwdWJsaWNLZXlcIixzaWduaW5nS2V5LmNvbXByZXNzZWRQdWJsaWNLZXkpfWVsc2V7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByaXZhdGVLZXlcIixudWxsKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicHVibGljS2V5XCIsaGV4bGlmeShwdWJsaWNLZXkpKX1kZWZpbmVSZWFkT25seSh0aGlzLFwicGFyZW50RmluZ2VycHJpbnRcIixwYXJlbnRGaW5nZXJwcmludCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImZpbmdlcnByaW50XCIsaGV4RGF0YVNsaWNlKHJpcGVtZDE2MCQxKHNoYTI1NiQxKHRoaXMucHVibGljS2V5KSksMCw0KSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixjb21wdXRlQWRkcmVzcyh0aGlzLnB1YmxpY0tleSkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJjaGFpbkNvZGVcIixjaGFpbkNvZGUpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJpbmRleFwiLGluZGV4KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiZGVwdGhcIixkZXB0aCk7aWYobW5lbW9uaWNPclBhdGg9PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJtbmVtb25pY1wiLG51bGwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwYXRoXCIsbnVsbCl9ZWxzZSBpZih0eXBlb2YgbW5lbW9uaWNPclBhdGg9PT1cInN0cmluZ1wiKXtkZWZpbmVSZWFkT25seSh0aGlzLFwibW5lbW9uaWNcIixudWxsKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicGF0aFwiLG1uZW1vbmljT3JQYXRoKX1lbHNle2RlZmluZVJlYWRPbmx5KHRoaXMsXCJtbmVtb25pY1wiLG1uZW1vbmljT3JQYXRoKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicGF0aFwiLG1uZW1vbmljT3JQYXRoLnBhdGgpfX1nZXQgZXh0ZW5kZWRLZXkoKXtpZih0aGlzLmRlcHRoPj0yNTYpe3Rocm93IG5ldyBFcnJvcihcIkRlcHRoIHRvbyBsYXJnZSFcIil9cmV0dXJuIGJhc2U1OGNoZWNrKGNvbmNhdChbdGhpcy5wcml2YXRlS2V5IT1udWxsP1wiMHgwNDg4QURFNFwiOlwiMHgwNDg4QjIxRVwiLGhleGxpZnkodGhpcy5kZXB0aCksdGhpcy5wYXJlbnRGaW5nZXJwcmludCxoZXhaZXJvUGFkKGhleGxpZnkodGhpcy5pbmRleCksNCksdGhpcy5jaGFpbkNvZGUsdGhpcy5wcml2YXRlS2V5IT1udWxsP2NvbmNhdChbXCIweDAwXCIsdGhpcy5wcml2YXRlS2V5XSk6dGhpcy5wdWJsaWNLZXldKSl9bmV1dGVyKCl7cmV0dXJuIG5ldyBIRE5vZGUoX2NvbnN0cnVjdG9yR3VhcmQkMyxudWxsLHRoaXMucHVibGljS2V5LHRoaXMucGFyZW50RmluZ2VycHJpbnQsdGhpcy5jaGFpbkNvZGUsdGhpcy5pbmRleCx0aGlzLmRlcHRoLHRoaXMucGF0aCl9X2Rlcml2ZShpbmRleCl7aWYoaW5kZXg+NDI5NDk2NzI5NSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbmRleCAtIFwiK1N0cmluZyhpbmRleCkpfWxldCBwYXRoPXRoaXMucGF0aDtpZihwYXRoKXtwYXRoKz1cIi9cIisoaW5kZXgmfkhhcmRlbmVkQml0KX1jb25zdCBkYXRhPW5ldyBVaW50OEFycmF5KDM3KTtpZihpbmRleCZIYXJkZW5lZEJpdCl7aWYoIXRoaXMucHJpdmF0ZUtleSl7dGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGRlcml2ZSBjaGlsZCBvZiBuZXV0ZXJlZCBub2RlXCIpfWRhdGEuc2V0KGFycmF5aWZ5KHRoaXMucHJpdmF0ZUtleSksMSk7aWYocGF0aCl7cGF0aCs9XCInXCJ9fWVsc2V7ZGF0YS5zZXQoYXJyYXlpZnkodGhpcy5wdWJsaWNLZXkpKX1mb3IobGV0IGk9MjQ7aT49MDtpLT04KXtkYXRhWzMzKyhpPj4zKV09aW5kZXg+PjI0LWkmMjU1fWNvbnN0IEk9YXJyYXlpZnkoY29tcHV0ZUhtYWMoU3VwcG9ydGVkQWxnb3JpdGhtLnNoYTUxMix0aGlzLmNoYWluQ29kZSxkYXRhKSk7Y29uc3QgSUw9SS5zbGljZSgwLDMyKTtjb25zdCBJUj1JLnNsaWNlKDMyKTtsZXQga2k9bnVsbDtsZXQgS2k9bnVsbDtpZih0aGlzLnByaXZhdGVLZXkpe2tpPWJ5dGVzMzIoQmlnTnVtYmVyLmZyb20oSUwpLmFkZCh0aGlzLnByaXZhdGVLZXkpLm1vZChOKSl9ZWxzZXtjb25zdCBlaz1uZXcgU2lnbmluZ0tleShoZXhsaWZ5KElMKSk7S2k9ZWsuX2FkZFBvaW50KHRoaXMucHVibGljS2V5KX1sZXQgbW5lbW9uaWNPclBhdGg9cGF0aDtjb25zdCBzcmNNbmVtb25pYz10aGlzLm1uZW1vbmljO2lmKHNyY01uZW1vbmljKXttbmVtb25pY09yUGF0aD1PYmplY3QuZnJlZXplKHtwaHJhc2U6c3JjTW5lbW9uaWMucGhyYXNlLHBhdGg6cGF0aCxsb2NhbGU6c3JjTW5lbW9uaWMubG9jYWxlfHxcImVuXCJ9KX1yZXR1cm4gbmV3IEhETm9kZShfY29uc3RydWN0b3JHdWFyZCQzLGtpLEtpLHRoaXMuZmluZ2VycHJpbnQsYnl0ZXMzMihJUiksaW5kZXgsdGhpcy5kZXB0aCsxLG1uZW1vbmljT3JQYXRoKX1kZXJpdmVQYXRoKHBhdGgpe2NvbnN0IGNvbXBvbmVudHM9cGF0aC5zcGxpdChcIi9cIik7aWYoY29tcG9uZW50cy5sZW5ndGg9PT0wfHxjb21wb25lbnRzWzBdPT09XCJtXCImJnRoaXMuZGVwdGghPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhdGggLSBcIitwYXRoKX1pZihjb21wb25lbnRzWzBdPT09XCJtXCIpe2NvbXBvbmVudHMuc2hpZnQoKX1sZXQgcmVzdWx0PXRoaXM7Zm9yKGxldCBpPTA7aTxjb21wb25lbnRzLmxlbmd0aDtpKyspe2NvbnN0IGNvbXBvbmVudD1jb21wb25lbnRzW2ldO2lmKGNvbXBvbmVudC5tYXRjaCgvXlswLTldKyckLykpe2NvbnN0IGluZGV4PXBhcnNlSW50KGNvbXBvbmVudC5zdWJzdHJpbmcoMCxjb21wb25lbnQubGVuZ3RoLTEpKTtpZihpbmRleD49SGFyZGVuZWRCaXQpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aCBpbmRleCAtIFwiK2NvbXBvbmVudCl9cmVzdWx0PXJlc3VsdC5fZGVyaXZlKEhhcmRlbmVkQml0K2luZGV4KX1lbHNlIGlmKGNvbXBvbmVudC5tYXRjaCgvXlswLTldKyQvKSl7Y29uc3QgaW5kZXg9cGFyc2VJbnQoY29tcG9uZW50KTtpZihpbmRleD49SGFyZGVuZWRCaXQpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aCBpbmRleCAtIFwiK2NvbXBvbmVudCl9cmVzdWx0PXJlc3VsdC5fZGVyaXZlKGluZGV4KX1lbHNle3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aCBjb21wb25lbnQgLSBcIitjb21wb25lbnQpfX1yZXR1cm4gcmVzdWx0fXN0YXRpYyBfZnJvbVNlZWQoc2VlZCxtbmVtb25pYyl7Y29uc3Qgc2VlZEFycmF5PWFycmF5aWZ5KHNlZWQpO2lmKHNlZWRBcnJheS5sZW5ndGg8MTZ8fHNlZWRBcnJheS5sZW5ndGg+NjQpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgc2VlZFwiKX1jb25zdCBJPWFycmF5aWZ5KGNvbXB1dGVIbWFjKFN1cHBvcnRlZEFsZ29yaXRobS5zaGE1MTIsTWFzdGVyU2VjcmV0LHNlZWRBcnJheSkpO3JldHVybiBuZXcgSEROb2RlKF9jb25zdHJ1Y3Rvckd1YXJkJDMsYnl0ZXMzMihJLnNsaWNlKDAsMzIpKSxudWxsLFwiMHgwMDAwMDAwMFwiLGJ5dGVzMzIoSS5zbGljZSgzMikpLDAsMCxtbmVtb25pYyl9c3RhdGljIGZyb21NbmVtb25pYyhtbmVtb25pYyxwYXNzd29yZCx3b3JkbGlzdCl7d29yZGxpc3Q9Z2V0V29yZGxpc3Qod29yZGxpc3QpO21uZW1vbmljPWVudHJvcHlUb01uZW1vbmljKG1uZW1vbmljVG9FbnRyb3B5KG1uZW1vbmljLHdvcmRsaXN0KSx3b3JkbGlzdCk7cmV0dXJuIEhETm9kZS5fZnJvbVNlZWQobW5lbW9uaWNUb1NlZWQobW5lbW9uaWMscGFzc3dvcmQpLHtwaHJhc2U6bW5lbW9uaWMscGF0aDpcIm1cIixsb2NhbGU6d29yZGxpc3QubG9jYWxlfSl9c3RhdGljIGZyb21TZWVkKHNlZWQpe3JldHVybiBIRE5vZGUuX2Zyb21TZWVkKHNlZWQsbnVsbCl9c3RhdGljIGZyb21FeHRlbmRlZEtleShleHRlbmRlZEtleSl7Y29uc3QgYnl0ZXM9QmFzZTU4LmRlY29kZShleHRlbmRlZEtleSk7aWYoYnl0ZXMubGVuZ3RoIT09ODJ8fGJhc2U1OGNoZWNrKGJ5dGVzLnNsaWNlKDAsNzgpKSE9PWV4dGVuZGVkS2V5KXtsb2dnZXIkbC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV4dGVuZGVkIGtleVwiLFwiZXh0ZW5kZWRLZXlcIixcIltSRURBQ1RFRF1cIil9Y29uc3QgZGVwdGg9Ynl0ZXNbNF07Y29uc3QgcGFyZW50RmluZ2VycHJpbnQ9aGV4bGlmeShieXRlcy5zbGljZSg1LDkpKTtjb25zdCBpbmRleD1wYXJzZUludChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDksMTMpKS5zdWJzdHJpbmcoMiksMTYpO2NvbnN0IGNoYWluQ29kZT1oZXhsaWZ5KGJ5dGVzLnNsaWNlKDEzLDQ1KSk7Y29uc3Qga2V5PWJ5dGVzLnNsaWNlKDQ1LDc4KTtzd2l0Y2goaGV4bGlmeShieXRlcy5zbGljZSgwLDQpKSl7Y2FzZVwiMHgwNDg4YjIxZVwiOmNhc2VcIjB4MDQzNTg3Y2ZcIjpyZXR1cm4gbmV3IEhETm9kZShfY29uc3RydWN0b3JHdWFyZCQzLG51bGwsaGV4bGlmeShrZXkpLHBhcmVudEZpbmdlcnByaW50LGNoYWluQ29kZSxpbmRleCxkZXB0aCxudWxsKTtjYXNlXCIweDA0ODhhZGU0XCI6Y2FzZVwiMHgwNDM1ODM5NCBcIjppZihrZXlbMF0hPT0wKXticmVha31yZXR1cm4gbmV3IEhETm9kZShfY29uc3RydWN0b3JHdWFyZCQzLGhleGxpZnkoa2V5LnNsaWNlKDEpKSxudWxsLHBhcmVudEZpbmdlcnByaW50LGNoYWluQ29kZSxpbmRleCxkZXB0aCxudWxsKX1yZXR1cm4gbG9nZ2VyJGwudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBleHRlbmRlZCBrZXlcIixcImV4dGVuZGVkS2V5XCIsXCJbUkVEQUNURURdXCIpfX1mdW5jdGlvbiBtbmVtb25pY1RvU2VlZChtbmVtb25pYyxwYXNzd29yZCl7aWYoIXBhc3N3b3JkKXtwYXNzd29yZD1cIlwifWNvbnN0IHNhbHQ9dG9VdGY4Qnl0ZXMoXCJtbmVtb25pY1wiK3Bhc3N3b3JkLFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktEKTtyZXR1cm4gcGJrZGYyKHRvVXRmOEJ5dGVzKG1uZW1vbmljLFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktEKSxzYWx0LDIwNDgsNjQsXCJzaGE1MTJcIil9ZnVuY3Rpb24gbW5lbW9uaWNUb0VudHJvcHkobW5lbW9uaWMsd29yZGxpc3Qpe3dvcmRsaXN0PWdldFdvcmRsaXN0KHdvcmRsaXN0KTtsb2dnZXIkbC5jaGVja05vcm1hbGl6ZSgpO2NvbnN0IHdvcmRzPXdvcmRsaXN0LnNwbGl0KG1uZW1vbmljKTtpZih3b3Jkcy5sZW5ndGglMyE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgbW5lbW9uaWNcIil9Y29uc3QgZW50cm9weT1hcnJheWlmeShuZXcgVWludDhBcnJheShNYXRoLmNlaWwoMTEqd29yZHMubGVuZ3RoLzgpKSk7bGV0IG9mZnNldD0wO2ZvcihsZXQgaT0wO2k8d29yZHMubGVuZ3RoO2krKyl7bGV0IGluZGV4PXdvcmRsaXN0LmdldFdvcmRJbmRleCh3b3Jkc1tpXS5ub3JtYWxpemUoXCJORktEXCIpKTtpZihpbmRleD09PS0xKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG1uZW1vbmljXCIpfWZvcihsZXQgYml0PTA7Yml0PDExO2JpdCsrKXtpZihpbmRleCYxPDwxMC1iaXQpe2VudHJvcHlbb2Zmc2V0Pj4zXXw9MTw8Ny1vZmZzZXQlOH1vZmZzZXQrK319Y29uc3QgZW50cm9weUJpdHM9MzIqd29yZHMubGVuZ3RoLzM7Y29uc3QgY2hlY2tzdW1CaXRzPXdvcmRzLmxlbmd0aC8zO2NvbnN0IGNoZWNrc3VtTWFzaz1nZXRVcHBlck1hc2soY2hlY2tzdW1CaXRzKTtjb25zdCBjaGVja3N1bT1hcnJheWlmeShzaGEyNTYkMShlbnRyb3B5LnNsaWNlKDAsZW50cm9weUJpdHMvOCkpKVswXSZjaGVja3N1bU1hc2s7aWYoY2hlY2tzdW0hPT0oZW50cm9weVtlbnRyb3B5Lmxlbmd0aC0xXSZjaGVja3N1bU1hc2spKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNoZWNrc3VtXCIpfXJldHVybiBoZXhsaWZ5KGVudHJvcHkuc2xpY2UoMCxlbnRyb3B5Qml0cy84KSl9ZnVuY3Rpb24gZW50cm9weVRvTW5lbW9uaWMoZW50cm9weSx3b3JkbGlzdCl7d29yZGxpc3Q9Z2V0V29yZGxpc3Qod29yZGxpc3QpO2VudHJvcHk9YXJyYXlpZnkoZW50cm9weSk7aWYoZW50cm9weS5sZW5ndGglNCE9PTB8fGVudHJvcHkubGVuZ3RoPDE2fHxlbnRyb3B5Lmxlbmd0aD4zMil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBlbnRyb3B5XCIpfWNvbnN0IGluZGljZXM9WzBdO2xldCByZW1haW5pbmdCaXRzPTExO2ZvcihsZXQgaT0wO2k8ZW50cm9weS5sZW5ndGg7aSsrKXtpZihyZW1haW5pbmdCaXRzPjgpe2luZGljZXNbaW5kaWNlcy5sZW5ndGgtMV08PD04O2luZGljZXNbaW5kaWNlcy5sZW5ndGgtMV18PWVudHJvcHlbaV07cmVtYWluaW5nQml0cy09OH1lbHNle2luZGljZXNbaW5kaWNlcy5sZW5ndGgtMV08PD1yZW1haW5pbmdCaXRzO2luZGljZXNbaW5kaWNlcy5sZW5ndGgtMV18PWVudHJvcHlbaV0+PjgtcmVtYWluaW5nQml0cztpbmRpY2VzLnB1c2goZW50cm9weVtpXSZnZXRMb3dlck1hc2soOC1yZW1haW5pbmdCaXRzKSk7cmVtYWluaW5nQml0cys9M319Y29uc3QgY2hlY2tzdW1CaXRzPWVudHJvcHkubGVuZ3RoLzQ7Y29uc3QgY2hlY2tzdW09YXJyYXlpZnkoc2hhMjU2JDEoZW50cm9weSkpWzBdJmdldFVwcGVyTWFzayhjaGVja3N1bUJpdHMpO2luZGljZXNbaW5kaWNlcy5sZW5ndGgtMV08PD1jaGVja3N1bUJpdHM7aW5kaWNlc1tpbmRpY2VzLmxlbmd0aC0xXXw9Y2hlY2tzdW0+PjgtY2hlY2tzdW1CaXRzO3JldHVybiB3b3JkbGlzdC5qb2luKGluZGljZXMubWFwKGluZGV4PT53b3JkbGlzdC5nZXRXb3JkKGluZGV4KSkpfWZ1bmN0aW9uIGlzVmFsaWRNbmVtb25pYyhtbmVtb25pYyx3b3JkbGlzdCl7dHJ5e21uZW1vbmljVG9FbnRyb3B5KG1uZW1vbmljLHdvcmRsaXN0KTtyZXR1cm4gdHJ1ZX1jYXRjaChlcnJvcil7fXJldHVybiBmYWxzZX1jb25zdCB2ZXJzaW9uJGg9XCJyYW5kb20vNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkbT1uZXcgTG9nZ2VyKHZlcnNpb24kaCk7bGV0IGFueUdsb2JhbD1udWxsO3RyeXthbnlHbG9iYWw9d2luZG93O2lmKGFueUdsb2JhbD09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwidHJ5IG5leHRcIil9fWNhdGNoKGVycm9yKXt0cnl7YW55R2xvYmFsPWdsb2JhbDtpZihhbnlHbG9iYWw9PW51bGwpe3Rocm93IG5ldyBFcnJvcihcInRyeSBuZXh0XCIpfX1jYXRjaChlcnJvcil7YW55R2xvYmFsPXt9fX1sZXQgY3J5cHRvPWFueUdsb2JhbC5jcnlwdG98fGFueUdsb2JhbC5tc0NyeXB0bztpZighY3J5cHRvfHwhY3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7bG9nZ2VyJG0ud2FybihcIldBUk5JTkc6IE1pc3Npbmcgc3Ryb25nIHJhbmRvbSBudW1iZXIgc291cmNlXCIpO2NyeXB0bz17Z2V0UmFuZG9tVmFsdWVzOmZ1bmN0aW9uKGJ1ZmZlcil7cmV0dXJuIGxvZ2dlciRtLnRocm93RXJyb3IoXCJubyBzZWN1cmUgcmFuZG9tIHNvdXJjZSBhdmFpYWxibGVcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiY3J5cHRvLmdldFJhbmRvbVZhbHVlc1wifSl9fX1mdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpe2lmKGxlbmd0aDw9MHx8bGVuZ3RoPjEwMjR8fGxlbmd0aCUxKXtsb2dnZXIkbS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aFwiLFwibGVuZ3RoXCIsbGVuZ3RoKX1jb25zdCByZXN1bHQ9bmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJlc3VsdCk7cmV0dXJuIGFycmF5aWZ5KHJlc3VsdCl9XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gc2h1ZmZsZWQoYXJyYXkpe2FycmF5PWFycmF5LnNsaWNlKCk7Zm9yKGxldCBpPWFycmF5Lmxlbmd0aC0xO2k+MDtpLS0pe2NvbnN0IGo9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihpKzEpKTtjb25zdCB0bXA9YXJyYXlbaV07YXJyYXlbaV09YXJyYXlbal07YXJyYXlbal09dG1wfXJldHVybiBhcnJheX1cInVzZSBzdHJpY3RcIjt2YXIgYWVzSnM9Y3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihyb290KXtmdW5jdGlvbiBjaGVja0ludCh2YWx1ZSl7cmV0dXJuIHBhcnNlSW50KHZhbHVlKT09PXZhbHVlfWZ1bmN0aW9uIGNoZWNrSW50cyhhcnJheWlzaCl7aWYoIWNoZWNrSW50KGFycmF5aXNoLmxlbmd0aCkpe3JldHVybiBmYWxzZX1mb3IodmFyIGk9MDtpPGFycmF5aXNoLmxlbmd0aDtpKyspe2lmKCFjaGVja0ludChhcnJheWlzaFtpXSl8fGFycmF5aXNoW2ldPDB8fGFycmF5aXNoW2ldPjI1NSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBjb2VyY2VBcnJheShhcmcsY29weSl7aWYoYXJnLmJ1ZmZlciYmQXJyYXlCdWZmZXIuaXNWaWV3KGFyZykmJmFyZy5uYW1lPT09XCJVaW50OEFycmF5XCIpe2lmKGNvcHkpe2lmKGFyZy5zbGljZSl7YXJnPWFyZy5zbGljZSgpfWVsc2V7YXJnPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZyl9fXJldHVybiBhcmd9aWYoQXJyYXkuaXNBcnJheShhcmcpKXtpZighY2hlY2tJbnRzKGFyZykpe3Rocm93IG5ldyBFcnJvcihcIkFycmF5IGNvbnRhaW5zIGludmFsaWQgdmFsdWU6IFwiK2FyZyl9cmV0dXJuIG5ldyBVaW50OEFycmF5KGFyZyl9aWYoY2hlY2tJbnQoYXJnLmxlbmd0aCkmJmNoZWNrSW50cyhhcmcpKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJnKX10aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBhcnJheS1saWtlIG9iamVjdFwiKX1mdW5jdGlvbiBjcmVhdGVBcnJheShsZW5ndGgpe3JldHVybiBuZXcgVWludDhBcnJheShsZW5ndGgpfWZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2VBcnJheSx0YXJnZXRBcnJheSx0YXJnZXRTdGFydCxzb3VyY2VTdGFydCxzb3VyY2VFbmQpe2lmKHNvdXJjZVN0YXJ0IT1udWxsfHxzb3VyY2VFbmQhPW51bGwpe2lmKHNvdXJjZUFycmF5LnNsaWNlKXtzb3VyY2VBcnJheT1zb3VyY2VBcnJheS5zbGljZShzb3VyY2VTdGFydCxzb3VyY2VFbmQpfWVsc2V7c291cmNlQXJyYXk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc291cmNlQXJyYXksc291cmNlU3RhcnQsc291cmNlRW5kKX19dGFyZ2V0QXJyYXkuc2V0KHNvdXJjZUFycmF5LHRhcmdldFN0YXJ0KX12YXIgY29udmVydFV0Zjg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0b0J5dGVzKHRleHQpe3ZhciByZXN1bHQ9W10saT0wO3RleHQ9ZW5jb2RlVVJJKHRleHQpO3doaWxlKGk8dGV4dC5sZW5ndGgpe3ZhciBjPXRleHQuY2hhckNvZGVBdChpKyspO2lmKGM9PT0zNyl7cmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwyKSwxNikpO2krPTJ9ZWxzZXtyZXN1bHQucHVzaChjKX19cmV0dXJuIGNvZXJjZUFycmF5KHJlc3VsdCl9ZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzKXt2YXIgcmVzdWx0PVtdLGk9MDt3aGlsZShpPGJ5dGVzLmxlbmd0aCl7dmFyIGM9Ynl0ZXNbaV07aWYoYzwxMjgpe3Jlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYykpO2krK31lbHNlIGlmKGM+MTkxJiZjPDIyNCl7cmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgoYyYzMSk8PDZ8Ynl0ZXNbaSsxXSY2MykpO2krPTJ9ZWxzZXtyZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKChjJjE1KTw8MTJ8KGJ5dGVzW2krMV0mNjMpPDw2fGJ5dGVzW2krMl0mNjMpKTtpKz0zfX1yZXR1cm4gcmVzdWx0LmpvaW4oXCJcIil9cmV0dXJue3RvQnl0ZXM6dG9CeXRlcyxmcm9tQnl0ZXM6ZnJvbUJ5dGVzfX0oKTt2YXIgY29udmVydEhleD1mdW5jdGlvbigpe2Z1bmN0aW9uIHRvQnl0ZXModGV4dCl7dmFyIHJlc3VsdD1bXTtmb3IodmFyIGk9MDtpPHRleHQubGVuZ3RoO2krPTIpe3Jlc3VsdC5wdXNoKHBhcnNlSW50KHRleHQuc3Vic3RyKGksMiksMTYpKX1yZXR1cm4gcmVzdWx0fXZhciBIZXg9XCIwMTIzNDU2Nzg5YWJjZGVmXCI7ZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzKXt2YXIgcmVzdWx0PVtdO2Zvcih2YXIgaT0wO2k8Ynl0ZXMubGVuZ3RoO2krKyl7dmFyIHY9Ynl0ZXNbaV07cmVzdWx0LnB1c2goSGV4Wyh2JjI0MCk+PjRdK0hleFt2JjE1XSl9cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpfXJldHVybnt0b0J5dGVzOnRvQnl0ZXMsZnJvbUJ5dGVzOmZyb21CeXRlc319KCk7dmFyIG51bWJlck9mUm91bmRzPXsxNjoxMCwyNDoxMiwzMjoxNH07dmFyIHJjb249WzEsMiw0LDgsMTYsMzIsNjQsMTI4LDI3LDU0LDEwOCwyMTYsMTcxLDc3LDE1NCw0Nyw5NCwxODgsOTksMTk4LDE1MSw1MywxMDYsMjEyLDE3OSwxMjUsMjUwLDIzOSwxOTcsMTQ1XTt2YXIgUz1bOTksMTI0LDExOSwxMjMsMjQyLDEwNywxMTEsMTk3LDQ4LDEsMTAzLDQzLDI1NCwyMTUsMTcxLDExOCwyMDIsMTMwLDIwMSwxMjUsMjUwLDg5LDcxLDI0MCwxNzMsMjEyLDE2MiwxNzUsMTU2LDE2NCwxMTQsMTkyLDE4MywyNTMsMTQ3LDM4LDU0LDYzLDI0NywyMDQsNTIsMTY1LDIyOSwyNDEsMTEzLDIxNiw0OSwyMSw0LDE5OSwzNSwxOTUsMjQsMTUwLDUsMTU0LDcsMTgsMTI4LDIyNiwyMzUsMzksMTc4LDExNyw5LDEzMSw0NCwyNiwyNywxMTAsOTAsMTYwLDgyLDU5LDIxNCwxNzksNDEsMjI3LDQ3LDEzMiw4MywyMDksMCwyMzcsMzIsMjUyLDE3Nyw5MSwxMDYsMjAzLDE5MCw1Nyw3NCw3Niw4OCwyMDcsMjA4LDIzOSwxNzAsMjUxLDY3LDc3LDUxLDEzMyw2OSwyNDksMiwxMjcsODAsNjAsMTU5LDE2OCw4MSwxNjMsNjQsMTQzLDE0NiwxNTcsNTYsMjQ1LDE4OCwxODIsMjE4LDMzLDE2LDI1NSwyNDMsMjEwLDIwNSwxMiwxOSwyMzYsOTUsMTUxLDY4LDIzLDE5NiwxNjcsMTI2LDYxLDEwMCw5MywyNSwxMTUsOTYsMTI5LDc5LDIyMCwzNCw0MiwxNDQsMTM2LDcwLDIzOCwxODQsMjAsMjIyLDk0LDExLDIxOSwyMjQsNTAsNTgsMTAsNzMsNiwzNiw5MiwxOTQsMjExLDE3Miw5OCwxNDUsMTQ5LDIyOCwxMjEsMjMxLDIwMCw1NSwxMDksMTQxLDIxMyw3OCwxNjksMTA4LDg2LDI0NCwyMzQsMTAxLDEyMiwxNzQsOCwxODYsMTIwLDM3LDQ2LDI4LDE2NiwxODAsMTk4LDIzMiwyMjEsMTE2LDMxLDc1LDE4OSwxMzksMTM4LDExMiw2MiwxODEsMTAyLDcyLDMsMjQ2LDE0LDk3LDUzLDg3LDE4NSwxMzQsMTkzLDI5LDE1OCwyMjUsMjQ4LDE1MiwxNywxMDUsMjE3LDE0MiwxNDgsMTU1LDMwLDEzNSwyMzMsMjA2LDg1LDQwLDIyMywxNDAsMTYxLDEzNywxMywxOTEsMjMwLDY2LDEwNCw2NSwxNTMsNDUsMTUsMTc2LDg0LDE4NywyMl07dmFyIFNpPVs4Miw5LDEwNiwyMTMsNDgsNTQsMTY1LDU2LDE5MSw2NCwxNjMsMTU4LDEyOSwyNDMsMjE1LDI1MSwxMjQsMjI3LDU3LDEzMCwxNTUsNDcsMjU1LDEzNSw1MiwxNDIsNjcsNjgsMTk2LDIyMiwyMzMsMjAzLDg0LDEyMywxNDgsNTAsMTY2LDE5NCwzNSw2MSwyMzgsNzYsMTQ5LDExLDY2LDI1MCwxOTUsNzgsOCw0NiwxNjEsMTAyLDQwLDIxNywzNiwxNzgsMTE4LDkxLDE2Miw3MywxMDksMTM5LDIwOSwzNywxMTQsMjQ4LDI0NiwxMDAsMTM0LDEwNCwxNTIsMjIsMjEyLDE2NCw5MiwyMDQsOTMsMTAxLDE4MiwxNDYsMTA4LDExMiw3Miw4MCwyNTMsMjM3LDE4NSwyMTgsOTQsMjEsNzAsODcsMTY3LDE0MSwxNTcsMTMyLDE0NCwyMTYsMTcxLDAsMTQwLDE4OCwyMTEsMTAsMjQ3LDIyOCw4OCw1LDE4NCwxNzksNjksNiwyMDgsNDQsMzAsMTQzLDIwMiw2MywxNSwyLDE5MywxNzUsMTg5LDMsMSwxOSwxMzgsMTA3LDU4LDE0NSwxNyw2NSw3OSwxMDMsMjIwLDIzNCwxNTEsMjQyLDIwNywyMDYsMjQwLDE4MCwyMzAsMTE1LDE1MCwxNzIsMTE2LDM0LDIzMSwxNzMsNTMsMTMzLDIyNiwyNDksNTUsMjMyLDI4LDExNywyMjMsMTEwLDcxLDI0MSwyNiwxMTMsMjksNDEsMTk3LDEzNywxMTEsMTgzLDk4LDE0LDE3MCwyNCwxOTAsMjcsMjUyLDg2LDYyLDc1LDE5OCwyMTAsMTIxLDMyLDE1NCwyMTksMTkyLDI1NCwxMjAsMjA1LDkwLDI0NCwzMSwyMjEsMTY4LDUxLDEzNiw3LDE5OSw0OSwxNzcsMTgsMTYsODksMzksMTI4LDIzNiw5NSw5Niw4MSwxMjcsMTY5LDI1LDE4MSw3NCwxMyw0NSwyMjksMTIyLDE1OSwxNDcsMjAxLDE1NiwyMzksMTYwLDIyNCw1OSw3NywxNzQsNDIsMjQ1LDE3NiwyMDAsMjM1LDE4Nyw2MCwxMzEsODMsMTUzLDk3LDIzLDQzLDQsMTI2LDE4NiwxMTksMjE0LDM4LDIyNSwxMDUsMjAsOTksODUsMzMsMTIsMTI1XTt2YXIgVDE9WzMzMjg0MDIzNDEsNDE2ODkwNzkwOCw0MDAwODA2ODA5LDQxMzUyODc2OTMsNDI5NDExMTc1NywzNTk3MzY0MTU3LDM3MzE4NDUwNDEsMjQ0NTY1NzQyOCwxNjEzNzcwODMyLDMzNjIwMjI3LDM0NjI4ODMyNDEsMTQ0NTY2OTc1NywzODkyMjQ4MDg5LDMwNTA4MjE0NzQsMTMwMzA5NjI5NCwzOTY3MTg2NTg2LDI0MTI0MzE5NDEsNTI4NjQ2ODEzLDIzMTE3MDI4NDgsNDIwMjUyODEzNSw0MDI2MjAyNjQ1LDI5OTIyMDAxNzEsMjM4NzAzNjEwNSw0MjI2ODcxMzA3LDExMDE5MDEyOTIsMzAxNzA2OTY3MSwxNjA0NDk0MDc3LDExNjkxNDE3MzgsNTk3NDY2MzAzLDE0MDMyOTkwNjMsMzgzMjcwNTY4NiwyNjEzMTAwNjM1LDE5NzQ5NzQ0MDIsMzc5MTUxOTAwNCwxMDMzMDgxNzc0LDEyNzc1Njg2MTgsMTgxNTQ5MjE4NiwyMTE4MDc0MTc3LDQxMjY2Njg1NDYsMjIxMTIzNjk0MywxNzQ4MjUxNzQwLDEzNjk4MTA0MjAsMzUyMTUwNDU2NCw0MTkzMzgyNjY0LDM3OTkwODU0NTksMjg4MzExNTEyMywxNjQ3MzkxMDU5LDcwNjAyNDc2NywxMzQ0ODA5MDgsMjUxMjg5Nzg3NCwxMTc2NzA3OTQxLDI2NDY4NTI0NDYsODA2ODg1NDE2LDkzMjYxNTg0MSwxNjgxMDExMzUsNzk4NjYxMzAxLDIzNTM0MTU3Nyw2MDUxNjQwODYsNDYxNDA2MzYzLDM3NTYxODgyMjEsMzQ1NDc5MDQzOCwxMzExMTg4ODQxLDIxNDI0MTc2MTMsMzkzMzU2NjM2NywzMDI1ODIwNDMsNDk1MTU4MTc0LDE0NzkyODk5NzIsODc0MTI1ODcwLDkwNzc0NjA5MywzNjk4MjI0ODE4LDMwMjU4MjAzOTgsMTUzNzI1MzYyNywyNzU2ODU4NjE0LDE5ODM1OTMyOTMsMzA4NDMxMDExMywyMTA4OTI4OTc0LDEzNzg0MjkzMDcsMzcyMjY5OTU4MiwxNTgwMTUwNjQxLDMyNzQ1MTc5OSwyNzkwNDc4ODM3LDMxMTc1MzU1OTIsMCwzMjUzNTk1NDM2LDEwNzU4NDcyNjQsMzgyNTAwNzY0NywyMDQxNjg4NTIwLDMwNTk0NDA2MjEsMzU2Mzc0MzkzNCwyMzc4OTQzMzAyLDE3NDA1NTM5NDUsMTkxNjM1Mjg0MywyNDg3ODk2Nzk4LDI1NTUxMzcyMzYsMjk1ODU3OTk0NCwyMjQ0OTg4NzQ2LDMxNTEwMjQyMzUsMzMyMDgzNTg4MiwxMzM2NTg0OTMzLDM5OTI3MTQwMDYsMjI1MjU1NTIwNSwyNTg4NzU3NDYzLDE3MTQ2MzE1MDksMjkzOTYzMTU2LDIzMTk3OTU2NjMsMzkyNTQ3MzU1Miw2NzI0MDQ1NCw0MjY5NzY4NTc3LDI2ODk2MTgxNjAsMjAxNzIxMzUwOCw2MzEyMTgxMDYsMTI2OTM0NDQ4MywyNzIzMjM4Mzg3LDE1NzEwMDU0MzgsMjE1MTY5NDUyOCw5MzI5NDQ3NCwxMDY2NTcwNDEzLDU2Mzk3NzY2MCwxODgyNzMyNjE2LDQwNTk0MjgxMDAsMTY3MzMxMzUwMywyMDA4NDYzMDQxLDI5NTAzNTU1NzMsMTEwOTQ2NzQ5MSw1Mzc5MjM2MzIsMzg1ODc1OTQ1MCw0MjYwNjIzMTE4LDMyMTgyNjQ2ODUsMjE3Nzc0ODMwMCw0MDM0NDI3MDgsNjM4Nzg0MzA5LDMyODcwODQwNzksMzE5MzkyMTUwNSw4OTkxMjcyMDIsMjI4NjE3NTQzNiw3NzMyNjUyMDksMjQ3OTE0NjA3MSwxNDM3MDUwODY2LDQyMzYxNDgzNTQsMjA1MDgzMzczNSwzMzYyMDIyNTcyLDMxMjY2ODEwNjMsODQwNTA1NjQzLDM4NjYzMjU5MDksMzIyNzU0MTY2NCw0Mjc5MTc3MjAsMjY1NTk5NzkwNSwyNzQ5MTYwNTc1LDExNDMwODc3MTgsMTQxMjA0OTUzNCw5OTkzMjk5NjMsMTkzNDk3MjE5LDIzNTM0MTU4ODIsMzM1NDMyNDUyMSwxODA3MjY4MDUxLDY3MjQwNDU0MCwyODE2NDAxMDE3LDMxNjAzMDEyODIsMzY5ODIyNDkzLDI5MTY4NjY5MzQsMzY4ODk0Nzc3MSwxNjgxMDExMjg2LDE5NDk5NzMwNzAsMzM2MjAyMjcwLDI0NTQyNzY1NzEsMjAxNzIxMzU0LDEyMTAzMjgxNzIsMzA5MzA2MDgzNiwyNjgwMzQxMDg1LDMxODQ3NzYwNDYsMTEzNTM4OTkzNSwzMjk0NzgyMTE4LDk2NTg0MTMyMCw4MzE4ODY3NTYsMzU1NDk5MzIwNyw0MDY4MDQ3MjQzLDM1ODg3NDUwMTAsMjM0NTE5MTQ5MSwxODQ5MTEyNDA5LDM2NjQ2MDQ1OTksMjYwNTQwMjgsMjk4MzU4MTAyOCwyNjIyMzc3NjgyLDEyMzU4NTU4NDAsMzYzMDk4NDM3MiwyODkxMzM5NTE0LDQwOTI5MTY3NDMsMzQ4ODI3OTA3NywzMzk1NjQyNzk5LDQxMDE2Njc0NzAsMTIwMjYzMDM3NywyNjg5NjE4MTYsMTg3NDUwODUwMSw0MDM0NDI3MDE2LDEyNDM5NDgzOTksMTU0NjUzMDQxOCw5NDEzNjYzMDgsMTQ3MDUzOTUwNSwxOTQxMjIyNTk5LDI1NDYzODY1MTMsMzQyMTAzODYyNywyNzE1NjcxOTMyLDM4OTk5NDYxNDAsMTA0MjIyNjk3NywyNTIxNTE3MDIxLDE2Mzk4MjQ4NjAsMjI3MjQ5MDMwLDI2MDczNzY2OSwzNzY1NDY1MjMyLDIwODQ0NTM5NTQsMTkwNzczMzk1NiwzNDI5MjYzMDE4LDI0MjA2NTYzNDQsMTAwODYwNjc3LDQxNjAxNTcxODUsNDcwNjgzMTU0LDMyNjExNjE4OTEsMTc4MTg3MTk2NywyOTI0OTU5NzM3LDE3NzM3Nzk0MDgsMzk0NjkyMjQxLDI1Nzk2MTE5OTIsOTc0OTg2NTM1LDY2NDcwNjc0NSwzNjU1NDU5MTI4LDM5NTg5NjIxOTUsNzMxNDIwODUxLDU3MTU0Mzg1OSwzNTMwMTIzNzA3LDI4NDk2MjY0ODAsMTI2NzgzMTEzLDg2NTM3NTM5OSw3NjUxNzI2NjIsMTAwODYwNjc1NCwzNjEyMDM2MDIsMzM4NzU0OTk4NCwyMjc4NDc3Mzg1LDI4NTc3MTkyOTUsMTM0NDgwOTA4MCwyNzgyOTEyMzc4LDU5NTQyNjcxLDE1MDM3NjQ5ODQsMTYwMDA4NTc2LDQzNzA2MjkzNSwxNzA3MDY1MzA2LDM2MjIyMzM2NDksMjIxODkzNDk4MiwzNDk2NTAzNDgwLDIxODUzMTQ3NTUsNjk3OTMyMjA4LDE1MTI5MTAxOTksNTA0MzAzMzc3LDIwNzUxNzcxNjMsMjgyNDA5OTA2OCwxODQxMDE5ODYyLDczOTY0NDk4Nl07dmFyIFQyPVsyNzgxMjQyMjExLDIyMzA4NzczMDgsMjU4MjU0MjE5OSwyMzgxNzQwOTIzLDIzNDg3NzY4MiwzMTg0OTQ2MDI3LDI5ODQxNDQ3NTEsMTQxODgzOTQ5MywxMzQ4NDgxMDcyLDUwNDYyOTc3LDI4NDg4NzYzOTEsMjEwMjc5OTE0Nyw0MzQ2MzQ0OTQsMTY1NjA4NDQzOSwzODYzODQ5ODk5LDI1OTkxODgwODYsMTE2NzA1MTQ2NiwyNjM2MDg3OTM4LDEwODI3NzE5MTMsMjI4MTM0MDI4NSwzNjgwNDg4OTAsMzk1NDMzNDA0MSwzMzgxNTQ0Nzc1LDIwMTA2MDU5MiwzOTYzNzI3Mjc3LDE3Mzk4Mzg2NzYsNDI1MDkwMzIwMiwzOTMwNDM1NTAzLDMyMDY3ODIxMDgsNDE0OTQ1Mzk4OCwyNTMxNTUzOTA2LDE1MzY5MzQwODAsMzI2MjQ5NDY0Nyw0ODQ1NzI2NjksMjkyMzI3MTA1OSwxNzgzMzc1Mzk4LDE1MTcwNDEyMDYsMTA5ODc5Mjc2Nyw0OTY3NDIzMSwxMzM0MDM3NzA4LDE1NTAzMzI5ODAsNDA5ODk5MTUyNSw4ODYxNzExMDksMTUwNTk4MTI5LDI0ODEwOTA5MjksMTk0MDY0MjAwOCwxMzk4OTQ0MDQ5LDEwNTk3MjI1MTcsMjAxODUxOTA4LDEzODU1NDc3MTksMTY5OTA5NTMzMSwxNTg3Mzk3NTcxLDY3NDI0MDUzNiwyNzA0Nzc0ODA2LDI1MjMxNDg4NSwzMDM5Nzk1ODY2LDE1MTkxNDI0Nyw5MDgzMzM1ODYsMjYwMjI3MDg0OCwxMDM4MDgyNzg2LDY1MTAyOTQ4MywxNzY2NzI5NTExLDM0NDc2OTgwOTgsMjY4Mjk0MjgzNyw0NTQxNjY3OTMsMjY1MjczNDMzOSwxOTUxOTM1NTMyLDc3NTE2NjQ5MCw3NTg1MjA2MDMsMzAwMDc5MDYzOCw0MDA0Nzk3MDE4LDQyMTcwODYxMTIsNDEzNzk2NDExNCwxMjk5NTk0MDQzLDE2Mzk0MzgwMzgsMzQ2NDM0NDQ5OSwyMDY4OTgyMDU3LDEwNTQ3MjkxODcsMTkwMTk5Nzg3MSwyNTM0NjM4NzI0LDQxMjEzMTgyMjcsMTc1NzAwODMzNywwLDc1MDkwNjg2MSwxNjE0ODE1MjY0LDUzNTAzNTEzMiwzMzYzNDE4NTQ1LDM5ODgxNTExMzEsMzIwMTU5MTkxNCwxMTgzNjk3ODY3LDM2NDc0NTQ5MTAsMTI2NTc3Njk1MywzNzM0MjYwMjk4LDM1NjY3NTA3OTYsMzkwMzg3MTA2NCwxMjUwMjgzNDcxLDE4MDc0NzA4MDAsNzE3NjE1MDg3LDM4NDcyMDM0OTgsMzg0Njk1MjkxLDMzMTM5MTA1OTUsMzYxNzIxMzc3MywxNDMyNzYxMTM5LDI0ODQxNzYyNjEsMzQ4MTk0NTQxMywyODM3NjkzMzcsMTAwOTI1OTU0LDIxODA5Mzk2NDcsNDAzNzAzODE2MCwxMTQ4NzMwNDI4LDMxMjMwMjc4NzEsMzgxMzM4NjQwOCw0MDg3NTAxMTM3LDQyNjc1NDk2MDMsMzIyOTYzMDUyOCwyMzE1NjIwMjM5LDI5MDY2MjQ2NTgsMzE1NjMxOTY0NSwxMjE1MzEzOTc2LDgyOTY2MDA1LDM3NDc4NTU1NDgsMzI0NTg0ODI0NiwxOTc0NDU5MDk4LDE2NjUyNzgyNDEsODA3NDA3NjMyLDQ1MTI4MDg5NSwyNTE1MjQwODMsMTg0MTI4Nzg5MCwxMjgzNTc1MjQ1LDMzNzEyMDI2OCw4OTE2ODc2OTksODAxMzY5MzI0LDM3ODczNDk4NTUsMjcyMTQyMTIwNywzNDMxNDgyNDM2LDk1OTMyMTg3OSwxNDY5MzAxOTU2LDQwNjU2OTk3NTEsMjE5NzU4NTUzNCwxMTk5MTkzNDA1LDI4OTg4MTQwNTIsMzg4Nzc1MDQ5Myw3MjQ3MDM1MTMsMjUxNDkwODAxOSwyNjk2OTYyMTQ0LDI1NTE4MDgzODUsMzUxNjgxMzEzNSwyMTQxNDQ1MzQwLDE3MTU3NDEyMTgsMjExOTQ0NTAzNCwyODcyODA3NTY4LDIxOTg1NzExNDQsMzM5ODE5MDY2Miw3MDA5Njg2ODYsMzU0NzA1MjIxNiwxMDA5MjU5NTQwLDIwNDEwNDQ3MDIsMzgwMzk5NTc0Miw0ODc5ODM4ODMsMTk5MTEwNTQ5OSwxMDA0MjY1Njk2LDE0NDk0MDcwMjYsMTMxNjIzOTkzMCw1MDQ2Mjk3NzAsMzY4Mzc5NzMyMSwxNjg1NjAxMzQsMTgxNjY2NzE3MiwzODM3Mjg3NTE2LDE1NzA3NTExNzAsMTg1NzkzNDI5MSw0MDE0MTg5NzQwLDI3OTc4ODgwOTgsMjgyMjM0NTEwNSwyNzU0NzEyOTgxLDkzNjYzMzU3MiwyMzQ3OTIzODMzLDg1Mjg3OTMzNSwxMTMzMjM0Mzc2LDE1MDAzOTUzMTksMzA4NDU0NTM4OSwyMzQ4OTEyMDEzLDE2ODkzNzYyMTMsMzUzMzQ1OTAyMiwzNzYyOTIzOTQ1LDMwMzQwODI0MTIsNDIwNTU5ODI5NCwxMzM0Mjg0NjgsNjM0MzgzMDgyLDI5NDkyNzcwMjksMjM5ODM4NjgxMCwzOTEzNzg5MTAyLDQwMzcwMzgxNiwzNTgwODY5MzA2LDIyOTc0NjA4NTYsMTg2NzEzMDE0OSwxOTE4NjQzNzU4LDYwNzY1Njk4OCw0MDQ5MDUzMzUwLDMzNDYyNDg4ODQsMTM2ODkwMTMxOCw2MDA1NjU5OTIsMjA5MDk4Mjg3NywyNjMyNDc5ODYwLDU1NzcxOTMyNywzNzE3NjE0NDExLDM2OTczOTMwODUsMjI0OTAzNDYzNSwyMjMyMzg4MjM0LDI0MzA2Mjc5NTIsMTExNTQzODY1NCwzMjk1Nzg2NDIxLDI4NjU1MjIyNzgsMzYzMzMzNDM0NCw4NDI4MDA2NywzMzAyNzgzMCwzMDM4Mjg0OTQsMjc0NzQyNTEyMSwxNjAwNzk1OTU3LDQxODg5NTI0MDcsMzQ5NjU4OTc1MywyNDM0MjM4MDg2LDE0ODY0NzE2MTcsNjU4MTE5OTY1LDMxMDYzODE0NzAsOTUzODAzMjMzLDMzNDIzMTgwMCwzMDA1OTc4Nzc2LDg1Nzg3MDYwOSwzMTUxMTI4OTM3LDE4OTAxNzk1NDUsMjI5ODk3MzgzOCwyODA1MTc1NDQ0LDMwNTY0NDIyNjcsNTc0MzY1MjE0LDI0NTA4ODQ0ODcsNTUwMTAzNTI5LDEyMzM2MzcwNzAsNDI4OTM1MzA0NSwyMDE4NTE5MDgwLDIwNTc2OTExMDMsMjM5OTM3NDQ3Niw0MTY2NjIzNjQ5LDIxNDgxMDg2ODEsMzg3NTgzMjQ1LDM2NjQxMDEzMTEsODM2MjMyOTM0LDMzMzA1NTY0ODIsMzEwMDY2NTk2MCwzMjgwMDkzNTA1LDI5NTU1MTYzMTMsMjAwMjM5ODUwOSwyODcxODI2MDcsMzQxMzg4MTAwOCw0MjM4ODkwMDY4LDM1OTc1MTU3MDcsOTc1OTY3NzY2XTt2YXIgVDM9WzE2NzE4MDg2MTEsMjA4OTA4OTE0OCwyMDA2NTc2NzU5LDIwNzI5MDEyNDMsNDA2MTAwMzc2MiwxODA3NjAzMzA3LDE4NzM5Mjc3OTEsMzMxMDY1Mzg5Myw4MTA1NzM4NzIsMTY5NzQzMzcsMTczOTE4MTY3MSw3Mjk2MzQzNDcsNDI2MzExMDY1NCwzNjEzNTcwNTE5LDI4ODM5OTcwOTksMTk4OTg2NDU2NiwzMzkzNTU2NDI2LDIxOTEzMzUyOTgsMzM3NjQ0OTk5MywyMTA2MDYzNDg1LDQxOTU3NDE2OTAsMTUwODYxODg0MSwxMjA0MzkxNDk1LDQwMjczMTcyMzIsMjkxNzk0MTY3NywzNTYzNTY2MDM2LDI3MzQ1MTQwODIsMjk1MTM2NjA2MywyNjI5NzcyMTg4LDI3Njc2NzIyMjgsMTkyMjQ5MTUwNiwzMjI3MjI5MTIwLDMwODI5NzQ2NDcsNDI0NjUyODUwOSwyNDc3NjY5Nzc5LDY0NDUwMDUxOCw5MTE4OTU2MDYsMTA2MTI1Njc2Nyw0MTQ0MTY2MzkxLDM0Mjc3NjMxNDgsODc4NDcxMjIwLDI3ODQyNTIzMjUsMzg0NTQ0NDA2OSw0MDQzODk3MzI5LDE5MDU1MTcxNjksMzYzMTQ1OTI4OCw4Mjc1NDgyMDksMzU2NDYxMDc3LDY3ODk3MzQ4LDMzNDQwNzgyNzksNTkzODM5NjUxLDMyNzc3NTc4OTEsNDA1Mjg2OTM2LDI1MjcxNDc5MjYsODQ4NzE2ODUsMjU5NTU2NTQ2NiwxMTgwMzM5MjcsMzA1NTM4MDY2LDIxNTc2NDg3NjgsMzc5NTcwNTgyNiwzOTQ1MTg4ODQzLDY2MTIxMjcxMSwyOTk5ODEyMDE4LDE5NzM0MTQ1MTcsMTUyNzY5MDMzLDIyMDgxNzc1MzksNzQ1ODIyMjUyLDQzOTIzNTYxMCw0NTU5NDc4MDMsMTg1NzIxNTU5OCwxNTI1NTkzMTc4LDI3MDA4Mjc1NTIsMTM5MTg5NTYzNCw5OTQ5MzIyODMsMzU5NjcyODI3OCwzMDE2NjU0MjU5LDY5NTk0NzgxNywzODEyNTQ4MDY3LDc5NTk1ODgzMSwyMjI0NDkzNDQ0LDE0MDg2MDc4MjcsMzUxMzMwMTQ1NywwLDM5NzkxMzM0MjEsNTQzMTc4Nzg0LDQyMjk5NDg0MTIsMjk4MjcwNTU4NSwxNTQyMzA1MzcxLDE3OTA4OTExMTQsMzQxMDM5ODY2NywzMjAxOTE4OTEwLDk2MTI0NTc1MywxMjU2MTAwOTM4LDEyODkwMDEwMzYsMTQ5MTY0NDUwNCwzNDc3NzY3NjMxLDM0OTY3MjEzNjAsNDAxMjU1NzgwNywyODY3MTU0ODU4LDQyMTI1ODM5MzEsMTEzNzAxODQzNSwxMzA1OTc1MzczLDg2MTIzNDczOSwyMjQxMDczNTQxLDExNzEyMjkyNTMsNDE3ODYzNTI1NywzMzk0ODY3NCwyMTM5MjI1NzI3LDEzNTc5NDY5NjAsMTAxMTEyMDE4OCwyNjc5Nzc2NjcxLDI4MzM0NjgzMjgsMTM3NDkyMTI5NywyNzUxMzU2MzIzLDEwODYzNTc1NjgsMjQwODE4NzI3OSwyNDYwODI3NTM4LDI2NDYzNTIyODUsOTQ0MjcxNDE2LDQxMTA3NDIwMDUsMzE2ODc1NjY2OCwzMDY2MTMyNDA2LDM2NjUxNDU4MTgsNTYwMTUzMTIxLDI3MTU4OTM5Miw0Mjc5OTUyODk1LDQwNzc4NDYwMDMsMzUzMDQwNzg5MCwzNDQ0MzQzMjQ1LDIwMjY0MzQ2OCwzMjIyNTAyNTksMzk2MjU1MzMyNCwxNjA4NjI5ODU1LDI1NDM5OTAxNjcsMTE1NDI1NDkxNiwzODk2MjMzMTksMzI5NDA3Mzc5NiwyODE3Njc2NzExLDIxMjI1MTM1MzQsMTAyODA5NDUyNSwxNjg5MDQ1MDkyLDE1NzU0Njc2MTMsNDIyMjYxMjczLDE5MzkyMDM2OTksMTYyMTE0Nzc0NCwyMTc0MjI4ODY1LDEzMzkxMzc2MTUsMzY5OTM1MjU0MCw1NzcxMjc0NTgsNzEyOTIyMTU0LDI0MjcxNDEwMDgsMjI5MDI4OTU0NCwxMTg3Njc5MzAyLDM5OTU3MTU1NjYsMzEwMDg2MzQxNiwzMzk0ODY3NDAsMzczMjUxNDc4MiwxNTkxOTE3NjYyLDE4NjQ1NTU2MywzNjgxOTg4MDU5LDM3NjIwMTkyOTYsODQ0NTIyNTQ2LDk3ODIyMDA5MCwxNjk3NDMzNzAsMTIzOTEyNjYwMSwxMDEzMjE3MzQsNjExMDc2MTMyLDE1NTg0OTMyNzYsMzI2MDkxNTY1MCwzNTQ3MjUwMTMxLDI5MDEzNjE1ODAsMTY1NTA5NjQxOCwyNDQzNzIxMTA1LDI1MTA1NjU3ODEsMzgyODg2Mzk3MiwyMDM5MjE0NzEzLDM4Nzg4Njg0NTUsMzM1OTg2OTg5Niw5Mjg2MDc3OTksMTg0MDc2NTU0OSwyMzc0NzYyODkzLDM1ODAxNDYxMzMsMTMyMjQyNTQyMiwyODUwMDQ4NDI1LDE4MjM3OTEyMTIsMTQ1OTI2ODY5NCw0MDk0MTYxOTA4LDM5MjgzNDY2MDIsMTcwNjAxOTQyOSwyMDU2MTg5MDUwLDI5MzQ1MjM4MjIsMTM1Nzk0Njk2LDMxMzQ1NDk5NDYsMjAyMjI0MDM3Niw2MjgwNTA0NjksNzc5MjQ2NjM4LDQ3MjEzNTcwOCwyODAwODM0NDcwLDMwMzI5NzAxNjQsMzMyNzIzNjAzOCwzODk0NjYwMDcyLDM3MTU5MzI2MzcsMTk1NjQ0MDE4MCw1MjIyNzIyODcsMTI3MjgxMzEzMSwzMTg1MzM2NzY1LDIzNDA4MTgzMTUsMjMyMzk3NjA3NCwxODg4NTQyODMyLDEwNDQ1NDQ1NzQsMzA0OTU1MDI2MSwxNzIyNDY5NDc4LDEyMjIxNTIyNjQsNTA2NjA4NjcsNDEyNzMyNDE1MCwyMzYwNjc4NTQsMTYzODEyMjA4MSw4OTU0NDU1NTcsMTQ3NTk4MDg4NywzMTE3NDQzNTEzLDIyNTc2NTU2ODYsMzI0MzgwOTIxNyw0ODkxMTAwNDUsMjY2MjkzNDQzMCwzNzc4NTk5MzkzLDQxNjIwNTUxNjAsMjU2MTg3ODkzNiwyODg1NjM3MjksMTc3MzkxNjc3NywzNjQ4MDM5Mzg1LDIzOTEzNDUwMzgsMjQ5Mzk4NTY4NCwyNjEyNDA3NzA3LDUwNTU2MDA5NCwyMjc0NDk3OTI3LDM5MTEyNDAxNjksMzQ2MDkyNTM5MCwxNDQyODE4NjQ1LDY3ODk3MzQ4MCwzNzQ5MzU3MDIzLDIzNTgxODI3OTYsMjcxNzQwNzY0OSwyMzA2ODY5NjQxLDIxOTYxNzgwNSwzMjE4NzYxMTUxLDM4NjIwMjYyMTQsMTEyMDMwNjI0MiwxNzU2OTQyNDQwLDExMDMzMzE5MDUsMjU3ODQ1OTAzMyw3NjI3OTY1ODksMjUyNzgwMDQ3LDI5NjYxMjU0ODgsMTQyNTg0NDMwOCwzMTUxMzkyMTg3LDM3MjkxMTEyNl07dmFyIFQ0PVsxNjY3NDc0ODg2LDIwODg1MzUyODgsMjAwNDMyNjg5NCwyMDcxNjk0ODM4LDQwNzU5NDk1NjcsMTgwMjIyMzA2MiwxODY5NTkxMDA2LDMzMTgwNDM3OTMsODA4NDcyNjcyLDE2ODQzNTIyLDE3MzQ4NDY5MjYsNzI0MjcwNDIyLDQyNzgwNjU2MzksMzYyMTIxNjk0OSwyODgwMTY5NTQ5LDE5ODc0ODQzOTYsMzQwMjI1MzcxMSwyMTg5NTk3OTgzLDMzODU0MDk2NzMsMjEwNTM3ODgxMCw0MjEwNjkzNjE1LDE0OTkwNjUyNjYsMTE5NTg4Njk5MCw0MDQyMjYzNTQ3LDI5MTM4NTY1NzcsMzU3MDY4OTk3MSwyNzI4NTkwNjg3LDI5NDc1NDE1NzMsMjYyNzUxODI0MywyNzYyMjc0NjQzLDE5MjAxMTIzNTYsMzIzMzgzMTgzNSwzMDgyMjczMzk3LDQyNjEyMjM2NDksMjQ3NTkyOTE0OSw2NDAwNTE3ODgsOTA5NTMxNzU2LDEwNjExMTAxNDIsNDE2MDE2MDUwMSwzNDM1OTQxNzYzLDg3NTg0Njc2MCwyNzc5MTE2NjI1LDM4NTcwMDM3MjksNDA1OTEwNTUyOSwxOTAzMjY4ODM0LDM2MzgwNjQwNDMsODI1MzE2MTk0LDM1MzcxMzk2Miw2NzM3NDA4OCwzMzUxNzI4Nzg5LDU4OTUyMjI0NiwzMjg0MzYwODYxLDQwNDIzNjMzNiwyNTI2NDU0MDcxLDg0MjE3NjEwLDI1OTM4MzAxOTEsMTE3OTAxNTgyLDMwMzE4MzM5NiwyMTU1OTExOTYzLDM4MDY0Nzc3OTEsMzk1ODA1NjY1Myw2NTY4OTQyODYsMjk5ODA2MjQ2MywxOTcwNjQyOTIyLDE1MTU5MTY5OCwyMjA2NDQwOTg5LDc0MTExMDg3Miw0Mzc5MjMzODAsNDU0NzY1ODc4LDE4NTI3NDg1MDgsMTUxNTkwODc4OCwyNjk0OTA0NjY3LDEzODExNjg4MDQsOTkzNzQyMTk4LDM2MDQzNzM5NDMsMzAxNDkwNTQ2OSw2OTA1ODQ0MDIsMzgyMzMyMDc5Nyw3OTE2MzgzNjYsMjIyMzI4MTkzOSwxMzk4MDExMzAyLDM1MjAxNjE5NzcsMCwzOTkxNzQzNjgxLDUzODk5MjcwNCw0MjQ0MzgxNjY3LDI5ODEyMTg0MjUsMTUzMjc1MTI4NiwxNzg1MzgwNTY0LDM0MTkwOTY3MTcsMzIwMDE3ODUzNSw5NjAwNTYxNzgsMTI0NjQyMDYyOCwxMjgwMTAzNTc2LDE0ODIyMjE3NDQsMzQ4NjQ2ODc0MSwzNTAzMzE5OTk1LDQwMjU0Mjg2NzcsMjg2MzMyNjU0Myw0MjI3NTM2NjIxLDExMjg1MTQ5NTAsMTI5Njk0NzA5OCw4NTkwMDIyMTQsMjI0MDEyMzkyMSwxMTYyMjAzMDE4LDQxOTM4NDk1NzcsMzM2ODcwNDQsMjEzOTA2Mjc4MiwxMzQ3NDgxNzYwLDEwMTA1ODI2NDgsMjY3ODA0NTIyMSwyODI5NjQwNTIzLDEzNjQzMjUyODIsMjc0NTQzMzY5MywxMDc3OTg1NDA4LDI0MDg1NDg4NjksMjQ1OTA4NjE0MywyNjQ0MzYwMjI1LDk0MzIxMjY1Niw0MTI2NDc1NTA1LDMxNjY0OTQ1NjMsMzA2NTQzMDM5MSwzNjcxNzUwMDYzLDU1NTgzNjIyNiwyNjk0OTYzNTIsNDI5NDkwODY0NSw0MDkyNzkyNTczLDM1MzcwMDYwMTUsMzQ1Mjc4Mzc0NSwyMDIxMTgxNjgsMzIwMDI1ODk0LDM5NzQ5MDE2OTksMTYwMDExOTIzMCwyNTQzMjk3MDc3LDExNDUzNTk0OTYsMzg3Mzk3OTM0LDMzMDEyMDE4MTEsMjgxMjgwMTYyMSwyMTIyMjIwMjg0LDEwMjc0MjYxNzAsMTY4NDMxOTQzMiwxNTY2NDM1MjU4LDQyMTA3OTg1OCwxOTM2OTU0ODU0LDE2MTY5NDUzNDQsMjE3Mjc1Mzk0NSwxMzMwNjMxMDcwLDM3MDU0MzgxMTUsNTcyNjc5NzQ4LDcwNzQyNzkyNCwyNDI1NDAwMTIzLDIyOTA2NDc4MTksMTE3OTA0NDQ5Miw0MDA4NTg1NjcxLDMwOTkxMjA0OTEsMzM2ODcwNDQwLDM3MzkxMjIwODcsMTU4MzI3NjczMiwxODUyNzc3MTgsMzY4ODU5MzA2OSwzNzcyNzkxNzcxLDg0MjE1OTcxNiw5NzY4OTk3MDAsMTY4NDM1MjIwLDEyMjk1NzcxMDYsMTAxMDU5MDg0LDYwNjM2Njc5MiwxNTQ5NTkxNzM2LDMyNjc1MTc4NTUsMzU1Mzg0OTAyMSwyODk3MDE0NTk1LDE2NTA2MzIzODgsMjQ0MjI0MjEwNSwyNTA5NjEyMDgxLDM4NDAxNjE3NDcsMjAzODAwODgxOCwzODkwNjg4NzI1LDMzNjg1Njc2OTEsOTI2Mzc0MjU0LDE4MzU5MDcwMzQsMjM3NDg2Mzg3MywzNTg3NTMxOTUzLDEzMTM3ODg1NzIsMjg0NjQ4MjUwNSwxODE5MDYzNTEyLDE0NDg1NDA4NDQsNDEwOTYzMzUyMywzOTQxMjEzNjQ3LDE3MDExNjI5NTQsMjA1NDg1MjM0MCwyOTMwNjk4NTY3LDEzNDc0ODE3NiwzMTMyODA2NTExLDIwMjExNjUyOTYsNjIzMjEwMzE0LDc3NDc5NTg2OCw0NzE2MDYzMjgsMjc5NTk1ODYxNSwzMDMxNzQ2NDE5LDMzMzQ4ODU3ODMsMzkwNzUyNzYyNywzNzIyMjgwMDk3LDE5NTM3OTk0MDAsNTIyMTMzODIyLDEyNjMyNjMxMjYsMzE4MzMzNjU0NSwyMzQxMTc2ODQ1LDIzMjQzMzM4MzksMTg4NjQyNTMxMiwxMDQ0MjY3NjQ0LDMwNDg1ODg0MDEsMTcxODAwNDQyOCwxMjEyNzMzNTg0LDUwNTI5NTQyLDQxNDMzMTc0OTUsMjM1ODAzMTY0LDE2MzM3ODg4NjYsODkyNjkwMjgyLDE0NjUzODMzNDIsMzExNTk2MjQ3MywyMjU2OTY1OTExLDMyNTA2NzM4MTcsNDg4NDQ5ODUwLDI2NjEyMDIyMTUsMzc4OTYzMzc1Myw0MTc3MDA3NTk1LDI1NjAxNDQxNzEsMjg2MzM5ODc0LDE3Njg1MzcwNDIsMzY1NDkwNjAyNSwyMzkxNzA1ODYzLDI0OTI3NzAwOTksMjYxMDY3MzE5Nyw1MDUyOTEzMjQsMjI3MzgwODkxNywzOTI0MzY5NjA5LDM0Njk2MjU3MzUsMTQzMTY5OTM3MCw2NzM3NDA4ODAsMzc1NTk2NTA5MywyMzU4MDIxODkxLDI3MTE3NDY2NDksMjMwNzQ4OTgwMSwyMTg5NjE2OTAsMzIxNzAyMTU0MSwzODczODQ1NzE5LDExMTE2NzI0NTIsMTc1MTY5MzUyMCwxMDk0ODI4OTMwLDI1NzY5ODYxNTMsNzU3OTU0Mzk0LDI1MjY0NTY2MiwyOTY0Mzc2NDQzLDE0MTQ4NTU4NDgsMzE0OTY0OTUxNywzNzA1NTU0MzZdO3ZhciBUNT1bMTM3NDk4ODExMiwyMTE4MjE0OTk1LDQzNzc1NzEyMyw5NzU2NTg2NDYsMTAwMTA4OTk5NSw1MzA0MDA3NTMsMjkwMjA4Nzg1MSwxMjczMTY4Nzg3LDU0MDA4MDcyNSwyOTEwMjE5NzY2LDIyOTUxMDEwNzMsNDExMDU2ODQ4NSwxMzQwNDYzMTAwLDMzMDc5MTYyNDcsNjQxMDI1MTUyLDMwNDMxNDA0OTUsMzczNjE2NDkzNyw2MzI5NTM3MDMsMTE3Mjk2NzA2NCwxNTc2OTc2NjA5LDMyNzQ2NjcyNjYsMjE2OTMwMzA1OCwyMzcwMjEzNzk1LDE4MDkwNTQxNTAsNTk3Mjc4NDcsMzYxOTI5ODc3LDMyMTE2MjMxNDcsMjUwNTIwMjEzOCwzNTY5MjU1MjEzLDE0ODQwMDU4NDMsMTIzOTQ0Mzc1MywyMzk1NTg4Njc2LDE5NzU2ODM0MzQsNDEwMjk3NzkxMiwyNTcyNjk3MTk1LDY2NjQ2NDczMywzMjAyNDM3MDQ2LDQwMzU0ODkwNDcsMzM3NDM2MTcwMiwyMTEwNjY3NDQ0LDE2NzU1Nzc4ODAsMzg0MzY5OTA3NCwyNTM4NjgxMTg0LDE2NDk2MzkyMzcsMjk3NjE1MTUyMCwzMTQ0Mzk2NDIwLDQyNjk5MDc5OTYsNDE3ODA2MjIyOCwxODgzNzkzNDk2LDI0MDM3Mjg2NjUsMjQ5NzYwNDc0MywxMzgzODU2MzExLDI4NzY0OTQ2MjcsMTkxNzUxODU2MiwzODEwNDk2MzQzLDE3MTY4OTA0MTAsMzAwMTc1NTY1NSw4MDA0NDA4MzUsMjI2MTA4OTE3OCwzNTQzNTk5MjY5LDgwNzk2MjYxMCw1OTk3NjIzNTQsMzM3NzgzNjIsMzk3NzY3NTM1NiwyMzI4ODI4OTcxLDI4MDk3NzExNTQsNDA3NzM4NDQzMiwxMzE1NTYyMTQ1LDE3MDg4NDgzMzMsMTAxMDM5ODI5LDM1MDk4NzExMzUsMzI5OTI3ODQ3NCw4NzU0NTEyOTMsMjczMzg1NjE2MCw5Mjk4NzY5OCwyNzY3NjQ1NTU3LDE5MzE5NTA2NSwxMDgwMDk0NjM0LDE1ODQ1MDQ1ODIsMzE3ODEwNjk2MSwxMDQyMzg1NjU3LDI1MzEwNjc0NTMsMzcxMTgyOTQyMiwxMzA2OTY3MzY2LDI0MzgyMzc2MjEsMTkwODY5NDI3Nyw2NzU1NjQ2MywxNjE1ODYxMjQ3LDQyOTQ1NjE2NCwzNjAyNzcwMzI3LDIzMDI2OTAyNTIsMTc0MjMxNTEyNywyOTY4MDExNDUzLDEyNjQ1NDY2NCwzODc3MTk4NjQ4LDIwNDMyMTE0ODMsMjcwOTI2MDg3MSwyMDg0NzA0MjMzLDQxNjk0MDgyMDEsMCwxNTk0MTc5ODcsODQxNzM5NTkyLDUwNDQ1OTQzNiwxODE3ODY2ODMwLDQyNDU2MTg2ODMsMjYwMzg4OTUwLDEwMzQ4Njc5OTgsOTA4OTMzNDE1LDE2ODgxMDg1MiwxNzUwOTAyMzA1LDI2MDY0NTM5NjksNjA3NTMwNTU0LDIwMjAwODQ5NywyNDcyMDExNTM1LDMwMzU1MzUwNTgsNDYzMTgwMTkwLDIxNjAxMTcwNzEsMTY0MTgxNjIyNiwxNTE3NzY3NTI5LDQ3MDk0ODM3NCwzODAxMzMyMjM0LDMyMzE3MjIyMTMsMTAwODkxODU5NSwzMDM3NjUyNzcsMjM1NDc0MTg3LDQwNjkyNDY4OTMsNzY2OTQ1NDY1LDMzNzU1Mzg2NCwxNDc1NDE4NTAxLDI5NDM2ODIzODAsNDAwMzA2MTE3OSwyNzQzMDM0MTA5LDQxNDQwNDc3NzUsMTU1MTAzNzg4NCwxMTQ3NTUwNjYxLDE1NDMyMDg1MDAsMjMzNjQzNDU1MCwzNDA4MTE5NTE2LDMwNjkwNDk5NjAsMzEwMjAxMTc0NywzNjEwMzY5MjI2LDExMTM4MTgzODQsMzI4NjcxODA4LDIyMjc1NzMwMjQsMjIzNjIyODczMywzNTM1NDg2NDU2LDI5MzU1NjY4NjUsMzM0MTM5NDI4NSw0OTY5MDYwNTksMzcwMjY2NTQ1OSwyMjY5MDY4NjAsMjAwOTE5NTQ3Miw3MzMxNTY5NzIsMjg0MjczNzA0OSwyOTQ5MzA2ODIsMTIwNjQ3Nzg1OCwyODM1MTIzMzk2LDI3MDAwOTkzNTQsMTQ1MTA0NDA1Niw1NzM4MDQ3ODMsMjI2OTcyODQ1NSwzNjQ0Mzc5NTg1LDIzNjIwOTAyMzgsMjU2NDAzMzMzNCwyODAxMTA3NDA3LDI3NzYyOTI5MDQsMzY2OTQ2MjU2NiwxMDY4MzUxMzk2LDc0MjAzOTAxMiwxMzUwMDc4OTg5LDE3ODQ2NjMxOTUsMTQxNzU2MTY5OCw0MTM2NDQwNzcwLDI0MzAxMjIyMTYsNzc1NTUwODE0LDIxOTM4NjI2NDUsMjY3MzcwNTE1MCwxNzc1Mjc2OTI0LDE4NzYyNDE4MzMsMzQ3NTMxMzMzMSwzMzY2NzU0NjE5LDI3MDA0MDQ4NywzOTAyNTYzMTgyLDM2NzgxMjQ5MjMsMzQ0MTg1MDM3NywxODUxMzMyODUyLDM5Njk1NjIzNjksMjIwMzAzMjIzMiwzODY4NTUyODA1LDI4Njg4OTc0MDYsNTY2MDIxODk2LDQwMTExOTA1MDIsMzEzNTc0MDg4OSwxMjQ4ODAyNTEwLDM5MzYyOTEyODQsNjk5NDMyMTUwLDgzMjg3NzIzMSw3MDg3ODA4NDksMzMzMjc0MDE0NCw4OTk4MzU1ODQsMTk1MTMxNzA0Nyw0MjM2NDI5OTkwLDM3Njc1ODY5OTIsODY2NjM3ODQ1LDQwNDM2MTAxODYsMTEwNjA0MTU5MSwyMTQ0MTYxODA2LDM5NTQ0MTcxMSwxOTg0ODEyNjg1LDExMzk3ODE3MDksMzQzMzcxMjk4MCwzODM1MDM2ODk1LDI2NjQ1NDM3MTUsMTI4MjA1MDA3NSwzMjQwODk0MzkyLDExODEwNDUxMTksMjY0MDI0MzIwNCwyNTk2NTkxNyw0MjAzMTgxMTcxLDQyMTE4MTg3OTgsMzAwOTg3OTM4NiwyNDYzODc5NzYyLDM5MTAxNjE5NzEsMTg0Mjc1OTQ0MywyNTk3ODA2NDc2LDkzMzMwMTM3MCwxNTA5NDMwNDE0LDM5NDM5MDY0NDEsMzQ2NzE5MjMwMiwzMDc2NjM5MDI5LDM3NzY3Njc0NjksMjA1MTUxODc4MCwyNjMxMDY1NDMzLDE0NDE5NTI1NzUsNDA0MDE2NzYxLDE5NDI0MzU3NzUsMTQwODc0OTAzNCwxNjEwNDU5NzM5LDM3NDUzNDUzMDAsMjAxNzc3ODU2NiwzNDAwNTI4NzY5LDMxMTA2NTA5NDIsOTQxODk2NzQ4LDMyNjU0Nzg3NTEsMzcxMDQ5MzMwLDMxNjg5MzcyMjgsNjc1MDM5NjI3LDQyNzkwODAyNTcsOTY3MzExNzI5LDEzNTA1MDIwNiwzNjM1NzMzNjYwLDE2ODM0MDcyNDgsMjA3NjkzNTI2NSwzNTc2ODcwNTEyLDEyMTUwNjExMDgsMzUwMTc0MTg5MF07dmFyIFQ2PVsxMzQ3NTQ4MzI3LDE0MDA3ODMyMDUsMzI3MzI2NzEwOCwyNTIwMzkzNTY2LDM0MDk2ODUzNTUsNDA0NTM4MDkzMywyODgwMjQwMjE2LDI0NzEyMjQwNjcsMTQyODE3MzA1MCw0MTM4NTYzMTgxLDI0NDE2NjE1NTgsNjM2ODEzOTAwLDQyMzMwOTQ2MTUsMzYyMDAyMjk4NywyMTQ5OTg3NjUyLDI0MTEwMjkxNTUsMTIzOTMzMTE2MiwxNzMwNTI1NzIzLDI1NTQ3MTg3MzQsMzc4MTAzMzY2NCw0NjM0NjEwMSwzMTA0NjM3MjgsMjc0Mzk0NDg1NSwzMzI4OTU1Mzg1LDM4NzU3NzAyMDcsMjUwMTIxODk3MiwzOTU1MTkxMTYyLDM2NjcyMTkwMzMsNzY4OTE3MTIzLDM1NDU3ODk0NzMsNjkyNzA3NDMzLDExNTAyMDg0NTYsMTc4NjEwMjQwOSwyMDI5MjkzMTc3LDE4MDUyMTE3MTAsMzcxMDM2ODExMywzMDY1OTYyODMxLDQwMTYzOTU5NywxNzI0NDU3MTMyLDMwMjgxNDM2NzQsNDA5MTk4NDEwLDIxOTYwNTI1MjksMTYyMDUyOTQ1OSwxMTY0MDcxODA3LDM3Njk3MjE5NzUsMjIyNjg3NTMxMCw0ODY0NDEzNzYsMjQ5OTM0ODUyMywxNDgzNzUzNTc2LDQyODgxOTk2NSwyMjc0NjgwNDI4LDMwNzU2MzYyMTYsNTk4NDM4ODY3LDM3OTkxNDExMjIsMTQ3NDUwMjU0Myw3MTEzNDk2NzUsMTI5MTY2MTIwLDUzNDU4MzcwLDI1OTI1MjM2NDMsMjc4MjA4MjgyNCw0MDYzMjQyMzc1LDI5ODg2ODcyNjksMzEyMDY5NDEyMiwxNTU5MDQxNjY2LDczMDUxNzI3NiwyNDYwNDQ5MjA0LDQwNDI0NTkxMjIsMjcwNjI3MDY5MCwzNDQ2MDA0NDY4LDM1NzM5NDE2OTQsNTMzODA0MTMwLDIzMjgxNDM2MTQsMjYzNzQ0MjY0MywyNjk1MDMzNjg1LDgzOTIyNDAzMywxOTczNzQ1Mzg3LDk1NzA1NTk4MCwyODU2MzQ1ODM5LDEwNjg1Mjc2NywxMzcxMzY4OTc2LDQxODE1OTg2MDIsMTAzMzI5NzE1OCwyOTMzNzM0OTE3LDExNzk1MTA0NjEsMzA0NjIwMDQ2MSw5MTM0MTkxNywxODYyNTM0ODY4LDQyODQ1MDIwMzcsNjA1NjU3MzM5LDI1NDc0MzI5MzcsMzQzMTU0Njk0NywyMDAzMjk0NjIyLDMxODI0ODc2MTgsMjI4MjE5NTMzOSw5NTQ2Njk0MDMsMzY4MjE5MTU5OCwxMjAxNzY1Mzg2LDM5MTcyMzQ3MDMsMzM4ODUwNzE2NiwwLDIxOTg0MzgwMjIsMTIxMTI0NzU5NywyODg3NjUxNjk2LDEzMTU3MjM4OTAsNDIyNzY2NTY2MywxNDQzODU3NzIwLDUwNzM1ODkzMyw2NTc4NjE5NDUsMTY3ODM4MTAxNyw1NjA0ODc1OTAsMzUxNjYxOTYwNCw5NzU0NTE2OTQsMjk3MDM1NjMyNywyNjEzMTQ1MzUsMzUzNTA3MjkxOCwyNjUyNjA5NDI1LDEzMzM4MzgwMjEsMjcyNDMyMjMzNiwxNzY3NTM2NDU5LDM3MDkzODM5NCwxODI2MjExMTQsMzg1NDYwNjM3OCwxMTI4MDE0NTYwLDQ4NzcyNTg0NywxODU0NjkxOTcsMjkxODM1Mzg2MywzMTA2NzgwODQwLDMzNTY3NjE3NjksMjIzNzEzMzA4MSwxMjg2NTY3MTc1LDMxNTI5NzYzNDksNDI1NTM1MDYyNCwyNjgzNzY1MDMwLDMxNjAxNzUzNDksMzMwOTU5NDE3MSw4Nzg0NDMzOTAsMTk4ODgzODE4NSwzNzA0MzAwNDg2LDE3NTY4MTg5NDAsMTY3MzA2MTYxNywzNDAzMTAwNjM2LDI3Mjc4NjMwOSwxMDc1MDI1Njk4LDU0NTU3MjM2OSwyMTA1ODg3MjY4LDQxNzQ1NjAwNjEsMjk2Njc5NzMwLDE4NDE3Njg4NjUsMTI2MDIzMjIzOSw0MDkxMzI3MDI0LDM5NjAzMDkzMzAsMzQ5NzUwOTM0NywxODE0ODAzMjIyLDI1NzgwMTg0ODksNDE5NTQ1NjA3Miw1NzUxMzgxNDgsMzI5OTQwOTAzNiw0NDY3NTQ4NzksMzYyOTU0Njc5Niw0MDExOTk2MDQ4LDMzNDc1MzIxMTAsMzI1MjIzODU0NSw0MjcwNjM5Nzc4LDkxNTk4NTQxOSwzNDgzODI1NTM3LDY4MTkzMzUzNCw2NTE4NjgwNDYsMjc1NTYzNjY3MSwzODI4MTAzODM3LDIyMzM3NzU1NCwyNjA3NDM5ODIwLDE2NDk3MDQ1MTgsMzI3MDkzNzg3NSwzOTAxODA2Nzc2LDE1ODAwODc3OTksNDExODk4NzY5NSwzMTk4MTE1MjAwLDIwODczMDk0NTksMjg0MjY3ODU3MywzMDE2Njk3MTA2LDEwMDMwMDcxMjksMjgwMjg0OTkxNywxODYwNzM4MTQ3LDIwNzc5NjUyNDMsMTY0NDM5NjcyLDQxMDA4NzI0NzIsMzIyODMzMTksMjgyNzE3Nzg4MiwxNzA5NjEwMzUwLDIxMjUxMzU4NDYsMTM2NDI4NzUxLDM4NzQ0MjgzOTIsMzY1MjkwNDg1OSwzNDYwOTg0NjMwLDM1NzIxNDU5MjksMzU5MzA1NjM4MCwyOTM5MjY2MjI2LDgyNDg1MjI1OSw4MTgzMjQ4ODQsMzIyNDc0MDQ1NCw5MzAzNjkyMTIsMjgwMTU2NjQxMCwyOTY3NTA3MTUyLDM1NTcwNjg0MCwxMjU3MzA5MzM2LDQxNDgyOTI4MjYsMjQzMjU2NjU2LDc5MDA3Mzg0NiwyMzczMzQwNjMwLDEyOTYyOTc5MDQsMTQyMjY5OTA4NSwzNzU2Mjk5NzgwLDM4MTg4MzY0MDUsNDU3OTkyODQwLDMwOTk2Njc0ODcsMjEzNTMxOTg4OSw3NzQyMjMxNCwxNTYwMzgyNTE3LDE5NDU3OTg1MTYsNzg4MjA0MzUzLDE1MjE3MDY3ODEsMTM4NTM1NjI0Miw4NzA5MTIwODYsMzI1OTY1MzgzLDIzNTg5NTc5MjEsMjA1MDQ2NjA2MCwyMzg4MjYwODg0LDIzMTM4ODQ0NzYsNDAwNjUyMTEyNyw5MDEyMTA1NjksMzk5MDk1MzE4OSwxMDE0NjQ2NzA1LDE1MDM0NDk4MjMsMTA2MjU5NzIzNSwyMDMxNjIxMzI2LDMyMTIwMzU4OTUsMzkzMTM3MTQ2OSwxNTMzMDE3NTE0LDM1MDE3NDU3NSwyMjU2MDI4ODkxLDIxNzc1NDQxNzksMTA1MjMzODM3Miw3NDE4NzY3ODgsMTYwNjU5MTI5NiwxOTE0MDUyMDM1LDIxMzcwNTI1MywyMzM0NjY5ODk3LDExMDcyMzQxOTcsMTg5OTYwMzk2OSwzNzI1MDY5NDkxLDI2MzE0NDc3ODAsMjQyMjQ5NDkxMywxNjM1NTAyOTgwLDE4OTMwMjAzNDIsMTk1MDkwMzM4OCwxMTIwOTc0OTM1XTt2YXIgVDc9WzI4MDcwNTg5MzIsMTY5OTk3MDYyNSwyNzY0MjQ5NjIzLDE1ODY5MDM1OTEsMTgwODQ4MTE5NSwxMTczNDMwMTczLDE0ODc2NDU5NDYsNTk5ODQ4NjcsNDE5OTg4MjgwMCwxODQ0ODgyODA2LDE5ODkyNDkyMjgsMTI3NzU1NTk3MCwzNjIzNjM2OTY1LDM0MTk5MTU1NjIsMTE0OTI0OTA3NywyNzQ0MTA0MjkwLDE1MTQ3OTA1NzcsNDU5NzQ0Njk4LDI0NDg2MDM5NCwzMjM1OTk1MTM0LDE5NjMxMTUzMTEsNDAyNzc0NDU4OCwyNTQ0MDc4MTUwLDQxOTA1MzA1MTUsMTYwODk3NTI0NywyNjI3MDE2MDgyLDIwNjIyNzAzMTcsMTUwNzQ5NzI5OCwyMjAwODE4ODc4LDU2NzQ5ODg2OCwxNzY0MzEzNTY4LDMzNTk5MzYyMDEsMjMwNTQ1NTU1NCwyMDM3OTcwMDYyLDEwNDcyMzllMywxOTEwMzE5MDMzLDEzMzczNzY0ODEsMjkwNDAyNzI3MiwyODkyNDE3MzEyLDk4NDkwNzIxNCwxMjQzMTEyNDE1LDgzMDY2MTkxNCw4NjE5NjgyMDksMjEzNTI1MzU4NywyMDExMjE0MTgwLDI5Mjc5MzQzMTUsMjY4NjI1NDcyMSw3MzExODMzNjgsMTc1MDYyNjM3Niw0MjQ2MzEwNzI1LDE4MjA4MjQ3OTgsNDE3Mjc2Mzc3MSwzNTQyMzMwMjI3LDQ4Mzk0ODI3LDI0MDQ5MDE2NjMsMjg3MTY4MjY0NSw2NzE1OTMxOTUsMzI1NDk4ODcyNSwyMDczNzI0NjEzLDE0NTA4NTIzOSwyMjgwNzk2MjAwLDI3Nzk5MTUxOTksMTc5MDU3NTEwNywyMTg3MTI4MDg2LDQ3MjYxNTYzMSwzMDI5NTEwMDA5LDQwNzU4NzcxMjcsMzgwMjIyMjE4NSw0MTA3MTAxNjU4LDMyMDE2MzE3NDksMTY0NjI1MjM0MCw0MjcwNTA3MTc0LDE0MDI4MTE0MzgsMTQzNjU5MDgzNSwzNzc4MTUxODE4LDM5NTAzNTU3MDIsMzk2MzE2MTQ3NSw0MDIwOTEyMjI0LDI2Njc5OTQ3MzcsMjczNzkyMzY2LDIzMzE1OTAxNzcsMTA0Njk5NjEzLDk1MzQ1OTgyLDMxNzU1MDEyODYsMjM3NzQ4NjY3NiwxNTYwNjM3ODkyLDM1NjQwNDUzMTgsMzY5MDU3ODcyLDQyMTM0NDcwNjQsMzkxOTA0MjIzNywxMTM3NDc3OTUyLDI2NTg2MjU0OTcsMTExOTcyNzg0OCwyMzQwOTQ3ODQ5LDE1MzA0NTU4MzMsNDAwNzM2MDk2OCwxNzI0NjY1NTYsMjY2OTU5OTM4LDUxNjU1MjgzNiwwLDIyNTY3MzQ1OTIsMzk4MDkzMTYyNywxODkwMzI4MDgxLDE5MTc3NDIxNzAsNDI5NDcwNDM5OCw5NDUxNjQxNjUsMzU3NTUyODg3OCw5NTg4NzEwODUsMzY0NzIxMjA0NywyNzg3MjA3MjYwLDE0MjMwMjI5MzksNzc1NTYyMjk0LDE3Mzk2NTYyMDIsMzg3NjU1NzY1NSwyNTMwMzkxMjc4LDI0NDMwNTgwNzUsMzMxMDMyMTg1Niw1NDc1MTI3OTYsMTI2NTE5NTYzOSw0Mzc2NTY1OTQsMzEyMTI3NTUzOSw3MTk3MDAxMjgsMzc2MjUwMjY5MCwzODc3ODExNDcsMjE4ODI4Mjk3LDMzNTAwNjU4MDMsMjgzMDcwODE1MCwyODQ4NDYxODU0LDQyODE2OTIwMSwxMjI0NjYxNjUsMzcyMDA4MTA0OSwxNjI3MjM1MTk5LDY0ODAxNzY2NSw0MTIyNzYyMzU0LDEwMDI3ODM4NDYsMjExNzM2MDYzNSw2OTU2MzQ3NTUsMzMzNjM1ODY5MSw0MjM0NzIxMDA1LDQwNDk4NDQ0NTIsMzcwNDI4MDg4MSwyMjMyNDM1Mjk5LDU3NDYyNDY2MywyODczNDM4MTQsNjEyMjA1ODk4LDEwMzk3MTcwNTEsODQwMDE5NzA1LDI3MDgzMjYxODUsNzkzNDUxOTM0LDgyMTI4ODExNCwxMzkxMjAxNjcwLDM4MjIwOTAxNzcsMzc2MTg3ODI3LDMxMTM4NTUzNDQsMTIyNDM0ODA1MiwxNjc5OTY4MjMzLDIzNjE2OTg1NTYsMTA1ODcwOTc0NCw3NTIzNzU0MjEsMjQzMTU5MDk2MywxMzIxNjk5MTQ1LDM1MTkxNDIyMDAsMjczNDU5MTE3OCwxODgxMjc0NDQsMjE3Nzg2OTU1NywzNzI3MjA1NzU0LDIzODQ5MTEwMzEsMzIxNTIxMjQ2MSwyNjQ4OTc2NDQyLDI0NTAzNDYxMDQsMzQzMjczNzM3NSwxMTgwODQ5Mjc4LDMzMTU0NDIwNSwzMTAyMjQ5MTc2LDQxNTAxNDQ1NjksMjk1MjEwMjU5NSwyMTU5OTc2Mjg1LDI0NzQ0MDQzMDQsNzY2MDc4OTMzLDMxMzc3Mzg2MSwyNTcwODMyMDQ0LDIxMDgxMDA2MzIsMTY2ODIxMjg5MiwzMTQ1NDU2NDQzLDIwMTM5MDgyNjIsNDE4NjcyMjE3LDMwNzAzNTY2MzQsMjU5NDczNDkyNywxODUyMTcxOTI1LDM4NjcwNjA5OTEsMzQ3MzQxNjYzNiwzOTA3NDQ4NTk3LDI2MTQ3Mzc2MzksOTE5NDg5MTM1LDE2NDk0ODYzOSwyMDk0NDEwMTYwLDI5OTc4MjU5NTYsNTkwNDI0NjM5LDI0ODYyMjQ1NDksMTcyMzg3MjY3NCwzMTU3NzUwODYyLDMzOTk5NDEyNTAsMzUwMTI1Mjc1MiwzNjI1MjY4MTM1LDI1NTUwNDgxOTYsMzY3MzYzNzM1NiwxMzQzMTI3NTAxLDQxMzAyODEzNjEsMzU5OTU5NTA4NSwyOTU3ODUzNjc5LDEyOTc0MDMwNTAsODE3ODE5MTAsMzA1MTU5MzQyNSwyMjgzNDkwNDEwLDUzMjIwMTc3MiwxMzY3Mjk1NTg5LDM5MjYxNzA5NzQsODk1Mjg3NjkyLDE5NTM3NTc4MzEsMTA5MzU5Nzk2Myw0OTI0ODM0MzEsMzUyODYyNjkwNywxNDQ2MjQyNTc2LDExOTI0NTU2MzgsMTYzNjYwNDYzMSwyMDkzMzYyMjUsMzQ0ODczNDY0LDEwMTU2NzE1NzEsNjY5OTYxODk3LDMzNzU3NDA3NjksMzg1NzU3MjEyNCwyOTczNTMwNjk1LDM3NDcxOTIwMTgsMTkzMzUzMDYxMCwzNDY0MDQyNTE2LDkzNTI5Mzg5NSwzNDU0Njg2MTk5LDI4NTgxMTUwNjksMTg2MzYzODg0NSwzNjgzMDIyOTE2LDQwODUzNjk1MTksMzI5MjQ0NTAzMiw4NzUzMTMxODgsMTA4MDAxNzU3MSwzMjc5MDMzODg1LDYyMTU5MTc3OCwxMjMzODU2NTcyLDI1MDQxMzAzMTcsMjQxOTc1NDQsMzAxNzY3MjcxNiwzODM1NDg0MzQwLDMyNDc0NjU1NTgsMjIyMDk4MTE5NSwzMDYwODQ3OTIyLDE1NTExMjQ1ODgsMTQ2Mzk5NjYwMF07dmFyIFQ4PVs0MTA0NjA1Nzc3LDEwOTcxNTk1NTAsMzk2NjczODE4LDY2MDUxMDI2NiwyODc1OTY4MzE1LDI2Mzg2MDY2MjMsNDIwMDExNTExNiwzODA4NjYyMzQ3LDgyMTcxMjE2MCwxOTg2OTE4MDYxLDM0MzAzMjI1NjgsMzg1NDQ4ODUsMzg1NjEzNzI5NSw3MTgwMDIxMTcsODkzNjgxNzAyLDE2NTQ4ODYzMjUsMjk3NTQ4NDM4MiwzMTIyMzU4MDUzLDM5MjY4MjUwMjksNDI3NDA1MzQ2OSw3OTYxOTc1NzEsMTI5MDgwMTc5MywxMTg0MzQyOTI1LDM1NTYzNjE4MzUsMjQwNTQyNjk0NywyNDU5NzM1MzE3LDE4MzY3NzIyODcsMTM4MTYyMDM3MywzMTk2MjY3OTg4LDE5NDgzNzM4NDgsMzc2NDk4ODIzMywzMzg1MzQ1MTY2LDMyNjM3ODU1ODksMjM5MDMyNTQ5MiwxNDgwNDg1Nzg1LDMxMTEyNDcxNDMsMzc4MDA5NzcyNiwyMjkzMDQ1MjMyLDU0ODE2OTQxNywzNDU5OTUzNzg5LDM3NDYxNzUwNzUsNDM5NDUyMzg5LDEzNjIzMjE1NTksMTQwMDg0OTc2MiwxNjg1NTc3OTA1LDE4MDY1OTkzNTUsMjE3NDc1NDA0NiwxMzcwNzM5MTMsMTIxNDc5NzkzNiwxMTc0MjE1MDU1LDM3MzE2NTQ1NDgsMjA3OTg5NzQyNiwxOTQzMjE3MDY3LDEyNTg0ODAyNDIsNTI5NDg3ODQzLDE0MzcyODA4NzAsMzk0NTI2OTE3MCwzMDQ5MzkwODk1LDMzMTMyMTIwMzgsOTIzMzEzNjE5LDY3OTk5OGUzLDMyMTUzMDcyOTksNTczMjYwODIsMzc3NjQyMjIxLDM0NzQ3Mjk4NjYsMjA0MTg3NzE1OSwxMzMzNjE5MDcsMTc3NjQ2MDExMCwzNjczNDc2NDUzLDk2MzkyNDU0LDg3ODg0NTkwNSwyODAxNjk5NTI0LDc3NzIzMTY2OCw0MDgyNDc1MTcwLDIzMzAwMTQyMTMsNDE0MjYyNjIxMiwyMjEzMjk2Mzk1LDE2MjYzMTk0MjQsMTkwNjI0NzI2MiwxODQ2NTYzMjYxLDU2Mjc1NTkwMiwzNzA4MTczNzE4LDEwNDA1NTk4MzcsMzg3MTE2Mzk4MSwxNDE4NTczMjAxLDMyOTQ0MzA1NzcsMTE0NTg1MzQ4LDEzNDM2MTg5MTIsMjU2NjU5NTYwOSwzMTg2MjAyNTgyLDEwNzgxODUwOTcsMzY1MTA0MTEyNywzODk2Njg4MDQ4LDIzMDc2MjI5MTksNDI1NDA4NzQzLDMzNzEwOTY5NTMsMjA4MTA0ODQ4MSwxMTA4MzM5MDY4LDIyMTY2MTAyOTYsMCwyMTU2Mjk5MDE3LDczNjk3MDgwMiwyOTI1OTY3NjYsMTUxNzQ0MDYyMCwyNTE2NTcyMTMsMjIzNTA2MTc3NSwyOTMzMjAyNDkzLDc1ODcyMDMxMCwyNjU5MDUxNjIsMTU1NDM5MTQwMCwxNTMyMjg1MzM5LDkwODk5OTIwNCwxNzQ1Njc2OTIsMTQ3NDc2MDU5NSw0MDAyODYxNzQ4LDI2MTAwMTE2NzUsMzIzNDE1NjQxNiwzNjkzMTI2MjQxLDIwMDE0MzA4NzQsMzAzNjk5NDg0LDI0Nzg0NDMyMzQsMjY4NzE2NTg4OCw1ODUxMjI2MjAsNDU0NDk5NjAyLDE1MTg0OTc0MiwyMzQ1MTE5MjE4LDMwNjQ1MTA3NjUsNTE0NDQzMjg0LDQwNDQ5ODE1OTEsMTk2MzQxMjY1NSwyNTgxNDQ1NjE0LDIxMzcwNjI4MTksMTkzMDg1MzUsMTkyODcwNzE2NCwxNzE1MTkzMTU2LDQyMTkzNTIxNTUsMTEyNjc5MDc5NSw2MDAyMzUyMTEsMzk5Mjc0MjA3MCwzODQxMDI0OTUyLDgzNjU1MzQzMSwxNjY5NjY0ODM0LDI1MzU2MDQyNDMsMzMyMzAxMTIwNCwxMjQzOTA1NDEzLDMxNDE0MDA3ODYsNDE4MDgwODExMCw2OTg0NDUyNTUsMjY1Mzg5OTU0OSwyOTg5NTUyNjA0LDIyNTM1ODEzMjUsMzI1MjkzMjcyNywzMDA0NTkxMTQ3LDE4OTEyMTE2ODksMjQ4NzgxMDU3NywzOTE1NjUzNzAzLDQyMzcwODM4MTYsNDAzMDY2NzQyNCwyMTAwMDkwOTY2LDg2NTEzNjQxOCwxMjI5ODk5NjU1LDk1MzI3MDc0NSwzMzk5Njc5NjI4LDM1NTc1MDQ2NjQsNDExODkyNTIyMiwyMDYxMzc5NzQ5LDMwNzk1NDY1ODYsMjkxNTAxNzc5MSw5ODM0MjYwOTIsMjAyMjgzNzU4NCwxNjA3MjQ0NjUwLDIxMTg1NDE5MDgsMjM2Njg4MjU1MCwzNjM1OTk2ODE2LDk3MjUxMjgxNCwzMjgzMDg4NzcwLDE1Njg3MTg0OTUsMzQ5OTMyNjU2OSwzNTc2NTM5NTAzLDYyMTk4MjY3MSwyODk1NzIzNDY0LDQxMDg4Nzk1MiwyNjIzNzYyMTUyLDEwMDIxNDI2ODMsNjQ1NDAxMDM3LDE0OTQ4MDc2NjIsMjU5NTY4NDg0NCwxMzM1NTM1NzQ3LDI1MDcwNDAyMzAsNDI5MzI5NTc4NiwzMTY3Njg0NjQxLDM2NzU4NTAwNywzODg1NzUwNzE0LDE4NjU4NjI3MzAsMjY2ODIyMTY3NCwyOTYwOTcxMzA1LDI3NjMxNzM2ODEsMTA1OTI3MDk1NCwyNzc3OTUyNDU0LDI3MjQ2NDI4NjksMTMyMDk1NzgxMiwyMTk0MzE5MTAwLDI0Mjk1OTU4NzIsMjgxNTk1NjI3NSw3NzA4OTUyMSwzOTczNzczMTIxLDM0NDQ1NzU4NzEsMjQ0ODgzMDIzMSwxMzA1OTA2NTUwLDQwMjEzMDg3MzksMjg1NzE5NDcwMCwyNTE2OTAxODYwLDM1MTgzNTg0MzAsMTc4NzMwNDc4MCw3NDAyNzY0MTcsMTY5OTgzOTgxNCwxNTkyMzk0OTA5LDIzNTIzMDc0NTcsMjI3MjU1NjAyNiwxODg4MjEyNDMsMTcyOTk3NzAxMSwzNjg3OTk0MDAyLDI3NDA4NDg0MSwzNTk0OTgyMjUzLDM2MTM0OTQ0MjYsMjcwMTk0OTQ5NSw0MTYyMDk2NzI5LDMyMjczNDU3MSwyODM3OTY2NTQyLDE2NDA1NzY0MzksNDg0ODMwNjg5LDEyMDI3OTc2OTAsMzUzNzg1MjgyOCw0MDY3NjM5MTI1LDM0OTA3NTczNiwzMzQyMzE5NDc1LDQxNTc0NjcyMTksNDI1NTgwMDE1OSwxMDMwNjkwMDE1LDExNTUyMzc0OTYsMjk1MTk3MTI3NCwxNzU3NjkxNTc3LDYwNzM5ODk2OCwyNzM4OTA1MDI2LDQ5OTM0Nzk5MCwzNzk0MDc4OTA4LDEwMTE0NTI3MTIsMjI3ODg1NTY3LDI4MTg2NjY4MDksMjEzMTE0Mzc2LDMwMzQ4ODEyNDAsMTQ1NTUyNTk4OCwzNDE0NDUwNTU1LDg1MDgxNzIzNywxODE3OTk4NDA4LDMwOTI3MjY0ODBdO3ZhciBVMT1bMCwyMzU0NzQxODcsNDcwOTQ4Mzc0LDMwMzc2NTI3Nyw5NDE4OTY3NDgsOTA4OTMzNDE1LDYwNzUzMDU1NCw3MDg3ODA4NDksMTg4Mzc5MzQ5NiwyMTE4MjE0OTk1LDE4MTc4NjY4MzAsMTY0OTYzOTIzNywxMjE1MDYxMTA4LDExODEwNDUxMTksMTQxNzU2MTY5OCwxNTE3NzY3NTI5LDM3Njc1ODY5OTIsNDAwMzA2MTE3OSw0MjM2NDI5OTkwLDQwNjkyNDY4OTMsMzYzNTczMzY2MCwzNjAyNzcwMzI3LDMyOTkyNzg0NzQsMzQwMDUyODc2OSwyNDMwMTIyMjE2LDI2NjQ1NDM3MTUsMjM2MjA5MDIzOCwyMTkzODYyNjQ1LDI4MzUxMjMzOTYsMjgwMTEwNzQwNywzMDM1NTM1MDU4LDMxMzU3NDA4ODksMzY3ODEyNDkyMywzNTc2ODcwNTEyLDMzNDEzOTQyODUsMzM3NDM2MTcwMiwzODEwNDk2MzQzLDM5Nzc2NzUzNTYsNDI3OTA4MDI1Nyw0MDQzNjEwMTg2LDI4NzY0OTQ2MjcsMjc3NjI5MjkwNCwzMDc2NjM5MDI5LDMxMTA2NTA5NDIsMjQ3MjAxMTUzNSwyNjQwMjQzMjA0LDI0MDM3Mjg2NjUsMjE2OTMwMzA1OCwxMDAxMDg5OTk1LDg5OTgzNTU4NCw2NjY0NjQ3MzMsNjk5NDMyMTUwLDU5NzI3ODQ3LDIyNjkwNjg2MCw1MzA0MDA3NTMsMjk0OTMwNjgyLDEyNzMxNjg3ODcsMTE3Mjk2NzA2NCwxNDc1NDE4NTAxLDE1MDk0MzA0MTQsMTk0MjQzNTc3NSwyMTEwNjY3NDQ0LDE4NzYyNDE4MzMsMTY0MTgxNjIyNiwyOTEwMjE5NzY2LDI3NDMwMzQxMDksMjk3NjE1MTUyMCwzMjExNjIzMTQ3LDI1MDUyMDIxMzgsMjYwNjQ1Mzk2OSwyMzAyNjkwMjUyLDIyNjk3Mjg0NTUsMzcxMTgyOTQyMiwzNTQzNTk5MjY5LDMyNDA4OTQzOTIsMzQ3NTMxMzMzMSwzODQzNjk5MDc0LDM5NDM5MDY0NDEsNDE3ODA2MjIyOCw0MTQ0MDQ3Nzc1LDEzMDY5NjczNjYsMTEzOTc4MTcwOSwxMzc0OTg4MTEyLDE2MTA0NTk3MzksMTk3NTY4MzQzNCwyMDc2OTM1MjY1LDE3NzUyNzY5MjQsMTc0MjMxNTEyNywxMDM0ODY3OTk4LDg2NjYzNzg0NSw1NjYwMjE4OTYsODAwNDQwODM1LDkyOTg3Njk4LDE5MzE5NTA2NSw0Mjk0NTYxNjQsMzk1NDQxNzExLDE5ODQ4MTI2ODUsMjAxNzc3ODU2NiwxNzg0NjYzMTk1LDE2ODM0MDcyNDgsMTMxNTU2MjE0NSwxMDgwMDk0NjM0LDEzODM4NTYzMTEsMTU1MTAzNzg4NCwxMDEwMzk4MjksMTM1MDUwMjA2LDQzNzc1NzEyMywzMzc1NTM4NjQsMTA0MjM4NTY1Nyw4MDc5NjI2MTAsNTczODA0NzgzLDc0MjAzOTAxMiwyNTMxMDY3NDUzLDI1NjQwMzMzMzQsMjMyODgyODk3MSwyMjI3NTczMDI0LDI5MzU1NjY4NjUsMjcwMDA5OTM1NCwzMDAxNzU1NjU1LDMxNjg5MzcyMjgsMzg2ODU1MjgwNSwzOTAyNTYzMTgyLDQyMDMxODExNzEsNDEwMjk3NzkxMiwzNzM2MTY0OTM3LDM1MDE3NDE4OTAsMzI2NTQ3ODc1MSwzNDMzNzEyOTgwLDExMDYwNDE1OTEsMTM0MDQ2MzEwMCwxNTc2OTc2NjA5LDE0MDg3NDkwMzQsMjA0MzIxMTQ4MywyMDA5MTk1NDcyLDE3MDg4NDgzMzMsMTgwOTA1NDE1MCw4MzI4NzcyMzEsMTA2ODM1MTM5Niw3NjY5NDU0NjUsNTk5NzYyMzU0LDE1OTQxNzk4NywxMjY0NTQ2NjQsMzYxOTI5ODc3LDQ2MzE4MDE5MCwyNzA5MjYwODcxLDI5NDM2ODIzODAsMzE3ODEwNjk2MSwzMDA5ODc5Mzg2LDI1NzI2OTcxOTUsMjUzODY4MTE4NCwyMjM2MjI4NzMzLDIzMzY0MzQ1NTAsMzUwOTg3MTEzNSwzNzQ1MzQ1MzAwLDM0NDE4NTAzNzcsMzI3NDY2NzI2NiwzOTEwMTYxOTcxLDM4NzcxOTg2NDgsNDExMDU2ODQ4NSw0MjExODE4Nzk4LDI1OTc4MDY0NzYsMjQ5NzYwNDc0MywyMjYxMDg5MTc4LDIyOTUxMDEwNzMsMjczMzg1NjE2MCwyOTAyMDg3ODUxLDMyMDI0MzcwNDYsMjk2ODAxMTQ1MywzOTM2MjkxMjg0LDM4MzUwMzY4OTUsNDEzNjQ0MDc3MCw0MTY5NDA4MjAxLDM1MzU0ODY0NTYsMzcwMjY2NTQ1OSwzNDY3MTkyMzAyLDMyMzE3MjIyMTMsMjA1MTUxODc4MCwxOTUxMzE3MDQ3LDE3MTY4OTA0MTAsMTc1MDkwMjMwNSwxMTEzODE4Mzg0LDEyODIwNTAwNzUsMTU4NDUwNDU4MiwxMzUwMDc4OTg5LDE2ODgxMDg1Miw2NzU1NjQ2MywzNzEwNDkzMzAsNDA0MDE2NzYxLDg0MTczOTU5MiwxMDA4OTE4NTk1LDc3NTU1MDgxNCw1NDAwODA3MjUsMzk2OTU2MjM2OSwzODAxMzMyMjM0LDQwMzU0ODkwNDcsNDI2OTkwNzk5NiwzNTY5MjU1MjEzLDM2Njk0NjI1NjYsMzM2Njc1NDYxOSwzMzMyNzQwMTQ0LDI2MzEwNjU0MzMsMjQ2Mzg3OTc2MiwyMTYwMTE3MDcxLDIzOTU1ODg2NzYsMjc2NzY0NTU1NywyODY4ODk3NDA2LDMxMDIwMTE3NDcsMzA2OTA0OTk2MCwyMDIwMDg0OTcsMzM3NzgzNjIsMjcwMDQwNDg3LDUwNDQ1OTQzNiw4NzU0NTEyOTMsOTc1NjU4NjQ2LDY3NTAzOTYyNyw2NDEwMjUxNTIsMjA4NDcwNDIzMywxOTE3NTE4NTYyLDE2MTU4NjEyNDcsMTg1MTMzMjg1MiwxMTQ3NTUwNjYxLDEyNDg4MDI1MTAsMTQ4NDAwNTg0MywxNDUxMDQ0MDU2LDkzMzMwMTM3MCw5NjczMTE3MjksNzMzMTU2OTcyLDYzMjk1MzcwMywyNjAzODg5NTAsMjU5NjU5MTcsMzI4NjcxODA4LDQ5NjkwNjA1OSwxMjA2NDc3ODU4LDEyMzk0NDM3NTMsMTU0MzIwODUwMCwxNDQxOTUyNTc1LDIxNDQxNjE4MDYsMTkwODY5NDI3NywxNjc1NTc3ODgwLDE4NDI3NTk0NDMsMzYxMDM2OTIyNiwzNjQ0Mzc5NTg1LDM0MDgxMTk1MTYsMzMwNzkxNjI0Nyw0MDExMTkwNTAyLDM3NzY3Njc0NjksNDA3NzM4NDQzMiw0MjQ1NjE4NjgzLDI4MDk3NzExNTQsMjg0MjczNzA0OSwzMTQ0Mzk2NDIwLDMwNDMxNDA0OTUsMjY3MzcwNTE1MCwyNDM4MjM3NjIxLDIyMDMwMzIyMzIsMjM3MDIxMzc5NV07dmFyIFUyPVswLDE4NTQ2OTE5NywzNzA5MzgzOTQsNDg3NzI1ODQ3LDc0MTg3Njc4OCw2NTc4NjE5NDUsOTc1NDUxNjk0LDgyNDg1MjI1OSwxNDgzNzUzNTc2LDE0MDA3ODMyMDUsMTMxNTcyMzg5MCwxMTY0MDcxODA3LDE5NTA5MDMzODgsMjEzNTMxOTg4OSwxNjQ5NzA0NTE4LDE3Njc1MzY0NTksMjk2NzUwNzE1MiwzMTUyOTc2MzQ5LDI4MDE1NjY0MTAsMjkxODM1Mzg2MywyNjMxNDQ3NzgwLDI1NDc0MzI5MzcsMjMyODE0MzYxNCwyMTc3NTQ0MTc5LDM5MDE4MDY3NzYsMzgxODgzNjQwNSw0MjcwNjM5Nzc4LDQxMTg5ODc2OTUsMzI5OTQwOTAzNiwzNDgzODI1NTM3LDM1MzUwNzI5MTgsMzY1MjkwNDg1OSwyMDc3OTY1MjQzLDE4OTMwMjAzNDIsMTg0MTc2ODg2NSwxNzI0NDU3MTMyLDE0NzQ1MDI1NDMsMTU1OTA0MTY2NiwxMTA3MjM0MTk3LDEyNTczMDkzMzYsNTk4NDM4ODY3LDY4MTkzMzUzNCw5MDEyMTA1NjksMTA1MjMzODM3MiwyNjEzMTQ1MzUsNzc0MjIzMTQsNDI4ODE5OTY1LDMxMDQ2MzcyOCwzNDA5Njg1MzU1LDMyMjQ3NDA0NTQsMzcxMDM2ODExMywzNTkzMDU2MzgwLDM4NzU3NzAyMDcsMzk2MDMwOTMzMCw0MDQ1MzgwOTMzLDQxOTU0NTYwNzIsMjQ3MTIyNDA2NywyNTU0NzE4NzM0LDIyMzcxMzMwODEsMjM4ODI2MDg4NCwzMjEyMDM1ODk1LDMwMjgxNDM2NzQsMjg0MjY3ODU3MywyNzI0MzIyMzM2LDQxMzg1NjMxODEsNDI1NTM1MDYyNCwzNzY5NzIxOTc1LDM5NTUxOTExNjIsMzY2NzIxOTAzMywzNTE2NjE5NjA0LDM0MzE1NDY5NDcsMzM0NzUzMjExMCwyOTMzNzM0OTE3LDI3ODIwODI4MjQsMzA5OTY2NzQ4NywzMDE2Njk3MTA2LDIxOTYwNTI1MjksMjMxMzg4NDQ3NiwyNDk5MzQ4NTIzLDI2ODM3NjUwMzAsMTE3OTUxMDQ2MSwxMjk2Mjk3OTA0LDEzNDc1NDgzMjcsMTUzMzAxNzUxNCwxNzg2MTAyNDA5LDE2MzU1MDI5ODAsMjA4NzMwOTQ1OSwyMDAzMjk0NjIyLDUwNzM1ODkzMywzNTU3MDY4NDAsMTM2NDI4NzUxLDUzNDU4MzcwLDgzOTIyNDAzMyw5NTcwNTU5ODAsNjA1NjU3MzM5LDc5MDA3Mzg0NiwyMzczMzQwNjMwLDIyNTYwMjg4OTEsMjYwNzQzOTgyMCwyNDIyNDk0OTEzLDI3MDYyNzA2OTAsMjg1NjM0NTgzOSwzMDc1NjM2MjE2LDMxNjAxNzUzNDksMzU3Mzk0MTY5NCwzNzI1MDY5NDkxLDMyNzMyNjcxMDgsMzM1Njc2MTc2OSw0MTgxNTk4NjAyLDQwNjMyNDIzNzUsNDAxMTk5NjA0OCwzODI4MTAzODM3LDEwMzMyOTcxNTgsOTE1OTg1NDE5LDczMDUxNzI3Niw1NDU1NzIzNjksMjk2Njc5NzMwLDQ0Njc1NDg3OSwxMjkxNjYxMjAsMjEzNzA1MjUzLDE3MDk2MTAzNTAsMTg2MDczODE0NywxOTQ1Nzk4NTE2LDIwMjkyOTMxNzcsMTIzOTMzMTE2MiwxMTIwOTc0OTM1LDE2MDY1OTEyOTYsMTQyMjY5OTA4NSw0MTQ4MjkyODI2LDQyMzMwOTQ2MTUsMzc4MTAzMzY2NCwzOTMxMzcxNDY5LDM2ODIxOTE1OTgsMzQ5NzUwOTM0NywzNDQ2MDA0NDY4LDMzMjg5NTUzODUsMjkzOTI2NjIyNiwyNzU1NjM2NjcxLDMxMDY3ODA4NDAsMjk4ODY4NzI2OSwyMTk4NDM4MDIyLDIyODIxOTUzMzksMjUwMTIxODk3MiwyNjUyNjA5NDI1LDEyMDE3NjUzODYsMTI4NjU2NzE3NSwxMzcxMzY4OTc2LDE1MjE3MDY3ODEsMTgwNTIxMTcxMCwxNjIwNTI5NDU5LDIxMDU4ODcyNjgsMTk4ODgzODE4NSw1MzM4MDQxMzAsMzUwMTc0NTc1LDE2NDQzOTY3Miw0NjM0NjEwMSw4NzA5MTIwODYsOTU0NjY5NDAzLDYzNjgxMzkwMCw3ODgyMDQzNTMsMjM1ODk1NzkyMSwyMjc0NjgwNDI4LDI1OTI1MjM2NDMsMjQ0MTY2MTU1OCwyNjk1MDMzNjg1LDI4ODAyNDAyMTYsMzA2NTk2MjgzMSwzMTgyNDg3NjE4LDM1NzIxNDU5MjksMzc1NjI5OTc4MCwzMjcwOTM3ODc1LDMzODg1MDcxNjYsNDE3NDU2MDA2MSw0MDkxMzI3MDI0LDQwMDY1MjExMjcsMzg1NDYwNjM3OCwxMDE0NjQ2NzA1LDkzMDM2OTIxMiw3MTEzNDk2NzUsNTYwNDg3NTkwLDI3Mjc4NjMwOSw0NTc5OTI4NDAsMTA2ODUyNzY3LDIyMzM3NzU1NCwxNjc4MzgxMDE3LDE4NjI1MzQ4NjgsMTkxNDA1MjAzNSwyMDMxNjIxMzI2LDEyMTEyNDc1OTcsMTEyODAxNDU2MCwxNTgwMDg3Nzk5LDE0MjgxNzMwNTAsMzIyODMzMTksMTgyNjIxMTE0LDQwMTYzOTU5Nyw0ODY0NDEzNzYsNzY4OTE3MTIzLDY1MTg2ODA0NiwxMDAzMDA3MTI5LDgxODMyNDg4NCwxNTAzNDQ5ODIzLDEzODUzNTYyNDIsMTMzMzgzODAyMSwxMTUwMjA4NDU2LDE5NzM3NDUzODcsMjEyNTEzNTg0NiwxNjczMDYxNjE3LDE3NTY4MTg5NDAsMjk3MDM1NjMyNywzMTIwNjk0MTIyLDI4MDI4NDk5MTcsMjg4NzY1MTY5NiwyNjM3NDQyNjQzLDI1MjAzOTM1NjYsMjMzNDY2OTg5NywyMTQ5OTg3NjUyLDM5MTcyMzQ3MDMsMzc5OTE0MTEyMiw0Mjg0NTAyMDM3LDQxMDA4NzI0NzIsMzMwOTU5NDE3MSwzNDYwOTg0NjMwLDM1NDU3ODk0NzMsMzYyOTU0Njc5NiwyMDUwNDY2MDYwLDE4OTk2MDM5NjksMTgxNDgwMzIyMiwxNzMwNTI1NzIzLDE0NDM4NTc3MjAsMTU2MDM4MjUxNywxMDc1MDI1Njk4LDEyNjAyMzIyMzksNTc1MTM4MTQ4LDY5MjcwNzQzMyw4Nzg0NDMzOTAsMTA2MjU5NzIzNSwyNDMyNTY2NTYsOTEzNDE5MTcsNDA5MTk4NDEwLDMyNTk2NTM4MywzNDAzMTAwNjM2LDMyNTIyMzg1NDUsMzcwNDMwMDQ4NiwzNjIwMDIyOTg3LDM4NzQ0MjgzOTIsMzk5MDk1MzE4OSw0MDQyNDU5MTIyLDQyMjc2NjU2NjMsMjQ2MDQ0OTIwNCwyNTc4MDE4NDg5LDIyMjY4NzUzMTAsMjQxMTAyOTE1NSwzMTk4MTE1MjAwLDMwNDYyMDA0NjEsMjgyNzE3Nzg4MiwyNzQzOTQ0ODU1XTt2YXIgVTM9WzAsMjE4ODI4Mjk3LDQzNzY1NjU5NCwzODc3ODExNDcsODc1MzEzMTg4LDk1ODg3MTA4NSw3NzU1NjIyOTQsNTkwNDI0NjM5LDE3NTA2MjYzNzYsMTY5OTk3MDYyNSwxOTE3NzQyMTcwLDIxMzUyNTM1ODcsMTU1MTEyNDU4OCwxMzY3Mjk1NTg5LDExODA4NDkyNzgsMTI2NTE5NTYzOSwzNTAxMjUyNzUyLDM3MjAwODEwNDksMzM5OTk0MTI1MCwzMzUwMDY1ODAzLDM4MzU0ODQzNDAsMzkxOTA0MjIzNyw0MjcwNTA3MTc0LDQwODUzNjk1MTksMzEwMjI0OTE3NiwzMDUxNTkzNDI1LDI3MzQ1OTExNzgsMjk1MjEwMjU5NSwyMzYxNjk4NTU2LDIxNzc4Njk1NTcsMjUzMDM5MTI3OCwyNjE0NzM3NjM5LDMxNDU0NTY0NDMsMzA2MDg0NzkyMiwyNzA4MzI2MTg1LDI4OTI0MTczMTIsMjQwNDkwMTY2MywyMTg3MTI4MDg2LDI1MDQxMzAzMTcsMjU1NTA0ODE5NiwzNTQyMzMwMjI3LDM3MjcyMDU3NTQsMzM3NTc0MDc2OSwzMjkyNDQ1MDMyLDM4NzY1NTc2NTUsMzkyNjE3MDk3NCw0MjQ2MzEwNzI1LDQwMjc3NDQ1ODgsMTgwODQ4MTE5NSwxNzIzODcyNjc0LDE5MTAzMTkwMzMsMjA5NDQxMDE2MCwxNjA4OTc1MjQ3LDEzOTEyMDE2NzAsMTE3MzQzMDE3MywxMjI0MzQ4MDUyLDU5OTg0ODY3LDI0NDg2MDM5NCw0MjgxNjkyMDEsMzQ0ODczNDY0LDkzNTI5Mzg5NSw5ODQ5MDcyMTQsNzY2MDc4OTMzLDU0NzUxMjc5NiwxODQ0ODgyODA2LDE2MjcyMzUxOTksMjAxMTIxNDE4MCwyMDYyMjcwMzE3LDE1MDc0OTcyOTgsMTQyMzAyMjkzOSwxMTM3NDc3OTUyLDEzMjE2OTkxNDUsOTUzNDU5ODIsMTQ1MDg1MjM5LDUzMjIwMTc3MiwzMTM3NzM4NjEsODMwNjYxOTE0LDEwMTU2NzE1NzEsNzMxMTgzMzY4LDY0ODAxNzY2NSwzMTc1NTAxMjg2LDI5NTc4NTM2NzksMjgwNzA1ODkzMiwyODU4MTE1MDY5LDIzMDU0NTU1NTQsMjIyMDk4MTE5NSwyNDc0NDA0MzA0LDI2NTg2MjU0OTcsMzU3NTUyODg3OCwzNjI1MjY4MTM1LDM0NzM0MTY2MzYsMzI1NDk4ODcyNSwzNzc4MTUxODE4LDM5NjMxNjE0NzUsNDIxMzQ0NzA2NCw0MTMwMjgxMzYxLDM1OTk1OTUwODUsMzY4MzAyMjkxNiwzNDMyNzM3Mzc1LDMyNDc0NjU1NTgsMzgwMjIyMjE4NSw0MDIwOTEyMjI0LDQxNzI3NjM3NzEsNDEyMjc2MjM1NCwzMjAxNjMxNzQ5LDMwMTc2NzI3MTYsMjc2NDI0OTYyMywyODQ4NDYxODU0LDIzMzE1OTAxNzcsMjI4MDc5NjIwMCwyNDMxNTkwOTYzLDI2NDg5NzY0NDIsMTA0Njk5NjEzLDE4ODEyNzQ0NCw0NzI2MTU2MzEsMjg3MzQzODE0LDg0MDAxOTcwNSwxMDU4NzA5NzQ0LDY3MTU5MzE5NSw2MjE1OTE3NzgsMTg1MjE3MTkyNSwxNjY4MjEyODkyLDE5NTM3NTc4MzEsMjAzNzk3MDA2MiwxNTE0NzkwNTc3LDE0NjM5OTY2MDAsMTA4MDAxNzU3MSwxMjk3NDAzMDUwLDM2NzM2MzczNTYsMzYyMzYzNjk2NSwzMjM1OTk1MTM0LDM0NTQ2ODYxOTksNDAwNzM2MDk2OCwzODIyMDkwMTc3LDQxMDcxMDE2NTgsNDE5MDUzMDUxNSwyOTk3ODI1OTU2LDMyMTUyMTI0NjEsMjgzMDcwODE1MCwyNzc5OTE1MTk5LDIyNTY3MzQ1OTIsMjM0MDk0Nzg0OSwyNjI3MDE2MDgyLDI0NDMwNTgwNzUsMTcyNDY2NTU2LDEyMjQ2NjE2NSwyNzM3OTIzNjYsNDkyNDgzNDMxLDEwNDcyMzllMyw4NjE5NjgyMDksNjEyMjA1ODk4LDY5NTYzNDc1NSwxNjQ2MjUyMzQwLDE4NjM2Mzg4NDUsMjAxMzkwODI2MiwxOTYzMTE1MzExLDE0NDYyNDI1NzYsMTUzMDQ1NTgzMywxMjc3NTU1OTcwLDEwOTM1OTc5NjMsMTYzNjYwNDYzMSwxODIwODI0Nzk4LDIwNzM3MjQ2MTMsMTk4OTI0OTIyOCwxNDM2NTkwODM1LDE0ODc2NDU5NDYsMTMzNzM3NjQ4MSwxMTE5NzI3ODQ4LDE2NDk0ODYzOSw4MTc4MTkxMCwzMzE1NDQyMDUsNTE2NTUyODM2LDEwMzk3MTcwNTEsODIxMjg4MTE0LDY2OTk2MTg5Nyw3MTk3MDAxMjgsMjk3MzUzMDY5NSwzMTU3NzUwODYyLDI4NzE2ODI2NDUsMjc4NzIwNzI2MCwyMjMyNDM1Mjk5LDIyODM0OTA0MTAsMjY2Nzk5NDczNywyNDUwMzQ2MTA0LDM2NDcyMTIwNDcsMzU2NDA0NTMxOCwzMjc5MDMzODg1LDM0NjQwNDI1MTYsMzk4MDkzMTYyNywzNzYyNTAyNjkwLDQxNTAxNDQ1NjksNDE5OTg4MjgwMCwzMDcwMzU2NjM0LDMxMjEyNzU1MzksMjkwNDAyNzI3MiwyNjg2MjU0NzIxLDIyMDA4MTg4NzgsMjM4NDkxMTAzMSwyNTcwODMyMDQ0LDI0ODYyMjQ1NDksMzc0NzE5MjAxOCwzNTI4NjI2OTA3LDMzMTAzMjE4NTYsMzM1OTkzNjIwMSwzOTUwMzU1NzAyLDM4NjcwNjA5OTEsNDA0OTg0NDQ1Miw0MjM0NzIxMDA1LDE3Mzk2NTYyMDIsMTc5MDU3NTEwNywyMTA4MTAwNjMyLDE4OTAzMjgwODEsMTQwMjgxMTQzOCwxNTg2OTAzNTkxLDEyMzM4NTY1NzIsMTE0OTI0OTA3NywyNjY5NTk5MzgsNDgzOTQ4MjcsMzY5MDU3ODcyLDQxODY3MjIxNywxMDAyNzgzODQ2LDkxOTQ4OTEzNSw1Njc0OTg4NjgsNzUyMzc1NDIxLDIwOTMzNjIyNSwyNDE5NzU0NCwzNzYxODc4MjcsNDU5NzQ0Njk4LDk0NTE2NDE2NSw4OTUyODc2OTIsNTc0NjI0NjYzLDc5MzQ1MTkzNCwxNjc5OTY4MjMzLDE3NjQzMTM1NjgsMjExNzM2MDYzNSwxOTMzNTMwNjEwLDEzNDMxMjc1MDEsMTU2MDYzNzg5MiwxMjQzMTEyNDE1LDExOTI0NTU2MzgsMzcwNDI4MDg4MSwzNTE5MTQyMjAwLDMzMzYzNTg2OTEsMzQxOTkxNTU2MiwzOTA3NDQ4NTk3LDM4NTc1NzIxMjQsNDA3NTg3NzEyNyw0Mjk0NzA0Mzk4LDMwMjk1MTAwMDksMzExMzg1NTM0NCwyOTI3OTM0MzE1LDI3NDQxMDQyOTAsMjE1OTk3NjI4NSwyMzc3NDg2Njc2LDI1OTQ3MzQ5MjcsMjU0NDA3ODE1MF07dmFyIFU0PVswLDE1MTg0OTc0MiwzMDM2OTk0ODQsNDU0NDk5NjAyLDYwNzM5ODk2OCw3NTg3MjAzMTAsOTA4OTk5MjA0LDEwNTkyNzA5NTQsMTIxNDc5NzkzNiwxMDk3MTU5NTUwLDE1MTc0NDA2MjAsMTQwMDg0OTc2MiwxODE3OTk4NDA4LDE2OTk4Mzk4MTQsMjExODU0MTkwOCwyMDAxNDMwODc0LDI0Mjk1OTU4NzIsMjU4MTQ0NTYxNCwyMTk0MzE5MTAwLDIzNDUxMTkyMTgsMzAzNDg4MTI0MCwzMTg2MjAyNTgyLDI4MDE2OTk1MjQsMjk1MTk3MTI3NCwzNjM1OTk2ODE2LDM1MTgzNTg0MzAsMzM5OTY3OTYyOCwzMjgzMDg4NzcwLDQyMzcwODM4MTYsNDExODkyNTIyMiw0MDAyODYxNzQ4LDM4ODU3NTA3MTQsMTAwMjE0MjY4Myw4NTA4MTcyMzcsNjk4NDQ1MjU1LDU0ODE2OTQxNyw1Mjk0ODc4NDMsMzc3NjQyMjIxLDIyNzg4NTU2Nyw3NzA4OTUyMSwxOTQzMjE3MDY3LDIwNjEzNzk3NDksMTY0MDU3NjQzOSwxNzU3NjkxNTc3LDE0NzQ3NjA1OTUsMTU5MjM5NDkwOSwxMTc0MjE1MDU1LDEyOTA4MDE3OTMsMjg3NTk2ODMxNSwyNzI0NjQyODY5LDMxMTEyNDcxNDMsMjk2MDk3MTMwNSwyNDA1NDI2OTQ3LDIyNTM1ODEzMjUsMjYzODYwNjYyMywyNDg3ODEwNTc3LDM4MDg2NjIzNDcsMzkyNjgyNTAyOSw0MDQ0OTgxNTkxLDQxNjIwOTY3MjksMzM0MjMxOTQ3NSwzNDU5OTUzNzg5LDM1NzY1Mzk1MDMsMzY5MzEyNjI0MSwxOTg2OTE4MDYxLDIxMzcwNjI4MTksMTY4NTU3NzkwNSwxODM2NzcyMjg3LDEzODE2MjAzNzMsMTUzMjI4NTMzOSwxMDc4MTg1MDk3LDEyMjk4OTk2NTUsMTA0MDU1OTgzNyw5MjMzMTM2MTksNzQwMjc2NDE3LDYyMTk4MjY3MSw0Mzk0NTIzODksMzIyNzM0NTcxLDEzNzA3MzkxMywxOTMwODUzNSwzODcxMTYzOTgxLDQwMjEzMDg3MzksNDEwNDYwNTc3Nyw0MjU1ODAwMTU5LDMyNjM3ODU1ODksMzQxNDQ1MDU1NSwzNDk5MzI2NTY5LDM2NTEwNDExMjcsMjkzMzIwMjQ5MywyODE1OTU2Mjc1LDMxNjc2ODQ2NDEsMzA0OTM5MDg5NSwyMzMwMDE0MjEzLDIyMTMyOTYzOTUsMjU2NjU5NTYwOSwyNDQ4ODMwMjMxLDEzMDU5MDY1NTAsMTE1NTIzNzQ5NiwxNjA3MjQ0NjUwLDE0NTU1MjU5ODgsMTc3NjQ2MDExMCwxNjI2MzE5NDI0LDIwNzk4OTc0MjYsMTkyODcwNzE2NCw5NjM5MjQ1NCwyMTMxMTQzNzYsMzk2NjczODE4LDUxNDQ0MzI4NCw1NjI3NTU5MDIsNjc5OTk4ZTMsODY1MTM2NDE4LDk4MzQyNjA5MiwzNzA4MTczNzE4LDM1NTc1MDQ2NjQsMzQ3NDcyOTg2NiwzMzIzMDExMjA0LDQxODA4MDgxMTAsNDAzMDY2NzQyNCwzOTQ1MjY5MTcwLDM3OTQwNzg5MDgsMjUwNzA0MDIzMCwyNjIzNzYyMTUyLDIyNzI1NTYwMjYsMjM5MDMyNTQ5MiwyOTc1NDg0MzgyLDMwOTI3MjY0ODAsMjczODkwNTAyNiwyODU3MTk0NzAwLDM5NzM3NzMxMjEsMzg1NjEzNzI5NSw0Mjc0MDUzNDY5LDQxNTc0NjcyMTksMzM3MTA5Njk1MywzMjUyOTMyNzI3LDM2NzM0NzY0NTMsMzU1NjM2MTgzNSwyNzYzMTczNjgxLDI5MTUwMTc3OTEsMzA2NDUxMDc2NSwzMjE1MzA3Mjk5LDIxNTYyOTkwMTcsMjMwNzYyMjkxOSwyNDU5NzM1MzE3LDI2MTAwMTE2NzUsMjA4MTA0ODQ4MSwxOTYzNDEyNjU1LDE4NDY1NjMyNjEsMTcyOTk3NzAxMSwxNDgwNDg1Nzg1LDEzNjIzMjE1NTksMTI0MzkwNTQxMywxMTI2NzkwNzk1LDg3ODg0NTkwNSwxMDMwNjkwMDE1LDY0NTQwMTAzNyw3OTYxOTc1NzEsMjc0MDg0ODQxLDQyNTQwODc0MywzODU0NDg4NSwxODg4MjEyNDMsMzYxMzQ5NDQyNiwzNzMxNjU0NTQ4LDMzMTMyMTIwMzgsMzQzMDMyMjU2OCw0MDgyNDc1MTcwLDQyMDAxMTUxMTYsMzc4MDA5NzcyNiwzODk2Njg4MDQ4LDI2NjgyMjE2NzQsMjUxNjkwMTg2MCwyMzY2ODgyNTUwLDIyMTY2MTAyOTYsMzE0MTQwMDc4NiwyOTg5NTUyNjA0LDI4Mzc5NjY1NDIsMjY4NzE2NTg4OCwxMjAyNzk3NjkwLDEzMjA5NTc4MTIsMTQzNzI4MDg3MCwxNTU0MzkxNDAwLDE2Njk2NjQ4MzQsMTc4NzMwNDc4MCwxOTA2MjQ3MjYyLDIwMjI4Mzc1ODQsMjY1OTA1MTYyLDExNDU4NTM0OCw0OTkzNDc5OTAsMzQ5MDc1NzM2LDczNjk3MDgwMiw1ODUxMjI2MjAsOTcyNTEyODE0LDgyMTcxMjE2MCwyNTk1Njg0ODQ0LDI0Nzg0NDMyMzQsMjI5MzA0NTIzMiwyMTc0NzU0MDQ2LDMxOTYyNjc5ODgsMzA3OTU0NjU4NiwyODk1NzIzNDY0LDI3Nzc5NTI0NTQsMzUzNzg1MjgyOCwzNjg3OTk0MDAyLDMyMzQxNTY0MTYsMzM4NTM0NTE2Niw0MTQyNjI2MjEyLDQyOTMyOTU3ODYsMzg0MTAyNDk1MiwzOTkyNzQyMDcwLDE3NDU2NzY5Miw1NzMyNjA4Miw0MTA4ODc5NTIsMjkyNTk2NzY2LDc3NzIzMTY2OCw2NjA1MTAyNjYsMTAxMTQ1MjcxMiw4OTM2ODE3MDIsMTEwODMzOTA2OCwxMjU4NDgwMjQyLDEzNDM2MTg5MTIsMTQ5NDgwNzY2MiwxNzE1MTkzMTU2LDE4NjU4NjI3MzAsMTk0ODM3Mzg0OCwyMTAwMDkwOTY2LDI3MDE5NDk0OTUsMjgxODY2NjgwOSwzMDA0NTkxMTQ3LDMxMjIzNTgwNTMsMjIzNTA2MTc3NSwyMzUyMzA3NDU3LDI1MzU2MDQyNDMsMjY1Mzg5OTU0OSwzOTE1NjUzNzAzLDM3NjQ5ODgyMzMsNDIxOTM1MjE1NSw0MDY3NjM5MTI1LDM0NDQ1NzU4NzEsMzI5NDQzMDU3NywzNzQ2MTc1MDc1LDM1OTQ5ODIyNTMsODM2NTUzNDMxLDk1MzI3MDc0NSw2MDAyMzUyMTEsNzE4MDAyMTE3LDM2NzU4NTAwNyw0ODQ4MzA2ODksMTMzMzYxOTA3LDI1MTY1NzIxMywyMDQxODc3MTU5LDE4OTEyMTE2ODksMTgwNjU5OTM1NSwxNjU0ODg2MzI1LDE1Njg3MTg0OTUsMTQxODU3MzIwMSwxMzM1NTM1NzQ3LDExODQzNDI5MjVdO2Z1bmN0aW9uIGNvbnZlcnRUb0ludDMyKGJ5dGVzKXt2YXIgcmVzdWx0PVtdO2Zvcih2YXIgaT0wO2k8Ynl0ZXMubGVuZ3RoO2krPTQpe3Jlc3VsdC5wdXNoKGJ5dGVzW2ldPDwyNHxieXRlc1tpKzFdPDwxNnxieXRlc1tpKzJdPDw4fGJ5dGVzW2krM10pfXJldHVybiByZXN1bHR9dmFyIEFFUz1mdW5jdGlvbihrZXkpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEFFUykpe3Rocm93IEVycm9yKFwiQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2BcIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJrZXlcIix7dmFsdWU6Y29lcmNlQXJyYXkoa2V5LHRydWUpfSk7dGhpcy5fcHJlcGFyZSgpfTtBRVMucHJvdG90eXBlLl9wcmVwYXJlPWZ1bmN0aW9uKCl7dmFyIHJvdW5kcz1udW1iZXJPZlJvdW5kc1t0aGlzLmtleS5sZW5ndGhdO2lmKHJvdW5kcz09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBrZXkgc2l6ZSAobXVzdCBiZSAxNiwgMjQgb3IgMzIgYnl0ZXMpXCIpfXRoaXMuX0tlPVtdO3RoaXMuX0tkPVtdO2Zvcih2YXIgaT0wO2k8PXJvdW5kcztpKyspe3RoaXMuX0tlLnB1c2goWzAsMCwwLDBdKTt0aGlzLl9LZC5wdXNoKFswLDAsMCwwXSl9dmFyIHJvdW5kS2V5Q291bnQ9KHJvdW5kcysxKSo0O3ZhciBLQz10aGlzLmtleS5sZW5ndGgvNDt2YXIgdGs9Y29udmVydFRvSW50MzIodGhpcy5rZXkpO3ZhciBpbmRleDtmb3IodmFyIGk9MDtpPEtDO2krKyl7aW5kZXg9aT4+Mjt0aGlzLl9LZVtpbmRleF1baSU0XT10a1tpXTt0aGlzLl9LZFtyb3VuZHMtaW5kZXhdW2klNF09dGtbaV19dmFyIHJjb25wb2ludGVyPTA7dmFyIHQ9S0MsdHQ7d2hpbGUodDxyb3VuZEtleUNvdW50KXt0dD10a1tLQy0xXTt0a1swXV49U1t0dD4+MTYmMjU1XTw8MjReU1t0dD4+OCYyNTVdPDwxNl5TW3R0JjI1NV08PDheU1t0dD4+MjQmMjU1XV5yY29uW3Jjb25wb2ludGVyXTw8MjQ7cmNvbnBvaW50ZXIrPTE7aWYoS0MhPTgpe2Zvcih2YXIgaT0xO2k8S0M7aSsrKXt0a1tpXV49dGtbaS0xXX19ZWxzZXtmb3IodmFyIGk9MTtpPEtDLzI7aSsrKXt0a1tpXV49dGtbaS0xXX10dD10a1tLQy8yLTFdO3RrW0tDLzJdXj1TW3R0JjI1NV1eU1t0dD4+OCYyNTVdPDw4XlNbdHQ+PjE2JjI1NV08PDE2XlNbdHQ+PjI0JjI1NV08PDI0O2Zvcih2YXIgaT1LQy8yKzE7aTxLQztpKyspe3RrW2ldXj10a1tpLTFdfX12YXIgaT0wLHIsYzt3aGlsZShpPEtDJiZ0PHJvdW5kS2V5Q291bnQpe3I9dD4+MjtjPXQlNDt0aGlzLl9LZVtyXVtjXT10a1tpXTt0aGlzLl9LZFtyb3VuZHMtcl1bY109dGtbaSsrXTt0Kyt9fWZvcih2YXIgcj0xO3I8cm91bmRzO3IrKyl7Zm9yKHZhciBjPTA7Yzw0O2MrKyl7dHQ9dGhpcy5fS2Rbcl1bY107dGhpcy5fS2Rbcl1bY109VTFbdHQ+PjI0JjI1NV1eVTJbdHQ+PjE2JjI1NV1eVTNbdHQ+PjgmMjU1XV5VNFt0dCYyNTVdfX19O0FFUy5wcm90b3R5cGUuZW5jcnlwdD1mdW5jdGlvbihwbGFpbnRleHQpe2lmKHBsYWludGV4dC5sZW5ndGghPTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKVwiKX12YXIgcm91bmRzPXRoaXMuX0tlLmxlbmd0aC0xO3ZhciBhPVswLDAsMCwwXTt2YXIgdD1jb252ZXJ0VG9JbnQzMihwbGFpbnRleHQpO2Zvcih2YXIgaT0wO2k8NDtpKyspe3RbaV1ePXRoaXMuX0tlWzBdW2ldfWZvcih2YXIgcj0xO3I8cm91bmRzO3IrKyl7Zm9yKHZhciBpPTA7aTw0O2krKyl7YVtpXT1UMVt0W2ldPj4yNCYyNTVdXlQyW3RbKGkrMSklNF0+PjE2JjI1NV1eVDNbdFsoaSsyKSU0XT4+OCYyNTVdXlQ0W3RbKGkrMyklNF0mMjU1XV50aGlzLl9LZVtyXVtpXX10PWEuc2xpY2UoKX12YXIgcmVzdWx0PWNyZWF0ZUFycmF5KDE2KSx0dDtmb3IodmFyIGk9MDtpPDQ7aSsrKXt0dD10aGlzLl9LZVtyb3VuZHNdW2ldO3Jlc3VsdFs0KmldPShTW3RbaV0+PjI0JjI1NV1edHQ+PjI0KSYyNTU7cmVzdWx0WzQqaSsxXT0oU1t0WyhpKzEpJTRdPj4xNiYyNTVdXnR0Pj4xNikmMjU1O3Jlc3VsdFs0KmkrMl09KFNbdFsoaSsyKSU0XT4+OCYyNTVdXnR0Pj44KSYyNTU7cmVzdWx0WzQqaSszXT0oU1t0WyhpKzMpJTRdJjI1NV1edHQpJjI1NX1yZXR1cm4gcmVzdWx0fTtBRVMucHJvdG90eXBlLmRlY3J5cHQ9ZnVuY3Rpb24oY2lwaGVydGV4dCl7aWYoY2lwaGVydGV4dC5sZW5ndGghPTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSAxNiBieXRlcylcIil9dmFyIHJvdW5kcz10aGlzLl9LZC5sZW5ndGgtMTt2YXIgYT1bMCwwLDAsMF07dmFyIHQ9Y29udmVydFRvSW50MzIoY2lwaGVydGV4dCk7Zm9yKHZhciBpPTA7aTw0O2krKyl7dFtpXV49dGhpcy5fS2RbMF1baV19Zm9yKHZhciByPTE7cjxyb3VuZHM7cisrKXtmb3IodmFyIGk9MDtpPDQ7aSsrKXthW2ldPVQ1W3RbaV0+PjI0JjI1NV1eVDZbdFsoaSszKSU0XT4+MTYmMjU1XV5UN1t0WyhpKzIpJTRdPj44JjI1NV1eVDhbdFsoaSsxKSU0XSYyNTVdXnRoaXMuX0tkW3JdW2ldfXQ9YS5zbGljZSgpfXZhciByZXN1bHQ9Y3JlYXRlQXJyYXkoMTYpLHR0O2Zvcih2YXIgaT0wO2k8NDtpKyspe3R0PXRoaXMuX0tkW3JvdW5kc11baV07cmVzdWx0WzQqaV09KFNpW3RbaV0+PjI0JjI1NV1edHQ+PjI0KSYyNTU7cmVzdWx0WzQqaSsxXT0oU2lbdFsoaSszKSU0XT4+MTYmMjU1XV50dD4+MTYpJjI1NTtyZXN1bHRbNCppKzJdPShTaVt0WyhpKzIpJTRdPj44JjI1NV1edHQ+PjgpJjI1NTtyZXN1bHRbNCppKzNdPShTaVt0WyhpKzEpJTRdJjI1NV1edHQpJjI1NX1yZXR1cm4gcmVzdWx0fTt2YXIgTW9kZU9mT3BlcmF0aW9uRUNCPWZ1bmN0aW9uKGtleSl7aWYoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uRUNCKSl7dGhyb3cgRXJyb3IoXCJBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YFwiKX10aGlzLmRlc2NyaXB0aW9uPVwiRWxlY3Ryb25pYyBDb2RlIEJsb2NrXCI7dGhpcy5uYW1lPVwiZWNiXCI7dGhpcy5fYWVzPW5ldyBBRVMoa2V5KX07TW9kZU9mT3BlcmF0aW9uRUNCLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7cGxhaW50ZXh0PWNvZXJjZUFycmF5KHBsYWludGV4dCk7aWYocGxhaW50ZXh0Lmxlbmd0aCUxNiE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpXCIpfXZhciBjaXBoZXJ0ZXh0PWNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO3ZhciBibG9jaz1jcmVhdGVBcnJheSgxNik7Zm9yKHZhciBpPTA7aTxwbGFpbnRleHQubGVuZ3RoO2krPTE2KXtjb3B5QXJyYXkocGxhaW50ZXh0LGJsb2NrLDAsaSxpKzE2KTtibG9jaz10aGlzLl9hZXMuZW5jcnlwdChibG9jayk7Y29weUFycmF5KGJsb2NrLGNpcGhlcnRleHQsaSl9cmV0dXJuIGNpcGhlcnRleHR9O01vZGVPZk9wZXJhdGlvbkVDQi5wcm90b3R5cGUuZGVjcnlwdD1mdW5jdGlvbihjaXBoZXJ0ZXh0KXtjaXBoZXJ0ZXh0PWNvZXJjZUFycmF5KGNpcGhlcnRleHQpO2lmKGNpcGhlcnRleHQubGVuZ3RoJTE2IT09MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpXCIpfXZhciBwbGFpbnRleHQ9Y3JlYXRlQXJyYXkoY2lwaGVydGV4dC5sZW5ndGgpO3ZhciBibG9jaz1jcmVhdGVBcnJheSgxNik7Zm9yKHZhciBpPTA7aTxjaXBoZXJ0ZXh0Lmxlbmd0aDtpKz0xNil7Y29weUFycmF5KGNpcGhlcnRleHQsYmxvY2ssMCxpLGkrMTYpO2Jsb2NrPXRoaXMuX2Flcy5kZWNyeXB0KGJsb2NrKTtjb3B5QXJyYXkoYmxvY2sscGxhaW50ZXh0LGkpfXJldHVybiBwbGFpbnRleHR9O3ZhciBNb2RlT2ZPcGVyYXRpb25DQkM9ZnVuY3Rpb24oa2V5LGl2KXtpZighKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DQkMpKXt0aHJvdyBFcnJvcihcIkFFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfXRoaXMuZGVzY3JpcHRpb249XCJDaXBoZXIgQmxvY2sgQ2hhaW5pbmdcIjt0aGlzLm5hbWU9XCJjYmNcIjtpZighaXYpe2l2PWNyZWF0ZUFycmF5KDE2KX1lbHNlIGlmKGl2Lmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKVwiKX10aGlzLl9sYXN0Q2lwaGVyYmxvY2s9Y29lcmNlQXJyYXkoaXYsdHJ1ZSk7dGhpcy5fYWVzPW5ldyBBRVMoa2V5KX07TW9kZU9mT3BlcmF0aW9uQ0JDLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7cGxhaW50ZXh0PWNvZXJjZUFycmF5KHBsYWludGV4dCk7aWYocGxhaW50ZXh0Lmxlbmd0aCUxNiE9PTApe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpXCIpfXZhciBjaXBoZXJ0ZXh0PWNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO3ZhciBibG9jaz1jcmVhdGVBcnJheSgxNik7Zm9yKHZhciBpPTA7aTxwbGFpbnRleHQubGVuZ3RoO2krPTE2KXtjb3B5QXJyYXkocGxhaW50ZXh0LGJsb2NrLDAsaSxpKzE2KTtmb3IodmFyIGo9MDtqPDE2O2orKyl7YmxvY2tbal1ePXRoaXMuX2xhc3RDaXBoZXJibG9ja1tqXX10aGlzLl9sYXN0Q2lwaGVyYmxvY2s9dGhpcy5fYWVzLmVuY3J5cHQoYmxvY2spO2NvcHlBcnJheSh0aGlzLl9sYXN0Q2lwaGVyYmxvY2ssY2lwaGVydGV4dCxpKX1yZXR1cm4gY2lwaGVydGV4dH07TW9kZU9mT3BlcmF0aW9uQ0JDLnByb3RvdHlwZS5kZWNyeXB0PWZ1bmN0aW9uKGNpcGhlcnRleHQpe2NpcGhlcnRleHQ9Y29lcmNlQXJyYXkoY2lwaGVydGV4dCk7aWYoY2lwaGVydGV4dC5sZW5ndGglMTYhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcylcIil9dmFyIHBsYWludGV4dD1jcmVhdGVBcnJheShjaXBoZXJ0ZXh0Lmxlbmd0aCk7dmFyIGJsb2NrPWNyZWF0ZUFycmF5KDE2KTtmb3IodmFyIGk9MDtpPGNpcGhlcnRleHQubGVuZ3RoO2krPTE2KXtjb3B5QXJyYXkoY2lwaGVydGV4dCxibG9jaywwLGksaSsxNik7YmxvY2s9dGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO2Zvcih2YXIgaj0wO2o8MTY7aisrKXtwbGFpbnRleHRbaStqXT1ibG9ja1tqXV50aGlzLl9sYXN0Q2lwaGVyYmxvY2tbal19Y29weUFycmF5KGNpcGhlcnRleHQsdGhpcy5fbGFzdENpcGhlcmJsb2NrLDAsaSxpKzE2KX1yZXR1cm4gcGxhaW50ZXh0fTt2YXIgTW9kZU9mT3BlcmF0aW9uQ0ZCPWZ1bmN0aW9uKGtleSxpdixzZWdtZW50U2l6ZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uQ0ZCKSl7dGhyb3cgRXJyb3IoXCJBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YFwiKX10aGlzLmRlc2NyaXB0aW9uPVwiQ2lwaGVyIEZlZWRiYWNrXCI7dGhpcy5uYW1lPVwiY2ZiXCI7aWYoIWl2KXtpdj1jcmVhdGVBcnJheSgxNil9ZWxzZSBpZihpdi5sZW5ndGghPTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBzaXplKVwiKX1pZighc2VnbWVudFNpemUpe3NlZ21lbnRTaXplPTF9dGhpcy5zZWdtZW50U2l6ZT1zZWdtZW50U2l6ZTt0aGlzLl9zaGlmdFJlZ2lzdGVyPWNvZXJjZUFycmF5KGl2LHRydWUpO3RoaXMuX2Flcz1uZXcgQUVTKGtleSl9O01vZGVPZk9wZXJhdGlvbkNGQi5wcm90b3R5cGUuZW5jcnlwdD1mdW5jdGlvbihwbGFpbnRleHQpe2lmKHBsYWludGV4dC5sZW5ndGgldGhpcy5zZWdtZW50U2l6ZSE9MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBzZWdtZW50U2l6ZSBieXRlcylcIil9dmFyIGVuY3J5cHRlZD1jb2VyY2VBcnJheShwbGFpbnRleHQsdHJ1ZSk7dmFyIHhvclNlZ21lbnQ7Zm9yKHZhciBpPTA7aTxlbmNyeXB0ZWQubGVuZ3RoO2krPXRoaXMuc2VnbWVudFNpemUpe3hvclNlZ21lbnQ9dGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fc2hpZnRSZWdpc3Rlcik7Zm9yKHZhciBqPTA7ajx0aGlzLnNlZ21lbnRTaXplO2orKyl7ZW5jcnlwdGVkW2kral1ePXhvclNlZ21lbnRbal19Y29weUFycmF5KHRoaXMuX3NoaWZ0UmVnaXN0ZXIsdGhpcy5fc2hpZnRSZWdpc3RlciwwLHRoaXMuc2VnbWVudFNpemUpO2NvcHlBcnJheShlbmNyeXB0ZWQsdGhpcy5fc2hpZnRSZWdpc3RlciwxNi10aGlzLnNlZ21lbnRTaXplLGksaSt0aGlzLnNlZ21lbnRTaXplKX1yZXR1cm4gZW5jcnlwdGVkfTtNb2RlT2ZPcGVyYXRpb25DRkIucHJvdG90eXBlLmRlY3J5cHQ9ZnVuY3Rpb24oY2lwaGVydGV4dCl7aWYoY2lwaGVydGV4dC5sZW5ndGgldGhpcy5zZWdtZW50U2l6ZSE9MCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgc2VnbWVudFNpemUgYnl0ZXMpXCIpfXZhciBwbGFpbnRleHQ9Y29lcmNlQXJyYXkoY2lwaGVydGV4dCx0cnVlKTt2YXIgeG9yU2VnbWVudDtmb3IodmFyIGk9MDtpPHBsYWludGV4dC5sZW5ndGg7aSs9dGhpcy5zZWdtZW50U2l6ZSl7eG9yU2VnbWVudD10aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9zaGlmdFJlZ2lzdGVyKTtmb3IodmFyIGo9MDtqPHRoaXMuc2VnbWVudFNpemU7aisrKXtwbGFpbnRleHRbaStqXV49eG9yU2VnbWVudFtqXX1jb3B5QXJyYXkodGhpcy5fc2hpZnRSZWdpc3Rlcix0aGlzLl9zaGlmdFJlZ2lzdGVyLDAsdGhpcy5zZWdtZW50U2l6ZSk7Y29weUFycmF5KGNpcGhlcnRleHQsdGhpcy5fc2hpZnRSZWdpc3RlciwxNi10aGlzLnNlZ21lbnRTaXplLGksaSt0aGlzLnNlZ21lbnRTaXplKX1yZXR1cm4gcGxhaW50ZXh0fTt2YXIgTW9kZU9mT3BlcmF0aW9uT0ZCPWZ1bmN0aW9uKGtleSxpdil7aWYoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uT0ZCKSl7dGhyb3cgRXJyb3IoXCJBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YFwiKX10aGlzLmRlc2NyaXB0aW9uPVwiT3V0cHV0IEZlZWRiYWNrXCI7dGhpcy5uYW1lPVwib2ZiXCI7aWYoIWl2KXtpdj1jcmVhdGVBcnJheSgxNil9ZWxzZSBpZihpdi5sZW5ndGghPTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBieXRlcylcIil9dGhpcy5fbGFzdFByZWNpcGhlcj1jb2VyY2VBcnJheShpdix0cnVlKTt0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXg9MTY7dGhpcy5fYWVzPW5ldyBBRVMoa2V5KX07TW9kZU9mT3BlcmF0aW9uT0ZCLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7dmFyIGVuY3J5cHRlZD1jb2VyY2VBcnJheShwbGFpbnRleHQsdHJ1ZSk7Zm9yKHZhciBpPTA7aTxlbmNyeXB0ZWQubGVuZ3RoO2krKyl7aWYodGhpcy5fbGFzdFByZWNpcGhlckluZGV4PT09MTYpe3RoaXMuX2xhc3RQcmVjaXBoZXI9dGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fbGFzdFByZWNpcGhlcik7dGhpcy5fbGFzdFByZWNpcGhlckluZGV4PTB9ZW5jcnlwdGVkW2ldXj10aGlzLl9sYXN0UHJlY2lwaGVyW3RoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCsrXX1yZXR1cm4gZW5jcnlwdGVkfTtNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmRlY3J5cHQ9TW9kZU9mT3BlcmF0aW9uT0ZCLnByb3RvdHlwZS5lbmNyeXB0O3ZhciBDb3VudGVyPWZ1bmN0aW9uKGluaXRpYWxWYWx1ZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgQ291bnRlcikpe3Rocm93IEVycm9yKFwiQ291bnRlciBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfWlmKGluaXRpYWxWYWx1ZSE9PTAmJiFpbml0aWFsVmFsdWUpe2luaXRpYWxWYWx1ZT0xfWlmKHR5cGVvZiBpbml0aWFsVmFsdWU9PT1cIm51bWJlclwiKXt0aGlzLl9jb3VudGVyPWNyZWF0ZUFycmF5KDE2KTt0aGlzLnNldFZhbHVlKGluaXRpYWxWYWx1ZSl9ZWxzZXt0aGlzLnNldEJ5dGVzKGluaXRpYWxWYWx1ZSl9fTtDb3VudGVyLnByb3RvdHlwZS5zZXRWYWx1ZT1mdW5jdGlvbih2YWx1ZSl7aWYodHlwZW9mIHZhbHVlIT09XCJudW1iZXJcInx8cGFyc2VJbnQodmFsdWUpIT12YWx1ZSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjb3VudGVyIHZhbHVlIChtdXN0IGJlIGFuIGludGVnZXIpXCIpfWZvcih2YXIgaW5kZXg9MTU7aW5kZXg+PTA7LS1pbmRleCl7dGhpcy5fY291bnRlcltpbmRleF09dmFsdWUlMjU2O3ZhbHVlPXZhbHVlPj44fX07Q291bnRlci5wcm90b3R5cGUuc2V0Qnl0ZXM9ZnVuY3Rpb24oYnl0ZXMpe2J5dGVzPWNvZXJjZUFycmF5KGJ5dGVzLHRydWUpO2lmKGJ5dGVzLmxlbmd0aCE9MTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgY291bnRlciBieXRlcyBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKVwiKX10aGlzLl9jb3VudGVyPWJ5dGVzfTtDb3VudGVyLnByb3RvdHlwZS5pbmNyZW1lbnQ9ZnVuY3Rpb24oKXtmb3IodmFyIGk9MTU7aT49MDtpLS0pe2lmKHRoaXMuX2NvdW50ZXJbaV09PT0yNTUpe3RoaXMuX2NvdW50ZXJbaV09MH1lbHNle3RoaXMuX2NvdW50ZXJbaV0rKzticmVha319fTt2YXIgTW9kZU9mT3BlcmF0aW9uQ1RSPWZ1bmN0aW9uKGtleSxjb3VudGVyKXtpZighKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DVFIpKXt0aHJvdyBFcnJvcihcIkFFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgXCIpfXRoaXMuZGVzY3JpcHRpb249XCJDb3VudGVyXCI7dGhpcy5uYW1lPVwiY3RyXCI7aWYoIShjb3VudGVyIGluc3RhbmNlb2YgQ291bnRlcikpe2NvdW50ZXI9bmV3IENvdW50ZXIoY291bnRlcil9dGhpcy5fY291bnRlcj1jb3VudGVyO3RoaXMuX3JlbWFpbmluZ0NvdW50ZXI9bnVsbDt0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXg9MTY7dGhpcy5fYWVzPW5ldyBBRVMoa2V5KX07TW9kZU9mT3BlcmF0aW9uQ1RSLnByb3RvdHlwZS5lbmNyeXB0PWZ1bmN0aW9uKHBsYWludGV4dCl7dmFyIGVuY3J5cHRlZD1jb2VyY2VBcnJheShwbGFpbnRleHQsdHJ1ZSk7Zm9yKHZhciBpPTA7aTxlbmNyeXB0ZWQubGVuZ3RoO2krKyl7aWYodGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4PT09MTYpe3RoaXMuX3JlbWFpbmluZ0NvdW50ZXI9dGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fY291bnRlci5fY291bnRlcik7dGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4PTA7dGhpcy5fY291bnRlci5pbmNyZW1lbnQoKX1lbmNyeXB0ZWRbaV1ePXRoaXMuX3JlbWFpbmluZ0NvdW50ZXJbdGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4KytdfXJldHVybiBlbmNyeXB0ZWR9O01vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZGVjcnlwdD1Nb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmVuY3J5cHQ7ZnVuY3Rpb24gcGtjczdwYWQoZGF0YSl7ZGF0YT1jb2VyY2VBcnJheShkYXRhLHRydWUpO3ZhciBwYWRkZXI9MTYtZGF0YS5sZW5ndGglMTY7dmFyIHJlc3VsdD1jcmVhdGVBcnJheShkYXRhLmxlbmd0aCtwYWRkZXIpO2NvcHlBcnJheShkYXRhLHJlc3VsdCk7Zm9yKHZhciBpPWRhdGEubGVuZ3RoO2k8cmVzdWx0Lmxlbmd0aDtpKyspe3Jlc3VsdFtpXT1wYWRkZXJ9cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBwa2NzN3N0cmlwKGRhdGEpe2RhdGE9Y29lcmNlQXJyYXkoZGF0YSx0cnVlKTtpZihkYXRhLmxlbmd0aDwxNil7dGhyb3cgbmV3IEVycm9yKFwiUEtDUyM3IGludmFsaWQgbGVuZ3RoXCIpfXZhciBwYWRkZXI9ZGF0YVtkYXRhLmxlbmd0aC0xXTtpZihwYWRkZXI+MTYpe3Rocm93IG5ldyBFcnJvcihcIlBLQ1MjNyBwYWRkaW5nIGJ5dGUgb3V0IG9mIHJhbmdlXCIpfXZhciBsZW5ndGg9ZGF0YS5sZW5ndGgtcGFkZGVyO2Zvcih2YXIgaT0wO2k8cGFkZGVyO2krKyl7aWYoZGF0YVtsZW5ndGgraV0hPT1wYWRkZXIpe3Rocm93IG5ldyBFcnJvcihcIlBLQ1MjNyBpbnZhbGlkIHBhZGRpbmcgYnl0ZVwiKX19dmFyIHJlc3VsdD1jcmVhdGVBcnJheShsZW5ndGgpO2NvcHlBcnJheShkYXRhLHJlc3VsdCwwLDAsbGVuZ3RoKTtyZXR1cm4gcmVzdWx0fXZhciBhZXNqcz17QUVTOkFFUyxDb3VudGVyOkNvdW50ZXIsTW9kZU9mT3BlcmF0aW9uOntlY2I6TW9kZU9mT3BlcmF0aW9uRUNCLGNiYzpNb2RlT2ZPcGVyYXRpb25DQkMsY2ZiOk1vZGVPZk9wZXJhdGlvbkNGQixvZmI6TW9kZU9mT3BlcmF0aW9uT0ZCLGN0cjpNb2RlT2ZPcGVyYXRpb25DVFJ9LHV0aWxzOntoZXg6Y29udmVydEhleCx1dGY4OmNvbnZlcnRVdGY4fSxwYWRkaW5nOntwa2NzNzp7cGFkOnBrY3M3cGFkLHN0cmlwOnBrY3M3c3RyaXB9fSxfYXJyYXlUZXN0Ontjb2VyY2VBcnJheTpjb2VyY2VBcnJheSxjcmVhdGVBcnJheTpjcmVhdGVBcnJheSxjb3B5QXJyYXk6Y29weUFycmF5fX07aWYoXCJvYmplY3RcIiE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWFlc2pzfWVsc2UgaWYodHlwZW9mIHVuZGVmaW5lZD09PVwiZnVuY3Rpb25cIiYmdW5kZWZpbmVkLmFtZCl7dW5kZWZpbmVkKGFlc2pzKX1lbHNle2lmKHJvb3QuYWVzanMpe2Flc2pzLl9hZXNqcz1yb290LmFlc2pzfXJvb3QuYWVzanM9YWVzanN9fSkoY29tbW9uanNHbG9iYWwpfSk7Y29uc3QgdmVyc2lvbiRpPVwianNvbi13YWxsZXRzLzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbG9vc2VBcnJheWlmeShoZXhTdHJpbmcpe2lmKHR5cGVvZiBoZXhTdHJpbmc9PT1cInN0cmluZ1wiJiZoZXhTdHJpbmcuc3Vic3RyaW5nKDAsMikhPT1cIjB4XCIpe2hleFN0cmluZz1cIjB4XCIraGV4U3RyaW5nfXJldHVybiBhcnJheWlmeShoZXhTdHJpbmcpfWZ1bmN0aW9uIHpwYWQodmFsdWUsbGVuZ3RoKXt2YWx1ZT1TdHJpbmcodmFsdWUpO3doaWxlKHZhbHVlLmxlbmd0aDxsZW5ndGgpe3ZhbHVlPVwiMFwiK3ZhbHVlfXJldHVybiB2YWx1ZX1mdW5jdGlvbiBnZXRQYXNzd29yZChwYXNzd29yZCl7aWYodHlwZW9mIHBhc3N3b3JkPT09XCJzdHJpbmdcIil7cmV0dXJuIHRvVXRmOEJ5dGVzKHBhc3N3b3JkLFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktDKX1yZXR1cm4gYXJyYXlpZnkocGFzc3dvcmQpfWZ1bmN0aW9uIHNlYXJjaFBhdGgob2JqZWN0LHBhdGgpe2xldCBjdXJyZW50Q2hpbGQ9b2JqZWN0O2NvbnN0IGNvbXBzPXBhdGgudG9Mb3dlckNhc2UoKS5zcGxpdChcIi9cIik7Zm9yKGxldCBpPTA7aTxjb21wcy5sZW5ndGg7aSsrKXtsZXQgbWF0Y2hpbmdDaGlsZD1udWxsO2Zvcihjb25zdCBrZXkgaW4gY3VycmVudENoaWxkKXtpZihrZXkudG9Mb3dlckNhc2UoKT09PWNvbXBzW2ldKXttYXRjaGluZ0NoaWxkPWN1cnJlbnRDaGlsZFtrZXldO2JyZWFrfX1pZihtYXRjaGluZ0NoaWxkPT09bnVsbCl7cmV0dXJuIG51bGx9Y3VycmVudENoaWxkPW1hdGNoaW5nQ2hpbGR9cmV0dXJuIGN1cnJlbnRDaGlsZH1mdW5jdGlvbiB1dWlkVjQocmFuZG9tQnl0ZXMpe2NvbnN0IGJ5dGVzPWFycmF5aWZ5KHJhbmRvbUJ5dGVzKTtieXRlc1s2XT1ieXRlc1s2XSYxNXw2NDtieXRlc1s4XT1ieXRlc1s4XSY2M3wxMjg7Y29uc3QgdmFsdWU9aGV4bGlmeShieXRlcyk7cmV0dXJuW3ZhbHVlLnN1YnN0cmluZygyLDEwKSx2YWx1ZS5zdWJzdHJpbmcoMTAsMTQpLHZhbHVlLnN1YnN0cmluZygxNCwxOCksdmFsdWUuc3Vic3RyaW5nKDE4LDIyKSx2YWx1ZS5zdWJzdHJpbmcoMjIsMzQpXS5qb2luKFwiLVwiKX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkbj1uZXcgTG9nZ2VyKHZlcnNpb24kaSk7Y2xhc3MgQ3Jvd2RzYWxlQWNjb3VudCBleHRlbmRzIERlc2NyaXB0aW9ue2lzQ3Jvd2RzYWxlQWNjb3VudCh2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc0Nyb3dkc2FsZUFjY291bnQpfX1mdW5jdGlvbiBkZWNyeXB0KGpzb24scGFzc3dvcmQpe2NvbnN0IGRhdGE9SlNPTi5wYXJzZShqc29uKTtwYXNzd29yZD1nZXRQYXNzd29yZChwYXNzd29yZCk7Y29uc3QgZXRoYWRkcj1nZXRBZGRyZXNzKHNlYXJjaFBhdGgoZGF0YSxcImV0aGFkZHJcIikpO2NvbnN0IGVuY3NlZWQ9bG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsXCJlbmNzZWVkXCIpKTtpZighZW5jc2VlZHx8ZW5jc2VlZC5sZW5ndGglMTYhPT0wKXtsb2dnZXIkbi50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGVuY3NlZWRcIixcImpzb25cIixqc29uKX1jb25zdCBrZXk9YXJyYXlpZnkocGJrZGYyKHBhc3N3b3JkLHBhc3N3b3JkLDJlMywzMixcInNoYTI1NlwiKSkuc2xpY2UoMCwxNik7Y29uc3QgaXY9ZW5jc2VlZC5zbGljZSgwLDE2KTtjb25zdCBlbmNyeXB0ZWRTZWVkPWVuY3NlZWQuc2xpY2UoMTYpO2NvbnN0IGFlc0NiYz1uZXcgYWVzSnMuTW9kZU9mT3BlcmF0aW9uLmNiYyhrZXksaXYpO2NvbnN0IHNlZWQ9YWVzSnMucGFkZGluZy5wa2NzNy5zdHJpcChhcnJheWlmeShhZXNDYmMuZGVjcnlwdChlbmNyeXB0ZWRTZWVkKSkpO2xldCBzZWVkSGV4PVwiXCI7Zm9yKGxldCBpPTA7aTxzZWVkLmxlbmd0aDtpKyspe3NlZWRIZXgrPVN0cmluZy5mcm9tQ2hhckNvZGUoc2VlZFtpXSl9Y29uc3Qgc2VlZEhleEJ5dGVzPXRvVXRmOEJ5dGVzKHNlZWRIZXgpO2NvbnN0IHByaXZhdGVLZXk9a2VjY2FrMjU2KHNlZWRIZXhCeXRlcyk7cmV0dXJuIG5ldyBDcm93ZHNhbGVBY2NvdW50KHtfaXNDcm93ZHNhbGVBY2NvdW50OnRydWUsYWRkcmVzczpldGhhZGRyLHByaXZhdGVLZXk6cHJpdmF0ZUtleX0pfVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb24pe2xldCBkYXRhPW51bGw7dHJ5e2RhdGE9SlNPTi5wYXJzZShqc29uKX1jYXRjaChlcnJvcil7cmV0dXJuIGZhbHNlfXJldHVybiBkYXRhLmVuY3NlZWQmJmRhdGEuZXRoYWRkcn1mdW5jdGlvbiBpc0tleXN0b3JlV2FsbGV0KGpzb24pe2xldCBkYXRhPW51bGw7dHJ5e2RhdGE9SlNPTi5wYXJzZShqc29uKX1jYXRjaChlcnJvcil7cmV0dXJuIGZhbHNlfWlmKCFkYXRhLnZlcnNpb258fHBhcnNlSW50KGRhdGEudmVyc2lvbikhPT1kYXRhLnZlcnNpb258fHBhcnNlSW50KGRhdGEudmVyc2lvbikhPT0zKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9ZnVuY3Rpb24gZ2V0SnNvbldhbGxldEFkZHJlc3MoanNvbil7aWYoaXNDcm93ZHNhbGVXYWxsZXQoanNvbikpe3RyeXtyZXR1cm4gZ2V0QWRkcmVzcyhKU09OLnBhcnNlKGpzb24pLmV0aGFkZHIpfWNhdGNoKGVycm9yKXtyZXR1cm4gbnVsbH19aWYoaXNLZXlzdG9yZVdhbGxldChqc29uKSl7dHJ5e3JldHVybiBnZXRBZGRyZXNzKEpTT04ucGFyc2UoanNvbikuYWRkcmVzcyl9Y2F0Y2goZXJyb3Ipe3JldHVybiBudWxsfX1yZXR1cm4gbnVsbH12YXIgc2NyeXB0PWNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtcInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24ocm9vdCl7Y29uc3QgTUFYX1ZBTFVFPTIxNDc0ODM2NDc7ZnVuY3Rpb24gU0hBMjU2KG0pe2NvbnN0IEs9bmV3IFVpbnQzMkFycmF5KFsxMTE2MzUyNDA4LDE4OTk0NDc0NDEsMzA0OTMyMzQ3MSwzOTIxMDA5NTczLDk2MTk4NzE2MywxNTA4OTcwOTkzLDI0NTM2MzU3NDgsMjg3MDc2MzIyMSwzNjI0MzgxMDgwLDMxMDU5ODQwMSw2MDcyMjUyNzgsMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsMjIyNzczMDQ1MiwyMzYxODUyNDI0LDI0Mjg0MzY0NzQsMjc1NjczNDE4NywzMjA0MDMxNDc5LDMzMjkzMjUyOThdKTtsZXQgaDA9MTc3OTAzMzcwMyxoMT0zMTQ0MTM0Mjc3LGgyPTEwMTM5MDQyNDIsaDM9Mjc3MzQ4MDc2MjtsZXQgaDQ9MTM1OTg5MzExOSxoNT0yNjAwODIyOTI0LGg2PTUyODczNDYzNSxoNz0xNTQxNDU5MjI1O2NvbnN0IHc9bmV3IFVpbnQzMkFycmF5KDY0KTtmdW5jdGlvbiBibG9ja3MocCl7bGV0IG9mZj0wLGxlbj1wLmxlbmd0aDt3aGlsZShsZW4+PTY0KXtsZXQgYT1oMCxiPWgxLGM9aDIsZD1oMyxlPWg0LGY9aDUsZz1oNixoPWg3LHUsaSxqLHQxLHQyO2ZvcihpPTA7aTwxNjtpKyspe2o9b2ZmK2kqNDt3W2ldPShwW2pdJjI1NSk8PDI0fChwW2orMV0mMjU1KTw8MTZ8KHBbaisyXSYyNTUpPDw4fHBbaiszXSYyNTV9Zm9yKGk9MTY7aTw2NDtpKyspe3U9d1tpLTJdO3QxPSh1Pj4+MTd8dTw8MzItMTcpXih1Pj4+MTl8dTw8MzItMTkpXnU+Pj4xMDt1PXdbaS0xNV07dDI9KHU+Pj43fHU8PDMyLTcpXih1Pj4+MTh8dTw8MzItMTgpXnU+Pj4zO3dbaV09KHQxK3dbaS03XXwwKSsodDIrd1tpLTE2XXwwKXwwfWZvcihpPTA7aTw2NDtpKyspe3QxPSgoKGU+Pj42fGU8PDMyLTYpXihlPj4+MTF8ZTw8MzItMTEpXihlPj4+MjV8ZTw8MzItMjUpKSsoZSZmXn5lJmcpfDApKyhoKyhLW2ldK3dbaV18MCl8MCl8MDt0Mj0oKGE+Pj4yfGE8PDMyLTIpXihhPj4+MTN8YTw8MzItMTMpXihhPj4+MjJ8YTw8MzItMjIpKSsoYSZiXmEmY15iJmMpfDA7aD1nO2c9ZjtmPWU7ZT1kK3QxfDA7ZD1jO2M9YjtiPWE7YT10MSt0MnwwfWgwPWgwK2F8MDtoMT1oMStifDA7aDI9aDIrY3wwO2gzPWgzK2R8MDtoND1oNCtlfDA7aDU9aDUrZnwwO2g2PWg2K2d8MDtoNz1oNytofDA7b2ZmKz02NDtsZW4tPTY0fX1ibG9ja3MobSk7bGV0IGksYnl0ZXNMZWZ0PW0ubGVuZ3RoJTY0LGJpdExlbkhpPW0ubGVuZ3RoLzUzNjg3MDkxMnwwLGJpdExlbkxvPW0ubGVuZ3RoPDwzLG51bVplcm9zPWJ5dGVzTGVmdDw1Nj81NjoxMjAscD1tLnNsaWNlKG0ubGVuZ3RoLWJ5dGVzTGVmdCxtLmxlbmd0aCk7cC5wdXNoKDEyOCk7Zm9yKGk9Ynl0ZXNMZWZ0KzE7aTxudW1aZXJvcztpKyspe3AucHVzaCgwKX1wLnB1c2goYml0TGVuSGk+Pj4yNCYyNTUpO3AucHVzaChiaXRMZW5IaT4+PjE2JjI1NSk7cC5wdXNoKGJpdExlbkhpPj4+OCYyNTUpO3AucHVzaChiaXRMZW5IaT4+PjAmMjU1KTtwLnB1c2goYml0TGVuTG8+Pj4yNCYyNTUpO3AucHVzaChiaXRMZW5Mbz4+PjE2JjI1NSk7cC5wdXNoKGJpdExlbkxvPj4+OCYyNTUpO3AucHVzaChiaXRMZW5Mbz4+PjAmMjU1KTtibG9ja3MocCk7cmV0dXJuW2gwPj4+MjQmMjU1LGgwPj4+MTYmMjU1LGgwPj4+OCYyNTUsaDA+Pj4wJjI1NSxoMT4+PjI0JjI1NSxoMT4+PjE2JjI1NSxoMT4+PjgmMjU1LGgxPj4+MCYyNTUsaDI+Pj4yNCYyNTUsaDI+Pj4xNiYyNTUsaDI+Pj44JjI1NSxoMj4+PjAmMjU1LGgzPj4+MjQmMjU1LGgzPj4+MTYmMjU1LGgzPj4+OCYyNTUsaDM+Pj4wJjI1NSxoND4+PjI0JjI1NSxoND4+PjE2JjI1NSxoND4+PjgmMjU1LGg0Pj4+MCYyNTUsaDU+Pj4yNCYyNTUsaDU+Pj4xNiYyNTUsaDU+Pj44JjI1NSxoNT4+PjAmMjU1LGg2Pj4+MjQmMjU1LGg2Pj4+MTYmMjU1LGg2Pj4+OCYyNTUsaDY+Pj4wJjI1NSxoNz4+PjI0JjI1NSxoNz4+PjE2JjI1NSxoNz4+PjgmMjU1LGg3Pj4+MCYyNTVdfWZ1bmN0aW9uIFBCS0RGMl9ITUFDX1NIQTI1Nl9PbmVJdGVyKHBhc3N3b3JkLHNhbHQsZGtMZW4pe3Bhc3N3b3JkPXBhc3N3b3JkLmxlbmd0aDw9NjQ/cGFzc3dvcmQ6U0hBMjU2KHBhc3N3b3JkKTtjb25zdCBpbm5lckxlbj02NCtzYWx0Lmxlbmd0aCs0O2NvbnN0IGlubmVyPW5ldyBBcnJheShpbm5lckxlbik7Y29uc3Qgb3V0ZXJLZXk9bmV3IEFycmF5KDY0KTtsZXQgaTtsZXQgZGs9W107Zm9yKGk9MDtpPDY0O2krKyl7aW5uZXJbaV09NTR9Zm9yKGk9MDtpPHBhc3N3b3JkLmxlbmd0aDtpKyspe2lubmVyW2ldXj1wYXNzd29yZFtpXX1mb3IoaT0wO2k8c2FsdC5sZW5ndGg7aSsrKXtpbm5lcls2NCtpXT1zYWx0W2ldfWZvcihpPWlubmVyTGVuLTQ7aTxpbm5lckxlbjtpKyspe2lubmVyW2ldPTB9Zm9yKGk9MDtpPDY0O2krKylvdXRlcktleVtpXT05Mjtmb3IoaT0wO2k8cGFzc3dvcmQubGVuZ3RoO2krKylvdXRlcktleVtpXV49cGFzc3dvcmRbaV07ZnVuY3Rpb24gaW5jcmVtZW50Q291bnRlcigpe2ZvcihsZXQgaT1pbm5lckxlbi0xO2k+PWlubmVyTGVuLTQ7aS0tKXtpbm5lcltpXSsrO2lmKGlubmVyW2ldPD0yNTUpcmV0dXJuO2lubmVyW2ldPTB9fXdoaWxlKGRrTGVuPj0zMil7aW5jcmVtZW50Q291bnRlcigpO2RrPWRrLmNvbmNhdChTSEEyNTYob3V0ZXJLZXkuY29uY2F0KFNIQTI1Nihpbm5lcikpKSk7ZGtMZW4tPTMyfWlmKGRrTGVuPjApe2luY3JlbWVudENvdW50ZXIoKTtkaz1kay5jb25jYXQoU0hBMjU2KG91dGVyS2V5LmNvbmNhdChTSEEyNTYoaW5uZXIpKSkuc2xpY2UoMCxka0xlbikpfXJldHVybiBka31mdW5jdGlvbiBibG9ja21peF9zYWxzYTgoQlksWWkscix4LF9YKXtsZXQgaTthcnJheWNvcHkoQlksKDIqci0xKSoxNixfWCwwLDE2KTtmb3IoaT0wO2k8MipyO2krKyl7YmxvY2t4b3IoQlksaSoxNixfWCwxNik7c2Fsc2EyMF84KF9YLHgpO2FycmF5Y29weShfWCwwLEJZLFlpK2kqMTYsMTYpfWZvcihpPTA7aTxyO2krKyl7YXJyYXljb3B5KEJZLFlpK2kqMioxNixCWSxpKjE2LDE2KX1mb3IoaT0wO2k8cjtpKyspe2FycmF5Y29weShCWSxZaSsoaSoyKzEpKjE2LEJZLChpK3IpKjE2LDE2KX19ZnVuY3Rpb24gUihhLGIpe3JldHVybiBhPDxifGE+Pj4zMi1ifWZ1bmN0aW9uIHNhbHNhMjBfOChCLHgpe2FycmF5Y29weShCLDAseCwwLDE2KTtmb3IobGV0IGk9ODtpPjA7aS09Mil7eFs0XV49Uih4WzBdK3hbMTJdLDcpO3hbOF1ePVIoeFs0XSt4WzBdLDkpO3hbMTJdXj1SKHhbOF0reFs0XSwxMyk7eFswXV49Uih4WzEyXSt4WzhdLDE4KTt4WzldXj1SKHhbNV0reFsxXSw3KTt4WzEzXV49Uih4WzldK3hbNV0sOSk7eFsxXV49Uih4WzEzXSt4WzldLDEzKTt4WzVdXj1SKHhbMV0reFsxM10sMTgpO3hbMTRdXj1SKHhbMTBdK3hbNl0sNyk7eFsyXV49Uih4WzE0XSt4WzEwXSw5KTt4WzZdXj1SKHhbMl0reFsxNF0sMTMpO3hbMTBdXj1SKHhbNl0reFsyXSwxOCk7eFszXV49Uih4WzE1XSt4WzExXSw3KTt4WzddXj1SKHhbM10reFsxNV0sOSk7eFsxMV1ePVIoeFs3XSt4WzNdLDEzKTt4WzE1XV49Uih4WzExXSt4WzddLDE4KTt4WzFdXj1SKHhbMF0reFszXSw3KTt4WzJdXj1SKHhbMV0reFswXSw5KTt4WzNdXj1SKHhbMl0reFsxXSwxMyk7eFswXV49Uih4WzNdK3hbMl0sMTgpO3hbNl1ePVIoeFs1XSt4WzRdLDcpO3hbN11ePVIoeFs2XSt4WzVdLDkpO3hbNF1ePVIoeFs3XSt4WzZdLDEzKTt4WzVdXj1SKHhbNF0reFs3XSwxOCk7eFsxMV1ePVIoeFsxMF0reFs5XSw3KTt4WzhdXj1SKHhbMTFdK3hbMTBdLDkpO3hbOV1ePVIoeFs4XSt4WzExXSwxMyk7eFsxMF1ePVIoeFs5XSt4WzhdLDE4KTt4WzEyXV49Uih4WzE1XSt4WzE0XSw3KTt4WzEzXV49Uih4WzEyXSt4WzE1XSw5KTt4WzE0XV49Uih4WzEzXSt4WzEyXSwxMyk7eFsxNV1ePVIoeFsxNF0reFsxM10sMTgpfWZvcihsZXQgaT0wO2k8MTY7KytpKXtCW2ldKz14W2ldfX1mdW5jdGlvbiBibG9ja3hvcihTLFNpLEQsbGVuKXtmb3IobGV0IGk9MDtpPGxlbjtpKyspe0RbaV1ePVNbU2kraV19fWZ1bmN0aW9uIGFycmF5Y29weShzcmMsc3JjUG9zLGRlc3QsZGVzdFBvcyxsZW5ndGgpe3doaWxlKGxlbmd0aC0tKXtkZXN0W2Rlc3RQb3MrK109c3JjW3NyY1BvcysrXX19ZnVuY3Rpb24gY2hlY2tCdWZmZXJpc2gobyl7aWYoIW98fHR5cGVvZiBvLmxlbmd0aCE9PVwibnVtYmVyXCIpe3JldHVybiBmYWxzZX1mb3IobGV0IGk9MDtpPG8ubGVuZ3RoO2krKyl7Y29uc3Qgdj1vW2ldO2lmKHR5cGVvZiB2IT09XCJudW1iZXJcInx8diUxfHx2PDB8fHY+PTI1Nil7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX1mdW5jdGlvbiBlbnN1cmVJbnRlZ2VyKHZhbHVlLG5hbWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwibnVtYmVyXCJ8fHZhbHVlJTEpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgXCIrbmFtZSl9cmV0dXJuIHZhbHVlfWZ1bmN0aW9uIF9zY3J5cHQocGFzc3dvcmQsc2FsdCxOLHIscCxka0xlbixjYWxsYmFjayl7Tj1lbnN1cmVJbnRlZ2VyKE4sXCJOXCIpO3I9ZW5zdXJlSW50ZWdlcihyLFwiclwiKTtwPWVuc3VyZUludGVnZXIocCxcInBcIik7ZGtMZW49ZW5zdXJlSW50ZWdlcihka0xlbixcImRrTGVuXCIpO2lmKE49PT0wfHwoTiZOLTEpIT09MCl7dGhyb3cgbmV3IEVycm9yKFwiTiBtdXN0IGJlIHBvd2VyIG9mIDJcIil9aWYoTj5NQVhfVkFMVUUvMTI4L3Ipe3Rocm93IG5ldyBFcnJvcihcIk4gdG9vIGxhcmdlXCIpfWlmKHI+TUFYX1ZBTFVFLzEyOC9wKXt0aHJvdyBuZXcgRXJyb3IoXCJyIHRvbyBsYXJnZVwiKX1pZighY2hlY2tCdWZmZXJpc2gocGFzc3dvcmQpKXt0aHJvdyBuZXcgRXJyb3IoXCJwYXNzd29yZCBtdXN0IGJlIGFuIGFycmF5IG9yIGJ1ZmZlclwiKX1wYXNzd29yZD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXNzd29yZCk7aWYoIWNoZWNrQnVmZmVyaXNoKHNhbHQpKXt0aHJvdyBuZXcgRXJyb3IoXCJzYWx0IG11c3QgYmUgYW4gYXJyYXkgb3IgYnVmZmVyXCIpfXNhbHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2FsdCk7bGV0IGI9UEJLREYyX0hNQUNfU0hBMjU2X09uZUl0ZXIocGFzc3dvcmQsc2FsdCxwKjEyOCpyKTtjb25zdCBCPW5ldyBVaW50MzJBcnJheShwKjMyKnIpO2ZvcihsZXQgaT0wO2k8Qi5sZW5ndGg7aSsrKXtjb25zdCBqPWkqNDtCW2ldPShiW2orM10mMjU1KTw8MjR8KGJbaisyXSYyNTUpPDwxNnwoYltqKzFdJjI1NSk8PDh8KGJbaiswXSYyNTUpPDwwfWNvbnN0IFhZPW5ldyBVaW50MzJBcnJheSg2NCpyKTtjb25zdCBWPW5ldyBVaW50MzJBcnJheSgzMipyKk4pO2NvbnN0IFlpPTMyKnI7Y29uc3QgeD1uZXcgVWludDMyQXJyYXkoMTYpO2NvbnN0IF9YPW5ldyBVaW50MzJBcnJheSgxNik7Y29uc3QgdG90YWxPcHM9cCpOKjI7bGV0IGN1cnJlbnRPcD0wO2xldCBsYXN0UGVyY2VudDEwPW51bGw7bGV0IHN0b3A9ZmFsc2U7bGV0IHN0YXRlPTA7bGV0IGkwPTAsaTE7bGV0IEJpO2NvbnN0IGxpbWl0PWNhbGxiYWNrP3BhcnNlSW50KDFlMy9yKTo0Mjk0OTY3Mjk1O2NvbnN0IG5leHRUaWNrPXR5cGVvZiBzZXRJbW1lZGlhdGUhPT1cInVuZGVmaW5lZFwiP3NldEltbWVkaWF0ZTpzZXRUaW1lb3V0O2NvbnN0IGluY3JlbWVudGFsU01peD1mdW5jdGlvbigpe2lmKHN0b3Ape3JldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJjYW5jZWxsZWRcIiksY3VycmVudE9wL3RvdGFsT3BzKX1sZXQgc3RlcHM7c3dpdGNoKHN0YXRlKXtjYXNlIDA6Qmk9aTAqMzIqcjthcnJheWNvcHkoQixCaSxYWSwwLFlpKTtzdGF0ZT0xO2kxPTA7Y2FzZSAxOnN0ZXBzPU4taTE7aWYoc3RlcHM+bGltaXQpe3N0ZXBzPWxpbWl0fWZvcihsZXQgaT0wO2k8c3RlcHM7aSsrKXthcnJheWNvcHkoWFksMCxWLChpMStpKSpZaSxZaSk7YmxvY2ttaXhfc2Fsc2E4KFhZLFlpLHIseCxfWCl9aTErPXN0ZXBzO2N1cnJlbnRPcCs9c3RlcHM7aWYoY2FsbGJhY2spe2NvbnN0IHBlcmNlbnQxMD1wYXJzZUludCgxZTMqY3VycmVudE9wL3RvdGFsT3BzKTtpZihwZXJjZW50MTAhPT1sYXN0UGVyY2VudDEwKXtzdG9wPWNhbGxiYWNrKG51bGwsY3VycmVudE9wL3RvdGFsT3BzKTtpZihzdG9wKXticmVha31sYXN0UGVyY2VudDEwPXBlcmNlbnQxMH19aWYoaTE8Til7YnJlYWt9aTE9MDtzdGF0ZT0yO2Nhc2UgMjpzdGVwcz1OLWkxO2lmKHN0ZXBzPmxpbWl0KXtzdGVwcz1saW1pdH1mb3IobGV0IGk9MDtpPHN0ZXBzO2krKyl7Y29uc3Qgb2Zmc2V0PSgyKnItMSkqMTY7Y29uc3Qgaj1YWVtvZmZzZXRdJk4tMTtibG9ja3hvcihWLGoqWWksWFksWWkpO2Jsb2NrbWl4X3NhbHNhOChYWSxZaSxyLHgsX1gpfWkxKz1zdGVwcztjdXJyZW50T3ArPXN0ZXBzO2lmKGNhbGxiYWNrKXtjb25zdCBwZXJjZW50MTA9cGFyc2VJbnQoMWUzKmN1cnJlbnRPcC90b3RhbE9wcyk7aWYocGVyY2VudDEwIT09bGFzdFBlcmNlbnQxMCl7c3RvcD1jYWxsYmFjayhudWxsLGN1cnJlbnRPcC90b3RhbE9wcyk7aWYoc3RvcCl7YnJlYWt9bGFzdFBlcmNlbnQxMD1wZXJjZW50MTB9fWlmKGkxPE4pe2JyZWFrfWFycmF5Y29weShYWSwwLEIsQmksWWkpO2kwKys7aWYoaTA8cCl7c3RhdGU9MDticmVha31iPVtdO2ZvcihsZXQgaT0wO2k8Qi5sZW5ndGg7aSsrKXtiLnB1c2goQltpXT4+MCYyNTUpO2IucHVzaChCW2ldPj44JjI1NSk7Yi5wdXNoKEJbaV0+PjE2JjI1NSk7Yi5wdXNoKEJbaV0+PjI0JjI1NSl9Y29uc3QgZGVyaXZlZEtleT1QQktERjJfSE1BQ19TSEEyNTZfT25lSXRlcihwYXNzd29yZCxiLGRrTGVuKTtpZihjYWxsYmFjayl7Y2FsbGJhY2sobnVsbCwxLGRlcml2ZWRLZXkpfXJldHVybiBkZXJpdmVkS2V5fWlmKGNhbGxiYWNrKXtuZXh0VGljayhpbmNyZW1lbnRhbFNNaXgpfX07aWYoIWNhbGxiYWNrKXt3aGlsZSh0cnVlKXtjb25zdCBkZXJpdmVkS2V5PWluY3JlbWVudGFsU01peCgpO2lmKGRlcml2ZWRLZXkhPXVuZGVmaW5lZCl7cmV0dXJuIGRlcml2ZWRLZXl9fX1pbmNyZW1lbnRhbFNNaXgoKX1jb25zdCBsaWI9e3NjcnlwdDpmdW5jdGlvbihwYXNzd29yZCxzYWx0LE4scixwLGRrTGVuLHByb2dyZXNzQ2FsbGJhY2spe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7bGV0IGxhc3RQcm9ncmVzcz0wO2lmKHByb2dyZXNzQ2FsbGJhY2spe3Byb2dyZXNzQ2FsbGJhY2soMCl9X3NjcnlwdChwYXNzd29yZCxzYWx0LE4scixwLGRrTGVuLGZ1bmN0aW9uKGVycm9yLHByb2dyZXNzLGtleSl7aWYoZXJyb3Ipe3JlamVjdChlcnJvcil9ZWxzZSBpZihrZXkpe2lmKHByb2dyZXNzQ2FsbGJhY2smJmxhc3RQcm9ncmVzcyE9PTEpe3Byb2dyZXNzQ2FsbGJhY2soMSl9cmVzb2x2ZShuZXcgVWludDhBcnJheShrZXkpKX1lbHNlIGlmKHByb2dyZXNzQ2FsbGJhY2smJnByb2dyZXNzIT09bGFzdFByb2dyZXNzKXtsYXN0UHJvZ3Jlc3M9cHJvZ3Jlc3M7cmV0dXJuIHByb2dyZXNzQ2FsbGJhY2socHJvZ3Jlc3MpfX0pfSl9LHN5bmNTY3J5cHQ6ZnVuY3Rpb24ocGFzc3dvcmQsc2FsdCxOLHIscCxka0xlbil7cmV0dXJuIG5ldyBVaW50OEFycmF5KF9zY3J5cHQocGFzc3dvcmQsc2FsdCxOLHIscCxka0xlbikpfX07aWYoXCJvYmplY3RcIiE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWxpYn1lbHNlIGlmKHR5cGVvZiB1bmRlZmluZWQ9PT1cImZ1bmN0aW9uXCImJnVuZGVmaW5lZC5hbWQpe3VuZGVmaW5lZChsaWIpfWVsc2UgaWYocm9vdCl7aWYocm9vdC5zY3J5cHQpe3Jvb3QuX3NjcnlwdD1yb290LnNjcnlwdH1yb290LnNjcnlwdD1saWJ9fSkoY29tbW9uanNHbG9iYWwpfSk7XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciQ0PXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkbz1uZXcgTG9nZ2VyKHZlcnNpb24kaSk7ZnVuY3Rpb24gaGFzTW5lbW9uaWModmFsdWUpe3JldHVybiB2YWx1ZSE9bnVsbCYmdmFsdWUubW5lbW9uaWMmJnZhbHVlLm1uZW1vbmljLnBocmFzZX1jbGFzcyBLZXlzdG9yZUFjY291bnQgZXh0ZW5kcyBEZXNjcmlwdGlvbntpc0tleXN0b3JlQWNjb3VudCh2YWx1ZSl7cmV0dXJuISEodmFsdWUmJnZhbHVlLl9pc0tleXN0b3JlQWNjb3VudCl9fWZ1bmN0aW9uIF9kZWNyeXB0KGRhdGEsa2V5LGNpcGhlcnRleHQpe2NvbnN0IGNpcGhlcj1zZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8vY2lwaGVyXCIpO2lmKGNpcGhlcj09PVwiYWVzLTEyOC1jdHJcIil7Y29uc3QgaXY9bG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8vY2lwaGVycGFyYW1zL2l2XCIpKTtjb25zdCBjb3VudGVyPW5ldyBhZXNKcy5Db3VudGVyKGl2KTtjb25zdCBhZXNDdHI9bmV3IGFlc0pzLk1vZGVPZk9wZXJhdGlvbi5jdHIoa2V5LGNvdW50ZXIpO3JldHVybiBhcnJheWlmeShhZXNDdHIuZGVjcnlwdChjaXBoZXJ0ZXh0KSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gX2dldEFjY291bnQoZGF0YSxrZXkpe2NvbnN0IGNpcGhlcnRleHQ9bG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8vY2lwaGVydGV4dFwiKSk7Y29uc3QgY29tcHV0ZWRNQUM9aGV4bGlmeShrZWNjYWsyNTYoY29uY2F0KFtrZXkuc2xpY2UoMTYsMzIpLGNpcGhlcnRleHRdKSkpLnN1YnN0cmluZygyKTtpZihjb21wdXRlZE1BQyE9PXNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9tYWNcIikudG9Mb3dlckNhc2UoKSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXNzd29yZFwiKX1jb25zdCBwcml2YXRlS2V5PV9kZWNyeXB0KGRhdGEsa2V5LnNsaWNlKDAsMTYpLGNpcGhlcnRleHQpO2lmKCFwcml2YXRlS2V5KXtsb2dnZXIkby50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgY2lwaGVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcImRlY3J5cHRcIn0pfWNvbnN0IG1uZW1vbmljS2V5PWtleS5zbGljZSgzMiw2NCk7Y29uc3QgYWRkcmVzcz1jb21wdXRlQWRkcmVzcyhwcml2YXRlS2V5KTtpZihkYXRhLmFkZHJlc3Mpe2xldCBjaGVjaz1kYXRhLmFkZHJlc3MudG9Mb3dlckNhc2UoKTtpZihjaGVjay5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7Y2hlY2s9XCIweFwiK2NoZWNrfWlmKGdldEFkZHJlc3MoY2hlY2spIT09YWRkcmVzcyl7dGhyb3cgbmV3IEVycm9yKFwiYWRkcmVzcyBtaXNtYXRjaFwiKX19Y29uc3QgYWNjb3VudD17X2lzS2V5c3RvcmVBY2NvdW50OnRydWUsYWRkcmVzczphZGRyZXNzLHByaXZhdGVLZXk6aGV4bGlmeShwcml2YXRlS2V5KX07aWYoc2VhcmNoUGF0aChkYXRhLFwieC1ldGhlcnMvdmVyc2lvblwiKT09PVwiMC4xXCIpe2NvbnN0IG1uZW1vbmljQ2lwaGVydGV4dD1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcIngtZXRoZXJzL21uZW1vbmljQ2lwaGVydGV4dFwiKSk7Y29uc3QgbW5lbW9uaWNJdj1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcIngtZXRoZXJzL21uZW1vbmljQ291bnRlclwiKSk7Y29uc3QgbW5lbW9uaWNDb3VudGVyPW5ldyBhZXNKcy5Db3VudGVyKG1uZW1vbmljSXYpO2NvbnN0IG1uZW1vbmljQWVzQ3RyPW5ldyBhZXNKcy5Nb2RlT2ZPcGVyYXRpb24uY3RyKG1uZW1vbmljS2V5LG1uZW1vbmljQ291bnRlcik7Y29uc3QgcGF0aD1zZWFyY2hQYXRoKGRhdGEsXCJ4LWV0aGVycy9wYXRoXCIpfHxkZWZhdWx0UGF0aDtjb25zdCBsb2NhbGU9c2VhcmNoUGF0aChkYXRhLFwieC1ldGhlcnMvbG9jYWxlXCIpfHxcImVuXCI7Y29uc3QgZW50cm9weT1hcnJheWlmeShtbmVtb25pY0Flc0N0ci5kZWNyeXB0KG1uZW1vbmljQ2lwaGVydGV4dCkpO3RyeXtjb25zdCBtbmVtb25pYz1lbnRyb3B5VG9NbmVtb25pYyhlbnRyb3B5LGxvY2FsZSk7Y29uc3Qgbm9kZT1IRE5vZGUuZnJvbU1uZW1vbmljKG1uZW1vbmljLG51bGwsbG9jYWxlKS5kZXJpdmVQYXRoKHBhdGgpO2lmKG5vZGUucHJpdmF0ZUtleSE9YWNjb3VudC5wcml2YXRlS2V5KXt0aHJvdyBuZXcgRXJyb3IoXCJtbmVtb25pYyBtaXNtYXRjaFwiKX1hY2NvdW50Lm1uZW1vbmljPW5vZGUubW5lbW9uaWN9Y2F0Y2goZXJyb3Ipe2lmKGVycm9yLmNvZGUhPT1Mb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlR8fGVycm9yLmFyZ3VtZW50IT09XCJ3b3JkbGlzdFwiKXt0aHJvdyBlcnJvcn19fXJldHVybiBuZXcgS2V5c3RvcmVBY2NvdW50KGFjY291bnQpfWZ1bmN0aW9uIHBia2RmMlN5bmMocGFzc3dvcmRCeXRlcyxzYWx0LGNvdW50LGRrTGVuLHByZkZ1bmMpe3JldHVybiBhcnJheWlmeShwYmtkZjIocGFzc3dvcmRCeXRlcyxzYWx0LGNvdW50LGRrTGVuLHByZkZ1bmMpKX1mdW5jdGlvbiBwYmtkZjIkMShwYXNzd29yZEJ5dGVzLHNhbHQsY291bnQsZGtMZW4scHJmRnVuYyl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShwYmtkZjJTeW5jKHBhc3N3b3JkQnl0ZXMsc2FsdCxjb3VudCxka0xlbixwcmZGdW5jKSl9ZnVuY3Rpb24gX2NvbXB1dGVLZGZLZXkoZGF0YSxwYXNzd29yZCxwYmtkZjJGdW5jLHNjcnlwdEZ1bmMscHJvZ3Jlc3NDYWxsYmFjayl7Y29uc3QgcGFzc3dvcmRCeXRlcz1nZXRQYXNzd29yZChwYXNzd29yZCk7Y29uc3Qga2RmPXNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZcIik7aWYoa2RmJiZ0eXBlb2Yga2RmPT09XCJzdHJpbmdcIil7Y29uc3QgdGhyb3dFcnJvcj1mdW5jdGlvbihuYW1lLHZhbHVlKXtyZXR1cm4gbG9nZ2VyJG8udGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBrZXktZGVyaXZhdGlvbiBmdW5jdGlvbiBwYXJhbWV0ZXJzXCIsbmFtZSx2YWx1ZSl9O2lmKGtkZi50b0xvd2VyQ2FzZSgpPT09XCJzY3J5cHRcIil7Y29uc3Qgc2FsdD1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZwYXJhbXMvc2FsdFwiKSk7Y29uc3QgTj1wYXJzZUludChzZWFyY2hQYXRoKGRhdGEsXCJjcnlwdG8va2RmcGFyYW1zL25cIikpO2NvbnN0IHI9cGFyc2VJbnQoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9yXCIpKTtjb25zdCBwPXBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZwYXJhbXMvcFwiKSk7aWYoIU58fCFyfHwhcCl7dGhyb3dFcnJvcihcImtkZlwiLGtkZil9aWYoKE4mTi0xKSE9PTApe3Rocm93RXJyb3IoXCJOXCIsTil9Y29uc3QgZGtMZW49cGFyc2VJbnQoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9ka2xlblwiKSk7aWYoZGtMZW4hPT0zMil7dGhyb3dFcnJvcihcImRrbGVuXCIsZGtMZW4pfXJldHVybiBzY3J5cHRGdW5jKHBhc3N3b3JkQnl0ZXMsc2FsdCxOLHIscCw2NCxwcm9ncmVzc0NhbGxiYWNrKX1lbHNlIGlmKGtkZi50b0xvd2VyQ2FzZSgpPT09XCJwYmtkZjJcIil7Y29uc3Qgc2FsdD1sb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZwYXJhbXMvc2FsdFwiKSk7bGV0IHByZkZ1bmM9bnVsbDtjb25zdCBwcmY9c2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9wcmZcIik7aWYocHJmPT09XCJobWFjLXNoYTI1NlwiKXtwcmZGdW5jPVwic2hhMjU2XCJ9ZWxzZSBpZihwcmY9PT1cImhtYWMtc2hhNTEyXCIpe3ByZkZ1bmM9XCJzaGE1MTJcIn1lbHNle3Rocm93RXJyb3IoXCJwcmZcIixwcmYpfWNvbnN0IGNvdW50PXBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSxcImNyeXB0by9rZGZwYXJhbXMvY1wiKSk7Y29uc3QgZGtMZW49cGFyc2VJbnQoc2VhcmNoUGF0aChkYXRhLFwiY3J5cHRvL2tkZnBhcmFtcy9ka2xlblwiKSk7aWYoZGtMZW4hPT0zMil7dGhyb3dFcnJvcihcImRrbGVuXCIsZGtMZW4pfXJldHVybiBwYmtkZjJGdW5jKHBhc3N3b3JkQnl0ZXMsc2FsdCxjb3VudCxka0xlbixwcmZGdW5jKX19cmV0dXJuIGxvZ2dlciRvLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIGtleS1kZXJpdmF0aW9uIGZ1bmN0aW9uXCIsXCJrZGZcIixrZGYpfWZ1bmN0aW9uIGRlY3J5cHRTeW5jKGpzb24scGFzc3dvcmQpe2NvbnN0IGRhdGE9SlNPTi5wYXJzZShqc29uKTtjb25zdCBrZXk9X2NvbXB1dGVLZGZLZXkoZGF0YSxwYXNzd29yZCxwYmtkZjJTeW5jLHNjcnlwdC5zeW5jU2NyeXB0KTtyZXR1cm4gX2dldEFjY291bnQoZGF0YSxrZXkpfWZ1bmN0aW9uIGRlY3J5cHQkMShqc29uLHBhc3N3b3JkLHByb2dyZXNzQ2FsbGJhY2spe3JldHVybiBfX2F3YWl0ZXIkNCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgZGF0YT1KU09OLnBhcnNlKGpzb24pO2NvbnN0IGtleT15aWVsZCBfY29tcHV0ZUtkZktleShkYXRhLHBhc3N3b3JkLHBia2RmMiQxLHNjcnlwdC5zY3J5cHQscHJvZ3Jlc3NDYWxsYmFjayk7cmV0dXJuIF9nZXRBY2NvdW50KGRhdGEsa2V5KX0pfWZ1bmN0aW9uIGVuY3J5cHQoYWNjb3VudCxwYXNzd29yZCxvcHRpb25zLHByb2dyZXNzQ2FsbGJhY2spe3RyeXtpZihnZXRBZGRyZXNzKGFjY291bnQuYWRkcmVzcykhPT1jb21wdXRlQWRkcmVzcyhhY2NvdW50LnByaXZhdGVLZXkpKXt0aHJvdyBuZXcgRXJyb3IoXCJhZGRyZXNzL3ByaXZhdGVLZXkgbWlzbWF0Y2hcIil9aWYoaGFzTW5lbW9uaWMoYWNjb3VudCkpe2NvbnN0IG1uZW1vbmljPWFjY291bnQubW5lbW9uaWM7Y29uc3Qgbm9kZT1IRE5vZGUuZnJvbU1uZW1vbmljKG1uZW1vbmljLnBocmFzZSxudWxsLG1uZW1vbmljLmxvY2FsZSkuZGVyaXZlUGF0aChtbmVtb25pYy5wYXRofHxkZWZhdWx0UGF0aCk7aWYobm9kZS5wcml2YXRlS2V5IT1hY2NvdW50LnByaXZhdGVLZXkpe3Rocm93IG5ldyBFcnJvcihcIm1uZW1vbmljIG1pc21hdGNoXCIpfX19Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfWlmKHR5cGVvZiBvcHRpb25zPT09XCJmdW5jdGlvblwiJiYhcHJvZ3Jlc3NDYWxsYmFjayl7cHJvZ3Jlc3NDYWxsYmFjaz1vcHRpb25zO29wdGlvbnM9e319aWYoIW9wdGlvbnMpe29wdGlvbnM9e319Y29uc3QgcHJpdmF0ZUtleT1hcnJheWlmeShhY2NvdW50LnByaXZhdGVLZXkpO2NvbnN0IHBhc3N3b3JkQnl0ZXM9Z2V0UGFzc3dvcmQocGFzc3dvcmQpO2xldCBlbnRyb3B5PW51bGw7bGV0IHBhdGg9bnVsbDtsZXQgbG9jYWxlPW51bGw7aWYoaGFzTW5lbW9uaWMoYWNjb3VudCkpe2NvbnN0IHNyY01uZW1vbmljPWFjY291bnQubW5lbW9uaWM7ZW50cm9weT1hcnJheWlmeShtbmVtb25pY1RvRW50cm9weShzcmNNbmVtb25pYy5waHJhc2Usc3JjTW5lbW9uaWMubG9jYWxlfHxcImVuXCIpKTtwYXRoPXNyY01uZW1vbmljLnBhdGh8fGRlZmF1bHRQYXRoO2xvY2FsZT1zcmNNbmVtb25pYy5sb2NhbGV8fFwiZW5cIn1sZXQgY2xpZW50PW9wdGlvbnMuY2xpZW50O2lmKCFjbGllbnQpe2NsaWVudD1cImV0aGVycy5qc1wifWxldCBzYWx0PW51bGw7aWYob3B0aW9ucy5zYWx0KXtzYWx0PWFycmF5aWZ5KG9wdGlvbnMuc2FsdCl9ZWxzZXtzYWx0PXJhbmRvbUJ5dGVzKDMyKX1sZXQgaXY9bnVsbDtpZihvcHRpb25zLml2KXtpdj1hcnJheWlmeShvcHRpb25zLml2KTtpZihpdi5sZW5ndGghPT0xNil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpdlwiKX19ZWxzZXtpdj1yYW5kb21CeXRlcygxNil9bGV0IHV1aWRSYW5kb209bnVsbDtpZihvcHRpb25zLnV1aWQpe3V1aWRSYW5kb209YXJyYXlpZnkob3B0aW9ucy51dWlkKTtpZih1dWlkUmFuZG9tLmxlbmd0aCE9PTE2KXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHV1aWRcIil9fWVsc2V7dXVpZFJhbmRvbT1yYW5kb21CeXRlcygxNil9bGV0IE49MTw8MTcscj04LHA9MTtpZihvcHRpb25zLnNjcnlwdCl7aWYob3B0aW9ucy5zY3J5cHQuTil7Tj1vcHRpb25zLnNjcnlwdC5OfWlmKG9wdGlvbnMuc2NyeXB0LnIpe3I9b3B0aW9ucy5zY3J5cHQucn1pZihvcHRpb25zLnNjcnlwdC5wKXtwPW9wdGlvbnMuc2NyeXB0LnB9fXJldHVybiBzY3J5cHQuc2NyeXB0KHBhc3N3b3JkQnl0ZXMsc2FsdCxOLHIscCw2NCxwcm9ncmVzc0NhbGxiYWNrKS50aGVuKGtleT0+e2tleT1hcnJheWlmeShrZXkpO2NvbnN0IGRlcml2ZWRLZXk9a2V5LnNsaWNlKDAsMTYpO2NvbnN0IG1hY1ByZWZpeD1rZXkuc2xpY2UoMTYsMzIpO2NvbnN0IG1uZW1vbmljS2V5PWtleS5zbGljZSgzMiw2NCk7Y29uc3QgY291bnRlcj1uZXcgYWVzSnMuQ291bnRlcihpdik7Y29uc3QgYWVzQ3RyPW5ldyBhZXNKcy5Nb2RlT2ZPcGVyYXRpb24uY3RyKGRlcml2ZWRLZXksY291bnRlcik7Y29uc3QgY2lwaGVydGV4dD1hcnJheWlmeShhZXNDdHIuZW5jcnlwdChwcml2YXRlS2V5KSk7Y29uc3QgbWFjPWtlY2NhazI1Nihjb25jYXQoW21hY1ByZWZpeCxjaXBoZXJ0ZXh0XSkpO2NvbnN0IGRhdGE9e2FkZHJlc3M6YWNjb3VudC5hZGRyZXNzLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpLGlkOnV1aWRWNCh1dWlkUmFuZG9tKSx2ZXJzaW9uOjMsQ3J5cHRvOntjaXBoZXI6XCJhZXMtMTI4LWN0clwiLGNpcGhlcnBhcmFtczp7aXY6aGV4bGlmeShpdikuc3Vic3RyaW5nKDIpfSxjaXBoZXJ0ZXh0OmhleGxpZnkoY2lwaGVydGV4dCkuc3Vic3RyaW5nKDIpLGtkZjpcInNjcnlwdFwiLGtkZnBhcmFtczp7c2FsdDpoZXhsaWZ5KHNhbHQpLnN1YnN0cmluZygyKSxuOk4sZGtsZW46MzIscDpwLHI6cn0sbWFjOm1hYy5zdWJzdHJpbmcoMil9fTtpZihlbnRyb3B5KXtjb25zdCBtbmVtb25pY0l2PXJhbmRvbUJ5dGVzKDE2KTtjb25zdCBtbmVtb25pY0NvdW50ZXI9bmV3IGFlc0pzLkNvdW50ZXIobW5lbW9uaWNJdik7Y29uc3QgbW5lbW9uaWNBZXNDdHI9bmV3IGFlc0pzLk1vZGVPZk9wZXJhdGlvbi5jdHIobW5lbW9uaWNLZXksbW5lbW9uaWNDb3VudGVyKTtjb25zdCBtbmVtb25pY0NpcGhlcnRleHQ9YXJyYXlpZnkobW5lbW9uaWNBZXNDdHIuZW5jcnlwdChlbnRyb3B5KSk7Y29uc3Qgbm93PW5ldyBEYXRlO2NvbnN0IHRpbWVzdGFtcD1ub3cuZ2V0VVRDRnVsbFllYXIoKStcIi1cIit6cGFkKG5vdy5nZXRVVENNb250aCgpKzEsMikrXCItXCIrenBhZChub3cuZ2V0VVRDRGF0ZSgpLDIpK1wiVFwiK3pwYWQobm93LmdldFVUQ0hvdXJzKCksMikrXCItXCIrenBhZChub3cuZ2V0VVRDTWludXRlcygpLDIpK1wiLVwiK3pwYWQobm93LmdldFVUQ1NlY29uZHMoKSwyKStcIi4wWlwiO2RhdGFbXCJ4LWV0aGVyc1wiXT17Y2xpZW50OmNsaWVudCxnZXRoRmlsZW5hbWU6XCJVVEMtLVwiK3RpbWVzdGFtcCtcIi0tXCIrZGF0YS5hZGRyZXNzLG1uZW1vbmljQ291bnRlcjpoZXhsaWZ5KG1uZW1vbmljSXYpLnN1YnN0cmluZygyKSxtbmVtb25pY0NpcGhlcnRleHQ6aGV4bGlmeShtbmVtb25pY0NpcGhlcnRleHQpLnN1YnN0cmluZygyKSxwYXRoOnBhdGgsbG9jYWxlOmxvY2FsZSx2ZXJzaW9uOlwiMC4xXCJ9fXJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKX0pfVwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIGRlY3J5cHRKc29uV2FsbGV0KGpzb24scGFzc3dvcmQscHJvZ3Jlc3NDYWxsYmFjayl7aWYoaXNDcm93ZHNhbGVXYWxsZXQoanNvbikpe2lmKHByb2dyZXNzQ2FsbGJhY2spe3Byb2dyZXNzQ2FsbGJhY2soMCl9Y29uc3QgYWNjb3VudD1kZWNyeXB0KGpzb24scGFzc3dvcmQpO2lmKHByb2dyZXNzQ2FsbGJhY2spe3Byb2dyZXNzQ2FsbGJhY2soMSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZShhY2NvdW50KX1pZihpc0tleXN0b3JlV2FsbGV0KGpzb24pKXtyZXR1cm4gZGVjcnlwdCQxKGpzb24scGFzc3dvcmQscHJvZ3Jlc3NDYWxsYmFjayl9cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImludmFsaWQgSlNPTiB3YWxsZXRcIikpfWZ1bmN0aW9uIGRlY3J5cHRKc29uV2FsbGV0U3luYyhqc29uLHBhc3N3b3JkKXtpZihpc0Nyb3dkc2FsZVdhbGxldChqc29uKSl7cmV0dXJuIGRlY3J5cHQoanNvbixwYXNzd29yZCl9aWYoaXNLZXlzdG9yZVdhbGxldChqc29uKSl7cmV0dXJuIGRlY3J5cHRTeW5jKGpzb24scGFzc3dvcmQpfXRocm93IG5ldyBFcnJvcihcImludmFsaWQgSlNPTiB3YWxsZXRcIil9Y29uc3QgdmVyc2lvbiRqPVwid2FsbGV0LzUuMS4wXCI7XCJ1c2Ugc3RyaWN0XCI7dmFyIF9fYXdhaXRlciQ1PXdpbmRvdyYmd2luZG93Ll9fYXdhaXRlcnx8ZnVuY3Rpb24odGhpc0FyZyxfYXJndW1lbnRzLFAsZ2VuZXJhdG9yKXtmdW5jdGlvbiBhZG9wdCh2YWx1ZSl7cmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUD92YWx1ZTpuZXcgUChmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKHZhbHVlKX0pfXJldHVybiBuZXcoUHx8KFA9UHJvbWlzZSkpKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiByZWplY3RlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHN0ZXAocmVzdWx0KXtyZXN1bHQuZG9uZT9yZXNvbHZlKHJlc3VsdC52YWx1ZSk6YWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCxyZWplY3RlZCl9c3RlcCgoZ2VuZXJhdG9yPWdlbmVyYXRvci5hcHBseSh0aGlzQXJnLF9hcmd1bWVudHN8fFtdKSkubmV4dCgpKX0pfTtjb25zdCBsb2dnZXIkcD1uZXcgTG9nZ2VyKHZlcnNpb24kaik7ZnVuY3Rpb24gaXNBY2NvdW50KHZhbHVlKXtyZXR1cm4gdmFsdWUhPW51bGwmJmlzSGV4U3RyaW5nKHZhbHVlLnByaXZhdGVLZXksMzIpJiZ2YWx1ZS5hZGRyZXNzIT1udWxsfWZ1bmN0aW9uIGhhc01uZW1vbmljJDEodmFsdWUpe2NvbnN0IG1uZW1vbmljPXZhbHVlLm1uZW1vbmljO3JldHVybiBtbmVtb25pYyYmbW5lbW9uaWMucGhyYXNlfWNsYXNzIFdhbGxldCBleHRlbmRzIFNpZ25lcntjb25zdHJ1Y3Rvcihwcml2YXRlS2V5LHByb3ZpZGVyKXtsb2dnZXIkcC5jaGVja05ldyhuZXcudGFyZ2V0LFdhbGxldCk7c3VwZXIoKTtpZihpc0FjY291bnQocHJpdmF0ZUtleSkpe2NvbnN0IHNpZ25pbmdLZXk9bmV3IFNpZ25pbmdLZXkocHJpdmF0ZUtleS5wcml2YXRlS2V5KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX3NpZ25pbmdLZXlcIiwoKT0+c2lnbmluZ0tleSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixjb21wdXRlQWRkcmVzcyh0aGlzLnB1YmxpY0tleSkpO2lmKHRoaXMuYWRkcmVzcyE9PWdldEFkZHJlc3MocHJpdmF0ZUtleS5hZGRyZXNzKSl7bG9nZ2VyJHAudGhyb3dBcmd1bWVudEVycm9yKFwicHJpdmF0ZUtleS9hZGRyZXNzIG1pc21hdGNoXCIsXCJwcml2YXRlS2V5XCIsXCJbUkVEQUNURURdXCIpfWlmKGhhc01uZW1vbmljJDEocHJpdmF0ZUtleSkpe2NvbnN0IHNyY01uZW1vbmljPXByaXZhdGVLZXkubW5lbW9uaWM7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9tbmVtb25pY1wiLCgpPT4oe3BocmFzZTpzcmNNbmVtb25pYy5waHJhc2UscGF0aDpzcmNNbmVtb25pYy5wYXRofHxkZWZhdWx0UGF0aCxsb2NhbGU6c3JjTW5lbW9uaWMubG9jYWxlfHxcImVuXCJ9KSk7Y29uc3QgbW5lbW9uaWM9dGhpcy5tbmVtb25pYztjb25zdCBub2RlPUhETm9kZS5mcm9tTW5lbW9uaWMobW5lbW9uaWMucGhyYXNlLG51bGwsbW5lbW9uaWMubG9jYWxlKS5kZXJpdmVQYXRoKG1uZW1vbmljLnBhdGgpO2lmKGNvbXB1dGVBZGRyZXNzKG5vZGUucHJpdmF0ZUtleSkhPT10aGlzLmFkZHJlc3Mpe2xvZ2dlciRwLnRocm93QXJndW1lbnRFcnJvcihcIm1uZW1vbmljL2FkZHJlc3MgbWlzbWF0Y2hcIixcInByaXZhdGVLZXlcIixcIltSRURBQ1RFRF1cIil9fWVsc2V7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9tbmVtb25pY1wiLCgpPT5udWxsKX19ZWxzZXtpZihTaWduaW5nS2V5LmlzU2lnbmluZ0tleShwcml2YXRlS2V5KSl7aWYocHJpdmF0ZUtleS5jdXJ2ZSE9PVwic2VjcDI1NmsxXCIpe2xvZ2dlciRwLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIGN1cnZlOyBtdXN0IGJlIHNlY3AyNTZrMVwiLFwicHJpdmF0ZUtleVwiLFwiW1JFREFDVEVEXVwiKX1kZWZpbmVSZWFkT25seSh0aGlzLFwiX3NpZ25pbmdLZXlcIiwoKT0+cHJpdmF0ZUtleSl9ZWxzZXtpZih0eXBlb2YgcHJpdmF0ZUtleT09PVwic3RyaW5nXCIpe2lmKHByaXZhdGVLZXkubWF0Y2goL15bMC05YS1mXSokL2kpJiZwcml2YXRlS2V5Lmxlbmd0aD09PTY0KXtwcml2YXRlS2V5PVwiMHhcIitwcml2YXRlS2V5fX1jb25zdCBzaWduaW5nS2V5PW5ldyBTaWduaW5nS2V5KHByaXZhdGVLZXkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfc2lnbmluZ0tleVwiLCgpPT5zaWduaW5nS2V5KX1kZWZpbmVSZWFkT25seSh0aGlzLFwiX21uZW1vbmljXCIsKCk9Pm51bGwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhZGRyZXNzXCIsY29tcHV0ZUFkZHJlc3ModGhpcy5wdWJsaWNLZXkpKX1pZihwcm92aWRlciYmIVByb3ZpZGVyLmlzUHJvdmlkZXIocHJvdmlkZXIpKXtsb2dnZXIkcC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHByb3ZpZGVyXCIsXCJwcm92aWRlclwiLHByb3ZpZGVyKX1kZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJcIixwcm92aWRlcnx8bnVsbCl9Z2V0IG1uZW1vbmljKCl7cmV0dXJuIHRoaXMuX21uZW1vbmljKCl9Z2V0IHByaXZhdGVLZXkoKXtyZXR1cm4gdGhpcy5fc2lnbmluZ0tleSgpLnByaXZhdGVLZXl9Z2V0IHB1YmxpY0tleSgpe3JldHVybiB0aGlzLl9zaWduaW5nS2V5KCkucHVibGljS2V5fWdldEFkZHJlc3MoKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuYWRkcmVzcyl9Y29ubmVjdChwcm92aWRlcil7cmV0dXJuIG5ldyBXYWxsZXQodGhpcyxwcm92aWRlcil9c2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKXtyZXR1cm4gcmVzb2x2ZVByb3BlcnRpZXModHJhbnNhY3Rpb24pLnRoZW4odHg9PntpZih0eC5mcm9tIT1udWxsKXtpZihnZXRBZGRyZXNzKHR4LmZyb20pIT09dGhpcy5hZGRyZXNzKXtsb2dnZXIkcC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0cmFuc2FjdGlvbiBmcm9tIGFkZHJlc3MgbWlzbWF0Y2hcIixcInRyYW5zYWN0aW9uLmZyb21cIix0cmFuc2FjdGlvbi5mcm9tKX1kZWxldGUgdHguZnJvbX1jb25zdCBzaWduYXR1cmU9dGhpcy5fc2lnbmluZ0tleSgpLnNpZ25EaWdlc3Qoa2VjY2FrMjU2KHNlcmlhbGl6ZSh0eCkpKTtyZXR1cm4gc2VyaWFsaXplKHR4LHNpZ25hdHVyZSl9KX1zaWduTWVzc2FnZShtZXNzYWdlKXtyZXR1cm4gX19hd2FpdGVyJDUodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3JldHVybiBqb2luU2lnbmF0dXJlKHRoaXMuX3NpZ25pbmdLZXkoKS5zaWduRGlnZXN0KGhhc2hNZXNzYWdlKG1lc3NhZ2UpKSl9KX1fc2lnblR5cGVkRGF0YShkb21haW4sdHlwZXMsdmFsdWUpe3JldHVybiBfX2F3YWl0ZXIkNSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgcG9wdWxhdGVkPXlpZWxkIFR5cGVkRGF0YUVuY29kZXIucmVzb2x2ZU5hbWVzKGRvbWFpbix0eXBlcyx2YWx1ZSxuYW1lPT57aWYodGhpcy5wcm92aWRlcj09bnVsbCl7bG9nZ2VyJHAudGhyb3dFcnJvcihcImNhbm5vdCByZXNvbHZlIEVOUyBuYW1lcyB3aXRob3V0IGEgcHJvdmlkZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwicmVzb2x2ZU5hbWVcIix2YWx1ZTpuYW1lfSl9cmV0dXJuIHRoaXMucHJvdmlkZXIucmVzb2x2ZU5hbWUobmFtZSl9KTtyZXR1cm4gam9pblNpZ25hdHVyZSh0aGlzLl9zaWduaW5nS2V5KCkuc2lnbkRpZ2VzdChUeXBlZERhdGFFbmNvZGVyLmhhc2gocG9wdWxhdGVkLmRvbWFpbix0eXBlcyxwb3B1bGF0ZWQudmFsdWUpKSl9KX1lbmNyeXB0KHBhc3N3b3JkLG9wdGlvbnMscHJvZ3Jlc3NDYWxsYmFjayl7aWYodHlwZW9mIG9wdGlvbnM9PT1cImZ1bmN0aW9uXCImJiFwcm9ncmVzc0NhbGxiYWNrKXtwcm9ncmVzc0NhbGxiYWNrPW9wdGlvbnM7b3B0aW9ucz17fX1pZihwcm9ncmVzc0NhbGxiYWNrJiZ0eXBlb2YgcHJvZ3Jlc3NDYWxsYmFjayE9PVwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFja1wiKX1pZighb3B0aW9ucyl7b3B0aW9ucz17fX1yZXR1cm4gZW5jcnlwdCh0aGlzLHBhc3N3b3JkLG9wdGlvbnMscHJvZ3Jlc3NDYWxsYmFjayl9c3RhdGljIGNyZWF0ZVJhbmRvbShvcHRpb25zKXtsZXQgZW50cm9weT1yYW5kb21CeXRlcygxNik7aWYoIW9wdGlvbnMpe29wdGlvbnM9e319aWYob3B0aW9ucy5leHRyYUVudHJvcHkpe2VudHJvcHk9YXJyYXlpZnkoaGV4RGF0YVNsaWNlKGtlY2NhazI1Nihjb25jYXQoW2VudHJvcHksb3B0aW9ucy5leHRyYUVudHJvcHldKSksMCwxNikpfWNvbnN0IG1uZW1vbmljPWVudHJvcHlUb01uZW1vbmljKGVudHJvcHksb3B0aW9ucy5sb2NhbGUpO3JldHVybiBXYWxsZXQuZnJvbU1uZW1vbmljKG1uZW1vbmljLG9wdGlvbnMucGF0aCxvcHRpb25zLmxvY2FsZSl9c3RhdGljIGZyb21FbmNyeXB0ZWRKc29uKGpzb24scGFzc3dvcmQscHJvZ3Jlc3NDYWxsYmFjayl7cmV0dXJuIGRlY3J5cHRKc29uV2FsbGV0KGpzb24scGFzc3dvcmQscHJvZ3Jlc3NDYWxsYmFjaykudGhlbihhY2NvdW50PT57cmV0dXJuIG5ldyBXYWxsZXQoYWNjb3VudCl9KX1zdGF0aWMgZnJvbUVuY3J5cHRlZEpzb25TeW5jKGpzb24scGFzc3dvcmQpe3JldHVybiBuZXcgV2FsbGV0KGRlY3J5cHRKc29uV2FsbGV0U3luYyhqc29uLHBhc3N3b3JkKSl9c3RhdGljIGZyb21NbmVtb25pYyhtbmVtb25pYyxwYXRoLHdvcmRsaXN0KXtpZighcGF0aCl7cGF0aD1kZWZhdWx0UGF0aH1yZXR1cm4gbmV3IFdhbGxldChIRE5vZGUuZnJvbU1uZW1vbmljKG1uZW1vbmljLG51bGwsd29yZGxpc3QpLmRlcml2ZVBhdGgocGF0aCkpfX1mdW5jdGlvbiB2ZXJpZnlNZXNzYWdlKG1lc3NhZ2Usc2lnbmF0dXJlKXtyZXR1cm4gcmVjb3ZlckFkZHJlc3MoaGFzaE1lc3NhZ2UobWVzc2FnZSksc2lnbmF0dXJlKX1mdW5jdGlvbiB2ZXJpZnlUeXBlZERhdGEoZG9tYWluLHR5cGVzLHZhbHVlLHNpZ25hdHVyZSl7cmV0dXJuIHJlY292ZXJBZGRyZXNzKFR5cGVkRGF0YUVuY29kZXIuaGFzaChkb21haW4sdHlwZXMsdmFsdWUpLHNpZ25hdHVyZSl9Y29uc3QgdmVyc2lvbiRrPVwibmV0d29ya3MvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkcT1uZXcgTG9nZ2VyKHZlcnNpb24kayk7ZnVuY3Rpb24gaXNSZW5ldHdvcmthYmxlKHZhbHVlKXtyZXR1cm4gdmFsdWUmJnR5cGVvZiB2YWx1ZS5yZW5ldHdvcms9PT1cImZ1bmN0aW9uXCJ9ZnVuY3Rpb24gZXRoRGVmYXVsdFByb3ZpZGVyKG5ldHdvcmspe2NvbnN0IGZ1bmM9ZnVuY3Rpb24ocHJvdmlkZXJzLG9wdGlvbnMpe2lmKG9wdGlvbnM9PW51bGwpe29wdGlvbnM9e319Y29uc3QgcHJvdmlkZXJMaXN0PVtdO2lmKHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlcil7dHJ5e3Byb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuSW5mdXJhUHJvdmlkZXIobmV0d29yayxvcHRpb25zLmluZnVyYSkpfWNhdGNoKGVycm9yKXt9fWlmKHByb3ZpZGVycy5FdGhlcnNjYW5Qcm92aWRlcil7dHJ5e3Byb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuRXRoZXJzY2FuUHJvdmlkZXIobmV0d29yayxvcHRpb25zLmV0aGVyc2NhbikpfWNhdGNoKGVycm9yKXt9fWlmKHByb3ZpZGVycy5BbGNoZW15UHJvdmlkZXIpe2NvbnN0IHNraXA9W1wiZ29lcmxpXCIsXCJyb3BzdGVuXCIsXCJyaW5rZWJ5XCJdO3RyeXtjb25zdCBwcm92aWRlcj1uZXcgcHJvdmlkZXJzLkFsY2hlbXlQcm92aWRlcihuZXR3b3JrLG9wdGlvbnMuYWxjaGVteSk7aWYocHJvdmlkZXIubmV0d29yayYmc2tpcC5pbmRleE9mKHByb3ZpZGVyLm5ldHdvcmsubmFtZSk9PT0tMSl7cHJvdmlkZXJMaXN0LnB1c2gocHJvdmlkZXIpfX1jYXRjaChlcnJvcil7fX1pZihwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIpe2NvbnN0IHNraXA9W1wiZ29lcmxpXCIsXCJyb3BzdGVuXCIsXCJyaW5rZWJ5XCJdO3RyeXtjb25zdCBwcm92aWRlcj1uZXcgcHJvdmlkZXJzLlBvY2tldFByb3ZpZGVyKG5ldHdvcmspO2lmKHByb3ZpZGVyLm5ldHdvcmsmJnNraXAuaW5kZXhPZihwcm92aWRlci5uZXR3b3JrLm5hbWUpPT09LTEpe3Byb3ZpZGVyTGlzdC5wdXNoKHByb3ZpZGVyKX19Y2F0Y2goZXJyb3Ipe319aWYocHJvdmlkZXJzLkNsb3VkZmxhcmVQcm92aWRlcil7dHJ5e3Byb3ZpZGVyTGlzdC5wdXNoKG5ldyBwcm92aWRlcnMuQ2xvdWRmbGFyZVByb3ZpZGVyKG5ldHdvcmspKX1jYXRjaChlcnJvcil7fX1pZihwcm92aWRlckxpc3QubGVuZ3RoPT09MCl7cmV0dXJuIG51bGx9aWYocHJvdmlkZXJzLkZhbGxiYWNrUHJvdmlkZXIpe2xldCBxdW9ydW09MTtpZihvcHRpb25zLnF1b3J1bSE9bnVsbCl7cXVvcnVtPW9wdGlvbnMucXVvcnVtfWVsc2UgaWYobmV0d29yaz09PVwiaG9tZXN0ZWFkXCIpe3F1b3J1bT0yfXJldHVybiBuZXcgcHJvdmlkZXJzLkZhbGxiYWNrUHJvdmlkZXIocHJvdmlkZXJMaXN0LHF1b3J1bSl9cmV0dXJuIHByb3ZpZGVyTGlzdFswXX07ZnVuYy5yZW5ldHdvcms9ZnVuY3Rpb24obmV0d29yayl7cmV0dXJuIGV0aERlZmF1bHRQcm92aWRlcihuZXR3b3JrKX07cmV0dXJuIGZ1bmN9ZnVuY3Rpb24gZXRjRGVmYXVsdFByb3ZpZGVyKHVybCxuZXR3b3JrKXtjb25zdCBmdW5jPWZ1bmN0aW9uKHByb3ZpZGVycyxvcHRpb25zKXtpZihwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKXtyZXR1cm4gbmV3IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIodXJsLG5ldHdvcmspfXJldHVybiBudWxsfTtmdW5jLnJlbmV0d29yaz1mdW5jdGlvbihuZXR3b3JrKXtyZXR1cm4gZXRjRGVmYXVsdFByb3ZpZGVyKHVybCxuZXR3b3JrKX07cmV0dXJuIGZ1bmN9Y29uc3QgaG9tZXN0ZWFkPXtjaGFpbklkOjEsZW5zQWRkcmVzczpcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiLG5hbWU6XCJob21lc3RlYWRcIixfZGVmYXVsdFByb3ZpZGVyOmV0aERlZmF1bHRQcm92aWRlcihcImhvbWVzdGVhZFwiKX07Y29uc3Qgcm9wc3Rlbj17Y2hhaW5JZDozLGVuc0FkZHJlc3M6XCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixuYW1lOlwicm9wc3RlblwiLF9kZWZhdWx0UHJvdmlkZXI6ZXRoRGVmYXVsdFByb3ZpZGVyKFwicm9wc3RlblwiKX07Y29uc3QgY2xhc3NpY01vcmRvcj17Y2hhaW5JZDo2MyxuYW1lOlwiY2xhc3NpY01vcmRvclwiLF9kZWZhdWx0UHJvdmlkZXI6ZXRjRGVmYXVsdFByb3ZpZGVyKFwiaHR0cHM6Ly93d3cuZXRoZXJjbHVzdGVyLmNvbS9tb3Jkb3JcIixcImNsYXNzaWNNb3Jkb3JcIil9O2NvbnN0IG5ldHdvcmtzPXt1bnNwZWNpZmllZDp7Y2hhaW5JZDowLG5hbWU6XCJ1bnNwZWNpZmllZFwifSxob21lc3RlYWQ6aG9tZXN0ZWFkLG1haW5uZXQ6aG9tZXN0ZWFkLG1vcmRlbjp7Y2hhaW5JZDoyLG5hbWU6XCJtb3JkZW5cIn0scm9wc3Rlbjpyb3BzdGVuLHRlc3RuZXQ6cm9wc3RlbixyaW5rZWJ5OntjaGFpbklkOjQsZW5zQWRkcmVzczpcIjB4MDAwMDAwMDAwMDBDMkUwNzRlQzY5QTBkRmIyOTk3QkE2QzdkMmUxZVwiLG5hbWU6XCJyaW5rZWJ5XCIsX2RlZmF1bHRQcm92aWRlcjpldGhEZWZhdWx0UHJvdmlkZXIoXCJyaW5rZWJ5XCIpfSxrb3Zhbjp7Y2hhaW5JZDo0MixuYW1lOlwia292YW5cIixfZGVmYXVsdFByb3ZpZGVyOmV0aERlZmF1bHRQcm92aWRlcihcImtvdmFuXCIpfSxnb2VybGk6e2NoYWluSWQ6NSxlbnNBZGRyZXNzOlwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsbmFtZTpcImdvZXJsaVwiLF9kZWZhdWx0UHJvdmlkZXI6ZXRoRGVmYXVsdFByb3ZpZGVyKFwiZ29lcmxpXCIpfSxjbGFzc2ljOntjaGFpbklkOjYxLG5hbWU6XCJjbGFzc2ljXCIsX2RlZmF1bHRQcm92aWRlcjpldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovL3d3dy5ldGhlcmNsdXN0ZXIuY29tL2V0Y1wiLFwiY2xhc3NpY1wiKX0sY2xhc3NpY01vcmRlbjp7Y2hhaW5JZDo2MixuYW1lOlwiY2xhc3NpY01vcmRlblwifSxjbGFzc2ljTW9yZG9yOmNsYXNzaWNNb3Jkb3IsY2xhc3NpY1Rlc3RuZXQ6Y2xhc3NpY01vcmRvcixjbGFzc2ljS290dGk6e2NoYWluSWQ6NixuYW1lOlwiY2xhc3NpY0tvdHRpXCIsX2RlZmF1bHRQcm92aWRlcjpldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovL3d3dy5ldGhlcmNsdXN0ZXIuY29tL2tvdHRpXCIsXCJjbGFzc2ljS290dGlcIil9fTtmdW5jdGlvbiBnZXROZXR3b3JrKG5ldHdvcmspe2lmKG5ldHdvcms9PW51bGwpe3JldHVybiBudWxsfWlmKHR5cGVvZiBuZXR3b3JrPT09XCJudW1iZXJcIil7Zm9yKGNvbnN0IG5hbWUgaW4gbmV0d29ya3Mpe2NvbnN0IHN0YW5kYXJkPW5ldHdvcmtzW25hbWVdO2lmKHN0YW5kYXJkLmNoYWluSWQ9PT1uZXR3b3JrKXtyZXR1cm57bmFtZTpzdGFuZGFyZC5uYW1lLGNoYWluSWQ6c3RhbmRhcmQuY2hhaW5JZCxlbnNBZGRyZXNzOnN0YW5kYXJkLmVuc0FkZHJlc3N8fG51bGwsX2RlZmF1bHRQcm92aWRlcjpzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyfHxudWxsfX19cmV0dXJue2NoYWluSWQ6bmV0d29yayxuYW1lOlwidW5rbm93blwifX1pZih0eXBlb2YgbmV0d29yaz09PVwic3RyaW5nXCIpe2NvbnN0IHN0YW5kYXJkPW5ldHdvcmtzW25ldHdvcmtdO2lmKHN0YW5kYXJkPT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm57bmFtZTpzdGFuZGFyZC5uYW1lLGNoYWluSWQ6c3RhbmRhcmQuY2hhaW5JZCxlbnNBZGRyZXNzOnN0YW5kYXJkLmVuc0FkZHJlc3MsX2RlZmF1bHRQcm92aWRlcjpzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyfHxudWxsfX1jb25zdCBzdGFuZGFyZD1uZXR3b3Jrc1tuZXR3b3JrLm5hbWVdO2lmKCFzdGFuZGFyZCl7aWYodHlwZW9mIG5ldHdvcmsuY2hhaW5JZCE9PVwibnVtYmVyXCIpe2xvZ2dlciRxLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbmV0d29yayBjaGFpbklkXCIsXCJuZXR3b3JrXCIsbmV0d29yayl9cmV0dXJuIG5ldHdvcmt9aWYobmV0d29yay5jaGFpbklkIT09MCYmbmV0d29yay5jaGFpbklkIT09c3RhbmRhcmQuY2hhaW5JZCl7bG9nZ2VyJHEudGhyb3dBcmd1bWVudEVycm9yKFwibmV0d29yayBjaGFpbklkIG1pc21hdGNoXCIsXCJuZXR3b3JrXCIsbmV0d29yayl9bGV0IGRlZmF1bHRQcm92aWRlcj1uZXR3b3JrLl9kZWZhdWx0UHJvdmlkZXJ8fG51bGw7aWYoZGVmYXVsdFByb3ZpZGVyPT1udWxsJiZzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyKXtpZihpc1JlbmV0d29ya2FibGUoc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlcikpe2RlZmF1bHRQcm92aWRlcj1zdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyLnJlbmV0d29yayhuZXR3b3JrKX1lbHNle2RlZmF1bHRQcm92aWRlcj1zdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyfX1yZXR1cm57bmFtZTpuZXR3b3JrLm5hbWUsY2hhaW5JZDpzdGFuZGFyZC5jaGFpbklkLGVuc0FkZHJlc3M6bmV0d29yay5lbnNBZGRyZXNzfHxzdGFuZGFyZC5lbnNBZGRyZXNzfHxudWxsLF9kZWZhdWx0UHJvdmlkZXI6ZGVmYXVsdFByb3ZpZGVyfX1cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBkZWNvZGUkMSh0ZXh0RGF0YSl7dGV4dERhdGE9YXRvYih0ZXh0RGF0YSk7Y29uc3QgZGF0YT1bXTtmb3IobGV0IGk9MDtpPHRleHREYXRhLmxlbmd0aDtpKyspe2RhdGEucHVzaCh0ZXh0RGF0YS5jaGFyQ29kZUF0KGkpKX1yZXR1cm4gYXJyYXlpZnkoZGF0YSl9ZnVuY3Rpb24gZW5jb2RlJDEoZGF0YSl7ZGF0YT1hcnJheWlmeShkYXRhKTtsZXQgdGV4dERhdGE9XCJcIjtmb3IobGV0IGk9MDtpPGRhdGEubGVuZ3RoO2krKyl7dGV4dERhdGErPVN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpXSl9cmV0dXJuIGJ0b2EodGV4dERhdGEpfVwidXNlIHN0cmljdFwiO3ZhciBpbmRleCQyPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGRlY29kZTpkZWNvZGUkMSxlbmNvZGU6ZW5jb2RlJDF9KTtjb25zdCB2ZXJzaW9uJGw9XCJ3ZWIvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDY9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2Z1bmN0aW9uIGdldFVybChocmVmLG9wdGlvbnMpe3JldHVybiBfX2F3YWl0ZXIkNih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYob3B0aW9ucz09bnVsbCl7b3B0aW9ucz17fX1jb25zdCByZXF1ZXN0PXttZXRob2Q6b3B0aW9ucy5tZXRob2R8fFwiR0VUXCIsaGVhZGVyczpvcHRpb25zLmhlYWRlcnN8fHt9LGJvZHk6b3B0aW9ucy5ib2R5fHx1bmRlZmluZWQsbW9kZTpcImNvcnNcIixjYWNoZTpcIm5vLWNhY2hlXCIsY3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwiLHJlZGlyZWN0OlwiZm9sbG93XCIscmVmZXJyZXI6XCJjbGllbnRcIn07Y29uc3QgcmVzcG9uc2U9eWllbGQgZmV0Y2goaHJlZixyZXF1ZXN0KTtjb25zdCBib2R5PXlpZWxkIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7Y29uc3QgaGVhZGVycz17fTtpZihyZXNwb25zZS5oZWFkZXJzLmZvckVhY2gpe3Jlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaCgodmFsdWUsa2V5KT0+e2hlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldPXZhbHVlfSl9ZWxzZXtyZXNwb25zZS5oZWFkZXJzLmtleXMoKS5mb3JFYWNoKGtleT0+e2hlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldPXJlc3BvbnNlLmhlYWRlcnMuZ2V0KGtleSl9KX1yZXR1cm57aGVhZGVyczpoZWFkZXJzLHN0YXR1c0NvZGU6cmVzcG9uc2Uuc3RhdHVzLHN0YXR1c01lc3NhZ2U6cmVzcG9uc2Uuc3RhdHVzVGV4dCxib2R5OmFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJvZHkpKX19KX1cInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDc9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciRyPW5ldyBMb2dnZXIodmVyc2lvbiRsKTtmdW5jdGlvbiBzdGFsbGVyKGR1cmF0aW9uKXtyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZT0+e3NldFRpbWVvdXQocmVzb2x2ZSxkdXJhdGlvbil9KX1mdW5jdGlvbiBib2R5aWZ5KHZhbHVlLHR5cGUpe2lmKHZhbHVlPT1udWxsKXtyZXR1cm4gbnVsbH1pZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gdmFsdWV9aWYoaXNCeXRlc0xpa2UodmFsdWUpKXtpZih0eXBlJiYodHlwZS5zcGxpdChcIi9cIilbMF09PT1cInRleHRcInx8dHlwZS5zcGxpdChcIjtcIilbMF0udHJpbSgpPT09XCJhcHBsaWNhdGlvbi9qc29uXCIpKXt0cnl7cmV0dXJuIHRvVXRmOFN0cmluZyh2YWx1ZSl9Y2F0Y2goZXJyb3Ipe319cmV0dXJuIGhleGxpZnkodmFsdWUpfXJldHVybiB2YWx1ZX1mdW5jdGlvbiBfZmV0Y2hEYXRhKGNvbm5lY3Rpb24sYm9keSxwcm9jZXNzRnVuYyl7Y29uc3QgYXR0ZW1wdExpbWl0PXR5cGVvZiBjb25uZWN0aW9uPT09XCJvYmplY3RcIiYmY29ubmVjdGlvbi50aHJvdHRsZUxpbWl0IT1udWxsP2Nvbm5lY3Rpb24udGhyb3R0bGVMaW1pdDoxMjtsb2dnZXIkci5hc3NlcnRBcmd1bWVudChhdHRlbXB0TGltaXQ+MCYmYXR0ZW1wdExpbWl0JTE9PT0wLFwiaW52YWxpZCBjb25uZWN0aW9uIHRocm90dGxlIGxpbWl0XCIsXCJjb25uZWN0aW9uLnRocm90dGxlTGltaXRcIixhdHRlbXB0TGltaXQpO2NvbnN0IHRocm90dGxlQ2FsbGJhY2s9dHlwZW9mIGNvbm5lY3Rpb249PT1cIm9iamVjdFwiP2Nvbm5lY3Rpb24udGhyb3R0bGVDYWxsYmFjazpudWxsO2NvbnN0IHRocm90dGxlU2xvdEludGVydmFsPXR5cGVvZiBjb25uZWN0aW9uPT09XCJvYmplY3RcIiYmdHlwZW9mIGNvbm5lY3Rpb24udGhyb3R0bGVTbG90SW50ZXJ2YWw9PT1cIm51bWJlclwiP2Nvbm5lY3Rpb24udGhyb3R0bGVTbG90SW50ZXJ2YWw6MTAwO2xvZ2dlciRyLmFzc2VydEFyZ3VtZW50KHRocm90dGxlU2xvdEludGVydmFsPjAmJnRocm90dGxlU2xvdEludGVydmFsJTE9PT0wLFwiaW52YWxpZCBjb25uZWN0aW9uIHRocm90dGxlIHNsb3QgaW50ZXJ2YWxcIixcImNvbm5lY3Rpb24udGhyb3R0bGVTbG90SW50ZXJ2YWxcIix0aHJvdHRsZVNsb3RJbnRlcnZhbCk7Y29uc3QgaGVhZGVycz17fTtsZXQgdXJsPW51bGw7Y29uc3Qgb3B0aW9ucz17bWV0aG9kOlwiR0VUXCJ9O2xldCBhbGxvdzMwND1mYWxzZTtsZXQgdGltZW91dD0yKjYwKjFlMztpZih0eXBlb2YgY29ubmVjdGlvbj09PVwic3RyaW5nXCIpe3VybD1jb25uZWN0aW9ufWVsc2UgaWYodHlwZW9mIGNvbm5lY3Rpb249PT1cIm9iamVjdFwiKXtpZihjb25uZWN0aW9uPT1udWxsfHxjb25uZWN0aW9uLnVybD09bnVsbCl7bG9nZ2VyJHIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBVUkxcIixcImNvbm5lY3Rpb24udXJsXCIsY29ubmVjdGlvbil9dXJsPWNvbm5lY3Rpb24udXJsO2lmKHR5cGVvZiBjb25uZWN0aW9uLnRpbWVvdXQ9PT1cIm51bWJlclwiJiZjb25uZWN0aW9uLnRpbWVvdXQ+MCl7dGltZW91dD1jb25uZWN0aW9uLnRpbWVvdXR9aWYoY29ubmVjdGlvbi5oZWFkZXJzKXtmb3IoY29uc3Qga2V5IGluIGNvbm5lY3Rpb24uaGVhZGVycyl7aGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV09e2tleTprZXksdmFsdWU6U3RyaW5nKGNvbm5lY3Rpb24uaGVhZGVyc1trZXldKX07aWYoW1wiaWYtbm9uZS1tYXRjaFwiLFwiaWYtbW9kaWZpZWQtc2luY2VcIl0uaW5kZXhPZihrZXkudG9Mb3dlckNhc2UoKSk+PTApe2FsbG93MzA0PXRydWV9fX1vcHRpb25zLmFsbG93R3ppcD0hIWNvbm5lY3Rpb24uYWxsb3dHemlwO2lmKGNvbm5lY3Rpb24udXNlciE9bnVsbCYmY29ubmVjdGlvbi5wYXNzd29yZCE9bnVsbCl7aWYodXJsLnN1YnN0cmluZygwLDYpIT09XCJodHRwczpcIiYmY29ubmVjdGlvbi5hbGxvd0luc2VjdXJlQXV0aGVudGljYXRpb24hPT10cnVlKXtsb2dnZXIkci50aHJvd0Vycm9yKFwiYmFzaWMgYXV0aGVudGljYXRpb24gcmVxdWlyZXMgYSBzZWN1cmUgaHR0cHMgdXJsXCIsTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULHthcmd1bWVudDpcInVybFwiLHVybDp1cmwsdXNlcjpjb25uZWN0aW9uLnVzZXIscGFzc3dvcmQ6XCJbUkVEQUNURURdXCJ9KX1jb25zdCBhdXRob3JpemF0aW9uPWNvbm5lY3Rpb24udXNlcitcIjpcIitjb25uZWN0aW9uLnBhc3N3b3JkO2hlYWRlcnNbXCJhdXRob3JpemF0aW9uXCJdPXtrZXk6XCJBdXRob3JpemF0aW9uXCIsdmFsdWU6XCJCYXNpYyBcIitlbmNvZGUkMSh0b1V0ZjhCeXRlcyhhdXRob3JpemF0aW9uKSl9fX1pZihib2R5KXtvcHRpb25zLm1ldGhvZD1cIlBPU1RcIjtvcHRpb25zLmJvZHk9Ym9keTtpZihoZWFkZXJzW1wiY29udGVudC10eXBlXCJdPT1udWxsKXtoZWFkZXJzW1wiY29udGVudC10eXBlXCJdPXtrZXk6XCJDb250ZW50LVR5cGVcIix2YWx1ZTpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifX1pZihoZWFkZXJzW1wiY29udGVudC1sZW5ndGhcIl09PW51bGwpe2hlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXT17a2V5OlwiQ29udGVudC1MZW5ndGhcIix2YWx1ZTpTdHJpbmcoYm9keS5sZW5ndGgpfX19Y29uc3QgZmxhdEhlYWRlcnM9e307T2JqZWN0LmtleXMoaGVhZGVycykuZm9yRWFjaChrZXk9Pntjb25zdCBoZWFkZXI9aGVhZGVyc1trZXldO2ZsYXRIZWFkZXJzW2hlYWRlci5rZXldPWhlYWRlci52YWx1ZX0pO29wdGlvbnMuaGVhZGVycz1mbGF0SGVhZGVycztjb25zdCBydW5uaW5nVGltZW91dD1mdW5jdGlvbigpe2xldCB0aW1lcj1udWxsO2NvbnN0IHByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2lmKHRpbWVvdXQpe3RpbWVyPXNldFRpbWVvdXQoKCk9PntpZih0aW1lcj09bnVsbCl7cmV0dXJufXRpbWVyPW51bGw7cmVqZWN0KGxvZ2dlciRyLm1ha2VFcnJvcihcInRpbWVvdXRcIixMb2dnZXIuZXJyb3JzLlRJTUVPVVQse3JlcXVlc3RCb2R5OmJvZHlpZnkob3B0aW9ucy5ib2R5LGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxyZXF1ZXN0TWV0aG9kOm9wdGlvbnMubWV0aG9kLHRpbWVvdXQ6dGltZW91dCx1cmw6dXJsfSkpfSx0aW1lb3V0KX19KTtjb25zdCBjYW5jZWw9ZnVuY3Rpb24oKXtpZih0aW1lcj09bnVsbCl7cmV0dXJufWNsZWFyVGltZW91dCh0aW1lcik7dGltZXI9bnVsbH07cmV0dXJue3Byb21pc2U6cHJvbWlzZSxjYW5jZWw6Y2FuY2VsfX0oKTtjb25zdCBydW5uaW5nRmV0Y2g9ZnVuY3Rpb24oKXtyZXR1cm4gX19hd2FpdGVyJDcodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2ZvcihsZXQgYXR0ZW1wdD0wO2F0dGVtcHQ8YXR0ZW1wdExpbWl0O2F0dGVtcHQrKyl7bGV0IHJlc3BvbnNlPW51bGw7dHJ5e3Jlc3BvbnNlPXlpZWxkIGdldFVybCh1cmwsb3B0aW9ucyk7aWYocmVzcG9uc2Uuc3RhdHVzQ29kZT09PTQyOSYmYXR0ZW1wdDxhdHRlbXB0TGltaXQpe2xldCB0cnlBZ2Fpbj10cnVlO2lmKHRocm90dGxlQ2FsbGJhY2spe3RyeUFnYWluPXlpZWxkIHRocm90dGxlQ2FsbGJhY2soYXR0ZW1wdCx1cmwpfWlmKHRyeUFnYWluKXtsZXQgc3RhbGw9MDtjb25zdCByZXRyeUFmdGVyPXJlc3BvbnNlLmhlYWRlcnNbXCJyZXRyeS1hZnRlclwiXTtpZih0eXBlb2YgcmV0cnlBZnRlcj09PVwic3RyaW5nXCImJnJldHJ5QWZ0ZXIubWF0Y2goL15bMS05XVswLTldKiQvKSl7c3RhbGw9cGFyc2VJbnQocmV0cnlBZnRlcikqMWUzfWVsc2V7c3RhbGw9dGhyb3R0bGVTbG90SW50ZXJ2YWwqcGFyc2VJbnQoU3RyaW5nKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMixhdHRlbXB0KSkpfXlpZWxkIHN0YWxsZXIoc3RhbGwpO2NvbnRpbnVlfX19Y2F0Y2goZXJyb3Ipe3Jlc3BvbnNlPWVycm9yLnJlc3BvbnNlO2lmKHJlc3BvbnNlPT1udWxsKXtydW5uaW5nVGltZW91dC5jYW5jZWwoKTtsb2dnZXIkci50aHJvd0Vycm9yKFwibWlzc2luZyByZXNwb25zZVwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHtyZXF1ZXN0Qm9keTpib2R5aWZ5KG9wdGlvbnMuYm9keSxmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkscmVxdWVzdE1ldGhvZDpvcHRpb25zLm1ldGhvZCxzZXJ2ZXJFcnJvcjplcnJvcix1cmw6dXJsfSl9fWxldCBib2R5PXJlc3BvbnNlLmJvZHk7aWYoYWxsb3czMDQmJnJlc3BvbnNlLnN0YXR1c0NvZGU9PT0zMDQpe2JvZHk9bnVsbH1lbHNlIGlmKHJlc3BvbnNlLnN0YXR1c0NvZGU8MjAwfHxyZXNwb25zZS5zdGF0dXNDb2RlPj0zMDApe3J1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO2xvZ2dlciRyLnRocm93RXJyb3IoXCJiYWQgcmVzcG9uc2VcIixMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUix7c3RhdHVzOnJlc3BvbnNlLnN0YXR1c0NvZGUsaGVhZGVyczpyZXNwb25zZS5oZWFkZXJzLGJvZHk6Ym9keWlmeShib2R5LHJlc3BvbnNlLmhlYWRlcnM/cmVzcG9uc2UuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXTpudWxsKSxyZXF1ZXN0Qm9keTpib2R5aWZ5KG9wdGlvbnMuYm9keSxmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkscmVxdWVzdE1ldGhvZDpvcHRpb25zLm1ldGhvZCx1cmw6dXJsfSl9aWYocHJvY2Vzc0Z1bmMpe3RyeXtjb25zdCByZXN1bHQ9eWllbGQgcHJvY2Vzc0Z1bmMoYm9keSxyZXNwb25zZSk7cnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7cmV0dXJuIHJlc3VsdH1jYXRjaChlcnJvcil7aWYoZXJyb3IudGhyb3R0bGVSZXRyeSYmYXR0ZW1wdDxhdHRlbXB0TGltaXQpe2xldCB0cnlBZ2Fpbj10cnVlO2lmKHRocm90dGxlQ2FsbGJhY2spe3RyeUFnYWluPXlpZWxkIHRocm90dGxlQ2FsbGJhY2soYXR0ZW1wdCx1cmwpfWlmKHRyeUFnYWluKXtjb25zdCB0aW1lb3V0PXRocm90dGxlU2xvdEludGVydmFsKnBhcnNlSW50KFN0cmluZyhNYXRoLnJhbmRvbSgpKk1hdGgucG93KDIsYXR0ZW1wdCkpKTt5aWVsZCBzdGFsbGVyKHRpbWVvdXQpO2NvbnRpbnVlfX1ydW5uaW5nVGltZW91dC5jYW5jZWwoKTtsb2dnZXIkci50aHJvd0Vycm9yKFwicHJvY2Vzc2luZyByZXNwb25zZSBlcnJvclwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHtib2R5OmJvZHlpZnkoYm9keSxyZXNwb25zZS5oZWFkZXJzP3Jlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl06bnVsbCksZXJyb3I6ZXJyb3IscmVxdWVzdEJvZHk6Ym9keWlmeShvcHRpb25zLmJvZHksZmxhdEhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0pLHJlcXVlc3RNZXRob2Q6b3B0aW9ucy5tZXRob2QsdXJsOnVybH0pfX1ydW5uaW5nVGltZW91dC5jYW5jZWwoKTtyZXR1cm4gYm9keX1yZXR1cm4gbG9nZ2VyJHIudGhyb3dFcnJvcihcImZhaWxlZCByZXNwb25zZVwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHtyZXF1ZXN0Qm9keTpib2R5aWZ5KG9wdGlvbnMuYm9keSxmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSkscmVxdWVzdE1ldGhvZDpvcHRpb25zLm1ldGhvZCx1cmw6dXJsfSl9KX0oKTtyZXR1cm4gUHJvbWlzZS5yYWNlKFtydW5uaW5nVGltZW91dC5wcm9taXNlLHJ1bm5pbmdGZXRjaF0pfWZ1bmN0aW9uIGZldGNoSnNvbihjb25uZWN0aW9uLGpzb24scHJvY2Vzc0Z1bmMpe2xldCBwcm9jZXNzSnNvbkZ1bmM9KHZhbHVlLHJlc3BvbnNlKT0+e2xldCByZXN1bHQ9bnVsbDtpZih2YWx1ZSE9bnVsbCl7dHJ5e3Jlc3VsdD1KU09OLnBhcnNlKHRvVXRmOFN0cmluZyh2YWx1ZSkpfWNhdGNoKGVycm9yKXtsb2dnZXIkci50aHJvd0Vycm9yKFwiaW52YWxpZCBKU09OXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise2JvZHk6dmFsdWUsZXJyb3I6ZXJyb3J9KX19aWYocHJvY2Vzc0Z1bmMpe3Jlc3VsdD1wcm9jZXNzRnVuYyhyZXN1bHQscmVzcG9uc2UpfXJldHVybiByZXN1bHR9O2xldCBib2R5PW51bGw7aWYoanNvbiE9bnVsbCl7Ym9keT10b1V0ZjhCeXRlcyhqc29uKTtjb25zdCB1cGRhdGVkPXR5cGVvZiBjb25uZWN0aW9uPT09XCJzdHJpbmdcIj97dXJsOmNvbm5lY3Rpb259OnNoYWxsb3dDb3B5KGNvbm5lY3Rpb24pO2lmKHVwZGF0ZWQuaGVhZGVycyl7Y29uc3QgaGFzQ29udGVudFR5cGU9T2JqZWN0LmtleXModXBkYXRlZC5oZWFkZXJzKS5maWx0ZXIoaz0+ay50b0xvd2VyQ2FzZSgpPT09XCJjb250ZW50LXR5cGVcIikubGVuZ3RoIT09MDtpZighaGFzQ29udGVudFR5cGUpe3VwZGF0ZWQuaGVhZGVycz1zaGFsbG93Q29weSh1cGRhdGVkLmhlYWRlcnMpO3VwZGF0ZWQuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXT1cImFwcGxpY2F0aW9uL2pzb25cIn19ZWxzZXt1cGRhdGVkLmhlYWRlcnM9e1wiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi9qc29uXCJ9fWNvbm5lY3Rpb249dXBkYXRlZH1yZXR1cm4gX2ZldGNoRGF0YShjb25uZWN0aW9uLGJvZHkscHJvY2Vzc0pzb25GdW5jKX1mdW5jdGlvbiBwb2xsKGZ1bmMsb3B0aW9ucyl7aWYoIW9wdGlvbnMpe29wdGlvbnM9e319b3B0aW9ucz1zaGFsbG93Q29weShvcHRpb25zKTtpZihvcHRpb25zLmZsb29yPT1udWxsKXtvcHRpb25zLmZsb29yPTB9aWYob3B0aW9ucy5jZWlsaW5nPT1udWxsKXtvcHRpb25zLmNlaWxpbmc9MWU0fWlmKG9wdGlvbnMuaW50ZXJ2YWw9PW51bGwpe29wdGlvbnMuaW50ZXJ2YWw9MjUwfXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7bGV0IHRpbWVyPW51bGw7bGV0IGRvbmU9ZmFsc2U7Y29uc3QgY2FuY2VsPSgpPT57aWYoZG9uZSl7cmV0dXJuIGZhbHNlfWRvbmU9dHJ1ZTtpZih0aW1lcil7Y2xlYXJUaW1lb3V0KHRpbWVyKX1yZXR1cm4gdHJ1ZX07aWYob3B0aW9ucy50aW1lb3V0KXt0aW1lcj1zZXRUaW1lb3V0KCgpPT57aWYoY2FuY2VsKCkpe3JlamVjdChuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKX19LG9wdGlvbnMudGltZW91dCl9Y29uc3QgcmV0cnlMaW1pdD1vcHRpb25zLnJldHJ5TGltaXQ7bGV0IGF0dGVtcHQ9MDtmdW5jdGlvbiBjaGVjaygpe3JldHVybiBmdW5jKCkudGhlbihmdW5jdGlvbihyZXN1bHQpe2lmKHJlc3VsdCE9PXVuZGVmaW5lZCl7aWYoY2FuY2VsKCkpe3Jlc29sdmUocmVzdWx0KX19ZWxzZSBpZihvcHRpb25zLm9uY2VQb2xsKXtvcHRpb25zLm9uY2VQb2xsLm9uY2UoXCJwb2xsXCIsY2hlY2spfWVsc2UgaWYob3B0aW9ucy5vbmNlQmxvY2spe29wdGlvbnMub25jZUJsb2NrLm9uY2UoXCJibG9ja1wiLGNoZWNrKX1lbHNlIGlmKCFkb25lKXthdHRlbXB0Kys7aWYoYXR0ZW1wdD5yZXRyeUxpbWl0KXtpZihjYW5jZWwoKSl7cmVqZWN0KG5ldyBFcnJvcihcInJldHJ5IGxpbWl0IHJlYWNoZWRcIikpfXJldHVybn1sZXQgdGltZW91dD1vcHRpb25zLmludGVydmFsKnBhcnNlSW50KFN0cmluZyhNYXRoLnJhbmRvbSgpKk1hdGgucG93KDIsYXR0ZW1wdCkpKTtpZih0aW1lb3V0PG9wdGlvbnMuZmxvb3Ipe3RpbWVvdXQ9b3B0aW9ucy5mbG9vcn1pZih0aW1lb3V0Pm9wdGlvbnMuY2VpbGluZyl7dGltZW91dD1vcHRpb25zLmNlaWxpbmd9c2V0VGltZW91dChjaGVjayx0aW1lb3V0KX1yZXR1cm4gbnVsbH0sZnVuY3Rpb24oZXJyb3Ipe2lmKGNhbmNlbCgpKXtyZWplY3QoZXJyb3IpfX0pfWNoZWNrKCl9KX1cInVzZSBzdHJpY3RcIjt2YXIgQUxQSEFCRVQ9XCJxcHpyeTl4OGdmMnR2ZHcwczNqbjU0a2hjZTZtdWE3bFwiO3ZhciBBTFBIQUJFVF9NQVA9e307Zm9yKHZhciB6PTA7ejxBTFBIQUJFVC5sZW5ndGg7eisrKXt2YXIgeD1BTFBIQUJFVC5jaGFyQXQoeik7aWYoQUxQSEFCRVRfTUFQW3hdIT09dW5kZWZpbmVkKXRocm93IG5ldyBUeXBlRXJyb3IoeCtcIiBpcyBhbWJpZ3VvdXNcIik7QUxQSEFCRVRfTUFQW3hdPXp9ZnVuY3Rpb24gcG9seW1vZFN0ZXAocHJlKXt2YXIgYj1wcmU+PjI1O3JldHVybihwcmUmMzM1NTQ0MzEpPDw1Xi0oYj4+MCYxKSY5OTY4MjUwMTBeLShiPj4xJjEpJjY0MjgxMzU0OV4tKGI+PjImMSkmNTEzODc0NDI2Xi0oYj4+MyYxKSYxMDI3NzQ4ODI5Xi0oYj4+NCYxKSY3MDU5NzkwNTl9ZnVuY3Rpb24gcHJlZml4Q2hrKHByZWZpeCl7dmFyIGNoaz0xO2Zvcih2YXIgaT0wO2k8cHJlZml4Lmxlbmd0aDsrK2kpe3ZhciBjPXByZWZpeC5jaGFyQ29kZUF0KGkpO2lmKGM8MzN8fGM+MTI2KXJldHVyblwiSW52YWxpZCBwcmVmaXggKFwiK3ByZWZpeCtcIilcIjtjaGs9cG9seW1vZFN0ZXAoY2hrKV5jPj41fWNoaz1wb2x5bW9kU3RlcChjaGspO2ZvcihpPTA7aTxwcmVmaXgubGVuZ3RoOysraSl7dmFyIHY9cHJlZml4LmNoYXJDb2RlQXQoaSk7Y2hrPXBvbHltb2RTdGVwKGNoaylediYzMX1yZXR1cm4gY2hrfWZ1bmN0aW9uIGVuY29kZSQyKHByZWZpeCx3b3JkcyxMSU1JVCl7TElNSVQ9TElNSVR8fDkwO2lmKHByZWZpeC5sZW5ndGgrNyt3b3Jkcy5sZW5ndGg+TElNSVQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO3ByZWZpeD1wcmVmaXgudG9Mb3dlckNhc2UoKTt2YXIgY2hrPXByZWZpeENoayhwcmVmaXgpO2lmKHR5cGVvZiBjaGs9PT1cInN0cmluZ1wiKXRocm93IG5ldyBFcnJvcihjaGspO3ZhciByZXN1bHQ9cHJlZml4K1wiMVwiO2Zvcih2YXIgaT0wO2k8d29yZHMubGVuZ3RoOysraSl7dmFyIHg9d29yZHNbaV07aWYoeD4+NSE9PTApdGhyb3cgbmV3IEVycm9yKFwiTm9uIDUtYml0IHdvcmRcIik7Y2hrPXBvbHltb2RTdGVwKGNoayleeDtyZXN1bHQrPUFMUEhBQkVULmNoYXJBdCh4KX1mb3IoaT0wO2k8NjsrK2kpe2Noaz1wb2x5bW9kU3RlcChjaGspfWNoa149MTtmb3IoaT0wO2k8NjsrK2kpe3ZhciB2PWNoaz4+KDUtaSkqNSYzMTtyZXN1bHQrPUFMUEhBQkVULmNoYXJBdCh2KX1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIF9fZGVjb2RlKHN0cixMSU1JVCl7TElNSVQ9TElNSVR8fDkwO2lmKHN0ci5sZW5ndGg8OClyZXR1cm4gc3RyK1wiIHRvbyBzaG9ydFwiO2lmKHN0ci5sZW5ndGg+TElNSVQpcmV0dXJuXCJFeGNlZWRzIGxlbmd0aCBsaW1pdFwiO3ZhciBsb3dlcmVkPXN0ci50b0xvd2VyQ2FzZSgpO3ZhciB1cHBlcmVkPXN0ci50b1VwcGVyQ2FzZSgpO2lmKHN0ciE9PWxvd2VyZWQmJnN0ciE9PXVwcGVyZWQpcmV0dXJuXCJNaXhlZC1jYXNlIHN0cmluZyBcIitzdHI7c3RyPWxvd2VyZWQ7dmFyIHNwbGl0PXN0ci5sYXN0SW5kZXhPZihcIjFcIik7aWYoc3BsaXQ9PT0tMSlyZXR1cm5cIk5vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yIFwiK3N0cjtpZihzcGxpdD09PTApcmV0dXJuXCJNaXNzaW5nIHByZWZpeCBmb3IgXCIrc3RyO3ZhciBwcmVmaXg9c3RyLnNsaWNlKDAsc3BsaXQpO3ZhciB3b3JkQ2hhcnM9c3RyLnNsaWNlKHNwbGl0KzEpO2lmKHdvcmRDaGFycy5sZW5ndGg8NilyZXR1cm5cIkRhdGEgdG9vIHNob3J0XCI7dmFyIGNoaz1wcmVmaXhDaGsocHJlZml4KTtpZih0eXBlb2YgY2hrPT09XCJzdHJpbmdcIilyZXR1cm4gY2hrO3ZhciB3b3Jkcz1bXTtmb3IodmFyIGk9MDtpPHdvcmRDaGFycy5sZW5ndGg7KytpKXt2YXIgYz13b3JkQ2hhcnMuY2hhckF0KGkpO3ZhciB2PUFMUEhBQkVUX01BUFtjXTtpZih2PT09dW5kZWZpbmVkKXJldHVyblwiVW5rbm93biBjaGFyYWN0ZXIgXCIrYztjaGs9cG9seW1vZFN0ZXAoY2hrKV52O2lmKGkrNj49d29yZENoYXJzLmxlbmd0aCljb250aW51ZTt3b3Jkcy5wdXNoKHYpfWlmKGNoayE9PTEpcmV0dXJuXCJJbnZhbGlkIGNoZWNrc3VtIGZvciBcIitzdHI7cmV0dXJue3ByZWZpeDpwcmVmaXgsd29yZHM6d29yZHN9fWZ1bmN0aW9uIGRlY29kZVVuc2FmZSgpe3ZhciByZXM9X19kZWNvZGUuYXBwbHkobnVsbCxhcmd1bWVudHMpO2lmKHR5cGVvZiByZXM9PT1cIm9iamVjdFwiKXJldHVybiByZXN9ZnVuY3Rpb24gZGVjb2RlJDIoc3RyKXt2YXIgcmVzPV9fZGVjb2RlLmFwcGx5KG51bGwsYXJndW1lbnRzKTtpZih0eXBlb2YgcmVzPT09XCJvYmplY3RcIilyZXR1cm4gcmVzO3Rocm93IG5ldyBFcnJvcihyZXMpfWZ1bmN0aW9uIGNvbnZlcnQoZGF0YSxpbkJpdHMsb3V0Qml0cyxwYWQpe3ZhciB2YWx1ZT0wO3ZhciBiaXRzPTA7dmFyIG1heFY9KDE8PG91dEJpdHMpLTE7dmFyIHJlc3VsdD1bXTtmb3IodmFyIGk9MDtpPGRhdGEubGVuZ3RoOysraSl7dmFsdWU9dmFsdWU8PGluQml0c3xkYXRhW2ldO2JpdHMrPWluQml0czt3aGlsZShiaXRzPj1vdXRCaXRzKXtiaXRzLT1vdXRCaXRzO3Jlc3VsdC5wdXNoKHZhbHVlPj5iaXRzJm1heFYpfX1pZihwYWQpe2lmKGJpdHM+MCl7cmVzdWx0LnB1c2godmFsdWU8PG91dEJpdHMtYml0cyZtYXhWKX19ZWxzZXtpZihiaXRzPj1pbkJpdHMpcmV0dXJuXCJFeGNlc3MgcGFkZGluZ1wiO2lmKHZhbHVlPDxvdXRCaXRzLWJpdHMmbWF4VilyZXR1cm5cIk5vbi16ZXJvIHBhZGRpbmdcIn1yZXR1cm4gcmVzdWx0fWZ1bmN0aW9uIHRvV29yZHNVbnNhZmUoYnl0ZXMpe3ZhciByZXM9Y29udmVydChieXRlcyw4LDUsdHJ1ZSk7aWYoQXJyYXkuaXNBcnJheShyZXMpKXJldHVybiByZXN9ZnVuY3Rpb24gdG9Xb3JkcyhieXRlcyl7dmFyIHJlcz1jb252ZXJ0KGJ5dGVzLDgsNSx0cnVlKTtpZihBcnJheS5pc0FycmF5KHJlcykpcmV0dXJuIHJlczt0aHJvdyBuZXcgRXJyb3IocmVzKX1mdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUod29yZHMpe3ZhciByZXM9Y29udmVydCh3b3Jkcyw1LDgsZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkocmVzKSlyZXR1cm4gcmVzfWZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcyl7dmFyIHJlcz1jb252ZXJ0KHdvcmRzLDUsOCxmYWxzZSk7aWYoQXJyYXkuaXNBcnJheShyZXMpKXJldHVybiByZXM7dGhyb3cgbmV3IEVycm9yKHJlcyl9dmFyIGJlY2gzMj17ZGVjb2RlVW5zYWZlOmRlY29kZVVuc2FmZSxkZWNvZGU6ZGVjb2RlJDIsZW5jb2RlOmVuY29kZSQyLHRvV29yZHNVbnNhZmU6dG9Xb3Jkc1Vuc2FmZSx0b1dvcmRzOnRvV29yZHMsZnJvbVdvcmRzVW5zYWZlOmZyb21Xb3Jkc1Vuc2FmZSxmcm9tV29yZHM6ZnJvbVdvcmRzfTtjb25zdCB2ZXJzaW9uJG09XCJwcm92aWRlcnMvNS4xLjJcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkcz1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y2xhc3MgRm9ybWF0dGVye2NvbnN0cnVjdG9yKCl7bG9nZ2VyJHMuY2hlY2tOZXcobmV3LnRhcmdldCxGb3JtYXR0ZXIpO3RoaXMuZm9ybWF0cz10aGlzLmdldERlZmF1bHRGb3JtYXRzKCl9Z2V0RGVmYXVsdEZvcm1hdHMoKXtjb25zdCBmb3JtYXRzPXt9O2NvbnN0IGFkZHJlc3M9dGhpcy5hZGRyZXNzLmJpbmQodGhpcyk7Y29uc3QgYmlnTnVtYmVyPXRoaXMuYmlnTnVtYmVyLmJpbmQodGhpcyk7Y29uc3QgYmxvY2tUYWc9dGhpcy5ibG9ja1RhZy5iaW5kKHRoaXMpO2NvbnN0IGRhdGE9dGhpcy5kYXRhLmJpbmQodGhpcyk7Y29uc3QgaGFzaD10aGlzLmhhc2guYmluZCh0aGlzKTtjb25zdCBoZXg9dGhpcy5oZXguYmluZCh0aGlzKTtjb25zdCBudW1iZXI9dGhpcy5udW1iZXIuYmluZCh0aGlzKTtjb25zdCBzdHJpY3REYXRhPXY9PntyZXR1cm4gdGhpcy5kYXRhKHYsdHJ1ZSl9O2Zvcm1hdHMudHJhbnNhY3Rpb249e2hhc2g6aGFzaCx0eXBlOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLG51bGwpLGFjY2Vzc0xpc3Q6Rm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFjY2Vzc0xpc3QuYmluZCh0aGlzKSxudWxsKSxibG9ja0hhc2g6Rm9ybWF0dGVyLmFsbG93TnVsbChoYXNoLG51bGwpLGJsb2NrTnVtYmVyOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyLG51bGwpLHRyYW5zYWN0aW9uSW5kZXg6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsbnVsbCksY29uZmlybWF0aW9uczpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlcixudWxsKSxmcm9tOmFkZHJlc3MsZ2FzUHJpY2U6YmlnTnVtYmVyLGdhc0xpbWl0OmJpZ051bWJlcix0bzpGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MsbnVsbCksdmFsdWU6YmlnTnVtYmVyLG5vbmNlOm51bWJlcixkYXRhOmRhdGEscjpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMudWludDI1NiksczpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMudWludDI1NiksdjpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksY3JlYXRlczpGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MsbnVsbCkscmF3OkZvcm1hdHRlci5hbGxvd051bGwoZGF0YSl9O2Zvcm1hdHMudHJhbnNhY3Rpb25SZXF1ZXN0PXtmcm9tOkZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcyksbm9uY2U6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIpLGdhc0xpbWl0OkZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxnYXNQcmljZTpGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksdG86Rm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzKSx2YWx1ZTpGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksZGF0YTpGb3JtYXR0ZXIuYWxsb3dOdWxsKHN0cmljdERhdGEpLHR5cGU6Rm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIpLGFjY2Vzc0xpc3Q6Rm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFjY2Vzc0xpc3QuYmluZCh0aGlzKSxudWxsKX07Zm9ybWF0cy5yZWNlaXB0TG9nPXt0cmFuc2FjdGlvbkluZGV4Om51bWJlcixibG9ja051bWJlcjpudW1iZXIsdHJhbnNhY3Rpb25IYXNoOmhhc2gsYWRkcmVzczphZGRyZXNzLHRvcGljczpGb3JtYXR0ZXIuYXJyYXlPZihoYXNoKSxkYXRhOmRhdGEsbG9nSW5kZXg6bnVtYmVyLGJsb2NrSGFzaDpoYXNofTtmb3JtYXRzLnJlY2VpcHQ9e3RvOkZvcm1hdHRlci5hbGxvd051bGwodGhpcy5hZGRyZXNzLG51bGwpLGZyb206Rm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFkZHJlc3MsbnVsbCksY29udHJhY3RBZGRyZXNzOkZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcyxudWxsKSx0cmFuc2FjdGlvbkluZGV4Om51bWJlcixyb290OkZvcm1hdHRlci5hbGxvd051bGwoaGV4KSxnYXNVc2VkOmJpZ051bWJlcixsb2dzQmxvb206Rm9ybWF0dGVyLmFsbG93TnVsbChkYXRhKSxibG9ja0hhc2g6aGFzaCx0cmFuc2FjdGlvbkhhc2g6aGFzaCxsb2dzOkZvcm1hdHRlci5hcnJheU9mKHRoaXMucmVjZWlwdExvZy5iaW5kKHRoaXMpKSxibG9ja051bWJlcjpudW1iZXIsY29uZmlybWF0aW9uczpGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlcixudWxsKSxjdW11bGF0aXZlR2FzVXNlZDpiaWdOdW1iZXIsc3RhdHVzOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKX07Zm9ybWF0cy5ibG9jaz17aGFzaDpoYXNoLHBhcmVudEhhc2g6aGFzaCxudW1iZXI6bnVtYmVyLHRpbWVzdGFtcDpudW1iZXIsbm9uY2U6Rm9ybWF0dGVyLmFsbG93TnVsbChoZXgpLGRpZmZpY3VsdHk6dGhpcy5kaWZmaWN1bHR5LmJpbmQodGhpcyksZ2FzTGltaXQ6YmlnTnVtYmVyLGdhc1VzZWQ6YmlnTnVtYmVyLG1pbmVyOmFkZHJlc3MsZXh0cmFEYXRhOmRhdGEsdHJhbnNhY3Rpb25zOkZvcm1hdHRlci5hbGxvd051bGwoRm9ybWF0dGVyLmFycmF5T2YoaGFzaCkpfTtmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucz1zaGFsbG93Q29weShmb3JtYXRzLmJsb2NrKTtmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucy50cmFuc2FjdGlvbnM9Rm9ybWF0dGVyLmFsbG93TnVsbChGb3JtYXR0ZXIuYXJyYXlPZih0aGlzLnRyYW5zYWN0aW9uUmVzcG9uc2UuYmluZCh0aGlzKSkpO2Zvcm1hdHMuZmlsdGVyPXtmcm9tQmxvY2s6Rm9ybWF0dGVyLmFsbG93TnVsbChibG9ja1RhZyx1bmRlZmluZWQpLHRvQmxvY2s6Rm9ybWF0dGVyLmFsbG93TnVsbChibG9ja1RhZyx1bmRlZmluZWQpLGJsb2NrSGFzaDpGb3JtYXR0ZXIuYWxsb3dOdWxsKGhhc2gsdW5kZWZpbmVkKSxhZGRyZXNzOkZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcyx1bmRlZmluZWQpLHRvcGljczpGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMudG9waWNzLmJpbmQodGhpcyksdW5kZWZpbmVkKX07Zm9ybWF0cy5maWx0ZXJMb2c9e2Jsb2NrTnVtYmVyOkZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxibG9ja0hhc2g6Rm9ybWF0dGVyLmFsbG93TnVsbChoYXNoKSx0cmFuc2FjdGlvbkluZGV4Om51bWJlcixyZW1vdmVkOkZvcm1hdHRlci5hbGxvd051bGwodGhpcy5ib29sZWFuLmJpbmQodGhpcykpLGFkZHJlc3M6YWRkcmVzcyxkYXRhOkZvcm1hdHRlci5hbGxvd0ZhbHNpc2goZGF0YSxcIjB4XCIpLHRvcGljczpGb3JtYXR0ZXIuYXJyYXlPZihoYXNoKSx0cmFuc2FjdGlvbkhhc2g6aGFzaCxsb2dJbmRleDpudW1iZXJ9O3JldHVybiBmb3JtYXRzfWFjY2Vzc0xpc3QoYWNjZXNzTGlzdCl7cmV0dXJuIGFjY2Vzc0xpc3RpZnkoYWNjZXNzTGlzdHx8W10pfW51bWJlcihudW1iZXIpe2lmKG51bWJlcj09PVwiMHhcIil7cmV0dXJuIDB9cmV0dXJuIEJpZ051bWJlci5mcm9tKG51bWJlcikudG9OdW1iZXIoKX1iaWdOdW1iZXIodmFsdWUpe3JldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSl9Ym9vbGVhbih2YWx1ZSl7aWYodHlwZW9mIHZhbHVlPT09XCJib29sZWFuXCIpe3JldHVybiB2YWx1ZX1pZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXt2YWx1ZT12YWx1ZS50b0xvd2VyQ2FzZSgpO2lmKHZhbHVlPT09XCJ0cnVlXCIpe3JldHVybiB0cnVlfWlmKHZhbHVlPT09XCJmYWxzZVwiKXtyZXR1cm4gZmFsc2V9fXRocm93IG5ldyBFcnJvcihcImludmFsaWQgYm9vbGVhbiAtIFwiK3ZhbHVlKX1oZXgodmFsdWUsc3RyaWN0KXtpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtpZighc3RyaWN0JiZ2YWx1ZS5zdWJzdHJpbmcoMCwyKSE9PVwiMHhcIil7dmFsdWU9XCIweFwiK3ZhbHVlfWlmKGlzSGV4U3RyaW5nKHZhbHVlKSl7cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCl9fXJldHVybiBsb2dnZXIkcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhhc2hcIixcInZhbHVlXCIsdmFsdWUpfWRhdGEodmFsdWUsc3RyaWN0KXtjb25zdCByZXN1bHQ9dGhpcy5oZXgodmFsdWUsc3RyaWN0KTtpZihyZXN1bHQubGVuZ3RoJTIhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGRhdGE7IG9kZC1sZW5ndGggLSBcIit2YWx1ZSl9cmV0dXJuIHJlc3VsdH1hZGRyZXNzKHZhbHVlKXtyZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSl9Y2FsbEFkZHJlc3ModmFsdWUpe2lmKCFpc0hleFN0cmluZyh2YWx1ZSwzMikpe3JldHVybiBudWxsfWNvbnN0IGFkZHJlc3M9Z2V0QWRkcmVzcyhoZXhEYXRhU2xpY2UodmFsdWUsMTIpKTtyZXR1cm4gYWRkcmVzcz09PUFkZHJlc3NaZXJvP251bGw6YWRkcmVzc31jb250cmFjdEFkZHJlc3ModmFsdWUpe3JldHVybiBnZXRDb250cmFjdEFkZHJlc3ModmFsdWUpfWJsb2NrVGFnKGJsb2NrVGFnKXtpZihibG9ja1RhZz09bnVsbCl7cmV0dXJuXCJsYXRlc3RcIn1pZihibG9ja1RhZz09PVwiZWFybGllc3RcIil7cmV0dXJuXCIweDBcIn1pZihibG9ja1RhZz09PVwibGF0ZXN0XCJ8fGJsb2NrVGFnPT09XCJwZW5kaW5nXCIpe3JldHVybiBibG9ja1RhZ31pZih0eXBlb2YgYmxvY2tUYWc9PT1cIm51bWJlclwifHxpc0hleFN0cmluZyhibG9ja1RhZykpe3JldHVybiBoZXhWYWx1ZShibG9ja1RhZyl9dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBibG9ja1RhZ1wiKX1oYXNoKHZhbHVlLHN0cmljdCl7Y29uc3QgcmVzdWx0PXRoaXMuaGV4KHZhbHVlLHN0cmljdCk7aWYoaGV4RGF0YUxlbmd0aChyZXN1bHQpIT09MzIpe3JldHVybiBsb2dnZXIkcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhhc2hcIixcInZhbHVlXCIsdmFsdWUpfXJldHVybiByZXN1bHR9ZGlmZmljdWx0eSh2YWx1ZSl7aWYodmFsdWU9PW51bGwpe3JldHVybiBudWxsfWNvbnN0IHY9QmlnTnVtYmVyLmZyb20odmFsdWUpO3RyeXtyZXR1cm4gdi50b051bWJlcigpfWNhdGNoKGVycm9yKXt9cmV0dXJuIG51bGx9dWludDI1Nih2YWx1ZSl7aWYoIWlzSGV4U3RyaW5nKHZhbHVlKSl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1aW50MjU2XCIpfXJldHVybiBoZXhaZXJvUGFkKHZhbHVlLDMyKX1fYmxvY2sodmFsdWUsZm9ybWF0KXtpZih2YWx1ZS5hdXRob3IhPW51bGwmJnZhbHVlLm1pbmVyPT1udWxsKXt2YWx1ZS5taW5lcj12YWx1ZS5hdXRob3J9cmV0dXJuIEZvcm1hdHRlci5jaGVjayhmb3JtYXQsdmFsdWUpfWJsb2NrKHZhbHVlKXtyZXR1cm4gdGhpcy5fYmxvY2sodmFsdWUsdGhpcy5mb3JtYXRzLmJsb2NrKX1ibG9ja1dpdGhUcmFuc2FjdGlvbnModmFsdWUpe3JldHVybiB0aGlzLl9ibG9jayh2YWx1ZSx0aGlzLmZvcm1hdHMuYmxvY2tXaXRoVHJhbnNhY3Rpb25zKX10cmFuc2FjdGlvblJlcXVlc3QodmFsdWUpe3JldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnRyYW5zYWN0aW9uUmVxdWVzdCx2YWx1ZSl9dHJhbnNhY3Rpb25SZXNwb25zZSh0cmFuc2FjdGlvbil7aWYodHJhbnNhY3Rpb24uZ2FzIT1udWxsJiZ0cmFuc2FjdGlvbi5nYXNMaW1pdD09bnVsbCl7dHJhbnNhY3Rpb24uZ2FzTGltaXQ9dHJhbnNhY3Rpb24uZ2FzfWlmKHRyYW5zYWN0aW9uLnRvJiZCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi50bykuaXNaZXJvKCkpe3RyYW5zYWN0aW9uLnRvPVwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCJ9aWYodHJhbnNhY3Rpb24uaW5wdXQhPW51bGwmJnRyYW5zYWN0aW9uLmRhdGE9PW51bGwpe3RyYW5zYWN0aW9uLmRhdGE9dHJhbnNhY3Rpb24uaW5wdXR9aWYodHJhbnNhY3Rpb24udG89PW51bGwmJnRyYW5zYWN0aW9uLmNyZWF0ZXM9PW51bGwpe3RyYW5zYWN0aW9uLmNyZWF0ZXM9dGhpcy5jb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb24pfWlmKHRyYW5zYWN0aW9uLnR5cGU9PT0xJiZ0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0PT1udWxsKXt0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0PVtdfWNvbnN0IHJlc3VsdD1Gb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnRyYW5zYWN0aW9uLHRyYW5zYWN0aW9uKTtpZih0cmFuc2FjdGlvbi5jaGFpbklkIT1udWxsKXtsZXQgY2hhaW5JZD10cmFuc2FjdGlvbi5jaGFpbklkO2lmKGlzSGV4U3RyaW5nKGNoYWluSWQpKXtjaGFpbklkPUJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCl9cmVzdWx0LmNoYWluSWQ9Y2hhaW5JZH1lbHNle2xldCBjaGFpbklkPXRyYW5zYWN0aW9uLm5ldHdvcmtJZDtpZihjaGFpbklkPT1udWxsJiZyZXN1bHQudj09bnVsbCl7Y2hhaW5JZD10cmFuc2FjdGlvbi5jaGFpbklkfWlmKGlzSGV4U3RyaW5nKGNoYWluSWQpKXtjaGFpbklkPUJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCl9aWYodHlwZW9mIGNoYWluSWQhPT1cIm51bWJlclwiJiZyZXN1bHQudiE9bnVsbCl7Y2hhaW5JZD0ocmVzdWx0LnYtMzUpLzI7aWYoY2hhaW5JZDwwKXtjaGFpbklkPTB9Y2hhaW5JZD1wYXJzZUludChjaGFpbklkKX1pZih0eXBlb2YgY2hhaW5JZCE9PVwibnVtYmVyXCIpe2NoYWluSWQ9MH1yZXN1bHQuY2hhaW5JZD1jaGFpbklkfWlmKHJlc3VsdC5ibG9ja0hhc2gmJnJlc3VsdC5ibG9ja0hhc2gucmVwbGFjZSgvMC9nLFwiXCIpPT09XCJ4XCIpe3Jlc3VsdC5ibG9ja0hhc2g9bnVsbH1yZXR1cm4gcmVzdWx0fXRyYW5zYWN0aW9uKHZhbHVlKXtyZXR1cm4gcGFyc2UodmFsdWUpfXJlY2VpcHRMb2codmFsdWUpe3JldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnJlY2VpcHRMb2csdmFsdWUpfXJlY2VpcHQodmFsdWUpe2NvbnN0IHJlc3VsdD1Gb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnJlY2VpcHQsdmFsdWUpO2lmKHJlc3VsdC5yb290IT1udWxsKXtpZihyZXN1bHQucm9vdC5sZW5ndGg8PTQpe2NvbnN0IHZhbHVlPUJpZ051bWJlci5mcm9tKHJlc3VsdC5yb290KS50b051bWJlcigpO2lmKHZhbHVlPT09MHx8dmFsdWU9PT0xKXtpZihyZXN1bHQuc3RhdHVzIT1udWxsJiZyZXN1bHQuc3RhdHVzIT09dmFsdWUpe2xvZ2dlciRzLnRocm93QXJndW1lbnRFcnJvcihcImFsdC1yb290LXN0YXR1cy9zdGF0dXMgbWlzbWF0Y2hcIixcInZhbHVlXCIse3Jvb3Q6cmVzdWx0LnJvb3Qsc3RhdHVzOnJlc3VsdC5zdGF0dXN9KX1yZXN1bHQuc3RhdHVzPXZhbHVlO2RlbGV0ZSByZXN1bHQucm9vdH1lbHNle2xvZ2dlciRzLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWx0LXJvb3Qtc3RhdHVzXCIsXCJ2YWx1ZS5yb290XCIscmVzdWx0LnJvb3QpfX1lbHNlIGlmKHJlc3VsdC5yb290Lmxlbmd0aCE9PTY2KXtsb2dnZXIkcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHJvb3QgaGFzaFwiLFwidmFsdWUucm9vdFwiLHJlc3VsdC5yb290KX19aWYocmVzdWx0LnN0YXR1cyE9bnVsbCl7cmVzdWx0LmJ5emFudGl1bT10cnVlfXJldHVybiByZXN1bHR9dG9waWNzKHZhbHVlKXtpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7cmV0dXJuIHZhbHVlLm1hcCh2PT50aGlzLnRvcGljcyh2KSl9ZWxzZSBpZih2YWx1ZSE9bnVsbCl7cmV0dXJuIHRoaXMuaGFzaCh2YWx1ZSx0cnVlKX1yZXR1cm4gbnVsbH1maWx0ZXIodmFsdWUpe3JldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLmZpbHRlcix2YWx1ZSl9ZmlsdGVyTG9nKHZhbHVlKXtyZXR1cm4gRm9ybWF0dGVyLmNoZWNrKHRoaXMuZm9ybWF0cy5maWx0ZXJMb2csdmFsdWUpfXN0YXRpYyBjaGVjayhmb3JtYXQsb2JqZWN0KXtjb25zdCByZXN1bHQ9e307Zm9yKGNvbnN0IGtleSBpbiBmb3JtYXQpe3RyeXtjb25zdCB2YWx1ZT1mb3JtYXRba2V5XShvYmplY3Rba2V5XSk7aWYodmFsdWUhPT11bmRlZmluZWQpe3Jlc3VsdFtrZXldPXZhbHVlfX1jYXRjaChlcnJvcil7ZXJyb3IuY2hlY2tLZXk9a2V5O2Vycm9yLmNoZWNrVmFsdWU9b2JqZWN0W2tleV07dGhyb3cgZXJyb3J9fXJldHVybiByZXN1bHR9c3RhdGljIGFsbG93TnVsbChmb3JtYXQsbnVsbFZhbHVlKXtyZXR1cm4gZnVuY3Rpb24odmFsdWUpe2lmKHZhbHVlPT1udWxsKXtyZXR1cm4gbnVsbFZhbHVlfXJldHVybiBmb3JtYXQodmFsdWUpfX1zdGF0aWMgYWxsb3dGYWxzaXNoKGZvcm1hdCxyZXBsYWNlVmFsdWUpe3JldHVybiBmdW5jdGlvbih2YWx1ZSl7aWYoIXZhbHVlKXtyZXR1cm4gcmVwbGFjZVZhbHVlfXJldHVybiBmb3JtYXQodmFsdWUpfX1zdGF0aWMgYXJyYXlPZihmb3JtYXQpe3JldHVybiBmdW5jdGlvbihhcnJheSl7aWYoIUFycmF5LmlzQXJyYXkoYXJyYXkpKXt0aHJvdyBuZXcgRXJyb3IoXCJub3QgYW4gYXJyYXlcIil9Y29uc3QgcmVzdWx0PVtdO2FycmF5LmZvckVhY2goZnVuY3Rpb24odmFsdWUpe3Jlc3VsdC5wdXNoKGZvcm1hdCh2YWx1ZSkpfSk7cmV0dXJuIHJlc3VsdH19fWZ1bmN0aW9uIGlzQ29tbXVuaXR5UmVzb3VyY2FibGUodmFsdWUpe3JldHVybiB2YWx1ZSYmdHlwZW9mIHZhbHVlLmlzQ29tbXVuaXR5UmVzb3VyY2U9PT1cImZ1bmN0aW9uXCJ9ZnVuY3Rpb24gaXNDb21tdW5pdHlSZXNvdXJjZSh2YWx1ZSl7cmV0dXJuIGlzQ29tbXVuaXR5UmVzb3VyY2FibGUodmFsdWUpJiZ2YWx1ZS5pc0NvbW11bml0eVJlc291cmNlKCl9bGV0IHRocm90dGxlTWVzc2FnZT1mYWxzZTtmdW5jdGlvbiBzaG93VGhyb3R0bGVNZXNzYWdlKCl7aWYodGhyb3R0bGVNZXNzYWdlKXtyZXR1cm59dGhyb3R0bGVNZXNzYWdlPXRydWU7Y29uc29sZS5sb2coXCI9PT09PT09PT0gTk9USUNFID09PT09PT09PVwiKTtjb25zb2xlLmxvZyhcIlJlcXVlc3QtUmF0ZSBFeGNlZWRlZCAgKHRoaXMgbWVzc2FnZSB3aWxsIG5vdCBiZSByZXBlYXRlZClcIik7Y29uc29sZS5sb2coXCJcIik7Y29uc29sZS5sb2coXCJUaGUgZGVmYXVsdCBBUEkga2V5cyBmb3IgZWFjaCBzZXJ2aWNlIGFyZSBwcm92aWRlZCBhcyBhIGhpZ2hseS10aHJvdHRsZWQsXCIpO2NvbnNvbGUubG9nKFwiY29tbXVuaXR5IHJlc291cmNlIGZvciBsb3ctdHJhZmZpYyBwcm9qZWN0cyBhbmQgZWFybHkgcHJvdG90eXBpbmcuXCIpO2NvbnNvbGUubG9nKFwiXCIpO2NvbnNvbGUubG9nKFwiV2hpbGUgeW91ciBhcHBsaWNhdGlvbiB3aWxsIGNvbnRpbnVlIHRvIGZ1bmN0aW9uLCB3ZSBoaWdobHkgcmVjb21tZW5kZWRcIik7Y29uc29sZS5sb2coXCJzaWduaW5nIHVwIGZvciB5b3VyIG93biBBUEkga2V5cyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLCBpbmNyZWFzZSB5b3VyXCIpO2NvbnNvbGUubG9nKFwicmVxdWVzdCByYXRlL2xpbWl0IGFuZCBlbmFibGUgb3RoZXIgcGVya3MsIHN1Y2ggYXMgbWV0cmljcyBhbmQgYWR2YW5jZWQgQVBJcy5cIik7Y29uc29sZS5sb2coXCJcIik7Y29uc29sZS5sb2coXCJGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2RvY3MuZXRoZXJzLmlvL2FwaS1rZXlzL1wiKTtjb25zb2xlLmxvZyhcIj09PT09PT09PT09PT09PT09PT09PT09PT09XCIpfVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkOD13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHQ9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2Z1bmN0aW9uIGNoZWNrVG9waWModG9waWMpe2lmKHRvcGljPT1udWxsKXtyZXR1cm5cIm51bGxcIn1pZihoZXhEYXRhTGVuZ3RoKHRvcGljKSE9PTMyKXtsb2dnZXIkdC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRvcGljXCIsXCJ0b3BpY1wiLHRvcGljKX1yZXR1cm4gdG9waWMudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBzZXJpYWxpemVUb3BpY3ModG9waWNzKXt0b3BpY3M9dG9waWNzLnNsaWNlKCk7d2hpbGUodG9waWNzLmxlbmd0aD4wJiZ0b3BpY3NbdG9waWNzLmxlbmd0aC0xXT09bnVsbCl7dG9waWNzLnBvcCgpfXJldHVybiB0b3BpY3MubWFwKHRvcGljPT57aWYoQXJyYXkuaXNBcnJheSh0b3BpYykpe2NvbnN0IHVuaXF1ZT17fTt0b3BpYy5mb3JFYWNoKHRvcGljPT57dW5pcXVlW2NoZWNrVG9waWModG9waWMpXT10cnVlfSk7Y29uc3Qgc29ydGVkPU9iamVjdC5rZXlzKHVuaXF1ZSk7c29ydGVkLnNvcnQoKTtyZXR1cm4gc29ydGVkLmpvaW4oXCJ8XCIpfWVsc2V7cmV0dXJuIGNoZWNrVG9waWModG9waWMpfX0pLmpvaW4oXCImXCIpfWZ1bmN0aW9uIGRlc2VyaWFsaXplVG9waWNzKGRhdGEpe2lmKGRhdGE9PT1cIlwiKXtyZXR1cm5bXX1yZXR1cm4gZGF0YS5zcGxpdCgvJi9nKS5tYXAodG9waWM9PntpZih0b3BpYz09PVwiXCIpe3JldHVybltdfWNvbnN0IGNvbXBzPXRvcGljLnNwbGl0KFwifFwiKS5tYXAodG9waWM9PntyZXR1cm4gdG9waWM9PT1cIm51bGxcIj9udWxsOnRvcGljfSk7cmV0dXJuIGNvbXBzLmxlbmd0aD09PTE/Y29tcHNbMF06Y29tcHN9KX1mdW5jdGlvbiBnZXRFdmVudFRhZyQxKGV2ZW50TmFtZSl7aWYodHlwZW9mIGV2ZW50TmFtZT09PVwic3RyaW5nXCIpe2V2ZW50TmFtZT1ldmVudE5hbWUudG9Mb3dlckNhc2UoKTtpZihoZXhEYXRhTGVuZ3RoKGV2ZW50TmFtZSk9PT0zMil7cmV0dXJuXCJ0eDpcIitldmVudE5hbWV9aWYoZXZlbnROYW1lLmluZGV4T2YoXCI6XCIpPT09LTEpe3JldHVybiBldmVudE5hbWV9fWVsc2UgaWYoQXJyYXkuaXNBcnJheShldmVudE5hbWUpKXtyZXR1cm5cImZpbHRlcjoqOlwiK3NlcmlhbGl6ZVRvcGljcyhldmVudE5hbWUpfWVsc2UgaWYoRm9ya0V2ZW50LmlzRm9ya0V2ZW50KGV2ZW50TmFtZSkpe2xvZ2dlciR0Lndhcm4oXCJub3QgaW1wbGVtZW50ZWRcIik7dGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpfWVsc2UgaWYoZXZlbnROYW1lJiZ0eXBlb2YgZXZlbnROYW1lPT09XCJvYmplY3RcIil7cmV0dXJuXCJmaWx0ZXI6XCIrKGV2ZW50TmFtZS5hZGRyZXNzfHxcIipcIikrXCI6XCIrc2VyaWFsaXplVG9waWNzKGV2ZW50TmFtZS50b3BpY3N8fFtdKX10aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGV2ZW50IC0gXCIrZXZlbnROYW1lKX1mdW5jdGlvbiBnZXRUaW1lKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9ZnVuY3Rpb24gc3RhbGwoZHVyYXRpb24pe3JldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlPT57c2V0VGltZW91dChyZXNvbHZlLGR1cmF0aW9uKX0pfWNvbnN0IFBvbGxhYmxlRXZlbnRzPVtcImJsb2NrXCIsXCJuZXR3b3JrXCIsXCJwZW5kaW5nXCIsXCJwb2xsXCJdO2NsYXNzIEV2ZW50e2NvbnN0cnVjdG9yKHRhZyxsaXN0ZW5lcixvbmNlKXtkZWZpbmVSZWFkT25seSh0aGlzLFwidGFnXCIsdGFnKTtkZWZpbmVSZWFkT25seSh0aGlzLFwibGlzdGVuZXJcIixsaXN0ZW5lcik7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIm9uY2VcIixvbmNlKX1nZXQgZXZlbnQoKXtzd2l0Y2godGhpcy50eXBlKXtjYXNlXCJ0eFwiOnJldHVybiB0aGlzLmhhc2g7Y2FzZVwiZmlsdGVyXCI6cmV0dXJuIHRoaXMuZmlsdGVyfXJldHVybiB0aGlzLnRhZ31nZXQgdHlwZSgpe3JldHVybiB0aGlzLnRhZy5zcGxpdChcIjpcIilbMF19Z2V0IGhhc2goKXtjb25zdCBjb21wcz10aGlzLnRhZy5zcGxpdChcIjpcIik7aWYoY29tcHNbMF0hPT1cInR4XCIpe3JldHVybiBudWxsfXJldHVybiBjb21wc1sxXX1nZXQgZmlsdGVyKCl7Y29uc3QgY29tcHM9dGhpcy50YWcuc3BsaXQoXCI6XCIpO2lmKGNvbXBzWzBdIT09XCJmaWx0ZXJcIil7cmV0dXJuIG51bGx9Y29uc3QgYWRkcmVzcz1jb21wc1sxXTtjb25zdCB0b3BpY3M9ZGVzZXJpYWxpemVUb3BpY3MoY29tcHNbMl0pO2NvbnN0IGZpbHRlcj17fTtpZih0b3BpY3MubGVuZ3RoPjApe2ZpbHRlci50b3BpY3M9dG9waWNzfWlmKGFkZHJlc3MmJmFkZHJlc3MhPT1cIipcIil7ZmlsdGVyLmFkZHJlc3M9YWRkcmVzc31yZXR1cm4gZmlsdGVyfXBvbGxhYmxlKCl7cmV0dXJuIHRoaXMudGFnLmluZGV4T2YoXCI6XCIpPj0wfHxQb2xsYWJsZUV2ZW50cy5pbmRleE9mKHRoaXMudGFnKT49MH19Y29uc3QgY29pbkluZm9zPXswOntzeW1ib2w6XCJidGNcIixwMnBraDowLHAyc2g6NSxwcmVmaXg6XCJiY1wifSwyOntzeW1ib2w6XCJsdGNcIixwMnBraDo0OCxwMnNoOjUwLHByZWZpeDpcImx0Y1wifSwzOntzeW1ib2w6XCJkb2dlXCIscDJwa2g6MzAscDJzaDoyMn0sNjA6e3N5bWJvbDpcImV0aFwiLGlsazpcImV0aFwifSw2MTp7c3ltYm9sOlwiZXRjXCIsaWxrOlwiZXRoXCJ9LDcwMDp7c3ltYm9sOlwieGRhaVwiLGlsazpcImV0aFwifX07ZnVuY3Rpb24gYnl0ZXMzMmlmeSh2YWx1ZSl7cmV0dXJuIGhleFplcm9QYWQoQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvSGV4U3RyaW5nKCksMzIpfWZ1bmN0aW9uIGJhc2U1OEVuY29kZShkYXRhKXtyZXR1cm4gQmFzZTU4LmVuY29kZShjb25jYXQoW2RhdGEsaGV4RGF0YVNsaWNlKHNoYTI1NiQxKHNoYTI1NiQxKGRhdGEpKSwwLDQpXSkpfWNsYXNzIFJlc29sdmVye2NvbnN0cnVjdG9yKHByb3ZpZGVyLGFkZHJlc3MsbmFtZSl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcInByb3ZpZGVyXCIscHJvdmlkZXIpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJuYW1lXCIsbmFtZSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFkZHJlc3NcIixwcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhhZGRyZXNzKSl9X2ZldGNoQnl0ZXMoc2VsZWN0b3IscGFyYW1ldGVycyl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCB0cmFuc2FjdGlvbj17dG86dGhpcy5hZGRyZXNzLGRhdGE6aGV4Q29uY2F0KFtzZWxlY3RvcixuYW1laGFzaCh0aGlzLm5hbWUpLHBhcmFtZXRlcnN8fFwiMHhcIl0pfTtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHRyYW5zYWN0aW9uKTtpZihyZXN1bHQ9PT1cIjB4XCIpe3JldHVybiBudWxsfWNvbnN0IG9mZnNldD1CaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UocmVzdWx0LDAsMzIpKS50b051bWJlcigpO2NvbnN0IGxlbmd0aD1CaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UocmVzdWx0LG9mZnNldCxvZmZzZXQrMzIpKS50b051bWJlcigpO3JldHVybiBoZXhEYXRhU2xpY2UocmVzdWx0LG9mZnNldCszMixvZmZzZXQrMzIrbGVuZ3RoKX0pfV9nZXRBZGRyZXNzKGNvaW5UeXBlLGhleEJ5dGVzKXtjb25zdCBjb2luSW5mbz1jb2luSW5mb3NbU3RyaW5nKGNvaW5UeXBlKV07aWYoY29pbkluZm89PW51bGwpe2xvZ2dlciR0LnRocm93RXJyb3IoYHVuc3VwcG9ydGVkIGNvaW4gdHlwZTogJHtjb2luVHlwZX1gLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246YGdldEFkZHJlc3MoJHtjb2luVHlwZX0pYH0pfWlmKGNvaW5JbmZvLmlsaz09PVwiZXRoXCIpe3JldHVybiB0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGhleEJ5dGVzKX1jb25zdCBieXRlcz1hcnJheWlmeShoZXhCeXRlcyk7aWYoY29pbkluZm8ucDJwa2ghPW51bGwpe2NvbnN0IHAycGtoPWhleEJ5dGVzLm1hdGNoKC9eMHg3NmE5KFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKik4OGFjJC8pO2lmKHAycGtoKXtjb25zdCBsZW5ndGg9cGFyc2VJbnQocDJwa2hbMV0sMTYpO2lmKHAycGtoWzJdLmxlbmd0aD09PWxlbmd0aCoyJiZsZW5ndGg+PTEmJmxlbmd0aDw9NzUpe3JldHVybiBiYXNlNThFbmNvZGUoY29uY2F0KFtbY29pbkluZm8ucDJwa2hdLFwiMHhcIitwMnBraFsyXV0pKX19fWlmKGNvaW5JbmZvLnAyc2ghPW51bGwpe2NvbnN0IHAyc2g9aGV4Qnl0ZXMubWF0Y2goL14weGE5KFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKik4NyQvKTtpZihwMnNoKXtjb25zdCBsZW5ndGg9cGFyc2VJbnQocDJzaFsxXSwxNik7aWYocDJzaFsyXS5sZW5ndGg9PT1sZW5ndGgqMiYmbGVuZ3RoPj0xJiZsZW5ndGg8PTc1KXtyZXR1cm4gYmFzZTU4RW5jb2RlKGNvbmNhdChbW2NvaW5JbmZvLnAyc2hdLFwiMHhcIitwMnNoWzJdXSkpfX19aWYoY29pbkluZm8ucHJlZml4IT1udWxsKXtjb25zdCBsZW5ndGg9Ynl0ZXNbMV07bGV0IHZlcnNpb249Ynl0ZXNbMF07aWYodmVyc2lvbj09PTApe2lmKGxlbmd0aCE9PTIwJiZsZW5ndGghPT0zMil7dmVyc2lvbj0tMX19ZWxzZXt2ZXJzaW9uPS0xfWlmKHZlcnNpb24+PTAmJmJ5dGVzLmxlbmd0aD09PTIrbGVuZ3RoJiZsZW5ndGg+PTEmJmxlbmd0aDw9NzUpe2NvbnN0IHdvcmRzPWJlY2gzMi50b1dvcmRzKGJ5dGVzLnNsaWNlKDIpKTt3b3Jkcy51bnNoaWZ0KHZlcnNpb24pO3JldHVybiBiZWNoMzIuZW5jb2RlKGNvaW5JbmZvLnByZWZpeCx3b3Jkcyl9fXJldHVybiBudWxsfWdldEFkZHJlc3MoY29pblR5cGUpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYoY29pblR5cGU9PW51bGwpe2NvaW5UeXBlPTYwfWlmKGNvaW5UeXBlPT09NjApe2NvbnN0IHRyYW5zYWN0aW9uPXt0bzp0aGlzLmFkZHJlc3MsZGF0YTpcIjB4M2IzYjU3ZGVcIituYW1laGFzaCh0aGlzLm5hbWUpLnN1YnN0cmluZygyKX07Y29uc3QgaGV4Qnl0ZXM9eWllbGQgdGhpcy5wcm92aWRlci5jYWxsKHRyYW5zYWN0aW9uKTtpZihoZXhCeXRlcz09PVwiMHhcInx8aGV4Qnl0ZXM9PT1IYXNoWmVybyl7cmV0dXJuIG51bGx9cmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKGhleEJ5dGVzKX1jb25zdCBoZXhCeXRlcz15aWVsZCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHhmMWNiN2UwNlwiLGJ5dGVzMzJpZnkoY29pblR5cGUpKTtpZihoZXhCeXRlcz09bnVsbHx8aGV4Qnl0ZXM9PT1cIjB4XCIpe3JldHVybiBudWxsfWNvbnN0IGFkZHJlc3M9dGhpcy5fZ2V0QWRkcmVzcyhjb2luVHlwZSxoZXhCeXRlcyk7aWYoYWRkcmVzcz09bnVsbCl7bG9nZ2VyJHQudGhyb3dFcnJvcihgaW52YWxpZCBvciB1bnN1cHBvcnRlZCBjb2luIGRhdGFgLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246YGdldEFkZHJlc3MoJHtjb2luVHlwZX0pYCxjb2luVHlwZTpjb2luVHlwZSxkYXRhOmhleEJ5dGVzfSl9cmV0dXJuIGFkZHJlc3N9KX1nZXRDb250ZW50SGFzaCgpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgaGV4Qnl0ZXM9eWllbGQgdGhpcy5fZmV0Y2hCeXRlcyhcIjB4YmMxYzU4ZDFcIik7aWYoaGV4Qnl0ZXM9PW51bGx8fGhleEJ5dGVzPT09XCIweFwiKXtyZXR1cm4gbnVsbH1jb25zdCBpcGZzPWhleEJ5dGVzLm1hdGNoKC9eMHhlMzAxMDE3MCgoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl1bMC05YS1mXSkoWzAtOWEtZl0qKSkkLyk7aWYoaXBmcyl7Y29uc3QgbGVuZ3RoPXBhcnNlSW50KGlwZnNbM10sMTYpO2lmKGlwZnNbNF0ubGVuZ3RoPT09bGVuZ3RoKjIpe3JldHVyblwiaXBmczovL1wiK0Jhc2U1OC5lbmNvZGUoXCIweFwiK2lwZnNbMV0pfX1jb25zdCBzd2FybT1oZXhCeXRlcy5tYXRjaCgvXjB4ZTQwMTAxZmEwMTFiMjAoWzAtOWEtZl0qKSQvKTtpZihzd2FybSl7aWYoc3dhcm1bMV0ubGVuZ3RoPT09MzIqMil7cmV0dXJuXCJieno6Ly9cIitzd2FybVsxXX19cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoYGludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY29udGVudCBoYXNoIGRhdGFgLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJnZXRDb250ZW50SGFzaCgpXCIsZGF0YTpoZXhCeXRlc30pfSl9Z2V0VGV4dChrZXkpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IGtleUJ5dGVzPXRvVXRmOEJ5dGVzKGtleSk7a2V5Qnl0ZXM9Y29uY2F0KFtieXRlczMyaWZ5KDY0KSxieXRlczMyaWZ5KGtleUJ5dGVzLmxlbmd0aCksa2V5Qnl0ZXNdKTtpZihrZXlCeXRlcy5sZW5ndGglMzIhPT0wKXtrZXlCeXRlcz1jb25jYXQoW2tleUJ5dGVzLGhleFplcm9QYWQoXCIweFwiLDMyLWtleS5sZW5ndGglMzIpXSl9Y29uc3QgaGV4Qnl0ZXM9eWllbGQgdGhpcy5fZmV0Y2hCeXRlcyhcIjB4NTlkMWQ0M2NcIixoZXhsaWZ5KGtleUJ5dGVzKSk7aWYoaGV4Qnl0ZXM9PW51bGx8fGhleEJ5dGVzPT09XCIweFwiKXtyZXR1cm4gbnVsbH1yZXR1cm4gdG9VdGY4U3RyaW5nKGhleEJ5dGVzKX0pfX1sZXQgZGVmYXVsdEZvcm1hdHRlcj1udWxsO2xldCBuZXh0UG9sbElkPTE7Y2xhc3MgQmFzZVByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJ7Y29uc3RydWN0b3IobmV0d29yayl7bG9nZ2VyJHQuY2hlY2tOZXcobmV3LnRhcmdldCxQcm92aWRlcik7c3VwZXIoKTt0aGlzLl9ldmVudHM9W107dGhpcy5fZW1pdHRlZD17YmxvY2s6LTJ9O3RoaXMuZm9ybWF0dGVyPW5ldy50YXJnZXQuZ2V0Rm9ybWF0dGVyKCk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImFueU5ldHdvcmtcIixuZXR3b3JrPT09XCJhbnlcIik7aWYodGhpcy5hbnlOZXR3b3JrKXtuZXR3b3JrPXRoaXMuZGV0ZWN0TmV0d29yaygpfWlmKG5ldHdvcmsgaW5zdGFuY2VvZiBQcm9taXNlKXt0aGlzLl9uZXR3b3JrUHJvbWlzZT1uZXR3b3JrO25ldHdvcmsuY2F0Y2goZXJyb3I9Pnt9KTt0aGlzLl9yZWFkeSgpLmNhdGNoKGVycm9yPT57fSl9ZWxzZXtjb25zdCBrbm93bk5ldHdvcms9Z2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXROZXR3b3JrXCIpKG5ldHdvcmspO2lmKGtub3duTmV0d29yayl7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9uZXR3b3JrXCIsa25vd25OZXR3b3JrKTt0aGlzLmVtaXQoXCJuZXR3b3JrXCIsa25vd25OZXR3b3JrLG51bGwpfWVsc2V7bG9nZ2VyJHQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrXCIsXCJuZXR3b3JrXCIsbmV0d29yayl9fXRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXI9LTEwMjQ7dGhpcy5fbGFzdEJsb2NrTnVtYmVyPS0yO3RoaXMuX3BvbGxpbmdJbnRlcnZhbD00ZTM7dGhpcy5fZmFzdFF1ZXJ5RGF0ZT0wfV9yZWFkeSgpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYodGhpcy5fbmV0d29yaz09bnVsbCl7bGV0IG5ldHdvcms9bnVsbDtpZih0aGlzLl9uZXR3b3JrUHJvbWlzZSl7dHJ5e25ldHdvcms9eWllbGQgdGhpcy5fbmV0d29ya1Byb21pc2V9Y2F0Y2goZXJyb3Ipe319aWYobmV0d29yaz09bnVsbCl7bmV0d29yaz15aWVsZCB0aGlzLmRldGVjdE5ldHdvcmsoKX1pZighbmV0d29yayl7bG9nZ2VyJHQudGhyb3dFcnJvcihcIm5vIG5ldHdvcmsgZGV0ZWN0ZWRcIixMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1Ise30pfWlmKHRoaXMuX25ldHdvcms9PW51bGwpe2lmKHRoaXMuYW55TmV0d29yayl7dGhpcy5fbmV0d29yaz1uZXR3b3JrfWVsc2V7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9uZXR3b3JrXCIsbmV0d29yayl9dGhpcy5lbWl0KFwibmV0d29ya1wiLG5ldHdvcmssbnVsbCl9fXJldHVybiB0aGlzLl9uZXR3b3JrfSl9Z2V0IHJlYWR5KCl7cmV0dXJuIHBvbGwoKCk9PntyZXR1cm4gdGhpcy5fcmVhZHkoKS50aGVuKG5ldHdvcms9PntyZXR1cm4gbmV0d29ya30sZXJyb3I9PntpZihlcnJvci5jb2RlPT09TG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SJiZlcnJvci5ldmVudD09PVwibm9OZXR3b3JrXCIpe3JldHVybiB1bmRlZmluZWR9dGhyb3cgZXJyb3J9KX0pfXN0YXRpYyBnZXRGb3JtYXR0ZXIoKXtpZihkZWZhdWx0Rm9ybWF0dGVyPT1udWxsKXtkZWZhdWx0Rm9ybWF0dGVyPW5ldyBGb3JtYXR0ZXJ9cmV0dXJuIGRlZmF1bHRGb3JtYXR0ZXJ9c3RhdGljIGdldE5ldHdvcmsobmV0d29yayl7cmV0dXJuIGdldE5ldHdvcmsobmV0d29yaz09bnVsbD9cImhvbWVzdGVhZFwiOm5ldHdvcmspfV9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKG1heEFnZSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLl9yZWFkeSgpO2lmKG1heEFnZT4wKXt3aGlsZSh0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyKXtjb25zdCBpbnRlcm5hbEJsb2NrTnVtYmVyPXRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXI7dHJ5e2NvbnN0IHJlc3VsdD15aWVsZCBpbnRlcm5hbEJsb2NrTnVtYmVyO2lmKGdldFRpbWUoKS1yZXN1bHQucmVzcFRpbWU8PW1heEFnZSl7cmV0dXJuIHJlc3VsdC5ibG9ja051bWJlcn1icmVha31jYXRjaChlcnJvcil7aWYodGhpcy5faW50ZXJuYWxCbG9ja051bWJlcj09PWludGVybmFsQmxvY2tOdW1iZXIpe2JyZWFrfX19fWNvbnN0IHJlcVRpbWU9Z2V0VGltZSgpO2NvbnN0IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcj1yZXNvbHZlUHJvcGVydGllcyh7YmxvY2tOdW1iZXI6dGhpcy5wZXJmb3JtKFwiZ2V0QmxvY2tOdW1iZXJcIix7fSksbmV0d29ya0Vycm9yOnRoaXMuZ2V0TmV0d29yaygpLnRoZW4obmV0d29yaz0+bnVsbCxlcnJvcj0+ZXJyb3IpfSkudGhlbigoe2Jsb2NrTnVtYmVyOmJsb2NrTnVtYmVyLG5ldHdvcmtFcnJvcjpuZXR3b3JrRXJyb3J9KT0+e2lmKG5ldHdvcmtFcnJvcil7aWYodGhpcy5faW50ZXJuYWxCbG9ja051bWJlcj09PWNoZWNrSW50ZXJuYWxCbG9ja051bWJlcil7dGhpcy5faW50ZXJuYWxCbG9ja051bWJlcj1udWxsfXRocm93IG5ldHdvcmtFcnJvcn1jb25zdCByZXNwVGltZT1nZXRUaW1lKCk7YmxvY2tOdW1iZXI9QmlnTnVtYmVyLmZyb20oYmxvY2tOdW1iZXIpLnRvTnVtYmVyKCk7aWYoYmxvY2tOdW1iZXI8dGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlcil7YmxvY2tOdW1iZXI9dGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlcn10aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyPWJsb2NrTnVtYmVyO3RoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcik7cmV0dXJue2Jsb2NrTnVtYmVyOmJsb2NrTnVtYmVyLHJlcVRpbWU6cmVxVGltZSxyZXNwVGltZTpyZXNwVGltZX19KTt0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPWNoZWNrSW50ZXJuYWxCbG9ja051bWJlcjtjaGVja0ludGVybmFsQmxvY2tOdW1iZXIuY2F0Y2goZXJyb3I9PntpZih0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPT09Y2hlY2tJbnRlcm5hbEJsb2NrTnVtYmVyKXt0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyPW51bGx9fSk7cmV0dXJuKHlpZWxkIGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcikuYmxvY2tOdW1iZXJ9KX1wb2xsKCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBwb2xsSWQ9bmV4dFBvbGxJZCsrO2NvbnN0IHJ1bm5lcnM9W107bGV0IGJsb2NrTnVtYmVyPW51bGw7dHJ5e2Jsb2NrTnVtYmVyPXlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwK3RoaXMucG9sbGluZ0ludGVydmFsLzIpfWNhdGNoKGVycm9yKXt0aGlzLmVtaXQoXCJlcnJvclwiLGVycm9yKTtyZXR1cm59dGhpcy5fc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKTt0aGlzLmVtaXQoXCJwb2xsXCIscG9sbElkLGJsb2NrTnVtYmVyKTtpZihibG9ja051bWJlcj09PXRoaXMuX2xhc3RCbG9ja051bWJlcil7dGhpcy5lbWl0KFwiZGlkUG9sbFwiLHBvbGxJZCk7cmV0dXJufWlmKHRoaXMuX2VtaXR0ZWQuYmxvY2s9PT0tMil7dGhpcy5fZW1pdHRlZC5ibG9jaz1ibG9ja051bWJlci0xfWlmKE1hdGguYWJzKHRoaXMuX2VtaXR0ZWQuYmxvY2stYmxvY2tOdW1iZXIpPjFlMyl7bG9nZ2VyJHQud2FybihcIm5ldHdvcmsgYmxvY2sgc2tldyBkZXRlY3RlZDsgc2tpcHBpbmcgYmxvY2sgZXZlbnRzXCIpO3RoaXMuZW1pdChcImVycm9yXCIsbG9nZ2VyJHQubWFrZUVycm9yKFwibmV0d29yayBibG9jayBza2V3IGRldGVjdGVkXCIsTG9nZ2VyLmVycm9ycy5ORVRXT1JLX0VSUk9SLHtibG9ja051bWJlcjpibG9ja051bWJlcixldmVudDpcImJsb2NrU2tld1wiLHByZXZpb3VzQmxvY2tOdW1iZXI6dGhpcy5fZW1pdHRlZC5ibG9ja30pKTt0aGlzLmVtaXQoXCJibG9ja1wiLGJsb2NrTnVtYmVyKX1lbHNle2ZvcihsZXQgaT10aGlzLl9lbWl0dGVkLmJsb2NrKzE7aTw9YmxvY2tOdW1iZXI7aSsrKXt0aGlzLmVtaXQoXCJibG9ja1wiLGkpfX1pZih0aGlzLl9lbWl0dGVkLmJsb2NrIT09YmxvY2tOdW1iZXIpe3RoaXMuX2VtaXR0ZWQuYmxvY2s9YmxvY2tOdW1iZXI7T2JqZWN0LmtleXModGhpcy5fZW1pdHRlZCkuZm9yRWFjaChrZXk9PntpZihrZXk9PT1cImJsb2NrXCIpe3JldHVybn1jb25zdCBldmVudEJsb2NrTnVtYmVyPXRoaXMuX2VtaXR0ZWRba2V5XTtpZihldmVudEJsb2NrTnVtYmVyPT09XCJwZW5kaW5nXCIpe3JldHVybn1pZihibG9ja051bWJlci1ldmVudEJsb2NrTnVtYmVyPjEyKXtkZWxldGUgdGhpcy5fZW1pdHRlZFtrZXldfX0pfWlmKHRoaXMuX2xhc3RCbG9ja051bWJlcj09PS0yKXt0aGlzLl9sYXN0QmxvY2tOdW1iZXI9YmxvY2tOdW1iZXItMX10aGlzLl9ldmVudHMuZm9yRWFjaChldmVudD0+e3N3aXRjaChldmVudC50eXBlKXtjYXNlXCJ0eFwiOntjb25zdCBoYXNoPWV2ZW50Lmhhc2g7bGV0IHJ1bm5lcj10aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKS50aGVuKHJlY2VpcHQ9PntpZighcmVjZWlwdHx8cmVjZWlwdC5ibG9ja051bWJlcj09bnVsbCl7cmV0dXJuIG51bGx9dGhpcy5fZW1pdHRlZFtcInQ6XCIraGFzaF09cmVjZWlwdC5ibG9ja051bWJlcjt0aGlzLmVtaXQoaGFzaCxyZWNlaXB0KTtyZXR1cm4gbnVsbH0pLmNhdGNoKGVycm9yPT57dGhpcy5lbWl0KFwiZXJyb3JcIixlcnJvcil9KTtydW5uZXJzLnB1c2gocnVubmVyKTticmVha31jYXNlXCJmaWx0ZXJcIjp7Y29uc3QgZmlsdGVyPWV2ZW50LmZpbHRlcjtmaWx0ZXIuZnJvbUJsb2NrPXRoaXMuX2xhc3RCbG9ja051bWJlcisxO2ZpbHRlci50b0Jsb2NrPWJsb2NrTnVtYmVyO2NvbnN0IHJ1bm5lcj10aGlzLmdldExvZ3MoZmlsdGVyKS50aGVuKGxvZ3M9PntpZihsb2dzLmxlbmd0aD09PTApe3JldHVybn1sb2dzLmZvckVhY2gobG9nPT57dGhpcy5fZW1pdHRlZFtcImI6XCIrbG9nLmJsb2NrSGFzaF09bG9nLmJsb2NrTnVtYmVyO3RoaXMuX2VtaXR0ZWRbXCJ0OlwiK2xvZy50cmFuc2FjdGlvbkhhc2hdPWxvZy5ibG9ja051bWJlcjt0aGlzLmVtaXQoZmlsdGVyLGxvZyl9KX0pLmNhdGNoKGVycm9yPT57dGhpcy5lbWl0KFwiZXJyb3JcIixlcnJvcil9KTtydW5uZXJzLnB1c2gocnVubmVyKTticmVha319fSk7dGhpcy5fbGFzdEJsb2NrTnVtYmVyPWJsb2NrTnVtYmVyO1Byb21pc2UuYWxsKHJ1bm5lcnMpLnRoZW4oKCk9Pnt0aGlzLmVtaXQoXCJkaWRQb2xsXCIscG9sbElkKX0pLmNhdGNoKGVycm9yPT57dGhpcy5lbWl0KFwiZXJyb3JcIixlcnJvcil9KTtyZXR1cm59KX1yZXNldEV2ZW50c0Jsb2NrKGJsb2NrTnVtYmVyKXt0aGlzLl9sYXN0QmxvY2tOdW1iZXI9YmxvY2tOdW1iZXItMTtpZih0aGlzLnBvbGxpbmcpe3RoaXMucG9sbCgpfX1nZXQgbmV0d29yaygpe3JldHVybiB0aGlzLl9uZXR3b3JrfWRldGVjdE5ldHdvcmsoKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3JldHVybiBsb2dnZXIkdC50aHJvd0Vycm9yKFwicHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBuZXR3b3JrIGRldGVjdGlvblwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJwcm92aWRlci5kZXRlY3ROZXR3b3JrXCJ9KX0pfWdldE5ldHdvcmsoKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IG5ldHdvcms9eWllbGQgdGhpcy5fcmVhZHkoKTtjb25zdCBjdXJyZW50TmV0d29yaz15aWVsZCB0aGlzLmRldGVjdE5ldHdvcmsoKTtpZihuZXR3b3JrLmNoYWluSWQhPT1jdXJyZW50TmV0d29yay5jaGFpbklkKXtpZih0aGlzLmFueU5ldHdvcmspe3RoaXMuX25ldHdvcms9Y3VycmVudE5ldHdvcms7dGhpcy5fbGFzdEJsb2NrTnVtYmVyPS0yO3RoaXMuX2Zhc3RCbG9ja051bWJlcj1udWxsO3RoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2U9bnVsbDt0aGlzLl9mYXN0UXVlcnlEYXRlPTA7dGhpcy5fZW1pdHRlZC5ibG9jaz0tMjt0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyPS0xMDI0O3RoaXMuX2ludGVybmFsQmxvY2tOdW1iZXI9bnVsbDt0aGlzLmVtaXQoXCJuZXR3b3JrXCIsY3VycmVudE5ldHdvcmssbmV0d29yayk7eWllbGQgc3RhbGwoMCk7cmV0dXJuIHRoaXMuX25ldHdvcmt9Y29uc3QgZXJyb3I9bG9nZ2VyJHQubWFrZUVycm9yKFwidW5kZXJseWluZyBuZXR3b3JrIGNoYW5nZWRcIixMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1Ise2V2ZW50OlwiY2hhbmdlZFwiLG5ldHdvcms6bmV0d29yayxkZXRlY3RlZE5ldHdvcms6Y3VycmVudE5ldHdvcmt9KTt0aGlzLmVtaXQoXCJlcnJvclwiLGVycm9yKTt0aHJvdyBlcnJvcn1yZXR1cm4gbmV0d29ya30pfWdldCBibG9ja051bWJlcigpe3RoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwK3RoaXMucG9sbGluZ0ludGVydmFsLzIpLnRoZW4oYmxvY2tOdW1iZXI9Pnt0aGlzLl9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpfSxlcnJvcj0+e30pO3JldHVybiB0aGlzLl9mYXN0QmxvY2tOdW1iZXIhPW51bGw/dGhpcy5fZmFzdEJsb2NrTnVtYmVyOi0xfWdldCBwb2xsaW5nKCl7cmV0dXJuIHRoaXMuX3BvbGxlciE9bnVsbH1zZXQgcG9sbGluZyh2YWx1ZSl7aWYodmFsdWUmJiF0aGlzLl9wb2xsZXIpe3RoaXMuX3BvbGxlcj1zZXRJbnRlcnZhbCgoKT0+e3RoaXMucG9sbCgpfSx0aGlzLnBvbGxpbmdJbnRlcnZhbCk7aWYoIXRoaXMuX2Jvb3RzdHJhcFBvbGwpe3RoaXMuX2Jvb3RzdHJhcFBvbGw9c2V0VGltZW91dCgoKT0+e3RoaXMucG9sbCgpO3RoaXMuX2Jvb3RzdHJhcFBvbGw9c2V0VGltZW91dCgoKT0+e2lmKCF0aGlzLl9wb2xsZXIpe3RoaXMucG9sbCgpfXRoaXMuX2Jvb3RzdHJhcFBvbGw9bnVsbH0sdGhpcy5wb2xsaW5nSW50ZXJ2YWwpfSwwKX19ZWxzZSBpZighdmFsdWUmJnRoaXMuX3BvbGxlcil7Y2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsZXIpO3RoaXMuX3BvbGxlcj1udWxsfX1nZXQgcG9sbGluZ0ludGVydmFsKCl7cmV0dXJuIHRoaXMuX3BvbGxpbmdJbnRlcnZhbH1zZXQgcG9sbGluZ0ludGVydmFsKHZhbHVlKXtpZih0eXBlb2YgdmFsdWUhPT1cIm51bWJlclwifHx2YWx1ZTw9MHx8cGFyc2VJbnQoU3RyaW5nKHZhbHVlKSkhPXZhbHVlKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBvbGxpbmcgaW50ZXJ2YWxcIil9dGhpcy5fcG9sbGluZ0ludGVydmFsPXZhbHVlO2lmKHRoaXMuX3BvbGxlcil7Y2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsZXIpO3RoaXMuX3BvbGxlcj1zZXRJbnRlcnZhbCgoKT0+e3RoaXMucG9sbCgpfSx0aGlzLl9wb2xsaW5nSW50ZXJ2YWwpfX1fZ2V0RmFzdEJsb2NrTnVtYmVyKCl7Y29uc3Qgbm93PWdldFRpbWUoKTtpZihub3ctdGhpcy5fZmFzdFF1ZXJ5RGF0ZT4yKnRoaXMuX3BvbGxpbmdJbnRlcnZhbCl7dGhpcy5fZmFzdFF1ZXJ5RGF0ZT1ub3c7dGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZT10aGlzLmdldEJsb2NrTnVtYmVyKCkudGhlbihibG9ja051bWJlcj0+e2lmKHRoaXMuX2Zhc3RCbG9ja051bWJlcj09bnVsbHx8YmxvY2tOdW1iZXI+dGhpcy5fZmFzdEJsb2NrTnVtYmVyKXt0aGlzLl9mYXN0QmxvY2tOdW1iZXI9YmxvY2tOdW1iZXJ9cmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlcn0pfXJldHVybiB0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlfV9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpe2lmKHRoaXMuX2Zhc3RCbG9ja051bWJlciE9bnVsbCYmYmxvY2tOdW1iZXI8dGhpcy5fZmFzdEJsb2NrTnVtYmVyKXtyZXR1cm59dGhpcy5fZmFzdFF1ZXJ5RGF0ZT1nZXRUaW1lKCk7aWYodGhpcy5fZmFzdEJsb2NrTnVtYmVyPT1udWxsfHxibG9ja051bWJlcj50aGlzLl9mYXN0QmxvY2tOdW1iZXIpe3RoaXMuX2Zhc3RCbG9ja051bWJlcj1ibG9ja051bWJlcjt0aGlzLl9mYXN0QmxvY2tOdW1iZXJQcm9taXNlPVByb21pc2UucmVzb2x2ZShibG9ja051bWJlcil9fXdhaXRGb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2gsY29uZmlybWF0aW9ucyx0aW1lb3V0KXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKGNvbmZpcm1hdGlvbnM9PW51bGwpe2NvbmZpcm1hdGlvbnM9MX1jb25zdCByZWNlaXB0PXlpZWxkIHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHRyYW5zYWN0aW9uSGFzaCk7aWYoKHJlY2VpcHQ/cmVjZWlwdC5jb25maXJtYXRpb25zOjApPj1jb25maXJtYXRpb25zKXtyZXR1cm4gcmVjZWlwdH1yZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e2xldCB0aW1lcj1udWxsO2xldCBkb25lPWZhbHNlO2NvbnN0IGhhbmRsZXI9cmVjZWlwdD0+e2lmKHJlY2VpcHQuY29uZmlybWF0aW9uczxjb25maXJtYXRpb25zKXtyZXR1cm59aWYodGltZXIpe2NsZWFyVGltZW91dCh0aW1lcil9aWYoZG9uZSl7cmV0dXJufWRvbmU9dHJ1ZTt0aGlzLnJlbW92ZUxpc3RlbmVyKHRyYW5zYWN0aW9uSGFzaCxoYW5kbGVyKTtyZXNvbHZlKHJlY2VpcHQpfTt0aGlzLm9uKHRyYW5zYWN0aW9uSGFzaCxoYW5kbGVyKTtpZih0eXBlb2YgdGltZW91dD09PVwibnVtYmVyXCImJnRpbWVvdXQ+MCl7dGltZXI9c2V0VGltZW91dCgoKT0+e2lmKGRvbmUpe3JldHVybn10aW1lcj1udWxsO2RvbmU9dHJ1ZTt0aGlzLnJlbW92ZUxpc3RlbmVyKHRyYW5zYWN0aW9uSGFzaCxoYW5kbGVyKTtyZWplY3QobG9nZ2VyJHQubWFrZUVycm9yKFwidGltZW91dCBleGNlZWRlZFwiLExvZ2dlci5lcnJvcnMuVElNRU9VVCx7dGltZW91dDp0aW1lb3V0fSkpfSx0aW1lb3V0KTtpZih0aW1lci51bnJlZil7dGltZXIudW5yZWYoKX19fSl9KX1nZXRCbG9ja051bWJlcigpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7cmV0dXJuIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMCl9KX1nZXRHYXNQcmljZSgpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImdldEdhc1ByaWNlXCIse30pO3RyeXtyZXR1cm4gQmlnTnVtYmVyLmZyb20ocmVzdWx0KX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJnZXRHYXNQcmljZVwiLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1nZXRCYWxhbmNlKGFkZHJlc3NPck5hbWUsYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHthZGRyZXNzOnRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksYmxvY2tUYWc6dGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpfSk7Y29uc3QgcmVzdWx0PXlpZWxkIHRoaXMucGVyZm9ybShcImdldEJhbGFuY2VcIixwYXJhbXMpO3RyeXtyZXR1cm4gQmlnTnVtYmVyLmZyb20ocmVzdWx0KX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJnZXRCYWxhbmNlXCIscGFyYW1zOnBhcmFtcyxyZXN1bHQ6cmVzdWx0LGVycm9yOmVycm9yfSl9fSl9Z2V0VHJhbnNhY3Rpb25Db3VudChhZGRyZXNzT3JOYW1lLGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7YWRkcmVzczp0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLGJsb2NrVGFnOnRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKX0pO2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRUcmFuc2FjdGlvbkNvdW50XCIscGFyYW1zKTt0cnl7cmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCkudG9OdW1iZXIoKX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJnZXRUcmFuc2FjdGlvbkNvdW50XCIscGFyYW1zOnBhcmFtcyxyZXN1bHQ6cmVzdWx0LGVycm9yOmVycm9yfSl9fSl9Z2V0Q29kZShhZGRyZXNzT3JOYW1lLGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7YWRkcmVzczp0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLGJsb2NrVGFnOnRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKX0pO2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRDb2RlXCIscGFyYW1zKTt0cnl7cmV0dXJuIGhleGxpZnkocmVzdWx0KX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJnZXRDb2RlXCIscGFyYW1zOnBhcmFtcyxyZXN1bHQ6cmVzdWx0LGVycm9yOmVycm9yfSl9fSl9Z2V0U3RvcmFnZUF0KGFkZHJlc3NPck5hbWUscG9zaXRpb24sYmxvY2tUYWcpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgcGFyYW1zPXlpZWxkIHJlc29sdmVQcm9wZXJ0aWVzKHthZGRyZXNzOnRoaXMuX2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSksYmxvY2tUYWc6dGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpLHBvc2l0aW9uOlByb21pc2UucmVzb2x2ZShwb3NpdGlvbikudGhlbihwPT5oZXhWYWx1ZShwKSl9KTtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0U3RvcmFnZUF0XCIscGFyYW1zKTt0cnl7cmV0dXJuIGhleGxpZnkocmVzdWx0KX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR0LnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLHttZXRob2Q6XCJnZXRTdG9yYWdlQXRcIixwYXJhbXM6cGFyYW1zLHJlc3VsdDpyZXN1bHQsZXJyb3I6ZXJyb3J9KX19KX1fd3JhcFRyYW5zYWN0aW9uKHR4LGhhc2gpe2lmKGhhc2ghPW51bGwmJmhleERhdGFMZW5ndGgoaGFzaCkhPT0zMil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZSAtIHNlbmRUcmFuc2FjdGlvblwiKX1jb25zdCByZXN1bHQ9dHg7aWYoaGFzaCE9bnVsbCYmdHguaGFzaCE9PWhhc2gpe2xvZ2dlciR0LnRocm93RXJyb3IoXCJUcmFuc2FjdGlvbiBoYXNoIG1pc21hdGNoIGZyb20gUHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uLlwiLExvZ2dlci5lcnJvcnMuVU5LTk9XTl9FUlJPUix7ZXhwZWN0ZWRIYXNoOnR4Lmhhc2gscmV0dXJuZWRIYXNoOmhhc2h9KX1yZXN1bHQud2FpdD0oY29uZmlybWF0aW9ucz0+X19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKGNvbmZpcm1hdGlvbnMhPT0wKXt0aGlzLl9lbWl0dGVkW1widDpcIit0eC5oYXNoXT1cInBlbmRpbmdcIn1jb25zdCByZWNlaXB0PXlpZWxkIHRoaXMud2FpdEZvclRyYW5zYWN0aW9uKHR4Lmhhc2gsY29uZmlybWF0aW9ucyk7aWYocmVjZWlwdD09bnVsbCYmY29uZmlybWF0aW9ucz09PTApe3JldHVybiBudWxsfXRoaXMuX2VtaXR0ZWRbXCJ0OlwiK3R4Lmhhc2hdPXJlY2VpcHQuYmxvY2tOdW1iZXI7aWYocmVjZWlwdC5zdGF0dXM9PT0wKXtsb2dnZXIkdC50aHJvd0Vycm9yKFwidHJhbnNhY3Rpb24gZmFpbGVkXCIsTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTix7dHJhbnNhY3Rpb25IYXNoOnR4Lmhhc2gsdHJhbnNhY3Rpb246dHgscmVjZWlwdDpyZWNlaXB0fSl9cmV0dXJuIHJlY2VpcHR9KSk7cmV0dXJuIHJlc3VsdH1zZW5kVHJhbnNhY3Rpb24oc2lnbmVkVHJhbnNhY3Rpb24pe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7Y29uc3QgaGV4VHg9eWllbGQgUHJvbWlzZS5yZXNvbHZlKHNpZ25lZFRyYW5zYWN0aW9uKS50aGVuKHQ9PmhleGxpZnkodCkpO2NvbnN0IHR4PXRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uKHNpZ25lZFRyYW5zYWN0aW9uKTt0cnl7Y29uc3QgaGFzaD15aWVsZCB0aGlzLnBlcmZvcm0oXCJzZW5kVHJhbnNhY3Rpb25cIix7c2lnbmVkVHJhbnNhY3Rpb246aGV4VHh9KTtyZXR1cm4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4LGhhc2gpfWNhdGNoKGVycm9yKXtlcnJvci50cmFuc2FjdGlvbj10eDtlcnJvci50cmFuc2FjdGlvbkhhc2g9dHguaGFzaDt0aHJvdyBlcnJvcn19KX1fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHZhbHVlcz15aWVsZCB0cmFuc2FjdGlvbjtjb25zdCB0eD17fTtbXCJmcm9tXCIsXCJ0b1wiXS5mb3JFYWNoKGtleT0+e2lmKHZhbHVlc1trZXldPT1udWxsKXtyZXR1cm59dHhba2V5XT1Qcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4odj0+dj90aGlzLl9nZXRBZGRyZXNzKHYpOm51bGwpfSk7W1wiZ2FzTGltaXRcIixcImdhc1ByaWNlXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGtleT0+e2lmKHZhbHVlc1trZXldPT1udWxsKXtyZXR1cm59dHhba2V5XT1Qcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4odj0+dj9CaWdOdW1iZXIuZnJvbSh2KTpudWxsKX0pO1tcInR5cGVcIl0uZm9yRWFjaChrZXk9PntpZih2YWx1ZXNba2V5XT09bnVsbCl7cmV0dXJufXR4W2tleV09UHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKHY9PnYhPW51bGw/djpudWxsKX0pO2lmKHZhbHVlcy5hY2Nlc3NMaXN0KXt0eC5hY2Nlc3NMaXN0PXRoaXMuZm9ybWF0dGVyLmFjY2Vzc0xpc3QodmFsdWVzLmFjY2Vzc0xpc3QpfVtcImRhdGFcIl0uZm9yRWFjaChrZXk9PntpZih2YWx1ZXNba2V5XT09bnVsbCl7cmV0dXJufXR4W2tleV09UHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKHY9PnY/aGV4bGlmeSh2KTpudWxsKX0pO3JldHVybiB0aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvblJlcXVlc3QoeWllbGQgcmVzb2x2ZVByb3BlcnRpZXModHgpKX0pfV9nZXRGaWx0ZXIoZmlsdGVyKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2ZpbHRlcj15aWVsZCBmaWx0ZXI7Y29uc3QgcmVzdWx0PXt9O2lmKGZpbHRlci5hZGRyZXNzIT1udWxsKXtyZXN1bHQuYWRkcmVzcz10aGlzLl9nZXRBZGRyZXNzKGZpbHRlci5hZGRyZXNzKX1bXCJibG9ja0hhc2hcIixcInRvcGljc1wiXS5mb3JFYWNoKGtleT0+e2lmKGZpbHRlcltrZXldPT1udWxsKXtyZXR1cm59cmVzdWx0W2tleV09ZmlsdGVyW2tleV19KTtbXCJmcm9tQmxvY2tcIixcInRvQmxvY2tcIl0uZm9yRWFjaChrZXk9PntpZihmaWx0ZXJba2V5XT09bnVsbCl7cmV0dXJufXJlc3VsdFtrZXldPXRoaXMuX2dldEJsb2NrVGFnKGZpbHRlcltrZXldKX0pO3JldHVybiB0aGlzLmZvcm1hdHRlci5maWx0ZXIoeWllbGQgcmVzb2x2ZVByb3BlcnRpZXMocmVzdWx0KSl9KX1jYWxsKHRyYW5zYWN0aW9uLGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7dHJhbnNhY3Rpb246dGhpcy5fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKSxibG9ja1RhZzp0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZyl9KTtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wZXJmb3JtKFwiY2FsbFwiLHBhcmFtcyk7dHJ5e3JldHVybiBoZXhsaWZ5KHJlc3VsdCl9Y2F0Y2goZXJyb3Ipe3JldHVybiBsb2dnZXIkdC50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIixMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUix7bWV0aG9kOlwiY2FsbFwiLHBhcmFtczpwYXJhbXMscmVzdWx0OnJlc3VsdCxlcnJvcjplcnJvcn0pfX0pfWVzdGltYXRlR2FzKHRyYW5zYWN0aW9uKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2NvbnN0IHBhcmFtcz15aWVsZCByZXNvbHZlUHJvcGVydGllcyh7dHJhbnNhY3Rpb246dGhpcy5fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKX0pO2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJlc3RpbWF0ZUdhc1wiLHBhcmFtcyk7dHJ5e3JldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpfWNhdGNoKGVycm9yKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDpcImVzdGltYXRlR2FzXCIscGFyYW1zOnBhcmFtcyxyZXN1bHQ6cmVzdWx0LGVycm9yOmVycm9yfSl9fSl9X2dldEFkZHJlc3MoYWRkcmVzc09yTmFtZSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBhZGRyZXNzPXlpZWxkIHRoaXMucmVzb2x2ZU5hbWUoYWRkcmVzc09yTmFtZSk7aWYoYWRkcmVzcz09bnVsbCl7bG9nZ2VyJHQudGhyb3dFcnJvcihcIkVOUyBuYW1lIG5vdCBjb25maWd1cmVkXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpgcmVzb2x2ZU5hbWUoJHtKU09OLnN0cmluZ2lmeShhZGRyZXNzT3JOYW1lKX0pYH0pfXJldHVybiBhZGRyZXNzfSl9X2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcsaW5jbHVkZVRyYW5zYWN0aW9ucyl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtibG9ja0hhc2hPckJsb2NrVGFnPXlpZWxkIGJsb2NrSGFzaE9yQmxvY2tUYWc7bGV0IGJsb2NrTnVtYmVyPS0xMjg7Y29uc3QgcGFyYW1zPXtpbmNsdWRlVHJhbnNhY3Rpb25zOiEhaW5jbHVkZVRyYW5zYWN0aW9uc307aWYoaXNIZXhTdHJpbmcoYmxvY2tIYXNoT3JCbG9ja1RhZywzMikpe3BhcmFtcy5ibG9ja0hhc2g9YmxvY2tIYXNoT3JCbG9ja1RhZ31lbHNle3RyeXtwYXJhbXMuYmxvY2tUYWc9dGhpcy5mb3JtYXR0ZXIuYmxvY2tUYWcoeWllbGQgdGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tIYXNoT3JCbG9ja1RhZykpO2lmKGlzSGV4U3RyaW5nKHBhcmFtcy5ibG9ja1RhZykpe2Jsb2NrTnVtYmVyPXBhcnNlSW50KHBhcmFtcy5ibG9ja1RhZy5zdWJzdHJpbmcoMiksMTYpfX1jYXRjaChlcnJvcil7bG9nZ2VyJHQudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBibG9jayBoYXNoIG9yIGJsb2NrIHRhZ1wiLFwiYmxvY2tIYXNoT3JCbG9ja1RhZ1wiLGJsb2NrSGFzaE9yQmxvY2tUYWcpfX1yZXR1cm4gcG9sbCgoKT0+X19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IGJsb2NrPXlpZWxkIHRoaXMucGVyZm9ybShcImdldEJsb2NrXCIscGFyYW1zKTtpZihibG9jaz09bnVsbCl7aWYocGFyYW1zLmJsb2NrSGFzaCE9bnVsbCl7aWYodGhpcy5fZW1pdHRlZFtcImI6XCIrcGFyYW1zLmJsb2NrSGFzaF09PW51bGwpe3JldHVybiBudWxsfX1pZihwYXJhbXMuYmxvY2tUYWchPW51bGwpe2lmKGJsb2NrTnVtYmVyPnRoaXMuX2VtaXR0ZWQuYmxvY2spe3JldHVybiBudWxsfX1yZXR1cm4gdW5kZWZpbmVkfWlmKGluY2x1ZGVUcmFuc2FjdGlvbnMpe2xldCBibG9ja051bWJlcj1udWxsO2ZvcihsZXQgaT0wO2k8YmxvY2sudHJhbnNhY3Rpb25zLmxlbmd0aDtpKyspe2NvbnN0IHR4PWJsb2NrLnRyYW5zYWN0aW9uc1tpXTtpZih0eC5ibG9ja051bWJlcj09bnVsbCl7dHguY29uZmlybWF0aW9ucz0wfWVsc2UgaWYodHguY29uZmlybWF0aW9ucz09bnVsbCl7aWYoYmxvY2tOdW1iZXI9PW51bGwpe2Jsb2NrTnVtYmVyPXlpZWxkIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwKzIqdGhpcy5wb2xsaW5nSW50ZXJ2YWwpfWxldCBjb25maXJtYXRpb25zPWJsb2NrTnVtYmVyLXR4LmJsb2NrTnVtYmVyKzE7aWYoY29uZmlybWF0aW9uczw9MCl7Y29uZmlybWF0aW9ucz0xfXR4LmNvbmZpcm1hdGlvbnM9Y29uZmlybWF0aW9uc319cmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyhibG9jayl9cmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrKGJsb2NrKX0pLHtvbmNlUG9sbDp0aGlzfSl9KX1nZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnKXtyZXR1cm4gdGhpcy5fZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZyxmYWxzZSl9Z2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zKGJsb2NrSGFzaE9yQmxvY2tUYWcpe3JldHVybiB0aGlzLl9nZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnLHRydWUpfWdldFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTt0cmFuc2FjdGlvbkhhc2g9eWllbGQgdHJhbnNhY3Rpb25IYXNoO2NvbnN0IHBhcmFtcz17dHJhbnNhY3Rpb25IYXNoOnRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLHRydWUpfTtyZXR1cm4gcG9sbCgoKT0+X19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHJlc3VsdD15aWVsZCB0aGlzLnBlcmZvcm0oXCJnZXRUcmFuc2FjdGlvblwiLHBhcmFtcyk7aWYocmVzdWx0PT1udWxsKXtpZih0aGlzLl9lbWl0dGVkW1widDpcIit0cmFuc2FjdGlvbkhhc2hdPT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm4gdW5kZWZpbmVkfWNvbnN0IHR4PXRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVzcG9uc2UocmVzdWx0KTtpZih0eC5ibG9ja051bWJlcj09bnVsbCl7dHguY29uZmlybWF0aW9ucz0wfWVsc2UgaWYodHguY29uZmlybWF0aW9ucz09bnVsbCl7Y29uc3QgYmxvY2tOdW1iZXI9eWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDArMip0aGlzLnBvbGxpbmdJbnRlcnZhbCk7bGV0IGNvbmZpcm1hdGlvbnM9YmxvY2tOdW1iZXItdHguYmxvY2tOdW1iZXIrMTtpZihjb25maXJtYXRpb25zPD0wKXtjb25maXJtYXRpb25zPTF9dHguY29uZmlybWF0aW9ucz1jb25maXJtYXRpb25zfXJldHVybiB0aGlzLl93cmFwVHJhbnNhY3Rpb24odHgpfSkse29uY2VQb2xsOnRoaXN9KX0pfWdldFRyYW5zYWN0aW9uUmVjZWlwdCh0cmFuc2FjdGlvbkhhc2gpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7eWllbGQgdGhpcy5nZXROZXR3b3JrKCk7dHJhbnNhY3Rpb25IYXNoPXlpZWxkIHRyYW5zYWN0aW9uSGFzaDtjb25zdCBwYXJhbXM9e3RyYW5zYWN0aW9uSGFzaDp0aGlzLmZvcm1hdHRlci5oYXNoKHRyYW5zYWN0aW9uSGFzaCx0cnVlKX07cmV0dXJuIHBvbGwoKCk9Pl9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCByZXN1bHQ9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIscGFyYW1zKTtpZihyZXN1bHQ9PW51bGwpe2lmKHRoaXMuX2VtaXR0ZWRbXCJ0OlwiK3RyYW5zYWN0aW9uSGFzaF09PW51bGwpe3JldHVybiBudWxsfXJldHVybiB1bmRlZmluZWR9aWYocmVzdWx0LmJsb2NrSGFzaD09bnVsbCl7cmV0dXJuIHVuZGVmaW5lZH1jb25zdCByZWNlaXB0PXRoaXMuZm9ybWF0dGVyLnJlY2VpcHQocmVzdWx0KTtpZihyZWNlaXB0LmJsb2NrTnVtYmVyPT1udWxsKXtyZWNlaXB0LmNvbmZpcm1hdGlvbnM9MH1lbHNlIGlmKHJlY2VpcHQuY29uZmlybWF0aW9ucz09bnVsbCl7Y29uc3QgYmxvY2tOdW1iZXI9eWllbGQgdGhpcy5fZ2V0SW50ZXJuYWxCbG9ja051bWJlcigxMDArMip0aGlzLnBvbGxpbmdJbnRlcnZhbCk7bGV0IGNvbmZpcm1hdGlvbnM9YmxvY2tOdW1iZXItcmVjZWlwdC5ibG9ja051bWJlcisxO2lmKGNvbmZpcm1hdGlvbnM8PTApe2NvbmZpcm1hdGlvbnM9MX1yZWNlaXB0LmNvbmZpcm1hdGlvbnM9Y29uZmlybWF0aW9uc31yZXR1cm4gcmVjZWlwdH0pLHtvbmNlUG9sbDp0aGlzfSl9KX1nZXRMb2dzKGZpbHRlcil7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXt5aWVsZCB0aGlzLmdldE5ldHdvcmsoKTtjb25zdCBwYXJhbXM9eWllbGQgcmVzb2x2ZVByb3BlcnRpZXMoe2ZpbHRlcjp0aGlzLl9nZXRGaWx0ZXIoZmlsdGVyKX0pO2NvbnN0IGxvZ3M9eWllbGQgdGhpcy5wZXJmb3JtKFwiZ2V0TG9nc1wiLHBhcmFtcyk7bG9ncy5mb3JFYWNoKGxvZz0+e2lmKGxvZy5yZW1vdmVkPT1udWxsKXtsb2cucmVtb3ZlZD1mYWxzZX19KTtyZXR1cm4gRm9ybWF0dGVyLmFycmF5T2YodGhpcy5mb3JtYXR0ZXIuZmlsdGVyTG9nLmJpbmQodGhpcy5mb3JtYXR0ZXIpKShsb2dzKX0pfWdldEV0aGVyUHJpY2UoKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRoaXMuZ2V0TmV0d29yaygpO3JldHVybiB0aGlzLnBlcmZvcm0oXCJnZXRFdGhlclByaWNlXCIse30pfSl9X2dldEJsb2NrVGFnKGJsb2NrVGFnKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2Jsb2NrVGFnPXlpZWxkIGJsb2NrVGFnO2lmKHR5cGVvZiBibG9ja1RhZz09PVwibnVtYmVyXCImJmJsb2NrVGFnPDApe2lmKGJsb2NrVGFnJTEpe2xvZ2dlciR0LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgQmxvY2tUYWdcIixcImJsb2NrVGFnXCIsYmxvY2tUYWcpfWxldCBibG9ja051bWJlcj15aWVsZCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCsyKnRoaXMucG9sbGluZ0ludGVydmFsKTtibG9ja051bWJlcis9YmxvY2tUYWc7aWYoYmxvY2tOdW1iZXI8MCl7YmxvY2tOdW1iZXI9MH1yZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2tUYWcoYmxvY2tOdW1iZXIpfXJldHVybiB0aGlzLmZvcm1hdHRlci5ibG9ja1RhZyhibG9ja1RhZyl9KX1nZXRSZXNvbHZlcihuYW1lKXtyZXR1cm4gX19hd2FpdGVyJDgodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IGFkZHJlc3M9eWllbGQgdGhpcy5fZ2V0UmVzb2x2ZXIobmFtZSk7aWYoYWRkcmVzcz09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIG5ldyBSZXNvbHZlcih0aGlzLGFkZHJlc3MsbmFtZSl9KX1fZ2V0UmVzb2x2ZXIobmFtZSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBuZXR3b3JrPXlpZWxkIHRoaXMuZ2V0TmV0d29yaygpO2lmKCFuZXR3b3JrLmVuc0FkZHJlc3Mpe2xvZ2dlciR0LnRocm93RXJyb3IoXCJuZXR3b3JrIGRvZXMgbm90IHN1cHBvcnQgRU5TXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIkVOU1wiLG5ldHdvcms6bmV0d29yay5uYW1lfSl9Y29uc3QgdHJhbnNhY3Rpb249e3RvOm5ldHdvcmsuZW5zQWRkcmVzcyxkYXRhOlwiMHgwMTc4YjhiZlwiK25hbWVoYXNoKG5hbWUpLnN1YnN0cmluZygyKX07cmV0dXJuIHRoaXMuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKHlpZWxkIHRoaXMuY2FsbCh0cmFuc2FjdGlvbikpfSl9cmVzb2x2ZU5hbWUobmFtZSl7cmV0dXJuIF9fYXdhaXRlciQ4KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtuYW1lPXlpZWxkIG5hbWU7dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhuYW1lKSl9Y2F0Y2goZXJyb3Ipe2lmKGlzSGV4U3RyaW5nKG5hbWUpKXt0aHJvdyBlcnJvcn19aWYodHlwZW9mIG5hbWUhPT1cInN0cmluZ1wiKXtsb2dnZXIkdC50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEVOUyBuYW1lXCIsXCJuYW1lXCIsbmFtZSl9Y29uc3QgcmVzb2x2ZXI9eWllbGQgdGhpcy5nZXRSZXNvbHZlcihuYW1lKTtpZighcmVzb2x2ZXIpe3JldHVybiBudWxsfXJldHVybiB5aWVsZCByZXNvbHZlci5nZXRBZGRyZXNzKCl9KX1sb29rdXBBZGRyZXNzKGFkZHJlc3Mpe3JldHVybiBfX2F3YWl0ZXIkOCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7YWRkcmVzcz15aWVsZCBhZGRyZXNzO2FkZHJlc3M9dGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhhZGRyZXNzKTtjb25zdCByZXZlcnNlTmFtZT1hZGRyZXNzLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpK1wiLmFkZHIucmV2ZXJzZVwiO2NvbnN0IHJlc29sdmVyQWRkcmVzcz15aWVsZCB0aGlzLl9nZXRSZXNvbHZlcihyZXZlcnNlTmFtZSk7aWYoIXJlc29sdmVyQWRkcmVzcyl7cmV0dXJuIG51bGx9bGV0IGJ5dGVzPWFycmF5aWZ5KHlpZWxkIHRoaXMuY2FsbCh7dG86cmVzb2x2ZXJBZGRyZXNzLGRhdGE6XCIweDY5MWYzNDMxXCIrbmFtZWhhc2gocmV2ZXJzZU5hbWUpLnN1YnN0cmluZygyKX0pKTtpZihieXRlcy5sZW5ndGg8MzJ8fCFCaWdOdW1iZXIuZnJvbShieXRlcy5zbGljZSgwLDMyKSkuZXEoMzIpKXtyZXR1cm4gbnVsbH1ieXRlcz1ieXRlcy5zbGljZSgzMik7aWYoYnl0ZXMubGVuZ3RoPDMyKXtyZXR1cm4gbnVsbH1jb25zdCBsZW5ndGg9QmlnTnVtYmVyLmZyb20oYnl0ZXMuc2xpY2UoMCwzMikpLnRvTnVtYmVyKCk7Ynl0ZXM9Ynl0ZXMuc2xpY2UoMzIpO2lmKGxlbmd0aD5ieXRlcy5sZW5ndGgpe3JldHVybiBudWxsfWNvbnN0IG5hbWU9dG9VdGY4U3RyaW5nKGJ5dGVzLnNsaWNlKDAsbGVuZ3RoKSk7Y29uc3QgYWRkcj15aWVsZCB0aGlzLnJlc29sdmVOYW1lKG5hbWUpO2lmKGFkZHIhPWFkZHJlc3Mpe3JldHVybiBudWxsfXJldHVybiBuYW1lfSl9cGVyZm9ybShtZXRob2QscGFyYW1zKXtyZXR1cm4gbG9nZ2VyJHQudGhyb3dFcnJvcihtZXRob2QrXCIgbm90IGltcGxlbWVudGVkXCIsTG9nZ2VyLmVycm9ycy5OT1RfSU1QTEVNRU5URUQse29wZXJhdGlvbjptZXRob2R9KX1fc3RhcnRFdmVudChldmVudCl7dGhpcy5wb2xsaW5nPXRoaXMuX2V2ZW50cy5maWx0ZXIoZT0+ZS5wb2xsYWJsZSgpKS5sZW5ndGg+MH1fc3RvcEV2ZW50KGV2ZW50KXt0aGlzLnBvbGxpbmc9dGhpcy5fZXZlbnRzLmZpbHRlcihlPT5lLnBvbGxhYmxlKCkpLmxlbmd0aD4wfV9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSxsaXN0ZW5lcixvbmNlKXtjb25zdCBldmVudD1uZXcgRXZlbnQoZ2V0RXZlbnRUYWckMShldmVudE5hbWUpLGxpc3RlbmVyLG9uY2UpO3RoaXMuX2V2ZW50cy5wdXNoKGV2ZW50KTt0aGlzLl9zdGFydEV2ZW50KGV2ZW50KTtyZXR1cm4gdGhpc31vbihldmVudE5hbWUsbGlzdGVuZXIpe3JldHVybiB0aGlzLl9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSxsaXN0ZW5lcixmYWxzZSl9b25jZShldmVudE5hbWUsbGlzdGVuZXIpe3JldHVybiB0aGlzLl9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSxsaXN0ZW5lcix0cnVlKX1lbWl0KGV2ZW50TmFtZSwuLi5hcmdzKXtsZXQgcmVzdWx0PWZhbHNlO2xldCBzdG9wcGVkPVtdO2xldCBldmVudFRhZz1nZXRFdmVudFRhZyQxKGV2ZW50TmFtZSk7dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50cy5maWx0ZXIoZXZlbnQ9PntpZihldmVudC50YWchPT1ldmVudFRhZyl7cmV0dXJuIHRydWV9c2V0VGltZW91dCgoKT0+e2V2ZW50Lmxpc3RlbmVyLmFwcGx5KHRoaXMsYXJncyl9LDApO3Jlc3VsdD10cnVlO2lmKGV2ZW50Lm9uY2Upe3N0b3BwZWQucHVzaChldmVudCk7cmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfSk7c3RvcHBlZC5mb3JFYWNoKGV2ZW50PT57dGhpcy5fc3RvcEV2ZW50KGV2ZW50KX0pO3JldHVybiByZXN1bHR9bGlzdGVuZXJDb3VudChldmVudE5hbWUpe2lmKCFldmVudE5hbWUpe3JldHVybiB0aGlzLl9ldmVudHMubGVuZ3RofWxldCBldmVudFRhZz1nZXRFdmVudFRhZyQxKGV2ZW50TmFtZSk7cmV0dXJuIHRoaXMuX2V2ZW50cy5maWx0ZXIoZXZlbnQ9PntyZXR1cm4gZXZlbnQudGFnPT09ZXZlbnRUYWd9KS5sZW5ndGh9bGlzdGVuZXJzKGV2ZW50TmFtZSl7aWYoZXZlbnROYW1lPT1udWxsKXtyZXR1cm4gdGhpcy5fZXZlbnRzLm1hcChldmVudD0+ZXZlbnQubGlzdGVuZXIpfWxldCBldmVudFRhZz1nZXRFdmVudFRhZyQxKGV2ZW50TmFtZSk7cmV0dXJuIHRoaXMuX2V2ZW50cy5maWx0ZXIoZXZlbnQ9PmV2ZW50LnRhZz09PWV2ZW50VGFnKS5tYXAoZXZlbnQ9PmV2ZW50Lmxpc3RlbmVyKX1vZmYoZXZlbnROYW1lLGxpc3RlbmVyKXtpZihsaXN0ZW5lcj09bnVsbCl7cmV0dXJuIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSl9Y29uc3Qgc3RvcHBlZD1bXTtsZXQgZm91bmQ9ZmFsc2U7bGV0IGV2ZW50VGFnPWdldEV2ZW50VGFnJDEoZXZlbnROYW1lKTt0aGlzLl9ldmVudHM9dGhpcy5fZXZlbnRzLmZpbHRlcihldmVudD0+e2lmKGV2ZW50LnRhZyE9PWV2ZW50VGFnfHxldmVudC5saXN0ZW5lciE9bGlzdGVuZXIpe3JldHVybiB0cnVlfWlmKGZvdW5kKXtyZXR1cm4gdHJ1ZX1mb3VuZD10cnVlO3N0b3BwZWQucHVzaChldmVudCk7cmV0dXJuIGZhbHNlfSk7c3RvcHBlZC5mb3JFYWNoKGV2ZW50PT57dGhpcy5fc3RvcEV2ZW50KGV2ZW50KX0pO3JldHVybiB0aGlzfXJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpe2xldCBzdG9wcGVkPVtdO2lmKGV2ZW50TmFtZT09bnVsbCl7c3RvcHBlZD10aGlzLl9ldmVudHM7dGhpcy5fZXZlbnRzPVtdfWVsc2V7Y29uc3QgZXZlbnRUYWc9Z2V0RXZlbnRUYWckMShldmVudE5hbWUpO3RoaXMuX2V2ZW50cz10aGlzLl9ldmVudHMuZmlsdGVyKGV2ZW50PT57aWYoZXZlbnQudGFnIT09ZXZlbnRUYWcpe3JldHVybiB0cnVlfXN0b3BwZWQucHVzaChldmVudCk7cmV0dXJuIGZhbHNlfSl9c3RvcHBlZC5mb3JFYWNoKGV2ZW50PT57dGhpcy5fc3RvcEV2ZW50KGV2ZW50KX0pO3JldHVybiB0aGlzfX1cInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJDk9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciR1PW5ldyBMb2dnZXIodmVyc2lvbiRtKTtjb25zdCBlcnJvckdhcz1bXCJjYWxsXCIsXCJlc3RpbWF0ZUdhc1wiXTtmdW5jdGlvbiBjaGVja0Vycm9yKG1ldGhvZCxlcnJvcixwYXJhbXMpe2lmKG1ldGhvZD09PVwiY2FsbFwiJiZlcnJvci5jb2RlPT09TG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ipe2NvbnN0IGU9ZXJyb3IuZXJyb3I7aWYoZSYmZS5tZXNzYWdlLm1hdGNoKFwicmV2ZXJ0ZWRcIikmJmlzSGV4U3RyaW5nKGUuZGF0YSkpe3JldHVybiBlLmRhdGF9fWxldCBtZXNzYWdlPWVycm9yLm1lc3NhZ2U7aWYoZXJyb3IuY29kZT09PUxvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SJiZlcnJvci5lcnJvciYmdHlwZW9mIGVycm9yLmVycm9yLm1lc3NhZ2U9PT1cInN0cmluZ1wiKXttZXNzYWdlPWVycm9yLmVycm9yLm1lc3NhZ2V9ZWxzZSBpZih0eXBlb2YgZXJyb3IuYm9keT09PVwic3RyaW5nXCIpe21lc3NhZ2U9ZXJyb3IuYm9keX1lbHNlIGlmKHR5cGVvZiBlcnJvci5yZXNwb25zZVRleHQ9PT1cInN0cmluZ1wiKXttZXNzYWdlPWVycm9yLnJlc3BvbnNlVGV4dH1tZXNzYWdlPShtZXNzYWdlfHxcIlwiKS50b0xvd2VyQ2FzZSgpO2NvbnN0IHRyYW5zYWN0aW9uPXBhcmFtcy50cmFuc2FjdGlvbnx8cGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uO2lmKG1lc3NhZ2UubWF0Y2goL2luc3VmZmljaWVudCBmdW5kcy8pKXtsb2dnZXIkdS50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGZ1bmRzIGZvciBpbnRyaW5zaWMgdHJhbnNhY3Rpb24gY29zdFwiLExvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9aWYobWVzc2FnZS5tYXRjaCgvbm9uY2UgdG9vIGxvdy8pKXtsb2dnZXIkdS50aHJvd0Vycm9yKFwibm9uY2UgaGFzIGFscmVhZHkgYmVlbiB1c2VkXCIsTG9nZ2VyLmVycm9ycy5OT05DRV9FWFBJUkVELHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9aWYobWVzc2FnZS5tYXRjaCgvcmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWQvKSl7bG9nZ2VyJHUudGhyb3dFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsTG9nZ2VyLmVycm9ycy5SRVBMQUNFTUVOVF9VTkRFUlBSSUNFRCx7ZXJyb3I6ZXJyb3IsbWV0aG9kOm1ldGhvZCx0cmFuc2FjdGlvbjp0cmFuc2FjdGlvbn0pfWlmKG1lc3NhZ2UubWF0Y2goL29ubHkgcmVwbGF5LXByb3RlY3RlZC8pKXtsb2dnZXIkdS50aHJvd0Vycm9yKFwibGVnYWN5IHByZS1laXAtMTU1IHRyYW5zYWN0aW9ucyBub3Qgc3VwcG9ydGVkXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX1pZihlcnJvckdhcy5pbmRleE9mKG1ldGhvZCk+PTAmJm1lc3NhZ2UubWF0Y2goL2dhcyByZXF1aXJlZCBleGNlZWRzIGFsbG93YW5jZXxhbHdheXMgZmFpbGluZyB0cmFuc2FjdGlvbnxleGVjdXRpb24gcmV2ZXJ0ZWQvKSl7bG9nZ2VyJHUudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIixMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9dGhyb3cgZXJyb3J9ZnVuY3Rpb24gdGltZXIodGltZW91dCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpe3NldFRpbWVvdXQocmVzb2x2ZSx0aW1lb3V0KX0pfWZ1bmN0aW9uIGdldFJlc3VsdChwYXlsb2FkKXtpZihwYXlsb2FkLmVycm9yKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtlcnJvci5jb2RlPXBheWxvYWQuZXJyb3IuY29kZTtlcnJvci5kYXRhPXBheWxvYWQuZXJyb3IuZGF0YTt0aHJvdyBlcnJvcn1yZXR1cm4gcGF5bG9hZC5yZXN1bHR9ZnVuY3Rpb24gZ2V0TG93ZXJDYXNlKHZhbHVlKXtpZih2YWx1ZSl7cmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCl9cmV0dXJuIHZhbHVlfWNvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkJDQ9e307Y2xhc3MgSnNvblJwY1NpZ25lciBleHRlbmRzIFNpZ25lcntjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkLHByb3ZpZGVyLGFkZHJlc3NPckluZGV4KXtsb2dnZXIkdS5jaGVja05ldyhuZXcudGFyZ2V0LEpzb25ScGNTaWduZXIpO3N1cGVyKCk7aWYoY29uc3RydWN0b3JHdWFyZCE9PV9jb25zdHJ1Y3Rvckd1YXJkJDQpe3Rocm93IG5ldyBFcnJvcihcImRvIG5vdCBjYWxsIHRoZSBKc29uUnBjU2lnbmVyIGNvbnN0cnVjdG9yIGRpcmVjdGx5OyB1c2UgcHJvdmlkZXIuZ2V0U2lnbmVyXCIpfWRlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHByb3ZpZGVyKTtpZihhZGRyZXNzT3JJbmRleD09bnVsbCl7YWRkcmVzc09ySW5kZXg9MH1pZih0eXBlb2YgYWRkcmVzc09ySW5kZXg9PT1cInN0cmluZ1wiKXtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2FkZHJlc3NcIix0aGlzLnByb3ZpZGVyLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3NPckluZGV4KSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9pbmRleFwiLG51bGwpfWVsc2UgaWYodHlwZW9mIGFkZHJlc3NPckluZGV4PT09XCJudW1iZXJcIil7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9pbmRleFwiLGFkZHJlc3NPckluZGV4KTtkZWZpbmVSZWFkT25seSh0aGlzLFwiX2FkZHJlc3NcIixudWxsKX1lbHNle2xvZ2dlciR1LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyBvciBpbmRleFwiLFwiYWRkcmVzc09ySW5kZXhcIixhZGRyZXNzT3JJbmRleCl9fWNvbm5lY3QocHJvdmlkZXIpe3JldHVybiBsb2dnZXIkdS50aHJvd0Vycm9yKFwiY2Fubm90IGFsdGVyIEpTT04tUlBDIFNpZ25lciBjb25uZWN0aW9uXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcImNvbm5lY3RcIn0pfWNvbm5lY3RVbmNoZWNrZWQoKXtyZXR1cm4gbmV3IFVuY2hlY2tlZEpzb25ScGNTaWduZXIoX2NvbnN0cnVjdG9yR3VhcmQkNCx0aGlzLnByb3ZpZGVyLHRoaXMuX2FkZHJlc3N8fHRoaXMuX2luZGV4KX1nZXRBZGRyZXNzKCl7aWYodGhpcy5fYWRkcmVzcyl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9hZGRyZXNzKX1yZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX2FjY291bnRzXCIsW10pLnRoZW4oYWNjb3VudHM9PntpZihhY2NvdW50cy5sZW5ndGg8PXRoaXMuX2luZGV4KXtsb2dnZXIkdS50aHJvd0Vycm9yKFwidW5rbm93biBhY2NvdW50ICNcIit0aGlzLl9pbmRleCxMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwiZ2V0QWRkcmVzc1wifSl9cmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoYWNjb3VudHNbdGhpcy5faW5kZXhdKX0pfXNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7dHJhbnNhY3Rpb249c2hhbGxvd0NvcHkodHJhbnNhY3Rpb24pO2NvbnN0IGZyb21BZGRyZXNzPXRoaXMuZ2V0QWRkcmVzcygpLnRoZW4oYWRkcmVzcz0+e2lmKGFkZHJlc3Mpe2FkZHJlc3M9YWRkcmVzcy50b0xvd2VyQ2FzZSgpfXJldHVybiBhZGRyZXNzfSk7aWYodHJhbnNhY3Rpb24uZ2FzTGltaXQ9PW51bGwpe2NvbnN0IGVzdGltYXRlPXNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtlc3RpbWF0ZS5mcm9tPWZyb21BZGRyZXNzO3RyYW5zYWN0aW9uLmdhc0xpbWl0PXRoaXMucHJvdmlkZXIuZXN0aW1hdGVHYXMoZXN0aW1hdGUpfXJldHVybiByZXNvbHZlUHJvcGVydGllcyh7dHg6cmVzb2x2ZVByb3BlcnRpZXModHJhbnNhY3Rpb24pLHNlbmRlcjpmcm9tQWRkcmVzc30pLnRoZW4oKHt0eDp0eCxzZW5kZXI6c2VuZGVyfSk9PntpZih0eC5mcm9tIT1udWxsKXtpZih0eC5mcm9tLnRvTG93ZXJDYXNlKCkhPT1zZW5kZXIpe2xvZ2dlciR1LnRocm93QXJndW1lbnRFcnJvcihcImZyb20gYWRkcmVzcyBtaXNtYXRjaFwiLFwidHJhbnNhY3Rpb25cIix0cmFuc2FjdGlvbil9fWVsc2V7dHguZnJvbT1zZW5kZXJ9Y29uc3QgaGV4VHg9dGhpcy5wcm92aWRlci5jb25zdHJ1Y3Rvci5oZXhsaWZ5VHJhbnNhY3Rpb24odHgse2Zyb206dHJ1ZX0pO3JldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsW2hleFR4XSkudGhlbihoYXNoPT57cmV0dXJuIGhhc2h9LGVycm9yPT57cmV0dXJuIGNoZWNrRXJyb3IoXCJzZW5kVHJhbnNhY3Rpb25cIixlcnJvcixoZXhUeCl9KX0pfXNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7cmV0dXJuIGxvZ2dlciR1LnRocm93RXJyb3IoXCJzaWduaW5nIHRyYW5zYWN0aW9ucyBpcyB1bnN1cHBvcnRlZFwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzaWduVHJhbnNhY3Rpb25cIn0pfXNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbil7cmV0dXJuIHRoaXMuc2VuZFVuY2hlY2tlZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKS50aGVuKGhhc2g9PntyZXR1cm4gcG9sbCgoKT0+e3JldHVybiB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uKGhhc2gpLnRoZW4odHg9PntpZih0eD09PW51bGwpe3JldHVybiB1bmRlZmluZWR9cmV0dXJuIHRoaXMucHJvdmlkZXIuX3dyYXBUcmFuc2FjdGlvbih0eCxoYXNoKX0pfSx7b25jZUJsb2NrOnRoaXMucHJvdmlkZXJ9KS5jYXRjaChlcnJvcj0+e2Vycm9yLnRyYW5zYWN0aW9uSGFzaD1oYXNoO3Rocm93IGVycm9yfSl9KX1zaWduTWVzc2FnZShtZXNzYWdlKXtyZXR1cm4gX19hd2FpdGVyJDkodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IGRhdGE9dHlwZW9mIG1lc3NhZ2U9PT1cInN0cmluZ1wiP3RvVXRmOEJ5dGVzKG1lc3NhZ2UpOm1lc3NhZ2U7Y29uc3QgYWRkcmVzcz15aWVsZCB0aGlzLmdldEFkZHJlc3MoKTtyZXR1cm4geWllbGQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25cIixbYWRkcmVzcy50b0xvd2VyQ2FzZSgpLGhleGxpZnkoZGF0YSldKX0pfV9zaWduVHlwZWREYXRhKGRvbWFpbix0eXBlcyx2YWx1ZSl7cmV0dXJuIF9fYXdhaXRlciQ5KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBwb3B1bGF0ZWQ9eWllbGQgVHlwZWREYXRhRW5jb2Rlci5yZXNvbHZlTmFtZXMoZG9tYWluLHR5cGVzLHZhbHVlLG5hbWU9PntyZXR1cm4gdGhpcy5wcm92aWRlci5yZXNvbHZlTmFtZShuYW1lKX0pO2NvbnN0IGFkZHJlc3M9eWllbGQgdGhpcy5nZXRBZGRyZXNzKCk7cmV0dXJuIHlpZWxkIHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsW2FkZHJlc3MudG9Mb3dlckNhc2UoKSxKU09OLnN0cmluZ2lmeShUeXBlZERhdGFFbmNvZGVyLmdldFBheWxvYWQocG9wdWxhdGVkLmRvbWFpbix0eXBlcyxwb3B1bGF0ZWQudmFsdWUpKV0pfSl9dW5sb2NrKHBhc3N3b3JkKXtyZXR1cm4gX19hd2FpdGVyJDkodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2NvbnN0IHByb3ZpZGVyPXRoaXMucHJvdmlkZXI7Y29uc3QgYWRkcmVzcz15aWVsZCB0aGlzLmdldEFkZHJlc3MoKTtyZXR1cm4gcHJvdmlkZXIuc2VuZChcInBlcnNvbmFsX3VubG9ja0FjY291bnRcIixbYWRkcmVzcy50b0xvd2VyQ2FzZSgpLHBhc3N3b3JkLG51bGxdKX0pfX1jbGFzcyBVbmNoZWNrZWRKc29uUnBjU2lnbmVyIGV4dGVuZHMgSnNvblJwY1NpZ25lcntzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pe3JldHVybiB0aGlzLnNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikudGhlbihoYXNoPT57cmV0dXJue2hhc2g6aGFzaCxub25jZTpudWxsLGdhc0xpbWl0Om51bGwsZ2FzUHJpY2U6bnVsbCxkYXRhOm51bGwsdmFsdWU6bnVsbCxjaGFpbklkOm51bGwsY29uZmlybWF0aW9uczowLGZyb206bnVsbCx3YWl0OmNvbmZpcm1hdGlvbnM9PntyZXR1cm4gdGhpcy5wcm92aWRlci53YWl0Rm9yVHJhbnNhY3Rpb24oaGFzaCxjb25maXJtYXRpb25zKX19fSl9fWNvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXMkMz17Y2hhaW5JZDp0cnVlLGRhdGE6dHJ1ZSxnYXNMaW1pdDp0cnVlLGdhc1ByaWNlOnRydWUsbm9uY2U6dHJ1ZSx0bzp0cnVlLHZhbHVlOnRydWUsdHlwZTp0cnVlLGFjY2Vzc0xpc3Q6dHJ1ZX07Y2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVye2NvbnN0cnVjdG9yKHVybCxuZXR3b3JrKXtsb2dnZXIkdS5jaGVja05ldyhuZXcudGFyZ2V0LEpzb25ScGNQcm92aWRlcik7bGV0IG5ldHdvcmtPclJlYWR5PW5ldHdvcms7aWYobmV0d29ya09yUmVhZHk9PW51bGwpe25ldHdvcmtPclJlYWR5PW5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntzZXRUaW1lb3V0KCgpPT57dGhpcy5kZXRlY3ROZXR3b3JrKCkudGhlbihuZXR3b3JrPT57cmVzb2x2ZShuZXR3b3JrKX0sZXJyb3I9PntyZWplY3QoZXJyb3IpfSl9LDApfSl9c3VwZXIobmV0d29ya09yUmVhZHkpO2lmKCF1cmwpe3VybD1nZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImRlZmF1bHRVcmxcIikoKX1pZih0eXBlb2YgdXJsPT09XCJzdHJpbmdcIil7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImNvbm5lY3Rpb25cIixPYmplY3QuZnJlZXplKHt1cmw6dXJsfSkpfWVsc2V7ZGVmaW5lUmVhZE9ubHkodGhpcyxcImNvbm5lY3Rpb25cIixPYmplY3QuZnJlZXplKHNoYWxsb3dDb3B5KHVybCkpKX10aGlzLl9uZXh0SWQ9NDJ9Z2V0IF9jYWNoZSgpe2lmKHRoaXMuX2V2ZW50TG9vcENhY2hlPT1udWxsKXt0aGlzLl9ldmVudExvb3BDYWNoZT17fX1yZXR1cm4gdGhpcy5fZXZlbnRMb29wQ2FjaGV9c3RhdGljIGRlZmF1bHRVcmwoKXtyZXR1cm5cImh0dHA6Ly9sb2NhbGhvc3Q6ODU0NVwifWRldGVjdE5ldHdvcmsoKXtpZighdGhpcy5fY2FjaGVbXCJkZXRlY3ROZXR3b3JrXCJdKXt0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl09dGhpcy5fdW5jYWNoZWREZXRlY3ROZXR3b3JrKCk7c2V0VGltZW91dCgoKT0+e3RoaXMuX2NhY2hlW1wiZGV0ZWN0TmV0d29ya1wiXT1udWxsfSwwKX1yZXR1cm4gdGhpcy5fY2FjaGVbXCJkZXRlY3ROZXR3b3JrXCJdfV91bmNhY2hlZERldGVjdE5ldHdvcmsoKXtyZXR1cm4gX19hd2FpdGVyJDkodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3lpZWxkIHRpbWVyKDApO2xldCBjaGFpbklkPW51bGw7dHJ5e2NoYWluSWQ9eWllbGQgdGhpcy5zZW5kKFwiZXRoX2NoYWluSWRcIixbXSl9Y2F0Y2goZXJyb3Ipe3RyeXtjaGFpbklkPXlpZWxkIHRoaXMuc2VuZChcIm5ldF92ZXJzaW9uXCIsW10pfWNhdGNoKGVycm9yKXt9fWlmKGNoYWluSWQhPW51bGwpe2NvbnN0IGdldE5ldHdvcms9Z2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJnZXROZXR3b3JrXCIpO3RyeXtyZXR1cm4gZ2V0TmV0d29yayhCaWdOdW1iZXIuZnJvbShjaGFpbklkKS50b051bWJlcigpKX1jYXRjaChlcnJvcil7cmV0dXJuIGxvZ2dlciR1LnRocm93RXJyb3IoXCJjb3VsZCBub3QgZGV0ZWN0IG5ldHdvcmtcIixMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1Ise2NoYWluSWQ6Y2hhaW5JZCxldmVudDpcImludmFsaWROZXR3b3JrXCIsc2VydmVyRXJyb3I6ZXJyb3J9KX19cmV0dXJuIGxvZ2dlciR1LnRocm93RXJyb3IoXCJjb3VsZCBub3QgZGV0ZWN0IG5ldHdvcmtcIixMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1Ise2V2ZW50Olwibm9OZXR3b3JrXCJ9KX0pfWdldFNpZ25lcihhZGRyZXNzT3JJbmRleCl7cmV0dXJuIG5ldyBKc29uUnBjU2lnbmVyKF9jb25zdHJ1Y3Rvckd1YXJkJDQsdGhpcyxhZGRyZXNzT3JJbmRleCl9Z2V0VW5jaGVja2VkU2lnbmVyKGFkZHJlc3NPckluZGV4KXtyZXR1cm4gdGhpcy5nZXRTaWduZXIoYWRkcmVzc09ySW5kZXgpLmNvbm5lY3RVbmNoZWNrZWQoKX1saXN0QWNjb3VudHMoKXtyZXR1cm4gdGhpcy5zZW5kKFwiZXRoX2FjY291bnRzXCIsW10pLnRoZW4oYWNjb3VudHM9PntyZXR1cm4gYWNjb3VudHMubWFwKGE9PnRoaXMuZm9ybWF0dGVyLmFkZHJlc3MoYSkpfSl9c2VuZChtZXRob2QscGFyYW1zKXtjb25zdCByZXF1ZXN0PXttZXRob2Q6bWV0aG9kLHBhcmFtczpwYXJhbXMsaWQ6dGhpcy5fbmV4dElkKyssanNvbnJwYzpcIjIuMFwifTt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0XCIscmVxdWVzdDpkZWVwQ29weShyZXF1ZXN0KSxwcm92aWRlcjp0aGlzfSk7Y29uc3QgY2FjaGU9W1wiZXRoX2NoYWluSWRcIixcImV0aF9ibG9ja051bWJlclwiXS5pbmRleE9mKG1ldGhvZCk+PTA7aWYoY2FjaGUmJnRoaXMuX2NhY2hlW21ldGhvZF0pe3JldHVybiB0aGlzLl9jYWNoZVttZXRob2RdfWNvbnN0IHJlc3VsdD1mZXRjaEpzb24odGhpcy5jb25uZWN0aW9uLEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLGdldFJlc3VsdCkudGhlbihyZXN1bHQ9Pnt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLHJlcXVlc3Q6cmVxdWVzdCxyZXNwb25zZTpyZXN1bHQscHJvdmlkZXI6dGhpc30pO3JldHVybiByZXN1bHR9LGVycm9yPT57dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixlcnJvcjplcnJvcixyZXF1ZXN0OnJlcXVlc3QscHJvdmlkZXI6dGhpc30pO3Rocm93IGVycm9yfSk7aWYoY2FjaGUpe3RoaXMuX2NhY2hlW21ldGhvZF09cmVzdWx0O3NldFRpbWVvdXQoKCk9Pnt0aGlzLl9jYWNoZVttZXRob2RdPW51bGx9LDApfXJldHVybiByZXN1bHR9cHJlcGFyZVJlcXVlc3QobWV0aG9kLHBhcmFtcyl7c3dpdGNoKG1ldGhvZCl7Y2FzZVwiZ2V0QmxvY2tOdW1iZXJcIjpyZXR1cm5bXCJldGhfYmxvY2tOdW1iZXJcIixbXV07Y2FzZVwiZ2V0R2FzUHJpY2VcIjpyZXR1cm5bXCJldGhfZ2FzUHJpY2VcIixbXV07Y2FzZVwiZ2V0QmFsYW5jZVwiOnJldHVybltcImV0aF9nZXRCYWxhbmNlXCIsW2dldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcykscGFyYW1zLmJsb2NrVGFnXV07Y2FzZVwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiOnJldHVybltcImV0aF9nZXRUcmFuc2FjdGlvbkNvdW50XCIsW2dldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcykscGFyYW1zLmJsb2NrVGFnXV07Y2FzZVwiZ2V0Q29kZVwiOnJldHVybltcImV0aF9nZXRDb2RlXCIsW2dldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcykscGFyYW1zLmJsb2NrVGFnXV07Y2FzZVwiZ2V0U3RvcmFnZUF0XCI6cmV0dXJuW1wiZXRoX2dldFN0b3JhZ2VBdFwiLFtnZXRMb3dlckNhc2UocGFyYW1zLmFkZHJlc3MpLHBhcmFtcy5wb3NpdGlvbixwYXJhbXMuYmxvY2tUYWddXTtjYXNlXCJzZW5kVHJhbnNhY3Rpb25cIjpyZXR1cm5bXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsW3BhcmFtcy5zaWduZWRUcmFuc2FjdGlvbl1dO2Nhc2VcImdldEJsb2NrXCI6aWYocGFyYW1zLmJsb2NrVGFnKXtyZXR1cm5bXCJldGhfZ2V0QmxvY2tCeU51bWJlclwiLFtwYXJhbXMuYmxvY2tUYWcsISFwYXJhbXMuaW5jbHVkZVRyYW5zYWN0aW9uc11dfWVsc2UgaWYocGFyYW1zLmJsb2NrSGFzaCl7cmV0dXJuW1wiZXRoX2dldEJsb2NrQnlIYXNoXCIsW3BhcmFtcy5ibG9ja0hhc2gsISFwYXJhbXMuaW5jbHVkZVRyYW5zYWN0aW9uc11dfXJldHVybiBudWxsO2Nhc2VcImdldFRyYW5zYWN0aW9uXCI6cmV0dXJuW1wiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsW3BhcmFtcy50cmFuc2FjdGlvbkhhc2hdXTtjYXNlXCJnZXRUcmFuc2FjdGlvblJlY2VpcHRcIjpyZXR1cm5bXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsW3BhcmFtcy50cmFuc2FjdGlvbkhhc2hdXTtjYXNlXCJjYWxsXCI6e2NvbnN0IGhleGxpZnlUcmFuc2FjdGlvbj1nZXRTdGF0aWModGhpcy5jb25zdHJ1Y3RvcixcImhleGxpZnlUcmFuc2FjdGlvblwiKTtyZXR1cm5bXCJldGhfY2FsbFwiLFtoZXhsaWZ5VHJhbnNhY3Rpb24ocGFyYW1zLnRyYW5zYWN0aW9uLHtmcm9tOnRydWV9KSxwYXJhbXMuYmxvY2tUYWddXX1jYXNlXCJlc3RpbWF0ZUdhc1wiOntjb25zdCBoZXhsaWZ5VHJhbnNhY3Rpb249Z2V0U3RhdGljKHRoaXMuY29uc3RydWN0b3IsXCJoZXhsaWZ5VHJhbnNhY3Rpb25cIik7cmV0dXJuW1wiZXRoX2VzdGltYXRlR2FzXCIsW2hleGxpZnlUcmFuc2FjdGlvbihwYXJhbXMudHJhbnNhY3Rpb24se2Zyb206dHJ1ZX0pXV19Y2FzZVwiZ2V0TG9nc1wiOmlmKHBhcmFtcy5maWx0ZXImJnBhcmFtcy5maWx0ZXIuYWRkcmVzcyE9bnVsbCl7cGFyYW1zLmZpbHRlci5hZGRyZXNzPWdldExvd2VyQ2FzZShwYXJhbXMuZmlsdGVyLmFkZHJlc3MpfXJldHVybltcImV0aF9nZXRMb2dzXCIsW3BhcmFtcy5maWx0ZXJdXTtkZWZhdWx0OmJyZWFrfXJldHVybiBudWxsfXBlcmZvcm0obWV0aG9kLHBhcmFtcyl7cmV0dXJuIF9fYXdhaXRlciQ5KHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBhcmdzPXRoaXMucHJlcGFyZVJlcXVlc3QobWV0aG9kLHBhcmFtcyk7aWYoYXJncz09bnVsbCl7bG9nZ2VyJHUudGhyb3dFcnJvcihtZXRob2QrXCIgbm90IGltcGxlbWVudGVkXCIsTG9nZ2VyLmVycm9ycy5OT1RfSU1QTEVNRU5URUQse29wZXJhdGlvbjptZXRob2R9KX10cnl7cmV0dXJuIHlpZWxkIHRoaXMuc2VuZChhcmdzWzBdLGFyZ3NbMV0pfWNhdGNoKGVycm9yKXtyZXR1cm4gY2hlY2tFcnJvcihtZXRob2QsZXJyb3IscGFyYW1zKX19KX1fc3RhcnRFdmVudChldmVudCl7aWYoZXZlbnQudGFnPT09XCJwZW5kaW5nXCIpe3RoaXMuX3N0YXJ0UGVuZGluZygpfXN1cGVyLl9zdGFydEV2ZW50KGV2ZW50KX1fc3RhcnRQZW5kaW5nKCl7aWYodGhpcy5fcGVuZGluZ0ZpbHRlciE9bnVsbCl7cmV0dXJufWNvbnN0IHNlbGY9dGhpcztjb25zdCBwZW5kaW5nRmlsdGVyPXRoaXMuc2VuZChcImV0aF9uZXdQZW5kaW5nVHJhbnNhY3Rpb25GaWx0ZXJcIixbXSk7dGhpcy5fcGVuZGluZ0ZpbHRlcj1wZW5kaW5nRmlsdGVyO3BlbmRpbmdGaWx0ZXIudGhlbihmdW5jdGlvbihmaWx0ZXJJZCl7ZnVuY3Rpb24gcG9sbCgpe3NlbGYuc2VuZChcImV0aF9nZXRGaWx0ZXJDaGFuZ2VzXCIsW2ZpbHRlcklkXSkudGhlbihmdW5jdGlvbihoYXNoZXMpe2lmKHNlbGYuX3BlbmRpbmdGaWx0ZXIhPXBlbmRpbmdGaWx0ZXIpe3JldHVybiBudWxsfWxldCBzZXE9UHJvbWlzZS5yZXNvbHZlKCk7aGFzaGVzLmZvckVhY2goZnVuY3Rpb24oaGFzaCl7c2VsZi5fZW1pdHRlZFtcInQ6XCIraGFzaC50b0xvd2VyQ2FzZSgpXT1cInBlbmRpbmdcIjtzZXE9c2VxLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gc2VsZi5nZXRUcmFuc2FjdGlvbihoYXNoKS50aGVuKGZ1bmN0aW9uKHR4KXtzZWxmLmVtaXQoXCJwZW5kaW5nXCIsdHgpO3JldHVybiBudWxsfSl9KX0pO3JldHVybiBzZXEudGhlbihmdW5jdGlvbigpe3JldHVybiB0aW1lcigxZTMpfSl9KS50aGVuKGZ1bmN0aW9uKCl7aWYoc2VsZi5fcGVuZGluZ0ZpbHRlciE9cGVuZGluZ0ZpbHRlcil7c2VsZi5zZW5kKFwiZXRoX3VuaW5zdGFsbEZpbHRlclwiLFtmaWx0ZXJJZF0pO3JldHVybn1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cG9sbCgpfSwwKTtyZXR1cm4gbnVsbH0pLmNhdGNoKGVycm9yPT57fSl9cG9sbCgpO3JldHVybiBmaWx0ZXJJZH0pLmNhdGNoKGVycm9yPT57fSl9X3N0b3BFdmVudChldmVudCl7aWYoZXZlbnQudGFnPT09XCJwZW5kaW5nXCImJnRoaXMubGlzdGVuZXJDb3VudChcInBlbmRpbmdcIik9PT0wKXt0aGlzLl9wZW5kaW5nRmlsdGVyPW51bGx9c3VwZXIuX3N0b3BFdmVudChldmVudCl9c3RhdGljIGhleGxpZnlUcmFuc2FjdGlvbih0cmFuc2FjdGlvbixhbGxvd0V4dHJhKXtjb25zdCBhbGxvd2VkPXNoYWxsb3dDb3B5KGFsbG93ZWRUcmFuc2FjdGlvbktleXMkMyk7aWYoYWxsb3dFeHRyYSl7Zm9yKGNvbnN0IGtleSBpbiBhbGxvd0V4dHJhKXtpZihhbGxvd0V4dHJhW2tleV0pe2FsbG93ZWRba2V5XT10cnVlfX19Y2hlY2tQcm9wZXJ0aWVzKHRyYW5zYWN0aW9uLGFsbG93ZWQpO2NvbnN0IHJlc3VsdD17fTtbXCJnYXNMaW1pdFwiLFwiZ2FzUHJpY2VcIixcInR5cGVcIixcIm5vbmNlXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7aWYodHJhbnNhY3Rpb25ba2V5XT09bnVsbCl7cmV0dXJufWNvbnN0IHZhbHVlPWhleFZhbHVlKHRyYW5zYWN0aW9uW2tleV0pO2lmKGtleT09PVwiZ2FzTGltaXRcIil7a2V5PVwiZ2FzXCJ9cmVzdWx0W2tleV09dmFsdWV9KTtbXCJmcm9tXCIsXCJ0b1wiLFwiZGF0YVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7aWYodHJhbnNhY3Rpb25ba2V5XT09bnVsbCl7cmV0dXJufXJlc3VsdFtrZXldPWhleGxpZnkodHJhbnNhY3Rpb25ba2V5XSl9KTtpZih0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0KXtyZXN1bHRbXCJhY2Nlc3NMaXN0XCJdPWFjY2Vzc0xpc3RpZnkodHJhbnNhY3Rpb24uYWNjZXNzTGlzdCl9cmV0dXJuIHJlc3VsdH19XCJ1c2Ugc3RyaWN0XCI7bGV0IFdTPW51bGw7dHJ5e1dTPVdlYlNvY2tldDtpZihXUz09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwiaW5qZWN0IHBsZWFzZVwiKX19Y2F0Y2goZXJyb3Ipe2NvbnN0IGxvZ2dlcj1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7V1M9ZnVuY3Rpb24oKXtsb2dnZXIudGhyb3dFcnJvcihcIldlYlNvY2tldHMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50XCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldyBXZWJTb2NrZXQoKVwifSl9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkYT13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHY9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2xldCBOZXh0SWQ9MTtjbGFzcyBXZWJTb2NrZXRQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlcntjb25zdHJ1Y3Rvcih1cmwsbmV0d29yayl7aWYobmV0d29yaz09PVwiYW55XCIpe2xvZ2dlciR2LnRocm93RXJyb3IoXCJXZWJTb2NrZXRQcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0ICdhbnknIG5ldHdvcmsgeWV0XCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIm5ldHdvcms6YW55XCJ9KX1zdXBlcih1cmwsbmV0d29yayk7dGhpcy5fcG9sbGluZ0ludGVydmFsPS0xO3RoaXMuX3dzUmVhZHk9ZmFsc2U7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl93ZWJzb2NrZXRcIixuZXcgV1ModGhpcy5jb25uZWN0aW9uLnVybCkpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfcmVxdWVzdHNcIix7fSk7ZGVmaW5lUmVhZE9ubHkodGhpcyxcIl9zdWJzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfc3ViSWRzXCIse30pO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfZGV0ZWN0TmV0d29ya1wiLHN1cGVyLmRldGVjdE5ldHdvcmsoKSk7dGhpcy5fd2Vic29ja2V0Lm9ub3Blbj0oKCk9Pnt0aGlzLl93c1JlYWR5PXRydWU7T2JqZWN0LmtleXModGhpcy5fcmVxdWVzdHMpLmZvckVhY2goaWQ9Pnt0aGlzLl93ZWJzb2NrZXQuc2VuZCh0aGlzLl9yZXF1ZXN0c1tpZF0ucGF5bG9hZCl9KX0pO3RoaXMuX3dlYnNvY2tldC5vbm1lc3NhZ2U9KG1lc3NhZ2VFdmVudD0+e2NvbnN0IGRhdGE9bWVzc2FnZUV2ZW50LmRhdGE7Y29uc3QgcmVzdWx0PUpTT04ucGFyc2UoZGF0YSk7aWYocmVzdWx0LmlkIT1udWxsKXtjb25zdCBpZD1TdHJpbmcocmVzdWx0LmlkKTtjb25zdCByZXF1ZXN0PXRoaXMuX3JlcXVlc3RzW2lkXTtkZWxldGUgdGhpcy5fcmVxdWVzdHNbaWRdO2lmKHJlc3VsdC5yZXN1bHQhPT11bmRlZmluZWQpe3JlcXVlc3QuY2FsbGJhY2sobnVsbCxyZXN1bHQucmVzdWx0KTt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXNwb25zZVwiLHJlcXVlc3Q6SlNPTi5wYXJzZShyZXF1ZXN0LnBheWxvYWQpLHJlc3BvbnNlOnJlc3VsdC5yZXN1bHQscHJvdmlkZXI6dGhpc30pfWVsc2V7bGV0IGVycm9yPW51bGw7aWYocmVzdWx0LmVycm9yKXtlcnJvcj1uZXcgRXJyb3IocmVzdWx0LmVycm9yLm1lc3NhZ2V8fFwidW5rbm93biBlcnJvclwiKTtkZWZpbmVSZWFkT25seShlcnJvcixcImNvZGVcIixyZXN1bHQuZXJyb3IuY29kZXx8bnVsbCk7ZGVmaW5lUmVhZE9ubHkoZXJyb3IsXCJyZXNwb25zZVwiLGRhdGEpfWVsc2V7ZXJyb3I9bmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKX1yZXF1ZXN0LmNhbGxiYWNrKGVycm9yLHVuZGVmaW5lZCk7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixlcnJvcjplcnJvcixyZXF1ZXN0OkpTT04ucGFyc2UocmVxdWVzdC5wYXlsb2FkKSxwcm92aWRlcjp0aGlzfSl9fWVsc2UgaWYocmVzdWx0Lm1ldGhvZD09PVwiZXRoX3N1YnNjcmlwdGlvblwiKXtjb25zdCBzdWI9dGhpcy5fc3Vic1tyZXN1bHQucGFyYW1zLnN1YnNjcmlwdGlvbl07aWYoc3ViKXtzdWIucHJvY2Vzc0Z1bmMocmVzdWx0LnBhcmFtcy5yZXN1bHQpfX1lbHNle2NvbnNvbGUud2FybihcInRoaXMgc2hvdWxkIG5vdCBoYXBwZW5cIil9fSk7Y29uc3QgZmF1eFBvbGw9c2V0SW50ZXJ2YWwoKCk9Pnt0aGlzLmVtaXQoXCJwb2xsXCIpfSwxZTMpO2lmKGZhdXhQb2xsLnVucmVmKXtmYXV4UG9sbC51bnJlZigpfX1kZXRlY3ROZXR3b3JrKCl7cmV0dXJuIHRoaXMuX2RldGVjdE5ldHdvcmt9Z2V0IHBvbGxpbmdJbnRlcnZhbCgpe3JldHVybiAwfXJlc2V0RXZlbnRzQmxvY2soYmxvY2tOdW1iZXIpe2xvZ2dlciR2LnRocm93RXJyb3IoXCJjYW5ub3QgcmVzZXQgZXZlbnRzIGJsb2NrIG9uIFdlYlNvY2tldFByb3ZpZGVyXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcInJlc2V0RXZlbnRCbG9ja1wifSl9c2V0IHBvbGxpbmdJbnRlcnZhbCh2YWx1ZSl7bG9nZ2VyJHYudGhyb3dFcnJvcihcImNhbm5vdCBzZXQgcG9sbGluZyBpbnRlcnZhbCBvbiBXZWJTb2NrZXRQcm92aWRlclwiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJzZXRQb2xsaW5nSW50ZXJ2YWxcIn0pfXBvbGwoKXtyZXR1cm4gX19hd2FpdGVyJGEodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3JldHVybiBudWxsfSl9c2V0IHBvbGxpbmcodmFsdWUpe2lmKCF2YWx1ZSl7cmV0dXJufWxvZ2dlciR2LnRocm93RXJyb3IoXCJjYW5ub3Qgc2V0IHBvbGxpbmcgb24gV2ViU29ja2V0UHJvdmlkZXJcIixMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTix7b3BlcmF0aW9uOlwic2V0UG9sbGluZ1wifSl9c2VuZChtZXRob2QscGFyYW1zKXtjb25zdCByaWQ9TmV4dElkKys7cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntmdW5jdGlvbiBjYWxsYmFjayhlcnJvcixyZXN1bHQpe2lmKGVycm9yKXtyZXR1cm4gcmVqZWN0KGVycm9yKX1yZXR1cm4gcmVzb2x2ZShyZXN1bHQpfWNvbnN0IHBheWxvYWQ9SlNPTi5zdHJpbmdpZnkoe21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtcyxpZDpyaWQsanNvbnJwYzpcIjIuMFwifSk7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdFwiLHJlcXVlc3Q6SlNPTi5wYXJzZShwYXlsb2FkKSxwcm92aWRlcjp0aGlzfSk7dGhpcy5fcmVxdWVzdHNbU3RyaW5nKHJpZCldPXtjYWxsYmFjazpjYWxsYmFjayxwYXlsb2FkOnBheWxvYWR9O2lmKHRoaXMuX3dzUmVhZHkpe3RoaXMuX3dlYnNvY2tldC5zZW5kKHBheWxvYWQpfX0pfXN0YXRpYyBkZWZhdWx0VXJsKCl7cmV0dXJuXCJ3czovL2xvY2FsaG9zdDo4NTQ2XCJ9X3N1YnNjcmliZSh0YWcscGFyYW0scHJvY2Vzc0Z1bmMpe3JldHVybiBfX2F3YWl0ZXIkYSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IHN1YklkUHJvbWlzZT10aGlzLl9zdWJJZHNbdGFnXTtpZihzdWJJZFByb21pc2U9PW51bGwpe3N1YklkUHJvbWlzZT1Qcm9taXNlLmFsbChwYXJhbSkudGhlbihwYXJhbT0+e3JldHVybiB0aGlzLnNlbmQoXCJldGhfc3Vic2NyaWJlXCIscGFyYW0pfSk7dGhpcy5fc3ViSWRzW3RhZ109c3ViSWRQcm9taXNlfWNvbnN0IHN1YklkPXlpZWxkIHN1YklkUHJvbWlzZTt0aGlzLl9zdWJzW3N1YklkXT17dGFnOnRhZyxwcm9jZXNzRnVuYzpwcm9jZXNzRnVuY319KX1fc3RhcnRFdmVudChldmVudCl7c3dpdGNoKGV2ZW50LnR5cGUpe2Nhc2VcImJsb2NrXCI6dGhpcy5fc3Vic2NyaWJlKFwiYmxvY2tcIixbXCJuZXdIZWFkc1wiXSxyZXN1bHQ9Pntjb25zdCBibG9ja051bWJlcj1CaWdOdW1iZXIuZnJvbShyZXN1bHQubnVtYmVyKS50b051bWJlcigpO3RoaXMuX2VtaXR0ZWQuYmxvY2s9YmxvY2tOdW1iZXI7dGhpcy5lbWl0KFwiYmxvY2tcIixibG9ja051bWJlcil9KTticmVhaztjYXNlXCJwZW5kaW5nXCI6dGhpcy5fc3Vic2NyaWJlKFwicGVuZGluZ1wiLFtcIm5ld1BlbmRpbmdUcmFuc2FjdGlvbnNcIl0scmVzdWx0PT57dGhpcy5lbWl0KFwicGVuZGluZ1wiLHJlc3VsdCl9KTticmVhaztjYXNlXCJmaWx0ZXJcIjp0aGlzLl9zdWJzY3JpYmUoZXZlbnQudGFnLFtcImxvZ3NcIix0aGlzLl9nZXRGaWx0ZXIoZXZlbnQuZmlsdGVyKV0scmVzdWx0PT57aWYocmVzdWx0LnJlbW92ZWQ9PW51bGwpe3Jlc3VsdC5yZW1vdmVkPWZhbHNlfXRoaXMuZW1pdChldmVudC5maWx0ZXIsdGhpcy5mb3JtYXR0ZXIuZmlsdGVyTG9nKHJlc3VsdCkpfSk7YnJlYWs7Y2FzZVwidHhcIjp7Y29uc3QgZW1pdFJlY2VpcHQ9ZXZlbnQ9Pntjb25zdCBoYXNoPWV2ZW50Lmhhc2g7dGhpcy5nZXRUcmFuc2FjdGlvblJlY2VpcHQoaGFzaCkudGhlbihyZWNlaXB0PT57aWYoIXJlY2VpcHQpe3JldHVybn10aGlzLmVtaXQoaGFzaCxyZWNlaXB0KX0pfTtlbWl0UmVjZWlwdChldmVudCk7dGhpcy5fc3Vic2NyaWJlKFwidHhcIixbXCJuZXdIZWFkc1wiXSxyZXN1bHQ9Pnt0aGlzLl9ldmVudHMuZmlsdGVyKGU9PmUudHlwZT09PVwidHhcIikuZm9yRWFjaChlbWl0UmVjZWlwdCl9KTticmVha31jYXNlXCJkZWJ1Z1wiOmNhc2VcInBvbGxcIjpjYXNlXCJ3aWxsUG9sbFwiOmNhc2VcImRpZFBvbGxcIjpjYXNlXCJlcnJvclwiOmJyZWFrO2RlZmF1bHQ6Y29uc29sZS5sb2coXCJ1bmhhbmRsZWQ6XCIsZXZlbnQpO2JyZWFrfX1fc3RvcEV2ZW50KGV2ZW50KXtsZXQgdGFnPWV2ZW50LnRhZztpZihldmVudC50eXBlPT09XCJ0eFwiKXtpZih0aGlzLl9ldmVudHMuZmlsdGVyKGU9PmUudHlwZT09PVwidHhcIikubGVuZ3RoKXtyZXR1cm59dGFnPVwidHhcIn1lbHNlIGlmKHRoaXMubGlzdGVuZXJDb3VudChldmVudC5ldmVudCkpe3JldHVybn1jb25zdCBzdWJJZD10aGlzLl9zdWJJZHNbdGFnXTtpZighc3ViSWQpe3JldHVybn1kZWxldGUgdGhpcy5fc3ViSWRzW3RhZ107c3ViSWQudGhlbihzdWJJZD0+e2lmKCF0aGlzLl9zdWJzW3N1YklkXSl7cmV0dXJufWRlbGV0ZSB0aGlzLl9zdWJzW3N1YklkXTt0aGlzLnNlbmQoXCJldGhfdW5zdWJzY3JpYmVcIixbc3ViSWRdKX0pfWRlc3Ryb3koKXtyZXR1cm4gX19hd2FpdGVyJGEodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKHRoaXMuX3dlYnNvY2tldC5yZWFkeVN0YXRlPT09V1MuQ09OTkVDVElORyl7eWllbGQgbmV3IFByb21pc2UocmVzb2x2ZT0+e3RoaXMuX3dlYnNvY2tldC5vbm9wZW49ZnVuY3Rpb24oKXtyZXNvbHZlKHRydWUpfTt0aGlzLl93ZWJzb2NrZXQub25lcnJvcj1mdW5jdGlvbigpe3Jlc29sdmUoZmFsc2UpfX0pfXRoaXMuX3dlYnNvY2tldC5jbG9zZSgxZTMpfSl9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkYj13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHc9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2NsYXNzIFN0YXRpY0pzb25ScGNQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlcntkZXRlY3ROZXR3b3JrKCl7Y29uc3QgX3N1cGVyPU9iamVjdC5jcmVhdGUobnVsbCx7ZGV0ZWN0TmV0d29yazp7Z2V0OigpPT5zdXBlci5kZXRlY3ROZXR3b3JrfX0pO3JldHVybiBfX2F3YWl0ZXIkYih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IG5ldHdvcms9dGhpcy5uZXR3b3JrO2lmKG5ldHdvcms9PW51bGwpe25ldHdvcms9eWllbGQgX3N1cGVyLmRldGVjdE5ldHdvcmsuY2FsbCh0aGlzKTtpZighbmV0d29yayl7bG9nZ2VyJHcudGhyb3dFcnJvcihcIm5vIG5ldHdvcmsgZGV0ZWN0ZWRcIixMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1Ise30pfWlmKHRoaXMuX25ldHdvcms9PW51bGwpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJfbmV0d29ya1wiLG5ldHdvcmspO3RoaXMuZW1pdChcIm5ldHdvcmtcIixuZXR3b3JrLG51bGwpfX1yZXR1cm4gbmV0d29ya30pfX1jbGFzcyBVcmxKc29uUnBjUHJvdmlkZXIgZXh0ZW5kcyBTdGF0aWNKc29uUnBjUHJvdmlkZXJ7Y29uc3RydWN0b3IobmV0d29yayxhcGlLZXkpe2xvZ2dlciR3LmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCxVcmxKc29uUnBjUHJvdmlkZXIpO25ldHdvcms9Z2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXROZXR3b3JrXCIpKG5ldHdvcmspO2FwaUtleT1nZXRTdGF0aWMobmV3LnRhcmdldCxcImdldEFwaUtleVwiKShhcGlLZXkpO2NvbnN0IGNvbm5lY3Rpb249Z2V0U3RhdGljKG5ldy50YXJnZXQsXCJnZXRVcmxcIikobmV0d29yayxhcGlLZXkpO3N1cGVyKGNvbm5lY3Rpb24sbmV0d29yayk7aWYodHlwZW9mIGFwaUtleT09PVwic3RyaW5nXCIpe2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhcGlLZXlcIixhcGlLZXkpfWVsc2UgaWYoYXBpS2V5IT1udWxsKXtPYmplY3Qua2V5cyhhcGlLZXkpLmZvckVhY2goa2V5PT57ZGVmaW5lUmVhZE9ubHkodGhpcyxrZXksYXBpS2V5W2tleV0pfSl9fV9zdGFydFBlbmRpbmcoKXtsb2dnZXIkdy53YXJuKFwiV0FSTklORzogQVBJIHByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgcGVuZGluZyBmaWx0ZXJzXCIpfWlzQ29tbXVuaXR5UmVzb3VyY2UoKXtyZXR1cm4gZmFsc2V9Z2V0U2lnbmVyKGFkZHJlc3Mpe3JldHVybiBsb2dnZXIkdy50aHJvd0Vycm9yKFwiQVBJIHByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgc2lnbmluZ1wiLExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLHtvcGVyYXRpb246XCJnZXRTaWduZXJcIn0pfWxpc3RBY2NvdW50cygpe3JldHVybiBQcm9taXNlLnJlc29sdmUoW10pfXN0YXRpYyBnZXRBcGlLZXkoYXBpS2V5KXtyZXR1cm4gYXBpS2V5fXN0YXRpYyBnZXRVcmwobmV0d29yayxhcGlLZXkpe3JldHVybiBsb2dnZXIkdy50aHJvd0Vycm9yKFwibm90IGltcGxlbWVudGVkOyBzdWItY2xhc3NlcyBtdXN0IG92ZXJyaWRlIGdldFVybFwiLExvZ2dlci5lcnJvcnMuTk9UX0lNUExFTUVOVEVELHtvcGVyYXRpb246XCJnZXRVcmxcIn0pfX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkeD1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y29uc3QgZGVmYXVsdEFwaUtleT1cIl9nZzd3U1NpMEtNQnNkS25HVmZIRHVlcTZ4TUI5RWtDXCI7Y2xhc3MgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgV2ViU29ja2V0UHJvdmlkZXJ7Y29uc3RydWN0b3IobmV0d29yayxhcGlLZXkpe2NvbnN0IHByb3ZpZGVyPW5ldyBBbGNoZW15UHJvdmlkZXIobmV0d29yayxhcGlLZXkpO2NvbnN0IHVybD1wcm92aWRlci5jb25uZWN0aW9uLnVybC5yZXBsYWNlKC9eaHR0cC9pLFwid3NcIikucmVwbGFjZShcIi5hbGNoZW15YXBpLlwiLFwiLndzLmFsY2hlbXlhcGkuXCIpO3N1cGVyKHVybCxwcm92aWRlci5uZXR3b3JrKTtkZWZpbmVSZWFkT25seSh0aGlzLFwiYXBpS2V5XCIscHJvdmlkZXIuYXBpS2V5KX1pc0NvbW11bml0eVJlc291cmNlKCl7cmV0dXJuIHRoaXMuYXBpS2V5PT09ZGVmYXVsdEFwaUtleX19Y2xhc3MgQWxjaGVteVByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVye3N0YXRpYyBnZXRXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLGFwaUtleSl7cmV0dXJuIG5ldyBBbGNoZW15V2ViU29ja2V0UHJvdmlkZXIobmV0d29yayxhcGlLZXkpfXN0YXRpYyBnZXRBcGlLZXkoYXBpS2V5KXtpZihhcGlLZXk9PW51bGwpe3JldHVybiBkZWZhdWx0QXBpS2V5fWlmKGFwaUtleSYmdHlwZW9mIGFwaUtleSE9PVwic3RyaW5nXCIpe2xvZ2dlciR4LnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYXBpS2V5XCIsXCJhcGlLZXlcIixhcGlLZXkpfXJldHVybiBhcGlLZXl9c3RhdGljIGdldFVybChuZXR3b3JrLGFwaUtleSl7bGV0IGhvc3Q9bnVsbDtzd2l0Y2gobmV0d29yay5uYW1lKXtjYXNlXCJob21lc3RlYWRcIjpob3N0PVwiZXRoLW1haW5uZXQuYWxjaGVteWFwaS5pby92Mi9cIjticmVhaztjYXNlXCJyb3BzdGVuXCI6aG9zdD1cImV0aC1yb3BzdGVuLmFsY2hlbXlhcGkuaW8vdjIvXCI7YnJlYWs7Y2FzZVwicmlua2VieVwiOmhvc3Q9XCJldGgtcmlua2VieS5hbGNoZW15YXBpLmlvL3YyL1wiO2JyZWFrO2Nhc2VcImdvZXJsaVwiOmhvc3Q9XCJldGgtZ29lcmxpLmFsY2hlbXlhcGkuaW8vdjIvXCI7YnJlYWs7Y2FzZVwia292YW5cIjpob3N0PVwiZXRoLWtvdmFuLmFsY2hlbXlhcGkuaW8vdjIvXCI7YnJlYWs7ZGVmYXVsdDpsb2dnZXIkeC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsXCJuZXR3b3JrXCIsYXJndW1lbnRzWzBdKX1yZXR1cm57YWxsb3dHemlwOnRydWUsdXJsOlwiaHR0cHM6L1wiK1wiL1wiK2hvc3QrYXBpS2V5LHRocm90dGxlQ2FsbGJhY2s6KGF0dGVtcHQsdXJsKT0+e2lmKGFwaUtleT09PWRlZmF1bHRBcGlLZXkpe3Nob3dUaHJvdHRsZU1lc3NhZ2UoKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpfX19aXNDb21tdW5pdHlSZXNvdXJjZSgpe3JldHVybiB0aGlzLmFwaUtleT09PWRlZmF1bHRBcGlLZXl9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkYz13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHk9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2NsYXNzIENsb3VkZmxhcmVQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlcntzdGF0aWMgZ2V0QXBpS2V5KGFwaUtleSl7aWYoYXBpS2V5IT1udWxsKXtsb2dnZXIkeS50aHJvd0FyZ3VtZW50RXJyb3IoXCJhcGlLZXkgbm90IHN1cHBvcnRlZCBmb3IgY2xvdWRmbGFyZVwiLFwiYXBpS2V5XCIsYXBpS2V5KX1yZXR1cm4gbnVsbH1zdGF0aWMgZ2V0VXJsKG5ldHdvcmssYXBpS2V5KXtsZXQgaG9zdD1udWxsO3N3aXRjaChuZXR3b3JrLm5hbWUpe2Nhc2VcImhvbWVzdGVhZFwiOmhvc3Q9XCJodHRwczovL2Nsb3VkZmxhcmUtZXRoLmNvbS9cIjticmVhaztkZWZhdWx0OmxvZ2dlciR5LnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIixcIm5ldHdvcmtcIixhcmd1bWVudHNbMF0pfXJldHVybiBob3N0fXBlcmZvcm0obWV0aG9kLHBhcmFtcyl7Y29uc3QgX3N1cGVyPU9iamVjdC5jcmVhdGUobnVsbCx7cGVyZm9ybTp7Z2V0OigpPT5zdXBlci5wZXJmb3JtfX0pO3JldHVybiBfX2F3YWl0ZXIkYyh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7aWYobWV0aG9kPT09XCJnZXRCbG9ja051bWJlclwiKXtjb25zdCBibG9jaz15aWVsZCBfc3VwZXIucGVyZm9ybS5jYWxsKHRoaXMsXCJnZXRCbG9ja1wiLHtibG9ja1RhZzpcImxhdGVzdFwifSk7cmV0dXJuIGJsb2NrLm51bWJlcn1yZXR1cm4gX3N1cGVyLnBlcmZvcm0uY2FsbCh0aGlzLG1ldGhvZCxwYXJhbXMpfSl9fVwidXNlIHN0cmljdFwiO3ZhciBfX2F3YWl0ZXIkZD13aW5kb3cmJndpbmRvdy5fX2F3YWl0ZXJ8fGZ1bmN0aW9uKHRoaXNBcmcsX2FyZ3VtZW50cyxQLGdlbmVyYXRvcil7ZnVuY3Rpb24gYWRvcHQodmFsdWUpe3JldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFA/dmFsdWU6bmV3IFAoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZSh2YWx1ZSl9KX1yZXR1cm4gbmV3KFB8fChQPVByb21pc2UpKShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCl7ZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpe3RyeXtzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSl9Y2F0Y2goZSl7cmVqZWN0KGUpfX1mdW5jdGlvbiBzdGVwKHJlc3VsdCl7cmVzdWx0LmRvbmU/cmVzb2x2ZShyZXN1bHQudmFsdWUpOmFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQscmVqZWN0ZWQpfXN0ZXAoKGdlbmVyYXRvcj1nZW5lcmF0b3IuYXBwbHkodGhpc0FyZyxfYXJndW1lbnRzfHxbXSkpLm5leHQoKSl9KX07Y29uc3QgbG9nZ2VyJHo9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2Z1bmN0aW9uIGdldFRyYW5zYWN0aW9uUG9zdERhdGEodHJhbnNhY3Rpb24pe2NvbnN0IHJlc3VsdD17fTtmb3IobGV0IGtleSBpbiB0cmFuc2FjdGlvbil7aWYodHJhbnNhY3Rpb25ba2V5XT09bnVsbCl7Y29udGludWV9bGV0IHZhbHVlPXRyYW5zYWN0aW9uW2tleV07aWYoe3R5cGU6dHJ1ZSxnYXNMaW1pdDp0cnVlLGdhc1ByaWNlOnRydWUsbm9uY2U6dHJ1ZSx2YWx1ZTp0cnVlfVtrZXldKXt2YWx1ZT1oZXhWYWx1ZShoZXhsaWZ5KHZhbHVlKSl9ZWxzZSBpZihrZXk9PT1cImFjY2Vzc0xpc3RcIil7Y29uc3Qgc2V0cz1hY2Nlc3NMaXN0aWZ5KHZhbHVlKTt2YWx1ZT1cIltcIitzZXRzLm1hcChzZXQ9PntyZXR1cm5ge2FkZHJlc3M6XCIke3NldC5hZGRyZXNzfVwiLHN0b3JhZ2VLZXlzOltcIiR7c2V0LnN0b3JhZ2VLZXlzLmpvaW4oJ1wiLFwiJyl9XCJdfWB9KS5qb2luKFwiLFwiKStcIl1cIn1lbHNle3ZhbHVlPWhleGxpZnkodmFsdWUpfXJlc3VsdFtrZXldPXZhbHVlfXJldHVybiByZXN1bHR9ZnVuY3Rpb24gZ2V0UmVzdWx0JDEocmVzdWx0KXtpZihyZXN1bHQuc3RhdHVzPT0wJiYocmVzdWx0Lm1lc3NhZ2U9PT1cIk5vIHJlY29yZHMgZm91bmRcInx8cmVzdWx0Lm1lc3NhZ2U9PT1cIk5vIHRyYW5zYWN0aW9ucyBmb3VuZFwiKSl7cmV0dXJuIHJlc3VsdC5yZXN1bHR9aWYocmVzdWx0LnN0YXR1cyE9MXx8cmVzdWx0Lm1lc3NhZ2UhPVwiT0tcIil7Y29uc3QgZXJyb3I9bmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZVwiKTtlcnJvci5yZXN1bHQ9SlNPTi5zdHJpbmdpZnkocmVzdWx0KTtpZigocmVzdWx0LnJlc3VsdHx8XCJcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwicmF0ZSBsaW1pdFwiKT49MCl7ZXJyb3IudGhyb3R0bGVSZXRyeT10cnVlfXRocm93IGVycm9yfXJldHVybiByZXN1bHQucmVzdWx0fWZ1bmN0aW9uIGdldEpzb25SZXN1bHQocmVzdWx0KXtpZihyZXN1bHQmJnJlc3VsdC5zdGF0dXM9PTAmJnJlc3VsdC5tZXNzYWdlPT1cIk5PVE9LXCImJihyZXN1bHQucmVzdWx0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJyYXRlIGxpbWl0XCIpPj0wKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IoXCJ0aHJvdHRsZWQgcmVzcG9uc2VcIik7ZXJyb3IucmVzdWx0PUpTT04uc3RyaW5naWZ5KHJlc3VsdCk7ZXJyb3IudGhyb3R0bGVSZXRyeT10cnVlO3Rocm93IGVycm9yfWlmKHJlc3VsdC5qc29ucnBjIT1cIjIuMFwiKXtjb25zdCBlcnJvcj1uZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlXCIpO2Vycm9yLnJlc3VsdD1KU09OLnN0cmluZ2lmeShyZXN1bHQpO3Rocm93IGVycm9yfWlmKHJlc3VsdC5lcnJvcil7Y29uc3QgZXJyb3I9bmV3IEVycm9yKHJlc3VsdC5lcnJvci5tZXNzYWdlfHxcInVua25vd24gZXJyb3JcIik7aWYocmVzdWx0LmVycm9yLmNvZGUpe2Vycm9yLmNvZGU9cmVzdWx0LmVycm9yLmNvZGV9aWYocmVzdWx0LmVycm9yLmRhdGEpe2Vycm9yLmRhdGE9cmVzdWx0LmVycm9yLmRhdGF9dGhyb3cgZXJyb3J9cmV0dXJuIHJlc3VsdC5yZXN1bHR9ZnVuY3Rpb24gY2hlY2tMb2dUYWcoYmxvY2tUYWcpe2lmKGJsb2NrVGFnPT09XCJwZW5kaW5nXCIpe3Rocm93IG5ldyBFcnJvcihcInBlbmRpbmcgbm90IHN1cHBvcnRlZFwiKX1pZihibG9ja1RhZz09PVwibGF0ZXN0XCIpe3JldHVybiBibG9ja1RhZ31yZXR1cm4gcGFyc2VJbnQoYmxvY2tUYWcuc3Vic3RyaW5nKDIpLDE2KX1jb25zdCBkZWZhdWx0QXBpS2V5JDE9XCI5RDEzWkU3WFNCVEo5NE45Qk5KMk1BMzNWTUFZMllQSVJCXCI7ZnVuY3Rpb24gY2hlY2tFcnJvciQxKG1ldGhvZCxlcnJvcix0cmFuc2FjdGlvbil7aWYobWV0aG9kPT09XCJjYWxsXCImJmVycm9yLmNvZGU9PT1Mb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUil7Y29uc3QgZT1lcnJvci5lcnJvcjtpZihlJiZlLm1lc3NhZ2UubWF0Y2goXCJyZXZlcnRlZFwiKSYmaXNIZXhTdHJpbmcoZS5kYXRhKSl7cmV0dXJuIGUuZGF0YX19bGV0IG1lc3NhZ2U9ZXJyb3IubWVzc2FnZTtpZihlcnJvci5jb2RlPT09TG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ipe2lmKGVycm9yLmVycm9yJiZ0eXBlb2YgZXJyb3IuZXJyb3IubWVzc2FnZT09PVwic3RyaW5nXCIpe21lc3NhZ2U9ZXJyb3IuZXJyb3IubWVzc2FnZX1lbHNlIGlmKHR5cGVvZiBlcnJvci5ib2R5PT09XCJzdHJpbmdcIil7bWVzc2FnZT1lcnJvci5ib2R5fWVsc2UgaWYodHlwZW9mIGVycm9yLnJlc3BvbnNlVGV4dD09PVwic3RyaW5nXCIpe21lc3NhZ2U9ZXJyb3IucmVzcG9uc2VUZXh0fX1tZXNzYWdlPShtZXNzYWdlfHxcIlwiKS50b0xvd2VyQ2FzZSgpO2lmKG1lc3NhZ2UubWF0Y2goL2luc3VmZmljaWVudCBmdW5kcy8pKXtsb2dnZXIkei50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGZ1bmRzIGZvciBpbnRyaW5zaWMgdHJhbnNhY3Rpb24gY29zdFwiLExvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9aWYobWVzc2FnZS5tYXRjaCgvc2FtZSBoYXNoIHdhcyBhbHJlYWR5IGltcG9ydGVkfHRyYW5zYWN0aW9uIG5vbmNlIGlzIHRvbyBsb3cvKSl7bG9nZ2VyJHoudGhyb3dFcnJvcihcIm5vbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZFwiLExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCx7ZXJyb3I6ZXJyb3IsbWV0aG9kOm1ldGhvZCx0cmFuc2FjdGlvbjp0cmFuc2FjdGlvbn0pfWlmKG1lc3NhZ2UubWF0Y2goL2Fub3RoZXIgdHJhbnNhY3Rpb24gd2l0aCBzYW1lIG5vbmNlLykpe2xvZ2dlciR6LnRocm93RXJyb3IoXCJyZXBsYWNlbWVudCBmZWUgdG9vIGxvd1wiLExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQse2Vycm9yOmVycm9yLG1ldGhvZDptZXRob2QsdHJhbnNhY3Rpb246dHJhbnNhY3Rpb259KX1pZihtZXNzYWdlLm1hdGNoKC9leGVjdXRpb24gZmFpbGVkIGR1ZSB0byBhbiBleGNlcHRpb24vKSl7bG9nZ2VyJHoudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIixMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULHtlcnJvcjplcnJvcixtZXRob2Q6bWV0aG9kLHRyYW5zYWN0aW9uOnRyYW5zYWN0aW9ufSl9dGhyb3cgZXJyb3J9Y2xhc3MgRXRoZXJzY2FuUHJvdmlkZXIgZXh0ZW5kcyBCYXNlUHJvdmlkZXJ7Y29uc3RydWN0b3IobmV0d29yayxhcGlLZXkpe2xvZ2dlciR6LmNoZWNrTmV3KG5ldy50YXJnZXQsRXRoZXJzY2FuUHJvdmlkZXIpO3N1cGVyKG5ldHdvcmspO2xldCBuYW1lPVwiaW52YWxpZFwiO2lmKHRoaXMubmV0d29yayl7bmFtZT10aGlzLm5ldHdvcmsubmFtZX1sZXQgYmFzZVVybD1udWxsO3N3aXRjaChuYW1lKXtjYXNlXCJob21lc3RlYWRcIjpiYXNlVXJsPVwiaHR0cHM6Ly9hcGkuZXRoZXJzY2FuLmlvXCI7YnJlYWs7Y2FzZVwicm9wc3RlblwiOmJhc2VVcmw9XCJodHRwczovL2FwaS1yb3BzdGVuLmV0aGVyc2Nhbi5pb1wiO2JyZWFrO2Nhc2VcInJpbmtlYnlcIjpiYXNlVXJsPVwiaHR0cHM6Ly9hcGktcmlua2VieS5ldGhlcnNjYW4uaW9cIjticmVhaztjYXNlXCJrb3ZhblwiOmJhc2VVcmw9XCJodHRwczovL2FwaS1rb3Zhbi5ldGhlcnNjYW4uaW9cIjticmVhaztjYXNlXCJnb2VybGlcIjpiYXNlVXJsPVwiaHR0cHM6Ly9hcGktZ29lcmxpLmV0aGVyc2Nhbi5pb1wiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiKX1kZWZpbmVSZWFkT25seSh0aGlzLFwiYmFzZVVybFwiLGJhc2VVcmwpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhcGlLZXlcIixhcGlLZXl8fGRlZmF1bHRBcGlLZXkkMSl9ZGV0ZWN0TmV0d29yaygpe3JldHVybiBfX2F3YWl0ZXIkZCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7cmV0dXJuIHRoaXMubmV0d29ya30pfXBlcmZvcm0obWV0aG9kLHBhcmFtcyl7Y29uc3QgX3N1cGVyPU9iamVjdC5jcmVhdGUobnVsbCx7cGVyZm9ybTp7Z2V0OigpPT5zdXBlci5wZXJmb3JtfX0pO3JldHVybiBfX2F3YWl0ZXIkZCh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7bGV0IHVybD10aGlzLmJhc2VVcmwrXCIvYXBpXCI7bGV0IGFwaUtleT1cIlwiO2lmKHRoaXMuYXBpS2V5KXthcGlLZXkrPVwiJmFwaWtleT1cIit0aGlzLmFwaUtleX1jb25zdCBnZXQ9KHVybCxwYXlsb2FkLHByb2NGdW5jKT0+X19hd2FpdGVyJGQodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlcXVlc3RcIixyZXF1ZXN0OnVybCxwcm92aWRlcjp0aGlzfSk7Y29uc3QgY29ubmVjdGlvbj17dXJsOnVybCx0aHJvdHRsZVNsb3RJbnRlcnZhbDoxZTMsdGhyb3R0bGVDYWxsYmFjazooYXR0ZW1wdCx1cmwpPT57aWYodGhpcy5pc0NvbW11bml0eVJlc291cmNlKCkpe3Nob3dUaHJvdHRsZU1lc3NhZ2UoKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpfX07bGV0IHBheWxvYWRTdHI9bnVsbDtpZihwYXlsb2FkKXtjb25uZWN0aW9uLmhlYWRlcnM9e1wiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIn07cGF5bG9hZFN0cj1PYmplY3Qua2V5cyhwYXlsb2FkKS5tYXAoa2V5PT57cmV0dXJuYCR7a2V5fT0ke3BheWxvYWRba2V5XX1gfSkuam9pbihcIiZcIil9Y29uc3QgcmVzdWx0PXlpZWxkIGZldGNoSnNvbihjb25uZWN0aW9uLHBheWxvYWRTdHIscHJvY0Z1bmN8fGdldEpzb25SZXN1bHQpO3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlc3BvbnNlXCIscmVxdWVzdDp1cmwscmVzcG9uc2U6ZGVlcENvcHkocmVzdWx0KSxwcm92aWRlcjp0aGlzfSk7cmV0dXJuIHJlc3VsdH0pO3N3aXRjaChtZXRob2Qpe2Nhc2VcImdldEJsb2NrTnVtYmVyXCI6dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9ibG9ja051bWJlclwiK2FwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKTtjYXNlXCJnZXRHYXNQcmljZVwiOnVybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2FzUHJpY2VcIithcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCk7Y2FzZVwiZ2V0QmFsYW5jZVwiOnVybCs9XCI/bW9kdWxlPWFjY291bnQmYWN0aW9uPWJhbGFuY2UmYWRkcmVzcz1cIitwYXJhbXMuYWRkcmVzczt1cmwrPVwiJnRhZz1cIitwYXJhbXMuYmxvY2tUYWcrYXBpS2V5O3JldHVybiBnZXQodXJsLG51bGwsZ2V0UmVzdWx0JDEpO2Nhc2VcImdldFRyYW5zYWN0aW9uQ291bnRcIjp1cmwrPVwiP21vZHVsZT1wcm94eSZhY3Rpb249ZXRoX2dldFRyYW5zYWN0aW9uQ291bnQmYWRkcmVzcz1cIitwYXJhbXMuYWRkcmVzczt1cmwrPVwiJnRhZz1cIitwYXJhbXMuYmxvY2tUYWcrYXBpS2V5O3JldHVybiBnZXQodXJsLG51bGwpO2Nhc2VcImdldENvZGVcIjp1cmwrPVwiP21vZHVsZT1wcm94eSZhY3Rpb249ZXRoX2dldENvZGUmYWRkcmVzcz1cIitwYXJhbXMuYWRkcmVzczt1cmwrPVwiJnRhZz1cIitwYXJhbXMuYmxvY2tUYWcrYXBpS2V5O3JldHVybiBnZXQodXJsLG51bGwpO2Nhc2VcImdldFN0b3JhZ2VBdFwiOnVybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0U3RvcmFnZUF0JmFkZHJlc3M9XCIrcGFyYW1zLmFkZHJlc3M7dXJsKz1cIiZwb3NpdGlvbj1cIitwYXJhbXMucG9zaXRpb247dXJsKz1cIiZ0YWc9XCIrcGFyYW1zLmJsb2NrVGFnK2FwaUtleTtyZXR1cm4gZ2V0KHVybCxudWxsKTtjYXNlXCJzZW5kVHJhbnNhY3Rpb25cIjpyZXR1cm4gZ2V0KHVybCx7bW9kdWxlOlwicHJveHlcIixhY3Rpb246XCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsaGV4OnBhcmFtcy5zaWduZWRUcmFuc2FjdGlvbixhcGlrZXk6dGhpcy5hcGlLZXl9KS5jYXRjaChlcnJvcj0+e3JldHVybiBjaGVja0Vycm9yJDEoXCJzZW5kVHJhbnNhY3Rpb25cIixlcnJvcixwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb24pfSk7Y2FzZVwiZ2V0QmxvY2tcIjppZihwYXJhbXMuYmxvY2tUYWcpe3VybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0QmxvY2tCeU51bWJlciZ0YWc9XCIrcGFyYW1zLmJsb2NrVGFnO2lmKHBhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zKXt1cmwrPVwiJmJvb2xlYW49dHJ1ZVwifWVsc2V7dXJsKz1cIiZib29sZWFuPWZhbHNlXCJ9dXJsKz1hcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCl9dGhyb3cgbmV3IEVycm9yKFwiZ2V0QmxvY2sgYnkgYmxvY2tIYXNoIG5vdCBpbXBsZW1lbnRlZFwiKTtjYXNlXCJnZXRUcmFuc2FjdGlvblwiOnVybCs9XCI/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2gmdHhoYXNoPVwiK3BhcmFtcy50cmFuc2FjdGlvbkhhc2g7dXJsKz1hcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCk7Y2FzZVwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6dXJsKz1cIj9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQmdHhoYXNoPVwiK3BhcmFtcy50cmFuc2FjdGlvbkhhc2g7dXJsKz1hcGlLZXk7cmV0dXJuIGdldCh1cmwsbnVsbCk7Y2FzZVwiY2FsbFwiOntpZihwYXJhbXMuYmxvY2tUYWchPT1cImxhdGVzdFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJFdGhlcnNjYW5Qcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IGJsb2NrVGFnIGZvciBjYWxsXCIpfWNvbnN0IHBvc3REYXRhPWdldFRyYW5zYWN0aW9uUG9zdERhdGEocGFyYW1zLnRyYW5zYWN0aW9uKTtwb3N0RGF0YS5tb2R1bGU9XCJwcm94eVwiO3Bvc3REYXRhLmFjdGlvbj1cImV0aF9jYWxsXCI7cG9zdERhdGEuYXBpa2V5PXRoaXMuYXBpS2V5O3RyeXtyZXR1cm4geWllbGQgZ2V0KHVybCxwb3N0RGF0YSl9Y2F0Y2goZXJyb3Ipe3JldHVybiBjaGVja0Vycm9yJDEoXCJjYWxsXCIsZXJyb3IscGFyYW1zLnRyYW5zYWN0aW9uKX19Y2FzZVwiZXN0aW1hdGVHYXNcIjp7Y29uc3QgcG9zdERhdGE9Z2V0VHJhbnNhY3Rpb25Qb3N0RGF0YShwYXJhbXMudHJhbnNhY3Rpb24pO3Bvc3REYXRhLm1vZHVsZT1cInByb3h5XCI7cG9zdERhdGEuYWN0aW9uPVwiZXRoX2VzdGltYXRlR2FzXCI7cG9zdERhdGEuYXBpa2V5PXRoaXMuYXBpS2V5O3RyeXtyZXR1cm4geWllbGQgZ2V0KHVybCxwb3N0RGF0YSl9Y2F0Y2goZXJyb3Ipe3JldHVybiBjaGVja0Vycm9yJDEoXCJlc3RpbWF0ZUdhc1wiLGVycm9yLHBhcmFtcy50cmFuc2FjdGlvbil9fWNhc2VcImdldExvZ3NcIjp7dXJsKz1cIj9tb2R1bGU9bG9ncyZhY3Rpb249Z2V0TG9nc1wiO2lmKHBhcmFtcy5maWx0ZXIuZnJvbUJsb2NrKXt1cmwrPVwiJmZyb21CbG9jaz1cIitjaGVja0xvZ1RhZyhwYXJhbXMuZmlsdGVyLmZyb21CbG9jayl9aWYocGFyYW1zLmZpbHRlci50b0Jsb2NrKXt1cmwrPVwiJnRvQmxvY2s9XCIrY2hlY2tMb2dUYWcocGFyYW1zLmZpbHRlci50b0Jsb2NrKX1pZihwYXJhbXMuZmlsdGVyLmFkZHJlc3Mpe3VybCs9XCImYWRkcmVzcz1cIitwYXJhbXMuZmlsdGVyLmFkZHJlc3N9aWYocGFyYW1zLmZpbHRlci50b3BpY3MmJnBhcmFtcy5maWx0ZXIudG9waWNzLmxlbmd0aD4wKXtpZihwYXJhbXMuZmlsdGVyLnRvcGljcy5sZW5ndGg+MSl7bG9nZ2VyJHoudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIHRvcGljIGNvdW50XCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se3RvcGljczpwYXJhbXMuZmlsdGVyLnRvcGljc30pfWlmKHBhcmFtcy5maWx0ZXIudG9waWNzLmxlbmd0aD09PTEpe2NvbnN0IHRvcGljMD1wYXJhbXMuZmlsdGVyLnRvcGljc1swXTtpZih0eXBlb2YgdG9waWMwIT09XCJzdHJpbmdcInx8dG9waWMwLmxlbmd0aCE9PTY2KXtsb2dnZXIkei50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgdG9waWMgZm9ybWF0XCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se3RvcGljMDp0b3BpYzB9KX11cmwrPVwiJnRvcGljMD1cIit0b3BpYzB9fXVybCs9YXBpS2V5O2NvbnN0IGxvZ3M9eWllbGQgZ2V0KHVybCxudWxsLGdldFJlc3VsdCQxKTtsZXQgYmxvY2tzPXt9O2ZvcihsZXQgaT0wO2k8bG9ncy5sZW5ndGg7aSsrKXtjb25zdCBsb2c9bG9nc1tpXTtpZihsb2cuYmxvY2tIYXNoIT1udWxsKXtjb250aW51ZX1pZihibG9ja3NbbG9nLmJsb2NrTnVtYmVyXT09bnVsbCl7Y29uc3QgYmxvY2s9eWllbGQgdGhpcy5nZXRCbG9jayhsb2cuYmxvY2tOdW1iZXIpO2lmKGJsb2NrKXtibG9ja3NbbG9nLmJsb2NrTnVtYmVyXT1ibG9jay5oYXNofX1sb2cuYmxvY2tIYXNoPWJsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdfXJldHVybiBsb2dzfWNhc2VcImdldEV0aGVyUHJpY2VcIjppZih0aGlzLm5ldHdvcmsubmFtZSE9PVwiaG9tZXN0ZWFkXCIpe3JldHVybiAwfXVybCs9XCI/bW9kdWxlPXN0YXRzJmFjdGlvbj1ldGhwcmljZVwiO3VybCs9YXBpS2V5O3JldHVybiBwYXJzZUZsb2F0KCh5aWVsZCBnZXQodXJsLG51bGwsZ2V0UmVzdWx0JDEpKS5ldGh1c2QpO2RlZmF1bHQ6YnJlYWt9cmV0dXJuIF9zdXBlci5wZXJmb3JtLmNhbGwodGhpcyxtZXRob2QscGFyYW1zKX0pfWdldEhpc3RvcnkoYWRkcmVzc09yTmFtZSxzdGFydEJsb2NrLGVuZEJsb2NrKXtsZXQgdXJsPXRoaXMuYmFzZVVybDtsZXQgYXBpS2V5PVwiXCI7aWYodGhpcy5hcGlLZXkpe2FwaUtleSs9XCImYXBpa2V5PVwiK3RoaXMuYXBpS2V5fWlmKHN0YXJ0QmxvY2s9PW51bGwpe3N0YXJ0QmxvY2s9MH1pZihlbmRCbG9jaz09bnVsbCl7ZW5kQmxvY2s9OTk5OTk5OTl9cmV0dXJuIHRoaXMucmVzb2x2ZU5hbWUoYWRkcmVzc09yTmFtZSkudGhlbihhZGRyZXNzPT57dXJsKz1cIi9hcGk/bW9kdWxlPWFjY291bnQmYWN0aW9uPXR4bGlzdCZhZGRyZXNzPVwiK2FkZHJlc3M7dXJsKz1cIiZzdGFydGJsb2NrPVwiK3N0YXJ0QmxvY2s7dXJsKz1cIiZlbmRibG9jaz1cIitlbmRCbG9jazt1cmwrPVwiJnNvcnQ9YXNjXCIrYXBpS2V5O3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlcXVlc3RcIixyZXF1ZXN0OnVybCxwcm92aWRlcjp0aGlzfSk7Y29uc3QgY29ubmVjdGlvbj17dXJsOnVybCx0aHJvdHRsZVNsb3RJbnRlcnZhbDoxZTMsdGhyb3R0bGVDYWxsYmFjazooYXR0ZW1wdCx1cmwpPT57aWYodGhpcy5hcGlLZXk9PT1kZWZhdWx0QXBpS2V5JDEpe3Nob3dUaHJvdHRsZU1lc3NhZ2UoKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpfX07cmV0dXJuIGZldGNoSnNvbihjb25uZWN0aW9uLG51bGwsZ2V0UmVzdWx0JDEpLnRoZW4ocmVzdWx0PT57dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixyZXF1ZXN0OnVybCxyZXNwb25zZTpkZWVwQ29weShyZXN1bHQpLHByb3ZpZGVyOnRoaXN9KTtsZXQgb3V0cHV0PVtdO3Jlc3VsdC5mb3JFYWNoKHR4PT57W1wiY29udHJhY3RBZGRyZXNzXCIsXCJ0b1wiXS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7aWYodHhba2V5XT09XCJcIil7ZGVsZXRlIHR4W2tleV19fSk7aWYodHguY3JlYXRlcz09bnVsbCYmdHguY29udHJhY3RBZGRyZXNzIT1udWxsKXt0eC5jcmVhdGVzPXR4LmNvbnRyYWN0QWRkcmVzc31sZXQgaXRlbT10aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvblJlc3BvbnNlKHR4KTtpZih0eC50aW1lU3RhbXApe2l0ZW0udGltZXN0YW1wPXBhcnNlSW50KHR4LnRpbWVTdGFtcCl9b3V0cHV0LnB1c2goaXRlbSl9KTtyZXR1cm4gb3V0cHV0fSl9KX1pc0NvbW11bml0eVJlc291cmNlKCl7cmV0dXJuIHRoaXMuYXBpS2V5PT09ZGVmYXVsdEFwaUtleSQxfX1cInVzZSBzdHJpY3RcIjt2YXIgX19hd2FpdGVyJGU9d2luZG93JiZ3aW5kb3cuX19hd2FpdGVyfHxmdW5jdGlvbih0aGlzQXJnLF9hcmd1bWVudHMsUCxnZW5lcmF0b3Ipe2Z1bmN0aW9uIGFkb3B0KHZhbHVlKXtyZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQP3ZhbHVlOm5ldyBQKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUodmFsdWUpfSl9cmV0dXJuIG5ldyhQfHwoUD1Qcm9taXNlKSkoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe2Z1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSl7dHJ5e3N0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKX1jYXRjaChlKXtyZWplY3QoZSl9fWZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKXt0cnl7c3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpfWNhdGNoKGUpe3JlamVjdChlKX19ZnVuY3Rpb24gc3RlcChyZXN1bHQpe3Jlc3VsdC5kb25lP3Jlc29sdmUocmVzdWx0LnZhbHVlKTphZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLHJlamVjdGVkKX1zdGVwKChnZW5lcmF0b3I9Z2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsX2FyZ3VtZW50c3x8W10pKS5uZXh0KCkpfSl9O2NvbnN0IGxvZ2dlciRBPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtmdW5jdGlvbiBub3coKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX1mdW5jdGlvbiBjaGVja05ldHdvcmtzKG5ldHdvcmtzKXtsZXQgcmVzdWx0PW51bGw7Zm9yKGxldCBpPTA7aTxuZXR3b3Jrcy5sZW5ndGg7aSsrKXtjb25zdCBuZXR3b3JrPW5ldHdvcmtzW2ldO2lmKG5ldHdvcms9PW51bGwpe3JldHVybiBudWxsfWlmKHJlc3VsdCl7aWYoIShyZXN1bHQubmFtZT09PW5ldHdvcmsubmFtZSYmcmVzdWx0LmNoYWluSWQ9PT1uZXR3b3JrLmNoYWluSWQmJihyZXN1bHQuZW5zQWRkcmVzcz09PW5ldHdvcmsuZW5zQWRkcmVzc3x8cmVzdWx0LmVuc0FkZHJlc3M9PW51bGwmJm5ldHdvcmsuZW5zQWRkcmVzcz09bnVsbCkpKXtsb2dnZXIkQS50aHJvd0FyZ3VtZW50RXJyb3IoXCJwcm92aWRlciBtaXNtYXRjaFwiLFwibmV0d29ya3NcIixuZXR3b3Jrcyl9fWVsc2V7cmVzdWx0PW5ldHdvcmt9fXJldHVybiByZXN1bHR9ZnVuY3Rpb24gbWVkaWFuKHZhbHVlcyxtYXhEZWx0YSl7dmFsdWVzPXZhbHVlcy5zbGljZSgpLnNvcnQoKTtjb25zdCBtaWRkbGU9TWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoLzIpO2lmKHZhbHVlcy5sZW5ndGglMil7cmV0dXJuIHZhbHVlc1ttaWRkbGVdfWNvbnN0IGE9dmFsdWVzW21pZGRsZS0xXSxiPXZhbHVlc1ttaWRkbGVdO2lmKG1heERlbHRhIT1udWxsJiZNYXRoLmFicyhhLWIpPm1heERlbHRhKXtyZXR1cm4gbnVsbH1yZXR1cm4oYStiKS8yfWZ1bmN0aW9uIHNlcmlhbGl6ZSQxKHZhbHVlKXtpZih2YWx1ZT09PW51bGwpe3JldHVyblwibnVsbFwifWVsc2UgaWYodHlwZW9mIHZhbHVlPT09XCJudW1iZXJcInx8dHlwZW9mIHZhbHVlPT09XCJib29sZWFuXCIpe3JldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSl9ZWxzZSBpZih0eXBlb2YgdmFsdWU9PT1cInN0cmluZ1wiKXtyZXR1cm4gdmFsdWV9ZWxzZSBpZihCaWdOdW1iZXIuaXNCaWdOdW1iZXIodmFsdWUpKXtyZXR1cm4gdmFsdWUudG9TdHJpbmcoKX1lbHNlIGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUubWFwKGk9PnNlcmlhbGl6ZSQxKGkpKSl9ZWxzZSBpZih0eXBlb2YgdmFsdWU9PT1cIm9iamVjdFwiKXtjb25zdCBrZXlzPU9iamVjdC5rZXlzKHZhbHVlKTtrZXlzLnNvcnQoKTtyZXR1cm5cIntcIitrZXlzLm1hcChrZXk9PntsZXQgdj12YWx1ZVtrZXldO2lmKHR5cGVvZiB2PT09XCJmdW5jdGlvblwiKXt2PVwiW2Z1bmN0aW9uXVwifWVsc2V7dj1zZXJpYWxpemUkMSh2KX1yZXR1cm4gSlNPTi5zdHJpbmdpZnkoa2V5KStcIjpcIit2fSkuam9pbihcIixcIikrXCJ9XCJ9dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB2YWx1ZSB0eXBlOiBcIit0eXBlb2YgdmFsdWUpfWxldCBuZXh0UmlkPTE7ZnVuY3Rpb24gc3RhbGwkMShkdXJhdGlvbil7bGV0IGNhbmNlbD1udWxsO2xldCB0aW1lcj1udWxsO2xldCBwcm9taXNlPW5ldyBQcm9taXNlKHJlc29sdmU9PntjYW5jZWw9ZnVuY3Rpb24oKXtpZih0aW1lcil7Y2xlYXJUaW1lb3V0KHRpbWVyKTt0aW1lcj1udWxsfXJlc29sdmUoKX07dGltZXI9c2V0VGltZW91dChjYW5jZWwsZHVyYXRpb24pfSk7Y29uc3Qgd2FpdD1mdW5jPT57cHJvbWlzZT1wcm9taXNlLnRoZW4oZnVuYyk7cmV0dXJuIHByb21pc2V9O2Z1bmN0aW9uIGdldFByb21pc2UoKXtyZXR1cm4gcHJvbWlzZX1yZXR1cm57Y2FuY2VsOmNhbmNlbCxnZXRQcm9taXNlOmdldFByb21pc2Usd2FpdDp3YWl0fX1jb25zdCBGb3J3YXJkRXJyb3JzPVtMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLExvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCxMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VELExvZ2dlci5lcnJvcnMuVU5QUkVESUNUQUJMRV9HQVNfTElNSVRdO2NvbnN0IEZvcndhcmRQcm9wZXJ0aWVzPVtcImFkZHJlc3NcIixcImFyZ3NcIixcImVycm9yQXJnc1wiLFwiZXJyb3JTaWduYXR1cmVcIixcIm1ldGhvZFwiLFwidHJhbnNhY3Rpb25cIl07ZnVuY3Rpb24gZXhwb3NlRGVidWdDb25maWcoY29uZmlnLG5vdyl7Y29uc3QgcmVzdWx0PXt3ZWlnaHQ6Y29uZmlnLndlaWdodH07T2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCxcInByb3ZpZGVyXCIse2dldDooKT0+Y29uZmlnLnByb3ZpZGVyfSk7aWYoY29uZmlnLnN0YXJ0KXtyZXN1bHQuc3RhcnQ9Y29uZmlnLnN0YXJ0fWlmKG5vdyl7cmVzdWx0LmR1cmF0aW9uPW5vdy1jb25maWcuc3RhcnR9aWYoY29uZmlnLmRvbmUpe2lmKGNvbmZpZy5lcnJvcil7cmVzdWx0LmVycm9yPWNvbmZpZy5lcnJvcn1lbHNle3Jlc3VsdC5yZXN1bHQ9Y29uZmlnLnJlc3VsdHx8bnVsbH19cmV0dXJuIHJlc3VsdH1mdW5jdGlvbiBub3JtYWxpemVkVGFsbHkobm9ybWFsaXplLHF1b3J1bSl7cmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ3Mpe2NvbnN0IHRhbGx5PXt9O2NvbmZpZ3MuZm9yRWFjaChjPT57Y29uc3QgdmFsdWU9bm9ybWFsaXplKGMucmVzdWx0KTtpZighdGFsbHlbdmFsdWVdKXt0YWxseVt2YWx1ZV09e2NvdW50OjAscmVzdWx0OmMucmVzdWx0fX10YWxseVt2YWx1ZV0uY291bnQrK30pO2NvbnN0IGtleXM9T2JqZWN0LmtleXModGFsbHkpO2ZvcihsZXQgaT0wO2k8a2V5cy5sZW5ndGg7aSsrKXtjb25zdCBjaGVjaz10YWxseVtrZXlzW2ldXTtpZihjaGVjay5jb3VudD49cXVvcnVtKXtyZXR1cm4gY2hlY2sucmVzdWx0fX1yZXR1cm4gdW5kZWZpbmVkfX1mdW5jdGlvbiBnZXRQcm9jZXNzRnVuYyhwcm92aWRlcixtZXRob2QscGFyYW1zKXtsZXQgbm9ybWFsaXplPXNlcmlhbGl6ZSQxO3N3aXRjaChtZXRob2Qpe2Nhc2VcImdldEJsb2NrTnVtYmVyXCI6cmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ3Mpe2NvbnN0IHZhbHVlcz1jb25maWdzLm1hcChjPT5jLnJlc3VsdCk7bGV0IGJsb2NrTnVtYmVyPW1lZGlhbihjb25maWdzLm1hcChjPT5jLnJlc3VsdCksMik7aWYoYmxvY2tOdW1iZXI9PW51bGwpe3JldHVybiB1bmRlZmluZWR9YmxvY2tOdW1iZXI9TWF0aC5jZWlsKGJsb2NrTnVtYmVyKTtpZih2YWx1ZXMuaW5kZXhPZihibG9ja051bWJlcisxKT49MCl7YmxvY2tOdW1iZXIrK31pZihibG9ja051bWJlcj49cHJvdmlkZXIuX2hpZ2hlc3RCbG9ja051bWJlcil7cHJvdmlkZXIuX2hpZ2hlc3RCbG9ja051bWJlcj1ibG9ja051bWJlcn1yZXR1cm4gcHJvdmlkZXIuX2hpZ2hlc3RCbG9ja051bWJlcn07Y2FzZVwiZ2V0R2FzUHJpY2VcIjpyZXR1cm4gZnVuY3Rpb24oY29uZmlncyl7Y29uc3QgdmFsdWVzPWNvbmZpZ3MubWFwKGM9PmMucmVzdWx0KTt2YWx1ZXMuc29ydCgpO3JldHVybiB2YWx1ZXNbTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoLzIpXX07Y2FzZVwiZ2V0RXRoZXJQcmljZVwiOnJldHVybiBmdW5jdGlvbihjb25maWdzKXtyZXR1cm4gbWVkaWFuKGNvbmZpZ3MubWFwKGM9PmMucmVzdWx0KSl9O2Nhc2VcImdldEJhbGFuY2VcIjpjYXNlXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6Y2FzZVwiZ2V0Q29kZVwiOmNhc2VcImdldFN0b3JhZ2VBdFwiOmNhc2VcImNhbGxcIjpjYXNlXCJlc3RpbWF0ZUdhc1wiOmNhc2VcImdldExvZ3NcIjpicmVhaztjYXNlXCJnZXRUcmFuc2FjdGlvblwiOmNhc2VcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOm5vcm1hbGl6ZT1mdW5jdGlvbih0eCl7aWYodHg9PW51bGwpe3JldHVybiBudWxsfXR4PXNoYWxsb3dDb3B5KHR4KTt0eC5jb25maXJtYXRpb25zPS0xO3JldHVybiBzZXJpYWxpemUkMSh0eCl9O2JyZWFrO2Nhc2VcImdldEJsb2NrXCI6aWYocGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnMpe25vcm1hbGl6ZT1mdW5jdGlvbihibG9jayl7aWYoYmxvY2s9PW51bGwpe3JldHVybiBudWxsfWJsb2NrPXNoYWxsb3dDb3B5KGJsb2NrKTtibG9jay50cmFuc2FjdGlvbnM9YmxvY2sudHJhbnNhY3Rpb25zLm1hcCh0eD0+e3R4PXNoYWxsb3dDb3B5KHR4KTt0eC5jb25maXJtYXRpb25zPS0xO3JldHVybiB0eH0pO3JldHVybiBzZXJpYWxpemUkMShibG9jayl9fWVsc2V7bm9ybWFsaXplPWZ1bmN0aW9uKGJsb2NrKXtpZihibG9jaz09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIHNlcmlhbGl6ZSQxKGJsb2NrKX19YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG1ldGhvZDogXCIrbWV0aG9kKX1yZXR1cm4gbm9ybWFsaXplZFRhbGx5KG5vcm1hbGl6ZSxwcm92aWRlci5xdW9ydW0pfWZ1bmN0aW9uIHdhaXRGb3JTeW5jKGNvbmZpZyxibG9ja051bWJlcil7cmV0dXJuIF9fYXdhaXRlciRlKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbiooKXtjb25zdCBwcm92aWRlcj1jb25maWcucHJvdmlkZXI7aWYocHJvdmlkZXIuYmxvY2tOdW1iZXIhPW51bGwmJnByb3ZpZGVyLmJsb2NrTnVtYmVyPj1ibG9ja051bWJlcnx8YmxvY2tOdW1iZXI9PT0tMSl7cmV0dXJuIHByb3ZpZGVyfXJldHVybiBwb2xsKCgpPT57cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYocHJvdmlkZXIuYmxvY2tOdW1iZXI+PWJsb2NrTnVtYmVyKXtyZXR1cm4gcmVzb2x2ZShwcm92aWRlcil9aWYoY29uZmlnLmNhbmNlbGxlZCl7cmV0dXJuIHJlc29sdmUobnVsbCl9cmV0dXJuIHJlc29sdmUodW5kZWZpbmVkKX0sMCl9KX0se29uY2VQb2xsOnByb3ZpZGVyfSl9KX1mdW5jdGlvbiBnZXRSdW5uZXIoY29uZmlnLGN1cnJlbnRCbG9ja051bWJlcixtZXRob2QscGFyYW1zKXtyZXR1cm4gX19hd2FpdGVyJGUodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2xldCBwcm92aWRlcj1jb25maWcucHJvdmlkZXI7c3dpdGNoKG1ldGhvZCl7Y2FzZVwiZ2V0QmxvY2tOdW1iZXJcIjpjYXNlXCJnZXRHYXNQcmljZVwiOnJldHVybiBwcm92aWRlclttZXRob2RdKCk7Y2FzZVwiZ2V0RXRoZXJQcmljZVwiOmlmKHByb3ZpZGVyLmdldEV0aGVyUHJpY2Upe3JldHVybiBwcm92aWRlci5nZXRFdGhlclByaWNlKCl9YnJlYWs7Y2FzZVwiZ2V0QmFsYW5jZVwiOmNhc2VcImdldFRyYW5zYWN0aW9uQ291bnRcIjpjYXNlXCJnZXRDb2RlXCI6aWYocGFyYW1zLmJsb2NrVGFnJiZpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKXtwcm92aWRlcj15aWVsZCB3YWl0Rm9yU3luYyhjb25maWcsY3VycmVudEJsb2NrTnVtYmVyKX1yZXR1cm4gcHJvdmlkZXJbbWV0aG9kXShwYXJhbXMuYWRkcmVzcyxwYXJhbXMuYmxvY2tUYWd8fFwibGF0ZXN0XCIpO2Nhc2VcImdldFN0b3JhZ2VBdFwiOmlmKHBhcmFtcy5ibG9ja1RhZyYmaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSl7cHJvdmlkZXI9eWllbGQgd2FpdEZvclN5bmMoY29uZmlnLGN1cnJlbnRCbG9ja051bWJlcil9cmV0dXJuIHByb3ZpZGVyLmdldFN0b3JhZ2VBdChwYXJhbXMuYWRkcmVzcyxwYXJhbXMucG9zaXRpb24scGFyYW1zLmJsb2NrVGFnfHxcImxhdGVzdFwiKTtjYXNlXCJnZXRCbG9ja1wiOmlmKHBhcmFtcy5ibG9ja1RhZyYmaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSl7cHJvdmlkZXI9eWllbGQgd2FpdEZvclN5bmMoY29uZmlnLGN1cnJlbnRCbG9ja051bWJlcil9cmV0dXJuIHByb3ZpZGVyW3BhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zP1wiZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zXCI6XCJnZXRCbG9ja1wiXShwYXJhbXMuYmxvY2tUYWd8fHBhcmFtcy5ibG9ja0hhc2gpO2Nhc2VcImNhbGxcIjpjYXNlXCJlc3RpbWF0ZUdhc1wiOmlmKHBhcmFtcy5ibG9ja1RhZyYmaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSl7cHJvdmlkZXI9eWllbGQgd2FpdEZvclN5bmMoY29uZmlnLGN1cnJlbnRCbG9ja051bWJlcil9cmV0dXJuIHByb3ZpZGVyW21ldGhvZF0ocGFyYW1zLnRyYW5zYWN0aW9uKTtjYXNlXCJnZXRUcmFuc2FjdGlvblwiOmNhc2VcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOnJldHVybiBwcm92aWRlclttZXRob2RdKHBhcmFtcy50cmFuc2FjdGlvbkhhc2gpO2Nhc2VcImdldExvZ3NcIjp7bGV0IGZpbHRlcj1wYXJhbXMuZmlsdGVyO2lmKGZpbHRlci5mcm9tQmxvY2smJmlzSGV4U3RyaW5nKGZpbHRlci5mcm9tQmxvY2spfHxmaWx0ZXIudG9CbG9jayYmaXNIZXhTdHJpbmcoZmlsdGVyLnRvQmxvY2spKXtwcm92aWRlcj15aWVsZCB3YWl0Rm9yU3luYyhjb25maWcsY3VycmVudEJsb2NrTnVtYmVyKX1yZXR1cm4gcHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpfX1yZXR1cm4gbG9nZ2VyJEEudGhyb3dFcnJvcihcInVua25vd24gbWV0aG9kIGVycm9yXCIsTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SLHttZXRob2Q6bWV0aG9kLHBhcmFtczpwYXJhbXN9KX0pfWNsYXNzIEZhbGxiYWNrUHJvdmlkZXIgZXh0ZW5kcyBCYXNlUHJvdmlkZXJ7Y29uc3RydWN0b3IocHJvdmlkZXJzLHF1b3J1bSl7bG9nZ2VyJEEuY2hlY2tOZXcobmV3LnRhcmdldCxGYWxsYmFja1Byb3ZpZGVyKTtpZihwcm92aWRlcnMubGVuZ3RoPT09MCl7bG9nZ2VyJEEudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcm92aWRlcnNcIixcInByb3ZpZGVyc1wiLHByb3ZpZGVycyl9Y29uc3QgcHJvdmlkZXJDb25maWdzPXByb3ZpZGVycy5tYXAoKGNvbmZpZ09yUHJvdmlkZXIsaW5kZXgpPT57aWYoUHJvdmlkZXIuaXNQcm92aWRlcihjb25maWdPclByb3ZpZGVyKSl7Y29uc3Qgc3RhbGxUaW1lb3V0PWlzQ29tbXVuaXR5UmVzb3VyY2UoY29uZmlnT3JQcm92aWRlcik/MmUzOjc1MDtjb25zdCBwcmlvcml0eT0xO3JldHVybiBPYmplY3QuZnJlZXplKHtwcm92aWRlcjpjb25maWdPclByb3ZpZGVyLHdlaWdodDoxLHN0YWxsVGltZW91dDpzdGFsbFRpbWVvdXQscHJpb3JpdHk6cHJpb3JpdHl9KX1jb25zdCBjb25maWc9c2hhbGxvd0NvcHkoY29uZmlnT3JQcm92aWRlcik7aWYoY29uZmlnLnByaW9yaXR5PT1udWxsKXtjb25maWcucHJpb3JpdHk9MX1pZihjb25maWcuc3RhbGxUaW1lb3V0PT1udWxsKXtjb25maWcuc3RhbGxUaW1lb3V0PWlzQ29tbXVuaXR5UmVzb3VyY2UoY29uZmlnT3JQcm92aWRlcik/MmUzOjc1MH1pZihjb25maWcud2VpZ2h0PT1udWxsKXtjb25maWcud2VpZ2h0PTF9Y29uc3Qgd2VpZ2h0PWNvbmZpZy53ZWlnaHQ7aWYod2VpZ2h0JTF8fHdlaWdodD41MTJ8fHdlaWdodDwxKXtsb2dnZXIkQS50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHdlaWdodDsgbXVzdCBiZSBpbnRlZ2VyIGluIFsxLCA1MTJdXCIsYHByb3ZpZGVyc1ske2luZGV4fV0ud2VpZ2h0YCx3ZWlnaHQpfXJldHVybiBPYmplY3QuZnJlZXplKGNvbmZpZyl9KTtjb25zdCB0b3RhbD1wcm92aWRlckNvbmZpZ3MucmVkdWNlKChhY2N1bSxjKT0+YWNjdW0rYy53ZWlnaHQsMCk7aWYocXVvcnVtPT1udWxsKXtxdW9ydW09dG90YWwvMn1lbHNlIGlmKHF1b3J1bT50b3RhbCl7bG9nZ2VyJEEudGhyb3dBcmd1bWVudEVycm9yKFwicXVvcnVtIHdpbGwgYWx3YXlzIGZhaWw7IGxhcmdlciB0aGFuIHRvdGFsIHdlaWdodFwiLFwicXVvcnVtXCIscXVvcnVtKX1sZXQgbmV0d29ya09yUmVhZHk9Y2hlY2tOZXR3b3Jrcyhwcm92aWRlckNvbmZpZ3MubWFwKGM9PmMucHJvdmlkZXIubmV0d29yaykpO2lmKG5ldHdvcmtPclJlYWR5PT1udWxsKXtuZXR3b3JrT3JSZWFkeT1uZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57c2V0VGltZW91dCgoKT0+e3RoaXMuZGV0ZWN0TmV0d29yaygpLnRoZW4ocmVzb2x2ZSxyZWplY3QpfSwwKX0pfXN1cGVyKG5ldHdvcmtPclJlYWR5KTtkZWZpbmVSZWFkT25seSh0aGlzLFwicHJvdmlkZXJDb25maWdzXCIsT2JqZWN0LmZyZWV6ZShwcm92aWRlckNvbmZpZ3MpKTtkZWZpbmVSZWFkT25seSh0aGlzLFwicXVvcnVtXCIscXVvcnVtKTt0aGlzLl9oaWdoZXN0QmxvY2tOdW1iZXI9LTF9ZGV0ZWN0TmV0d29yaygpe3JldHVybiBfX2F3YWl0ZXIkZSh0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24qKCl7Y29uc3QgbmV0d29ya3M9eWllbGQgUHJvbWlzZS5hbGwodGhpcy5wcm92aWRlckNvbmZpZ3MubWFwKGM9PmMucHJvdmlkZXIuZ2V0TmV0d29yaygpKSk7cmV0dXJuIGNoZWNrTmV0d29ya3MobmV0d29ya3MpfSl9cGVyZm9ybShtZXRob2QscGFyYW1zKXtyZXR1cm4gX19hd2FpdGVyJGUodGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKigpe2lmKG1ldGhvZD09PVwic2VuZFRyYW5zYWN0aW9uXCIpe2NvbnN0IHJlc3VsdHM9eWllbGQgUHJvbWlzZS5hbGwodGhpcy5wcm92aWRlckNvbmZpZ3MubWFwKGM9PntyZXR1cm4gYy5wcm92aWRlci5zZW5kVHJhbnNhY3Rpb24ocGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uKS50aGVuKHJlc3VsdD0+e3JldHVybiByZXN1bHQuaGFzaH0sZXJyb3I9PntyZXR1cm4gZXJyb3J9KX0pKTtmb3IobGV0IGk9MDtpPHJlc3VsdHMubGVuZ3RoO2krKyl7Y29uc3QgcmVzdWx0PXJlc3VsdHNbaV07aWYodHlwZW9mIHJlc3VsdD09PVwic3RyaW5nXCIpe3JldHVybiByZXN1bHR9fXRocm93IHJlc3VsdHNbMF19aWYodGhpcy5faGlnaGVzdEJsb2NrTnVtYmVyPT09LTEmJm1ldGhvZCE9PVwiZ2V0QmxvY2tOdW1iZXJcIil7eWllbGQgdGhpcy5nZXRCbG9ja051bWJlcigpfWNvbnN0IHByb2Nlc3NGdW5jPWdldFByb2Nlc3NGdW5jKHRoaXMsbWV0aG9kLHBhcmFtcyk7Y29uc3QgY29uZmlncz1zaHVmZmxlZCh0aGlzLnByb3ZpZGVyQ29uZmlncy5tYXAoc2hhbGxvd0NvcHkpKTtjb25maWdzLnNvcnQoKGEsYik9PmEucHJpb3JpdHktYi5wcmlvcml0eSk7Y29uc3QgY3VycmVudEJsb2NrTnVtYmVyPXRoaXMuX2hpZ2hlc3RCbG9ja051bWJlcjtsZXQgaT0wO2xldCBmaXJzdD10cnVlO3doaWxlKHRydWUpe2NvbnN0IHQwPW5vdygpO2xldCBpbmZsaWdodFdlaWdodD1jb25maWdzLmZpbHRlcihjPT5jLnJ1bm5lciYmdDAtYy5zdGFydDxjLnN0YWxsVGltZW91dCkucmVkdWNlKChhY2N1bSxjKT0+YWNjdW0rYy53ZWlnaHQsMCk7d2hpbGUoaW5mbGlnaHRXZWlnaHQ8dGhpcy5xdW9ydW0mJmk8Y29uZmlncy5sZW5ndGgpe2NvbnN0IGNvbmZpZz1jb25maWdzW2krK107Y29uc3QgcmlkPW5leHRSaWQrKztjb25maWcuc3RhcnQ9bm93KCk7Y29uZmlnLnN0YWxsZXI9c3RhbGwkMShjb25maWcuc3RhbGxUaW1lb3V0KTtjb25maWcuc3RhbGxlci53YWl0KCgpPT57Y29uZmlnLnN0YWxsZXI9bnVsbH0pO2NvbmZpZy5ydW5uZXI9Z2V0UnVubmVyKGNvbmZpZyxjdXJyZW50QmxvY2tOdW1iZXIsbWV0aG9kLHBhcmFtcykudGhlbihyZXN1bHQ9Pntjb25maWcuZG9uZT10cnVlO2NvbmZpZy5yZXN1bHQ9cmVzdWx0O2lmKHRoaXMubGlzdGVuZXJDb3VudChcImRlYnVnXCIpKXt0aGlzLmVtaXQoXCJkZWJ1Z1wiLHthY3Rpb246XCJyZXF1ZXN0XCIscmlkOnJpZCxiYWNrZW5kOmV4cG9zZURlYnVnQ29uZmlnKGNvbmZpZyxub3coKSkscmVxdWVzdDp7bWV0aG9kOm1ldGhvZCxwYXJhbXM6ZGVlcENvcHkocGFyYW1zKX0scHJvdmlkZXI6dGhpc30pfX0sZXJyb3I9Pntjb25maWcuZG9uZT10cnVlO2NvbmZpZy5lcnJvcj1lcnJvcjtpZih0aGlzLmxpc3RlbmVyQ291bnQoXCJkZWJ1Z1wiKSl7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdFwiLHJpZDpyaWQsYmFja2VuZDpleHBvc2VEZWJ1Z0NvbmZpZyhjb25maWcsbm93KCkpLHJlcXVlc3Q6e21ldGhvZDptZXRob2QscGFyYW1zOmRlZXBDb3B5KHBhcmFtcyl9LHByb3ZpZGVyOnRoaXN9KX19KTtpZih0aGlzLmxpc3RlbmVyQ291bnQoXCJkZWJ1Z1wiKSl7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdFwiLHJpZDpyaWQsYmFja2VuZDpleHBvc2VEZWJ1Z0NvbmZpZyhjb25maWcsbnVsbCkscmVxdWVzdDp7bWV0aG9kOm1ldGhvZCxwYXJhbXM6ZGVlcENvcHkocGFyYW1zKX0scHJvdmlkZXI6dGhpc30pfWluZmxpZ2h0V2VpZ2h0Kz1jb25maWcud2VpZ2h0fWNvbnN0IHdhaXRpbmc9W107Y29uZmlncy5mb3JFYWNoKGM9PntpZihjLmRvbmV8fCFjLnJ1bm5lcil7cmV0dXJufXdhaXRpbmcucHVzaChjLnJ1bm5lcik7aWYoYy5zdGFsbGVyKXt3YWl0aW5nLnB1c2goYy5zdGFsbGVyLmdldFByb21pc2UoKSl9fSk7aWYod2FpdGluZy5sZW5ndGgpe3lpZWxkIFByb21pc2UucmFjZSh3YWl0aW5nKX1jb25zdCByZXN1bHRzPWNvbmZpZ3MuZmlsdGVyKGM9PmMuZG9uZSYmYy5lcnJvcj09bnVsbCk7aWYocmVzdWx0cy5sZW5ndGg+PXRoaXMucXVvcnVtKXtjb25zdCByZXN1bHQ9cHJvY2Vzc0Z1bmMocmVzdWx0cyk7aWYocmVzdWx0IT09dW5kZWZpbmVkKXtjb25maWdzLmZvckVhY2goYz0+e2lmKGMuc3RhbGxlcil7Yy5zdGFsbGVyLmNhbmNlbCgpfWMuY2FuY2VsbGVkPXRydWV9KTtyZXR1cm4gcmVzdWx0fWlmKCFmaXJzdCl7eWllbGQgc3RhbGwkMSgxMDApLmdldFByb21pc2UoKX1maXJzdD1mYWxzZX1jb25zdCBlcnJvcnM9Y29uZmlncy5yZWR1Y2UoKGFjY3VtLGMpPT57aWYoIWMuZG9uZXx8Yy5lcnJvcj09bnVsbCl7cmV0dXJuIGFjY3VtfWNvbnN0IGNvZGU9Yy5lcnJvci5jb2RlO2lmKEZvcndhcmRFcnJvcnMuaW5kZXhPZihjb2RlKT49MCl7aWYoIWFjY3VtW2NvZGVdKXthY2N1bVtjb2RlXT17ZXJyb3I6Yy5lcnJvcix3ZWlnaHQ6MH19YWNjdW1bY29kZV0ud2VpZ2h0Kz1jLndlaWdodH1yZXR1cm4gYWNjdW19LHt9KTtPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goZXJyb3JDb2RlPT57Y29uc3QgdGFsbHk9ZXJyb3JzW2Vycm9yQ29kZV07aWYodGFsbHkud2VpZ2h0PHRoaXMucXVvcnVtKXtyZXR1cm59Y29uZmlncy5mb3JFYWNoKGM9PntpZihjLnN0YWxsZXIpe2Muc3RhbGxlci5jYW5jZWwoKX1jLmNhbmNlbGxlZD10cnVlfSk7Y29uc3QgZT10YWxseS5lcnJvcjtjb25zdCBwcm9wcz17fTtGb3J3YXJkUHJvcGVydGllcy5mb3JFYWNoKG5hbWU9PntpZihlW25hbWVdPT1udWxsKXtyZXR1cm59cHJvcHNbbmFtZV09ZVtuYW1lXX0pO2xvZ2dlciRBLnRocm93RXJyb3IoZS5yZWFzb258fGUubWVzc2FnZSxlcnJvckNvZGUscHJvcHMpfSk7aWYoY29uZmlncy5maWx0ZXIoYz0+IWMuZG9uZSkubGVuZ3RoPT09MCl7YnJlYWt9fWNvbmZpZ3MuZm9yRWFjaChjPT57aWYoYy5zdGFsbGVyKXtjLnN0YWxsZXIuY2FuY2VsKCl9Yy5jYW5jZWxsZWQ9dHJ1ZX0pO3JldHVybiBsb2dnZXIkQS50aHJvd0Vycm9yKFwiZmFpbGVkIHRvIG1lZXQgcXVvcnVtXCIsTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1Ise21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtcyxyZXN1bHRzOmNvbmZpZ3MubWFwKGM9PmV4cG9zZURlYnVnQ29uZmlnKGMpKSxwcm92aWRlcjp0aGlzfSl9KX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgSXBjUHJvdmlkZXI9bnVsbDtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkQj1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y29uc3QgZGVmYXVsdFByb2plY3RJZD1cIjg0ODQyMDc4YjA5OTQ2NjM4YzAzMTU3ZjgzNDA1MjEzXCI7Y2xhc3MgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIgZXh0ZW5kcyBXZWJTb2NrZXRQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrLGFwaUtleSl7Y29uc3QgcHJvdmlkZXI9bmV3IEluZnVyYVByb3ZpZGVyKG5ldHdvcmssYXBpS2V5KTtjb25zdCBjb25uZWN0aW9uPXByb3ZpZGVyLmNvbm5lY3Rpb247aWYoY29ubmVjdGlvbi5wYXNzd29yZCl7bG9nZ2VyJEIudGhyb3dFcnJvcihcIklORlVSQSBXZWJTb2NrZXQgcHJvamVjdCBzZWNyZXRzIHVuc3VwcG9ydGVkXCIsTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04se29wZXJhdGlvbjpcIkluZnVyYVByb3ZpZGVyLmdldFdlYlNvY2tldFByb3ZpZGVyKClcIn0pfWNvbnN0IHVybD1jb25uZWN0aW9uLnVybC5yZXBsYWNlKC9eaHR0cC9pLFwid3NcIikucmVwbGFjZShcIi92My9cIixcIi93cy92My9cIik7c3VwZXIodXJsLG5ldHdvcmspO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJhcGlLZXlcIixwcm92aWRlci5wcm9qZWN0SWQpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm9qZWN0SWRcIixwcm92aWRlci5wcm9qZWN0SWQpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm9qZWN0U2VjcmV0XCIscHJvdmlkZXIucHJvamVjdFNlY3JldCl9aXNDb21tdW5pdHlSZXNvdXJjZSgpe3JldHVybiB0aGlzLnByb2plY3RJZD09PWRlZmF1bHRQcm9qZWN0SWR9fWNsYXNzIEluZnVyYVByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVye3N0YXRpYyBnZXRXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLGFwaUtleSl7cmV0dXJuIG5ldyBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrLGFwaUtleSl9c3RhdGljIGdldEFwaUtleShhcGlLZXkpe2NvbnN0IGFwaUtleU9iaj17YXBpS2V5OmRlZmF1bHRQcm9qZWN0SWQscHJvamVjdElkOmRlZmF1bHRQcm9qZWN0SWQscHJvamVjdFNlY3JldDpudWxsfTtpZihhcGlLZXk9PW51bGwpe3JldHVybiBhcGlLZXlPYmp9aWYodHlwZW9mIGFwaUtleT09PVwic3RyaW5nXCIpe2FwaUtleU9iai5wcm9qZWN0SWQ9YXBpS2V5fWVsc2UgaWYoYXBpS2V5LnByb2plY3RTZWNyZXQhPW51bGwpe2xvZ2dlciRCLmFzc2VydEFyZ3VtZW50KHR5cGVvZiBhcGlLZXkucHJvamVjdElkPT09XCJzdHJpbmdcIixcInByb2plY3RTZWNyZXQgcmVxdWlyZXMgYSBwcm9qZWN0SWRcIixcInByb2plY3RJZFwiLGFwaUtleS5wcm9qZWN0SWQpO2xvZ2dlciRCLmFzc2VydEFyZ3VtZW50KHR5cGVvZiBhcGlLZXkucHJvamVjdFNlY3JldD09PVwic3RyaW5nXCIsXCJpbnZhbGlkIHByb2plY3RTZWNyZXRcIixcInByb2plY3RTZWNyZXRcIixcIltSRURBQ1RFRF1cIik7YXBpS2V5T2JqLnByb2plY3RJZD1hcGlLZXkucHJvamVjdElkO2FwaUtleU9iai5wcm9qZWN0U2VjcmV0PWFwaUtleS5wcm9qZWN0U2VjcmV0fWVsc2UgaWYoYXBpS2V5LnByb2plY3RJZCl7YXBpS2V5T2JqLnByb2plY3RJZD1hcGlLZXkucHJvamVjdElkfWFwaUtleU9iai5hcGlLZXk9YXBpS2V5T2JqLnByb2plY3RJZDtyZXR1cm4gYXBpS2V5T2JqfXN0YXRpYyBnZXRVcmwobmV0d29yayxhcGlLZXkpe2xldCBob3N0PW51bGw7c3dpdGNoKG5ldHdvcms/bmV0d29yay5uYW1lOlwidW5rbm93blwiKXtjYXNlXCJob21lc3RlYWRcIjpob3N0PVwibWFpbm5ldC5pbmZ1cmEuaW9cIjticmVhaztjYXNlXCJyb3BzdGVuXCI6aG9zdD1cInJvcHN0ZW4uaW5mdXJhLmlvXCI7YnJlYWs7Y2FzZVwicmlua2VieVwiOmhvc3Q9XCJyaW5rZWJ5LmluZnVyYS5pb1wiO2JyZWFrO2Nhc2VcImtvdmFuXCI6aG9zdD1cImtvdmFuLmluZnVyYS5pb1wiO2JyZWFrO2Nhc2VcImdvZXJsaVwiOmhvc3Q9XCJnb2VybGkuaW5mdXJhLmlvXCI7YnJlYWs7ZGVmYXVsdDpsb2dnZXIkQi50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJuZXR3b3JrXCIsdmFsdWU6bmV0d29ya30pfWNvbnN0IGNvbm5lY3Rpb249e2FsbG93R3ppcDp0cnVlLHVybDpcImh0dHBzOi9cIitcIi9cIitob3N0K1wiL3YzL1wiK2FwaUtleS5wcm9qZWN0SWQsdGhyb3R0bGVDYWxsYmFjazooYXR0ZW1wdCx1cmwpPT57aWYoYXBpS2V5LnByb2plY3RJZD09PWRlZmF1bHRQcm9qZWN0SWQpe3Nob3dUaHJvdHRsZU1lc3NhZ2UoKX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpfX07aWYoYXBpS2V5LnByb2plY3RTZWNyZXQhPW51bGwpe2Nvbm5lY3Rpb24udXNlcj1cIlwiO2Nvbm5lY3Rpb24ucGFzc3dvcmQ9YXBpS2V5LnByb2plY3RTZWNyZXR9cmV0dXJuIGNvbm5lY3Rpb259aXNDb21tdW5pdHlSZXNvdXJjZSgpe3JldHVybiB0aGlzLnByb2plY3RJZD09PWRlZmF1bHRQcm9qZWN0SWR9fWNsYXNzIEpzb25ScGNCYXRjaFByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVye3NlbmQobWV0aG9kLHBhcmFtcyl7Y29uc3QgcmVxdWVzdD17bWV0aG9kOm1ldGhvZCxwYXJhbXM6cGFyYW1zLGlkOnRoaXMuX25leHRJZCsrLGpzb25ycGM6XCIyLjBcIn07aWYodGhpcy5fcGVuZGluZ0JhdGNoPT1udWxsKXt0aGlzLl9wZW5kaW5nQmF0Y2g9W119Y29uc3QgaW5mbGlnaHRSZXF1ZXN0PXtyZXF1ZXN0OnJlcXVlc3QscmVzb2x2ZTpudWxsLHJlamVjdDpudWxsfTtjb25zdCBwcm9taXNlPW5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntpbmZsaWdodFJlcXVlc3QucmVzb2x2ZT1yZXNvbHZlO2luZmxpZ2h0UmVxdWVzdC5yZWplY3Q9cmVqZWN0fSk7dGhpcy5fcGVuZGluZ0JhdGNoLnB1c2goaW5mbGlnaHRSZXF1ZXN0KTtpZighdGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvcil7dGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvcj1zZXRUaW1lb3V0KCgpPT57Y29uc3QgYmF0Y2g9dGhpcy5fcGVuZGluZ0JhdGNoO3RoaXMuX3BlbmRpbmdCYXRjaD1udWxsO3RoaXMuX3BlbmRpbmdCYXRjaEFnZ3JlZ2F0b3I9bnVsbDtjb25zdCByZXF1ZXN0PWJhdGNoLm1hcChpbmZsaWdodD0+aW5mbGlnaHQucmVxdWVzdCk7dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVxdWVzdEJhdGNoXCIscmVxdWVzdDpkZWVwQ29weShyZXF1ZXN0KSxwcm92aWRlcjp0aGlzfSk7cmV0dXJuIGZldGNoSnNvbih0aGlzLmNvbm5lY3Rpb24sSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpLnRoZW4ocmVzdWx0PT57dGhpcy5lbWl0KFwiZGVidWdcIix7YWN0aW9uOlwicmVzcG9uc2VcIixyZXF1ZXN0OnJlcXVlc3QscmVzcG9uc2U6cmVzdWx0LHByb3ZpZGVyOnRoaXN9KTtiYXRjaC5mb3JFYWNoKChpbmZsaWdodFJlcXVlc3QsaW5kZXgpPT57Y29uc3QgcGF5bG9hZD1yZXN1bHRbaW5kZXhdO2lmKHBheWxvYWQuZXJyb3Ipe2NvbnN0IGVycm9yPW5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO2Vycm9yLmNvZGU9cGF5bG9hZC5lcnJvci5jb2RlO2Vycm9yLmRhdGE9cGF5bG9hZC5lcnJvci5kYXRhO2luZmxpZ2h0UmVxdWVzdC5yZWplY3QoZXJyb3IpfWVsc2V7aW5mbGlnaHRSZXF1ZXN0LnJlc29sdmUocGF5bG9hZC5yZXN1bHQpfX0pfSxlcnJvcj0+e3RoaXMuZW1pdChcImRlYnVnXCIse2FjdGlvbjpcInJlc3BvbnNlXCIsZXJyb3I6ZXJyb3IscmVxdWVzdDpyZXF1ZXN0LHByb3ZpZGVyOnRoaXN9KTtiYXRjaC5mb3JFYWNoKGluZmxpZ2h0UmVxdWVzdD0+e2luZmxpZ2h0UmVxdWVzdC5yZWplY3QoZXJyb3IpfSl9KX0sMTApfXJldHVybiBwcm9taXNlfX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkQz1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y29uc3QgZGVmYXVsdEFwaUtleSQyPVwiRVRIRVJTX0pTX1NIQVJFRFwiO2NsYXNzIE5vZGVzbWl0aFByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVye3N0YXRpYyBnZXRBcGlLZXkoYXBpS2V5KXtpZihhcGlLZXkmJnR5cGVvZiBhcGlLZXkhPT1cInN0cmluZ1wiKXtsb2dnZXIkQy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFwaUtleVwiLFwiYXBpS2V5XCIsYXBpS2V5KX1yZXR1cm4gYXBpS2V5fHxkZWZhdWx0QXBpS2V5JDJ9c3RhdGljIGdldFVybChuZXR3b3JrLGFwaUtleSl7bG9nZ2VyJEMud2FybihcIk5vZGVTbWl0aCB3aWxsIGJlIGRpc2NvbnRpbnVlZCBvbiAyMDE5LTEyLTIwOyBwbGVhc2UgbWlncmF0ZSB0byBhbm90aGVyIHBsYXRmb3JtLlwiKTtsZXQgaG9zdD1udWxsO3N3aXRjaChuZXR3b3JrLm5hbWUpe2Nhc2VcImhvbWVzdGVhZFwiOmhvc3Q9XCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvbWFpbm5ldC9qc29ucnBjXCI7YnJlYWs7Y2FzZVwicm9wc3RlblwiOmhvc3Q9XCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvcm9wc3Rlbi9qc29ucnBjXCI7YnJlYWs7Y2FzZVwicmlua2VieVwiOmhvc3Q9XCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvcmlua2VieS9qc29ucnBjXCI7YnJlYWs7Y2FzZVwiZ29lcmxpXCI6aG9zdD1cImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9nb2VybGkvanNvbnJwY1wiO2JyZWFrO2Nhc2VcImtvdmFuXCI6aG9zdD1cImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9rb3Zhbi9qc29ucnBjXCI7YnJlYWs7ZGVmYXVsdDpsb2dnZXIkQy50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsXCJuZXR3b3JrXCIsYXJndW1lbnRzWzBdKX1yZXR1cm4gaG9zdCtcIj9hcGlLZXk9XCIrYXBpS2V5fX1cInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkRD1uZXcgTG9nZ2VyKHZlcnNpb24kbSk7Y29uc3QgZGVmYXVsdEFwcGxpY2F0aW9uSWRzPXtob21lc3RlYWQ6XCI2MDA0YmNkMTAwNDAyNjE2MzNhZGU5OTBcIixyb3BzdGVuOlwiNjAwNGJkNGQwMDQwMjYxNjMzYWRlOTkxXCIscmlua2VieTpcIjYwMDRiZGEyMDA0MDI2MTYzM2FkZTk5NFwiLGdvZXJsaTpcIjYwMDRiZDg2MDA0MDI2MTYzM2FkZTk5MlwifTtjbGFzcyBQb2NrZXRQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlcntjb25zdHJ1Y3RvcihuZXR3b3JrLGFwaUtleSl7aWYoYXBpS2V5PT1udWxsKXtjb25zdCBuPWdldFN0YXRpYyhuZXcudGFyZ2V0LFwiZ2V0TmV0d29ya1wiKShuZXR3b3JrKTtpZihuKXtjb25zdCBhcHBsaWNhdGlvbklkPWRlZmF1bHRBcHBsaWNhdGlvbklkc1tuLm5hbWVdO2lmKGFwcGxpY2F0aW9uSWQpe2FwaUtleT17YXBwbGljYXRpb25JZDphcHBsaWNhdGlvbklkLGxvYWRCYWxhbmNlcjp0cnVlfX19aWYoYXBpS2V5PT1udWxsKXtsb2dnZXIkRC50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCx7YXJndW1lbnQ6XCJuZXR3b3JrXCIsdmFsdWU6bmV0d29ya30pfX1zdXBlcihuZXR3b3JrLGFwaUtleSl9c3RhdGljIGdldEFwaUtleShhcGlLZXkpe2lmKGFwaUtleT09bnVsbCl7bG9nZ2VyJEQudGhyb3dBcmd1bWVudEVycm9yKFwiUG9ja2V0UHJvdmlkZXIuZ2V0QXBpS2V5IGRvZXMgbm90IHN1cHBvcnQgbnVsbCBhcGlLZXlcIixcImFwaUtleVwiLGFwaUtleSl9Y29uc3QgYXBpS2V5T2JqPXthcHBsaWNhdGlvbklkOm51bGwsbG9hZEJhbGFuY2VyOmZhbHNlLGFwcGxpY2F0aW9uU2VjcmV0S2V5Om51bGx9O2lmKHR5cGVvZiBhcGlLZXk9PT1cInN0cmluZ1wiKXthcGlLZXlPYmouYXBwbGljYXRpb25JZD1hcGlLZXl9ZWxzZSBpZihhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXkhPW51bGwpe2xvZ2dlciRELmFzc2VydEFyZ3VtZW50KHR5cGVvZiBhcGlLZXkuYXBwbGljYXRpb25JZD09PVwic3RyaW5nXCIsXCJhcHBsaWNhdGlvblNlY3JldEtleSByZXF1aXJlcyBhbiBhcHBsaWNhdGlvbklkXCIsXCJhcHBsaWNhdGlvbklkXCIsYXBpS2V5LmFwcGxpY2F0aW9uSWQpO2xvZ2dlciRELmFzc2VydEFyZ3VtZW50KHR5cGVvZiBhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXk9PT1cInN0cmluZ1wiLFwiaW52YWxpZCBhcHBsaWNhdGlvblNlY3JldEtleVwiLFwiYXBwbGljYXRpb25TZWNyZXRLZXlcIixcIltSRURBQ1RFRF1cIik7YXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQ9YXBpS2V5LmFwcGxpY2F0aW9uSWQ7YXBpS2V5T2JqLmFwcGxpY2F0aW9uU2VjcmV0S2V5PWFwaUtleS5hcHBsaWNhdGlvblNlY3JldEtleTthcGlLZXlPYmoubG9hZEJhbGFuY2VyPSEhYXBpS2V5LmxvYWRCYWxhbmNlcn1lbHNlIGlmKGFwaUtleS5hcHBsaWNhdGlvbklkKXtsb2dnZXIkRC5hc3NlcnRBcmd1bWVudCh0eXBlb2YgYXBpS2V5LmFwcGxpY2F0aW9uSWQ9PT1cInN0cmluZ1wiLFwiYXBpS2V5LmFwcGxpY2F0aW9uSWQgbXVzdCBiZSBhIHN0cmluZ1wiLFwiYXBpS2V5LmFwcGxpY2F0aW9uSWRcIixhcGlLZXkuYXBwbGljYXRpb25JZCk7YXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQ9YXBpS2V5LmFwcGxpY2F0aW9uSWQ7YXBpS2V5T2JqLmxvYWRCYWxhbmNlcj0hIWFwaUtleS5sb2FkQmFsYW5jZXJ9ZWxzZXtsb2dnZXIkRC50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBQb2NrZXRQcm92aWRlciBhcGlLZXlcIixcImFwaUtleVwiLGFwaUtleSl9cmV0dXJuIGFwaUtleU9ian1zdGF0aWMgZ2V0VXJsKG5ldHdvcmssYXBpS2V5KXtsZXQgaG9zdD1udWxsO3N3aXRjaChuZXR3b3JrP25ldHdvcmsubmFtZTpcInVua25vd25cIil7Y2FzZVwiaG9tZXN0ZWFkXCI6aG9zdD1cImV0aC1tYWlubmV0LmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7YnJlYWs7Y2FzZVwicm9wc3RlblwiOmhvc3Q9XCJldGgtcm9wc3Rlbi5nYXRld2F5LnBva3QubmV0d29ya1wiO2JyZWFrO2Nhc2VcInJpbmtlYnlcIjpob3N0PVwiZXRoLXJpbmtlYnkuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjticmVhaztjYXNlXCJnb2VybGlcIjpob3N0PVwiZXRoLWdvZXJsaS5nYXRld2F5LnBva3QubmV0d29ya1wiO2JyZWFrO2RlZmF1bHQ6bG9nZ2VyJEQudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIixMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQse2FyZ3VtZW50OlwibmV0d29ya1wiLHZhbHVlOm5ldHdvcmt9KX1sZXQgdXJsPW51bGw7aWYoYXBpS2V5LmxvYWRCYWxhbmNlcil7dXJsPWBodHRwczovLyR7aG9zdH0vdjEvbGIvJHthcGlLZXkuYXBwbGljYXRpb25JZH1gfWVsc2V7dXJsPWBodHRwczovLyR7aG9zdH0vdjEvJHthcGlLZXkuYXBwbGljYXRpb25JZH1gfWNvbnN0IGNvbm5lY3Rpb249e3VybDp1cmx9O2Nvbm5lY3Rpb24uaGVhZGVycz17fTtpZihhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXkhPW51bGwpe2Nvbm5lY3Rpb24udXNlcj1cIlwiO2Nvbm5lY3Rpb24ucGFzc3dvcmQ9YXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5fXJldHVybiBjb25uZWN0aW9ufWlzQ29tbXVuaXR5UmVzb3VyY2UoKXtyZXR1cm4gdGhpcy5hcHBsaWNhdGlvbklkPT09ZGVmYXVsdEFwcGxpY2F0aW9uSWRzW3RoaXMubmV0d29yay5uYW1lXX19XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJEU9bmV3IExvZ2dlcih2ZXJzaW9uJG0pO2xldCBfbmV4dElkPTE7ZnVuY3Rpb24gYnVpbGRXZWIzTGVnYWN5RmV0Y2hlcihwcm92aWRlcixzZW5kRnVuYyl7cmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCxwYXJhbXMpe2lmKG1ldGhvZD09XCJldGhfc2lnblwiJiYocHJvdmlkZXIuaXNNZXRhTWFza3x8cHJvdmlkZXIuaXNTdGF0dXMpKXttZXRob2Q9XCJwZXJzb25hbF9zaWduXCI7cGFyYW1zPVtwYXJhbXNbMV0scGFyYW1zWzBdXX1jb25zdCByZXF1ZXN0PXttZXRob2Q6bWV0aG9kLHBhcmFtczpwYXJhbXMsaWQ6X25leHRJZCsrLGpzb25ycGM6XCIyLjBcIn07cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntzZW5kRnVuYyhyZXF1ZXN0LGZ1bmN0aW9uKGVycm9yLHJlc3VsdCl7aWYoZXJyb3Ipe3JldHVybiByZWplY3QoZXJyb3IpfWlmKHJlc3VsdC5lcnJvcil7Y29uc3QgZXJyb3I9bmV3IEVycm9yKHJlc3VsdC5lcnJvci5tZXNzYWdlKTtlcnJvci5jb2RlPXJlc3VsdC5lcnJvci5jb2RlO2Vycm9yLmRhdGE9cmVzdWx0LmVycm9yLmRhdGE7cmV0dXJuIHJlamVjdChlcnJvcil9cmVzb2x2ZShyZXN1bHQucmVzdWx0KX0pfSl9fWZ1bmN0aW9uIGJ1aWxkRWlwMTE5M0ZldGNoZXIocHJvdmlkZXIpe3JldHVybiBmdW5jdGlvbihtZXRob2QscGFyYW1zKXtpZihwYXJhbXM9PW51bGwpe3BhcmFtcz1bXX1pZihtZXRob2Q9PVwiZXRoX3NpZ25cIiYmKHByb3ZpZGVyLmlzTWV0YU1hc2t8fHByb3ZpZGVyLmlzU3RhdHVzKSl7bWV0aG9kPVwicGVyc29uYWxfc2lnblwiO3BhcmFtcz1bcGFyYW1zWzFdLHBhcmFtc1swXV19cmV0dXJuIHByb3ZpZGVyLnJlcXVlc3Qoe21ldGhvZDptZXRob2QscGFyYW1zOnBhcmFtc30pfX1jbGFzcyBXZWIzUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjUHJvdmlkZXJ7Y29uc3RydWN0b3IocHJvdmlkZXIsbmV0d29yayl7bG9nZ2VyJEUuY2hlY2tOZXcobmV3LnRhcmdldCxXZWIzUHJvdmlkZXIpO2lmKHByb3ZpZGVyPT1udWxsKXtsb2dnZXIkRS50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIHByb3ZpZGVyXCIsXCJwcm92aWRlclwiLHByb3ZpZGVyKX1sZXQgcGF0aD1udWxsO2xldCBqc29uUnBjRmV0Y2hGdW5jPW51bGw7bGV0IHN1YnByb3ZpZGVyPW51bGw7aWYodHlwZW9mIHByb3ZpZGVyPT09XCJmdW5jdGlvblwiKXtwYXRoPVwidW5rbm93bjpcIjtqc29uUnBjRmV0Y2hGdW5jPXByb3ZpZGVyfWVsc2V7cGF0aD1wcm92aWRlci5ob3N0fHxwcm92aWRlci5wYXRofHxcIlwiO2lmKCFwYXRoJiZwcm92aWRlci5pc01ldGFNYXNrKXtwYXRoPVwibWV0YW1hc2tcIn1zdWJwcm92aWRlcj1wcm92aWRlcjtpZihwcm92aWRlci5yZXF1ZXN0KXtpZihwYXRoPT09XCJcIil7cGF0aD1cImVpcC0xMTkzOlwifWpzb25ScGNGZXRjaEZ1bmM9YnVpbGRFaXAxMTkzRmV0Y2hlcihwcm92aWRlcil9ZWxzZSBpZihwcm92aWRlci5zZW5kQXN5bmMpe2pzb25ScGNGZXRjaEZ1bmM9YnVpbGRXZWIzTGVnYWN5RmV0Y2hlcihwcm92aWRlcixwcm92aWRlci5zZW5kQXN5bmMuYmluZChwcm92aWRlcikpfWVsc2UgaWYocHJvdmlkZXIuc2VuZCl7anNvblJwY0ZldGNoRnVuYz1idWlsZFdlYjNMZWdhY3lGZXRjaGVyKHByb3ZpZGVyLHByb3ZpZGVyLnNlbmQuYmluZChwcm92aWRlcikpfWVsc2V7bG9nZ2VyJEUudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgcHJvdmlkZXJcIixcInByb3ZpZGVyXCIscHJvdmlkZXIpfWlmKCFwYXRoKXtwYXRoPVwidW5rbm93bjpcIn19c3VwZXIocGF0aCxuZXR3b3JrKTtkZWZpbmVSZWFkT25seSh0aGlzLFwianNvblJwY0ZldGNoRnVuY1wiLGpzb25ScGNGZXRjaEZ1bmMpO2RlZmluZVJlYWRPbmx5KHRoaXMsXCJwcm92aWRlclwiLHN1YnByb3ZpZGVyKX1zZW5kKG1ldGhvZCxwYXJhbXMpe3JldHVybiB0aGlzLmpzb25ScGNGZXRjaEZ1bmMobWV0aG9kLHBhcmFtcyl9fVwidXNlIHN0cmljdFwiO2NvbnN0IGxvZ2dlciRGPW5ldyBMb2dnZXIodmVyc2lvbiRtKTtmdW5jdGlvbiBnZXREZWZhdWx0UHJvdmlkZXIobmV0d29yayxvcHRpb25zKXtpZihuZXR3b3JrPT1udWxsKXtuZXR3b3JrPVwiaG9tZXN0ZWFkXCJ9aWYodHlwZW9mIG5ldHdvcms9PT1cInN0cmluZ1wiKXtjb25zdCBtYXRjaD1uZXR3b3JrLm1hdGNoKC9eKHdzfGh0dHApcz86L2kpO2lmKG1hdGNoKXtzd2l0Y2gobWF0Y2hbMV0pe2Nhc2VcImh0dHBcIjpyZXR1cm4gbmV3IEpzb25ScGNQcm92aWRlcihuZXR3b3JrKTtjYXNlXCJ3c1wiOnJldHVybiBuZXcgV2ViU29ja2V0UHJvdmlkZXIobmV0d29yayk7ZGVmYXVsdDpsb2dnZXIkRi50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBVUkwgc2NoZW1lXCIsXCJuZXR3b3JrXCIsbmV0d29yayl9fX1jb25zdCBuPWdldE5ldHdvcmsobmV0d29yayk7aWYoIW58fCFuLl9kZWZhdWx0UHJvdmlkZXIpe2xvZ2dlciRGLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBnZXREZWZhdWx0UHJvdmlkZXIgbmV0d29ya1wiLExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUix7b3BlcmF0aW9uOlwiZ2V0RGVmYXVsdFByb3ZpZGVyXCIsbmV0d29yazpuZXR3b3JrfSl9cmV0dXJuIG4uX2RlZmF1bHRQcm92aWRlcih7RmFsbGJhY2tQcm92aWRlcjpGYWxsYmFja1Byb3ZpZGVyLEFsY2hlbXlQcm92aWRlcjpBbGNoZW15UHJvdmlkZXIsQ2xvdWRmbGFyZVByb3ZpZGVyOkNsb3VkZmxhcmVQcm92aWRlcixFdGhlcnNjYW5Qcm92aWRlcjpFdGhlcnNjYW5Qcm92aWRlcixJbmZ1cmFQcm92aWRlcjpJbmZ1cmFQcm92aWRlcixKc29uUnBjUHJvdmlkZXI6SnNvblJwY1Byb3ZpZGVyLE5vZGVzbWl0aFByb3ZpZGVyOk5vZGVzbWl0aFByb3ZpZGVyLFBvY2tldFByb3ZpZGVyOlBvY2tldFByb3ZpZGVyLFdlYjNQcm92aWRlcjpXZWIzUHJvdmlkZXIsSXBjUHJvdmlkZXI6SXBjUHJvdmlkZXJ9LG9wdGlvbnMpfXZhciBpbmRleCQzPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLFByb3ZpZGVyOlByb3ZpZGVyLEJhc2VQcm92aWRlcjpCYXNlUHJvdmlkZXIsUmVzb2x2ZXI6UmVzb2x2ZXIsVXJsSnNvblJwY1Byb3ZpZGVyOlVybEpzb25ScGNQcm92aWRlcixGYWxsYmFja1Byb3ZpZGVyOkZhbGxiYWNrUHJvdmlkZXIsQWxjaGVteVByb3ZpZGVyOkFsY2hlbXlQcm92aWRlcixBbGNoZW15V2ViU29ja2V0UHJvdmlkZXI6QWxjaGVteVdlYlNvY2tldFByb3ZpZGVyLENsb3VkZmxhcmVQcm92aWRlcjpDbG91ZGZsYXJlUHJvdmlkZXIsRXRoZXJzY2FuUHJvdmlkZXI6RXRoZXJzY2FuUHJvdmlkZXIsSW5mdXJhUHJvdmlkZXI6SW5mdXJhUHJvdmlkZXIsSW5mdXJhV2ViU29ja2V0UHJvdmlkZXI6SW5mdXJhV2ViU29ja2V0UHJvdmlkZXIsSnNvblJwY1Byb3ZpZGVyOkpzb25ScGNQcm92aWRlcixKc29uUnBjQmF0Y2hQcm92aWRlcjpKc29uUnBjQmF0Y2hQcm92aWRlcixOb2Rlc21pdGhQcm92aWRlcjpOb2Rlc21pdGhQcm92aWRlcixQb2NrZXRQcm92aWRlcjpQb2NrZXRQcm92aWRlcixTdGF0aWNKc29uUnBjUHJvdmlkZXI6U3RhdGljSnNvblJwY1Byb3ZpZGVyLFdlYjNQcm92aWRlcjpXZWIzUHJvdmlkZXIsV2ViU29ja2V0UHJvdmlkZXI6V2ViU29ja2V0UHJvdmlkZXIsSXBjUHJvdmlkZXI6SXBjUHJvdmlkZXIsSnNvblJwY1NpZ25lcjpKc29uUnBjU2lnbmVyLGdldERlZmF1bHRQcm92aWRlcjpnZXREZWZhdWx0UHJvdmlkZXIsZ2V0TmV0d29yazpnZXROZXR3b3JrLGlzQ29tbXVuaXR5UmVzb3VyY2U6aXNDb21tdW5pdHlSZXNvdXJjZSxpc0NvbW11bml0eVJlc291cmNhYmxlOmlzQ29tbXVuaXR5UmVzb3VyY2FibGUsc2hvd1Rocm90dGxlTWVzc2FnZTpzaG93VGhyb3R0bGVNZXNzYWdlLEZvcm1hdHRlcjpGb3JtYXR0ZXJ9KTtcInVzZSBzdHJpY3RcIjtjb25zdCByZWdleEJ5dGVzPW5ldyBSZWdFeHAoXCJeYnl0ZXMoWzAtOV0rKSRcIik7Y29uc3QgcmVnZXhOdW1iZXI9bmV3IFJlZ0V4cChcIl4odT9pbnQpKFswLTldKikkXCIpO2NvbnN0IHJlZ2V4QXJyYXk9bmV3IFJlZ0V4cChcIl4oLiopXFxcXFsoWzAtOV0qKVxcXFxdJFwiKTtjb25zdCBaZXJvcyQxPVwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO2Z1bmN0aW9uIF9wYWNrKHR5cGUsdmFsdWUsaXNBcnJheSl7c3dpdGNoKHR5cGUpe2Nhc2VcImFkZHJlc3NcIjppZihpc0FycmF5KXtyZXR1cm4gemVyb1BhZCh2YWx1ZSwzMil9cmV0dXJuIGFycmF5aWZ5KHZhbHVlKTtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gdG9VdGY4Qnl0ZXModmFsdWUpO2Nhc2VcImJ5dGVzXCI6cmV0dXJuIGFycmF5aWZ5KHZhbHVlKTtjYXNlXCJib29sXCI6dmFsdWU9dmFsdWU/XCIweDAxXCI6XCIweDAwXCI7aWYoaXNBcnJheSl7cmV0dXJuIHplcm9QYWQodmFsdWUsMzIpfXJldHVybiBhcnJheWlmeSh2YWx1ZSl9bGV0IG1hdGNoPXR5cGUubWF0Y2gocmVnZXhOdW1iZXIpO2lmKG1hdGNoKXtsZXQgc2l6ZT1wYXJzZUludChtYXRjaFsyXXx8XCIyNTZcIik7aWYobWF0Y2hbMl0mJlN0cmluZyhzaXplKSE9PW1hdGNoWzJdfHxzaXplJTghPT0wfHxzaXplPT09MHx8c2l6ZT4yNTYpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgbnVtYmVyIHR5cGUgLSBcIit0eXBlKX1pZihpc0FycmF5KXtzaXplPTI1Nn12YWx1ZT1CaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9Ud29zKHNpemUpO3JldHVybiB6ZXJvUGFkKHZhbHVlLHNpemUvOCl9bWF0Y2g9dHlwZS5tYXRjaChyZWdleEJ5dGVzKTtpZihtYXRjaCl7Y29uc3Qgc2l6ZT1wYXJzZUludChtYXRjaFsxXSk7aWYoU3RyaW5nKHNpemUpIT09bWF0Y2hbMV18fHNpemU9PT0wfHxzaXplPjMyKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzIHR5cGUgLSBcIit0eXBlKX1pZihhcnJheWlmeSh2YWx1ZSkuYnl0ZUxlbmd0aCE9PXNpemUpe3Rocm93IG5ldyBFcnJvcihcImludmFsaWQgdmFsdWUgZm9yIFwiK3R5cGUpfWlmKGlzQXJyYXkpe3JldHVybiBhcnJheWlmeSgodmFsdWUrWmVyb3MkMSkuc3Vic3RyaW5nKDAsNjYpKX1yZXR1cm4gdmFsdWV9bWF0Y2g9dHlwZS5tYXRjaChyZWdleEFycmF5KTtpZihtYXRjaCYmQXJyYXkuaXNBcnJheSh2YWx1ZSkpe2NvbnN0IGJhc2VUeXBlPW1hdGNoWzFdO2NvbnN0IGNvdW50PXBhcnNlSW50KG1hdGNoWzJdfHxTdHJpbmcodmFsdWUubGVuZ3RoKSk7aWYoY291bnQhPXZhbHVlLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YWx1ZSBmb3IgXCIrdHlwZSl9Y29uc3QgcmVzdWx0PVtdO3ZhbHVlLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe3Jlc3VsdC5wdXNoKF9wYWNrKGJhc2VUeXBlLHZhbHVlLHRydWUpKX0pO3JldHVybiBjb25jYXQocmVzdWx0KX10aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHR5cGUgLSBcIit0eXBlKX1mdW5jdGlvbiBwYWNrJDEodHlwZXMsdmFsdWVzKXtpZih0eXBlcy5sZW5ndGghPXZhbHVlcy5sZW5ndGgpe3Rocm93IG5ldyBFcnJvcihcInR5cGUvdmFsdWUgY291bnQgbWlzbWF0Y2hcIil9Y29uc3QgdGlnaHQ9W107dHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlLGluZGV4KXt0aWdodC5wdXNoKF9wYWNrKHR5cGUsdmFsdWVzW2luZGV4XSkpfSk7cmV0dXJuIGhleGxpZnkoY29uY2F0KHRpZ2h0KSl9ZnVuY3Rpb24ga2VjY2FrMjU2JDEodHlwZXMsdmFsdWVzKXtyZXR1cm4ga2VjY2FrMjU2KHBhY2skMSh0eXBlcyx2YWx1ZXMpKX1mdW5jdGlvbiBzaGEyNTYkMih0eXBlcyx2YWx1ZXMpe3JldHVybiBzaGEyNTYkMShwYWNrJDEodHlwZXMsdmFsdWVzKSl9Y29uc3QgdmVyc2lvbiRuPVwidW5pdHMvNS4xLjBcIjtcInVzZSBzdHJpY3RcIjtjb25zdCBsb2dnZXIkRz1uZXcgTG9nZ2VyKHZlcnNpb24kbik7Y29uc3QgbmFtZXM9W1wid2VpXCIsXCJrd2VpXCIsXCJtd2VpXCIsXCJnd2VpXCIsXCJzemFib1wiLFwiZmlubmV5XCIsXCJldGhlclwiXTtmdW5jdGlvbiBjb21taWZ5KHZhbHVlKXtjb25zdCBjb21wcz1TdHJpbmcodmFsdWUpLnNwbGl0KFwiLlwiKTtpZihjb21wcy5sZW5ndGg+Mnx8IWNvbXBzWzBdLm1hdGNoKC9eLT9bMC05XSokLyl8fGNvbXBzWzFdJiYhY29tcHNbMV0ubWF0Y2goL15bMC05XSokLyl8fHZhbHVlPT09XCIuXCJ8fHZhbHVlPT09XCItLlwiKXtsb2dnZXIkRy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHZhbHVlXCIsXCJ2YWx1ZVwiLHZhbHVlKX1sZXQgd2hvbGU9Y29tcHNbMF07bGV0IG5lZ2F0aXZlPVwiXCI7aWYod2hvbGUuc3Vic3RyaW5nKDAsMSk9PT1cIi1cIil7bmVnYXRpdmU9XCItXCI7d2hvbGU9d2hvbGUuc3Vic3RyaW5nKDEpfXdoaWxlKHdob2xlLnN1YnN0cmluZygwLDEpPT09XCIwXCIpe3dob2xlPXdob2xlLnN1YnN0cmluZygxKX1pZih3aG9sZT09PVwiXCIpe3dob2xlPVwiMFwifWxldCBzdWZmaXg9XCJcIjtpZihjb21wcy5sZW5ndGg9PT0yKXtzdWZmaXg9XCIuXCIrKGNvbXBzWzFdfHxcIjBcIil9d2hpbGUoc3VmZml4Lmxlbmd0aD4yJiZzdWZmaXhbc3VmZml4Lmxlbmd0aC0xXT09PVwiMFwiKXtzdWZmaXg9c3VmZml4LnN1YnN0cmluZygwLHN1ZmZpeC5sZW5ndGgtMSl9Y29uc3QgZm9ybWF0dGVkPVtdO3doaWxlKHdob2xlLmxlbmd0aCl7aWYod2hvbGUubGVuZ3RoPD0zKXtmb3JtYXR0ZWQudW5zaGlmdCh3aG9sZSk7YnJlYWt9ZWxzZXtjb25zdCBpbmRleD13aG9sZS5sZW5ndGgtMztmb3JtYXR0ZWQudW5zaGlmdCh3aG9sZS5zdWJzdHJpbmcoaW5kZXgpKTt3aG9sZT13aG9sZS5zdWJzdHJpbmcoMCxpbmRleCl9fXJldHVybiBuZWdhdGl2ZStmb3JtYXR0ZWQuam9pbihcIixcIikrc3VmZml4fWZ1bmN0aW9uIGZvcm1hdFVuaXRzKHZhbHVlLHVuaXROYW1lKXtpZih0eXBlb2YgdW5pdE5hbWU9PT1cInN0cmluZ1wiKXtjb25zdCBpbmRleD1uYW1lcy5pbmRleE9mKHVuaXROYW1lKTtpZihpbmRleCE9PS0xKXt1bml0TmFtZT0zKmluZGV4fX1yZXR1cm4gZm9ybWF0Rml4ZWQodmFsdWUsdW5pdE5hbWUhPW51bGw/dW5pdE5hbWU6MTgpfWZ1bmN0aW9uIHBhcnNlVW5pdHModmFsdWUsdW5pdE5hbWUpe2lmKHR5cGVvZiB2YWx1ZSE9PVwic3RyaW5nXCIpe2xvZ2dlciRHLnRocm93QXJndW1lbnRFcnJvcihcInZhbHVlIG11c3QgYmUgYSBzdHJpbmdcIixcInZhbHVlXCIsdmFsdWUpfWlmKHR5cGVvZiB1bml0TmFtZT09PVwic3RyaW5nXCIpe2NvbnN0IGluZGV4PW5hbWVzLmluZGV4T2YodW5pdE5hbWUpO2lmKGluZGV4IT09LTEpe3VuaXROYW1lPTMqaW5kZXh9fXJldHVybiBwYXJzZUZpeGVkKHZhbHVlLHVuaXROYW1lIT1udWxsP3VuaXROYW1lOjE4KX1mdW5jdGlvbiBmb3JtYXRFdGhlcih3ZWkpe3JldHVybiBmb3JtYXRVbml0cyh3ZWksMTgpfWZ1bmN0aW9uIHBhcnNlRXRoZXIoZXRoZXIpe3JldHVybiBwYXJzZVVuaXRzKGV0aGVyLDE4KX1cInVzZSBzdHJpY3RcIjt2YXIgdXRpbHMkMT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxBYmlDb2RlcjpBYmlDb2RlcixkZWZhdWx0QWJpQ29kZXI6ZGVmYXVsdEFiaUNvZGVyLEZyYWdtZW50OkZyYWdtZW50LEV2ZW50RnJhZ21lbnQ6RXZlbnRGcmFnbWVudCxGdW5jdGlvbkZyYWdtZW50OkZ1bmN0aW9uRnJhZ21lbnQsUGFyYW1UeXBlOlBhcmFtVHlwZSxGb3JtYXRUeXBlczpGb3JtYXRUeXBlcyxjaGVja1Jlc3VsdEVycm9yczpjaGVja1Jlc3VsdEVycm9ycyxMb2dnZXI6TG9nZ2VyLFJMUDppbmRleCxfZmV0Y2hEYXRhOl9mZXRjaERhdGEsZmV0Y2hKc29uOmZldGNoSnNvbixwb2xsOnBvbGwsY2hlY2tQcm9wZXJ0aWVzOmNoZWNrUHJvcGVydGllcyxkZWVwQ29weTpkZWVwQ29weSxkZWZpbmVSZWFkT25seTpkZWZpbmVSZWFkT25seSxnZXRTdGF0aWM6Z2V0U3RhdGljLHJlc29sdmVQcm9wZXJ0aWVzOnJlc29sdmVQcm9wZXJ0aWVzLHNoYWxsb3dDb3B5OnNoYWxsb3dDb3B5LGFycmF5aWZ5OmFycmF5aWZ5LGNvbmNhdDpjb25jYXQsc3RyaXBaZXJvczpzdHJpcFplcm9zLHplcm9QYWQ6emVyb1BhZCxpc0J5dGVzOmlzQnl0ZXMsaXNCeXRlc0xpa2U6aXNCeXRlc0xpa2UsZGVmYXVsdFBhdGg6ZGVmYXVsdFBhdGgsSEROb2RlOkhETm9kZSxTaWduaW5nS2V5OlNpZ25pbmdLZXksSW50ZXJmYWNlOkludGVyZmFjZSxMb2dEZXNjcmlwdGlvbjpMb2dEZXNjcmlwdGlvbixUcmFuc2FjdGlvbkRlc2NyaXB0aW9uOlRyYW5zYWN0aW9uRGVzY3JpcHRpb24sYmFzZTU4OkJhc2U1OCxiYXNlNjQ6aW5kZXgkMixoZXhsaWZ5OmhleGxpZnksaXNIZXhTdHJpbmc6aXNIZXhTdHJpbmcsaGV4Q29uY2F0OmhleENvbmNhdCxoZXhTdHJpcFplcm9zOmhleFN0cmlwWmVyb3MsaGV4VmFsdWU6aGV4VmFsdWUsaGV4WmVyb1BhZDpoZXhaZXJvUGFkLGhleERhdGFMZW5ndGg6aGV4RGF0YUxlbmd0aCxoZXhEYXRhU2xpY2U6aGV4RGF0YVNsaWNlLG5hbWVwcmVwOm5hbWVwcmVwLF90b0VzY2FwZWRVdGY4U3RyaW5nOl90b0VzY2FwZWRVdGY4U3RyaW5nLHRvVXRmOEJ5dGVzOnRvVXRmOEJ5dGVzLHRvVXRmOENvZGVQb2ludHM6dG9VdGY4Q29kZVBvaW50cyx0b1V0ZjhTdHJpbmc6dG9VdGY4U3RyaW5nLFV0ZjhFcnJvckZ1bmNzOlV0ZjhFcnJvckZ1bmNzLGZvcm1hdEJ5dGVzMzJTdHJpbmc6Zm9ybWF0Qnl0ZXMzMlN0cmluZyxwYXJzZUJ5dGVzMzJTdHJpbmc6cGFyc2VCeXRlczMyU3RyaW5nLGhhc2hNZXNzYWdlOmhhc2hNZXNzYWdlLG5hbWVoYXNoOm5hbWVoYXNoLGlzVmFsaWROYW1lOmlzVmFsaWROYW1lLGlkOmlkLF9UeXBlZERhdGFFbmNvZGVyOlR5cGVkRGF0YUVuY29kZXIsZ2V0QWRkcmVzczpnZXRBZGRyZXNzLGdldEljYXBBZGRyZXNzOmdldEljYXBBZGRyZXNzLGdldENvbnRyYWN0QWRkcmVzczpnZXRDb250cmFjdEFkZHJlc3MsZ2V0Q3JlYXRlMkFkZHJlc3M6Z2V0Q3JlYXRlMkFkZHJlc3MsaXNBZGRyZXNzOmlzQWRkcmVzcyxmb3JtYXRFdGhlcjpmb3JtYXRFdGhlcixwYXJzZUV0aGVyOnBhcnNlRXRoZXIsZm9ybWF0VW5pdHM6Zm9ybWF0VW5pdHMscGFyc2VVbml0czpwYXJzZVVuaXRzLGNvbW1pZnk6Y29tbWlmeSxjb21wdXRlSG1hYzpjb21wdXRlSG1hYyxrZWNjYWsyNTY6a2VjY2FrMjU2LHJpcGVtZDE2MDpyaXBlbWQxNjAkMSxzaGEyNTY6c2hhMjU2JDEsc2hhNTEyOnNoYTUxMiQxLHJhbmRvbUJ5dGVzOnJhbmRvbUJ5dGVzLHNodWZmbGVkOnNodWZmbGVkLHNvbGlkaXR5UGFjazpwYWNrJDEsc29saWRpdHlLZWNjYWsyNTY6a2VjY2FrMjU2JDEsc29saWRpdHlTaGEyNTY6c2hhMjU2JDIsc3BsaXRTaWduYXR1cmU6c3BsaXRTaWduYXR1cmUsam9pblNpZ25hdHVyZTpqb2luU2lnbmF0dXJlLGFjY2Vzc0xpc3RpZnk6YWNjZXNzTGlzdGlmeSxwYXJzZVRyYW5zYWN0aW9uOnBhcnNlLHNlcmlhbGl6ZVRyYW5zYWN0aW9uOnNlcmlhbGl6ZSxnZXRKc29uV2FsbGV0QWRkcmVzczpnZXRKc29uV2FsbGV0QWRkcmVzcyxjb21wdXRlQWRkcmVzczpjb21wdXRlQWRkcmVzcyxyZWNvdmVyQWRkcmVzczpyZWNvdmVyQWRkcmVzcyxjb21wdXRlUHVibGljS2V5OmNvbXB1dGVQdWJsaWNLZXkscmVjb3ZlclB1YmxpY0tleTpyZWNvdmVyUHVibGljS2V5LHZlcmlmeU1lc3NhZ2U6dmVyaWZ5TWVzc2FnZSx2ZXJpZnlUeXBlZERhdGE6dmVyaWZ5VHlwZWREYXRhLG1uZW1vbmljVG9FbnRyb3B5Om1uZW1vbmljVG9FbnRyb3B5LGVudHJvcHlUb01uZW1vbmljOmVudHJvcHlUb01uZW1vbmljLGlzVmFsaWRNbmVtb25pYzppc1ZhbGlkTW5lbW9uaWMsbW5lbW9uaWNUb1NlZWQ6bW5lbW9uaWNUb1NlZWQsZ2V0IFN1cHBvcnRlZEFsZ29yaXRobSgpe3JldHVybiBTdXBwb3J0ZWRBbGdvcml0aG19LGdldCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0oKXtyZXR1cm4gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtfSxnZXQgVXRmOEVycm9yUmVhc29uKCl7cmV0dXJuIFV0ZjhFcnJvclJlYXNvbn0sSW5kZXhlZDpJbmRleGVkfSk7Y29uc3QgdmVyc2lvbiRvPVwiZXRoZXJzLzUuMS40XCI7XCJ1c2Ugc3RyaWN0XCI7Y29uc3QgbG9nZ2VyJEg9bmV3IExvZ2dlcih2ZXJzaW9uJG8pO3ZhciBldGhlcnM9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsU2lnbmVyOlNpZ25lcixXYWxsZXQ6V2FsbGV0LFZvaWRTaWduZXI6Vm9pZFNpZ25lcixnZXREZWZhdWx0UHJvdmlkZXI6Z2V0RGVmYXVsdFByb3ZpZGVyLHByb3ZpZGVyczppbmRleCQzLEJhc2VDb250cmFjdDpCYXNlQ29udHJhY3QsQ29udHJhY3Q6Q29udHJhY3QsQ29udHJhY3RGYWN0b3J5OkNvbnRyYWN0RmFjdG9yeSxCaWdOdW1iZXI6QmlnTnVtYmVyLEZpeGVkTnVtYmVyOkZpeGVkTnVtYmVyLGNvbnN0YW50czppbmRleCQxLGdldCBlcnJvcnMoKXtyZXR1cm4gRXJyb3JDb2RlfSxsb2dnZXI6bG9nZ2VyJEgsdXRpbHM6dXRpbHMkMSx3b3JkbGlzdHM6d29yZGxpc3RzLHZlcnNpb246dmVyc2lvbiRvLFdvcmRsaXN0OldvcmRsaXN0fSk7XCJ1c2Ugc3RyaWN0XCI7dHJ5e2NvbnN0IGFueUdsb2JhbD13aW5kb3c7aWYoYW55R2xvYmFsLl9ldGhlcnM9PW51bGwpe2FueUdsb2JhbC5fZXRoZXJzPWV0aGVyc319Y2F0Y2goZXJyb3Ipe31leHBvcnR7QmFzZUNvbnRyYWN0LEJpZ051bWJlcixDb250cmFjdCxDb250cmFjdEZhY3RvcnksRml4ZWROdW1iZXIsU2lnbmVyLFZvaWRTaWduZXIsV2FsbGV0LFdvcmRsaXN0LGluZGV4JDEgYXMgY29uc3RhbnRzLEVycm9yQ29kZSBhcyBlcnJvcnMsZXRoZXJzLGdldERlZmF1bHRQcm92aWRlcixsb2dnZXIkSCBhcyBsb2dnZXIsaW5kZXgkMyBhcyBwcm92aWRlcnMsdXRpbHMkMSBhcyB1dGlscyx2ZXJzaW9uJG8gYXMgdmVyc2lvbix3b3JkbGlzdHN9O1xuIiwgImltcG9ydCB7ZXRoZXJzfSBmcm9tIFwiLi4vLi4vdmVuZG9yL2V0aGVyc1wiXG5cbmNvbnN0IHdlYjNQcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pXG5cbmV4cG9ydCBjb25zdCBNZXRhbWFzayA9IHtcbiAgICBtb3VudGVkKCkge1xuICAgICAgICBsZXQgc2lnbmVyID0gd2ViM1Byb3ZpZGVyLmdldFNpZ25lcigpXG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB3ZWIzUHJvdmlkZXIubGlzdEFjY291bnRzKCkudGhlbigoYWNjb3VudHMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzaWduZXIgPSB3ZWIzUHJvdmlkZXIuZ2V0U2lnbmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25lci5nZXRBZGRyZXNzKCkudGhlbigoYWRkcmVzcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoRXZlbnQoXCJhY2NvdW50LWNoZWNrXCIsIHtjb25uZWN0ZWQ6IHRydWUsIGN1cnJlbnRfd2FsbGV0X2FkZHJlc3M6IGFkZHJlc3N9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaEV2ZW50KFwiYWNjb3VudC1jaGVja1wiLCB7Y29ubmVjdGVkOiBmYWxzZSwgY3VycmVudF93YWxsZXRfYWRkcmVzczogbnVsbH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OmdldC1jdXJyZW50LXdhbGxldGAsIChlKSA9PiB7XG4gICAgICAgICAgICBzaWduZXIuZ2V0QWRkcmVzcygpLnRoZW4oKGFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYFlvdSBhcmUgc2lnbmluZyB0aGlzIG1lc3NhZ2UgdG8gc2lnbiBpbiB3aXRoIERvcmEuIE5vbmNlOiAke2UuZGV0YWlsLm5vbmNlfWBcblxuICAgICAgICAgICAgICAgIHNpZ25lci5zaWduTWVzc2FnZShtZXNzYWdlKS50aGVuKChzaWduYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoRXZlbnQoXCJ2ZXJpZnktc2lnbmF0dXJlXCIsIHtwdWJsaWNfYWRkcmVzczogYWRkcmVzcywgc2lnbmF0dXJlOiBzaWduYXR1cmV9KVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OmNvbm5lY3QtbWV0YW1hc2tgLCAoZSkgPT4ge1xuICAgICAgICAgICAgd2ViM1Byb3ZpZGVyLnByb3ZpZGVyLnJlcXVlc3Qoe21ldGhvZDogJ2V0aF9yZXF1ZXN0QWNjb3VudHMnfSkudGhlbigoYWNjb3VudHMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzaWduZXIuZ2V0QWRkcmVzcygpLnRoZW4oKGFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoRXZlbnQoXCJ3YWxsZXQtY29ubmVjdGVkXCIsIHtwdWJsaWNfYWRkcmVzczogYWRkcmVzc30pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4gY29uc29sZS5sb2coZXJyb3IpKVxuICAgICAgICB9KVxuICAgIH0sXG59XG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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S0FBSyxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLFlBQUcsS0FBSyxTQUFPLElBQUk7QUFBTyxpQkFBTyxLQUFLLE1BQU0sRUFBRSxNQUFNLEdBQUc7QUFBRSxlQUFPLElBQUksTUFBTSxFQUFFLE1BQU0sSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsUUFBTSxlQUFlLEtBQUk7QUFBQyxZQUFJO0FBQUUsWUFBSTtBQUFFLFlBQUcsS0FBSyxTQUFPLElBQUksUUFBTztBQUFDLGNBQUU7QUFBSyxjQUFFO0FBQUEsUUFBRyxPQUFLO0FBQUMsY0FBRTtBQUFJLGNBQUU7QUFBQSxRQUFJO0FBQUMsaUJBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUk7QUFBQyxlQUFLLE1BQU0sS0FBRyxFQUFFLE1BQU0sS0FBRyxFQUFFLE1BQU07QUFBQSxRQUFFO0FBQUMsWUFBRyxTQUFPLEdBQUU7QUFBQyxpQkFBSyxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsaUJBQUssTUFBTSxLQUFHLEVBQUUsTUFBTTtBQUFBLFVBQUU7QUFBQSxRQUFDO0FBQUMsYUFBSyxTQUFPLEVBQUU7QUFBTyxlQUFPLEtBQUssTUFBTTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxnQkFBUSxNQUFLLFdBQVMsSUFBSSxjQUFZLENBQUM7QUFBRSxlQUFPLEtBQUssTUFBTSxHQUFHO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxNQUFJLGFBQWEsS0FBSTtBQUFDLFlBQUcsS0FBSyxTQUFPLElBQUk7QUFBTyxpQkFBTyxLQUFLLE1BQU0sRUFBRSxLQUFLLEdBQUc7QUFBRSxlQUFPLElBQUksTUFBTSxFQUFFLEtBQUssSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUk7QUFBQyxZQUFHLEtBQUssU0FBTyxJQUFJO0FBQU8saUJBQU8sS0FBSyxNQUFNLEVBQUUsTUFBTSxHQUFHO0FBQUUsZUFBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLElBQUk7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLFFBQU0sZUFBZSxPQUFNO0FBQUMsZ0JBQU8sT0FBTyxVQUFRLFlBQVUsU0FBTyxDQUFDO0FBQUUsWUFBSSxjQUFZLEtBQUssS0FBSyxRQUFNLEVBQUUsSUFBRTtBQUFFLFlBQUksV0FBUyxRQUFNO0FBQUcsYUFBSyxRQUFRLFdBQVc7QUFBRSxZQUFHLFdBQVMsR0FBRTtBQUFDO0FBQUEsUUFBYTtBQUFDLGlCQUFRLElBQUUsR0FBRSxJQUFFLGFBQVksS0FBSTtBQUFDLGVBQUssTUFBTSxLQUFHLENBQUMsS0FBSyxNQUFNLEtBQUc7QUFBQSxRQUFRO0FBQUMsWUFBRyxXQUFTLEdBQUU7QUFBQyxlQUFLLE1BQU0sS0FBRyxDQUFDLEtBQUssTUFBTSxLQUFHLFlBQVUsS0FBRztBQUFBLFFBQVE7QUFBQyxlQUFPLEtBQUssTUFBTTtBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLE9BQU07QUFBQyxlQUFPLEtBQUssTUFBTSxFQUFFLE1BQU0sS0FBSztBQUFBLE1BQUM7QUFBRSxVQUFHLFVBQVUsT0FBSyxjQUFjLEtBQUksS0FBSTtBQUFDLGdCQUFPLE9BQU8sUUFBTSxZQUFVLE9BQUssQ0FBQztBQUFFLFlBQUksTUFBSSxNQUFJLEtBQUc7QUFBRSxZQUFJLE9BQUssTUFBSTtBQUFHLGFBQUssUUFBUSxNQUFJLENBQUM7QUFBRSxZQUFHLEtBQUk7QUFBQyxlQUFLLE1BQU0sT0FBSyxLQUFLLE1BQU0sT0FBSyxLQUFHO0FBQUEsUUFBSSxPQUFLO0FBQUMsZUFBSyxNQUFNLE9BQUssS0FBSyxNQUFNLE9BQUssQ0FBRSxNQUFHO0FBQUEsUUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLFlBQUk7QUFBRSxZQUFHLEtBQUssYUFBVyxLQUFHLElBQUksYUFBVyxHQUFFO0FBQUMsZUFBSyxXQUFTO0FBQUUsZUFBRSxLQUFLLEtBQUssR0FBRztBQUFFLGVBQUss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QUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLEtBQUcsRUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEtBQUc7QUFBSyxZQUFJLE1BQUksT0FBSztBQUFHLFlBQUksS0FBRyxFQUFFLEtBQUc7QUFBRSxZQUFJLE1BQUksS0FBRztBQUFLLFlBQUksTUFBSSxPQUFLO0FBQUcsWUFBSSxLQUFHLEVBQUUsS0FBRztBQUFFLFlBQUksTUFBSSxLQUFHO0FBQUssWUFBSSxNQUFJLE9BQUs7QUFBRyxZQUFJLFdBQVMsTUFBSyxXQUFTLElBQUk7QUFBUyxZQUFJLFNBQU87QUFBRyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLFlBQUksS0FBSSxLQUFFLEtBQUcsS0FBSyxRQUFJLFNBQU8sTUFBSTtBQUFFLFlBQUcsTUFBSSxTQUFNLE1BQUksS0FBSSxRQUFLLE1BQUk7QUFBRSxjQUFJO0FBQVMsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxLQUFJLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFFBQUssTUFBSTtBQUFFLGNBQUk7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFHLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGFBQUcsS0FBRyxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxZQUFJLE1BQUssS0FBRSxLQUFHLEtBQUssUUFBSSxTQUFPLE1BQUk7QUFBRSxZQUFHLE1BQUksU0FBTSxNQUFJLEtBQUksU0FBTSxNQUFJO0FBQUUsZUFBSztBQUFTLGFBQUcsS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksS0FBSyxLQUFLLEtBQUksR0FBRztBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsY0FBSSxNQUFJLEtBQUssS0FBSyxLQUFJLEdBQUcsSUFBRTtBQUFFLGNBQUksTUFBSSxLQUFLLEtBQUssS0FBSSxHQUFHLElBQUU7QUFBRSxhQUFHLEtBQUcsS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsWUFBSSxNQUFLLEtBQUUsS0FBRyxLQUFLLFFBQUksU0FBTyxNQUFJO0FBQUUsWUFBRyxNQUFJLFNBQU0sTUFBSSxLQUFJLFNBQU0sTUFBSTtBQUFFLGVBQUs7QUFBUyxhQUFHLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLEtBQUssS0FBSyxLQUFJLEdBQUc7QUFBRSxjQUFJLE1BQUksS0FBSyxLQUFLLEtBQUksR0FBRyxJQUFFO0FBQUUsYUFBRyxLQUFLLEtBQUssS0FBSSxHQUFHO0FBQUUsWUFBSSxNQUFLLEtB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RSxZQUFJLElBQUUsS0FBSyxLQUFLLEVBQUM7QUFBRSxZQUFJLE1BQUksSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLE9BQUssSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLE9BQUssSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLE9BQUssSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLFFBQU0sSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLFFBQU0sSUFBSSxNQUFNLEVBQUM7QUFBRSxZQUFJLE9BQUssSUFBSTtBQUFNLGFBQUssU0FBTztBQUFFLGFBQUssV0FBVyxFQUFFLE9BQU0sRUFBRSxRQUFPLEtBQUksRUFBQztBQUFFLGFBQUssV0FBVyxFQUFFLE9BQU0sRUFBRSxRQUFPLE1BQUssRUFBQztBQUFFLGFBQUssVUFBVSxLQUFJLEdBQUUsTUFBSyxNQUFLLElBQUUsR0FBRztBQUFFLGFBQUssVUFBVSxNQUFLLEdBQUUsT0FBTSxPQUFNLElBQUUsR0FBRztBQUFFLGlCQUFRLElBQUUsR0FBRSxJQUFFLElBQUUsS0FBSTtBQUFDLGNBQUksS0FBRyxLQUFLLEtBQUcsTUFBTSxLQUFHLEtBQUssS0FBRyxNQUFNO0FBQUcsZUFBSyxLQUFHLEtBQUssS0FBRyxNQUFNLEtBQUcsS0FBSyxLQUFHLE1BQU07QUFBRyxlQUFLLEtBQUc7QUFBQSxRQUFFO0FBQUMsYUFBSyxVQUFVLE1BQUssTUFBSyxFQUFDO0FBQUUsYUFBSyxVQUFVLE1BQUssTUFBSyxNQUFLLEdBQUUsSUFBRSxHQUFHO0FBQUUsYUFBSyxVQUFVLE1BQUssR0FBRSxFQUFDO0FBQUUsYUFBSyxhQUFhLE1BQUssRUFBQztBQUFFLFlBQUksV0FBUyxFQUFFLFdBQVMsRUFBRTtBQUFTLFlBQUksU0FBTyxFQUFFLFNBQU8sRUFBRTtBQUFPLGVBQU8sSUFBSSxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxNQUFJLGNBQWEsS0FBSTtBQUFDLFlBQUksTUFBSSxJQUFJLElBQUcsSUFBSTtBQUFFLFlBQUksUUFBTSxJQUFJLE1BQU0sS0FBSyxTQUFPLElB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QUFRLEtBQUcsS0FBRyxJQUFHLEtBQUk7QUFBQyxjQUFJLE9BQUssS0FBSyxNQUFNLEtBQUc7QUFBRSxlQUFLLE1BQU0sS0FBRyxTQUFPLEtBQUcsS0FBRSxTQUFPO0FBQUUsa0JBQU0sT0FBSztBQUFBLFFBQUk7QUFBQyxZQUFHLGVBQWEsVUFBUSxHQUFFO0FBQUMsc0JBQVksTUFBTSxZQUFZLFlBQVU7QUFBQSxRQUFLO0FBQUMsWUFBRyxLQUFLLFdBQVMsR0FBRTtBQUFDLGVBQUssTUFBTSxLQUFHO0FBQUUsZUFBSyxTQUFPO0FBQUEsUUFBQztBQUFDLGVBQU8sS0FBSyxNQUFNO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxRQUFNLGVBQWUsTUFBSyxNQUFLLFVBQVM7QUFBQyxnQkFBTyxLQUFLLGFBQVcsQ0FBQztBQUFFLGVBQU8sS0FBSyxPQUFPLE1BQUssTUFBSyxRQUFRO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsTUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNLEVBQUUsTUFBTSxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxRQUFNLGVBQWUsTUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNLEVBQUUsT0FBTyxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsTUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNLEVBQUUsTUFBTSxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxRQUFNLGVBQWUsTUFBSztBQUFDLGVBQU8sS0FBSyxNQUFNLEVBQUUsT0FBTyxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxRQUFNLGVBQWUsS0FBSTtBQUFDLGdCQUFPLE9BQU8sUUFBTSxZQUFVLE9BQUssQ0FBQztBQUFFLFlBQUksS0FBRSxNQUFJO0FBQUcsWUFBSSxLQUFHLE9BQUksTUFBRztBQUFHLFlBQUksSUFBRSxLQUFHO0FBQUUsWUFBRyxLQUFLLFVBQVE7QUFBRSxpQkFBTztBQUFNLFlBQUksSUFBRSxLQUFLLE1BQU07QUFBRyxlQUFNLENBQUMsQ0FBRSxL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S0FBSyxFQUFFO0FBQUEsTUFBRztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLGVBQU8sS0FBSyxPQUFPLEtBQUksT0FBTSxJQUFJLEVBQUU7QUFBQSxNQUFHO0FBQUUsVUFBRyxVQUFVLFdBQVMsa0JBQWtCLEtBQUk7QUFBQyxZQUFJLEtBQUcsS0FBSyxPQUFPLEdBQUc7QUFBRSxZQUFHLEdBQUcsSUFBSSxPQUFPO0FBQUUsaUJBQU8sR0FBRztBQUFJLFlBQUksTUFBSSxHQUFHLElBQUksYUFBVyxJQUFFLEdBQUcsSUFBSSxLQUFLLEdBQUcsSUFBRSxHQUFHO0FBQUksWUFBSSxPQUFLLElBQUksTUFBTSxDQUFDO0FBQUUsWUFBSSxLQUFHLElBQUksTUFBTSxDQUFDO0FBQUUsWUFBSSxNQUFJLElBQUksSUFBSSxJQUFJO0FBQUUsWUFBRyxNQUFJLEtBQUcsT0FBSyxLQUFHLFFBQU07QUFBRSxpQkFBTyxHQUFHO0FBQUksZUFBTyxHQUFHLElBQUksYUFBVyxJQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBRSxHQUFHLElBQUksTUFBTSxDQUFDO0FBQUEsTUFBQztBQUFFLFVBQUcsVUFBVSxPQUFLLGNBQWMsS0FBSTtBQUFDLGdCQUFPLE9BQUssUUFBUTtBQUFFLFlBQUksSUFBRyxNQUFHLE1BQUk7QUFBSSxZQUFJLE1BQUk7QUFBRSxpQkFBUSxJQUFFLEtBQUssU0FBTyxHQUFFLEtBQUcsR0FBRSxLQUFJO0FBQUMsZ0JBQUssS0FBRSxNQUFLLE1BQUssTUFBTSxLQUFHLE1BQUk7QUFBQSxRQUFHO0FBQUMsZUFBTztBQUFBLE1BQUc7QUFBRSxVQUFHLFVBQVUsUUFBTSxlQUFlLEtBQUk7QUFBQyxnQkFBTyxPQUFLLFFBQVE7QUFBRSxZQUFJLFFBQU07QUFBRSxpQkFBUSxJQUFFLEtBQUssU0FBTyxHQUFFLEtBQUcsR0FBRSxLQUFJO0FBQUMsY0FBSSxJQUFHLE1BQUssTUFBTSxLQUFHLEtBQUcsUUFBTTtBQUFTLGVBQUssTUFBTSxLQUFHLElBQUUsTUFBSTtBQUFFLGtCQUFNLElBQUU7QUFBQSxRQUFHO0FBQUMsZUFBTyxLQUFLLE1BQU07QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE9BQUssY0FBYyxLQUFJO0FBQUMsZUFBTyxLQUFLLE1BQU0sRUFBRSxNQUFNLEdBQUc7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLE9BQUssY0FBYyxHQUFFO0FBQUMsZ0JBQU8sRUFBRSxhQUFXLENBQUM7QUFBRSxnQkFBTyxDQUFDLEVBQUUsT0FBTyxDQUFDO0FBQUUsWUFBSSxJQUFFO0FBQUssWUFBSSxJQUFFLEVBQUUsTUFBTTtBQUFFLFlBQUcsRUFBRSxhQUFXLEdBQUU7QUFBQyxjQUFFLEVBQUUsS0FBSyxDQUFDO0FBQUEsUUFBQyxPQUFLO0FBQUMsY0FBRSxFQUFFLE1BQU07QUFBQSxRQUFDO0FBQUMsWUFBSSxJQUFFLElBQUksSUFBRyxDQUFDO0FBQUUsWUFBSSxJQUFFLElBQUksSUFBRyxDQUFDO0FBQUUsWUFBSSxJQUFFLElBQUksSUFBRyxDQUFDO0FBQUUsWUFBSSxJQUFFLElBQUksSUFBRyxDQUFDO0FBQUUsWUFBSSxJQUFFO0FBQUUsZUFBTSxFQUFFLE9BQU8sS0FBRyxFQUFFLE9BQU8sR0FBRTtBQUFDLFlBQUUsT0FBTyxDQUFDO0FBQUUsWUFBRSxPQUFPLENBQUM7QUFBRSxZQUFFO0FBQUEsUUFBQztBQUFDLFlBQUksS0FBRyxFQUFFLE1BQU07QUFBRSxZQUFJLEtBQUcsRUFBRSxNQUFNO0FBQUUsZUFBTSxDQUFDLEVBQUUsT0FBTyxHQUFFO0FBQUMsbUJBQVEsSUFBRSxHQUFFLEtBQUcsR0FBRyxHQUFFLE1BQU0sS0FBRyxRQUFNLEtBQUcsSUFBRSxJQUFHLEVBQUUsR0FBRSxPQUFLO0FBQUU7QUFBQyxjQUFHLElBQUUsR0FBRTtBQUFDLGNBQUUsT0FBTyxDQUFDO0FBQUUsbUJBQU0sTUFBSyxHQUFFO0FBQUMsa0JBQUcsRUFBRSxNQUFNLEtBQUcsRUFBRSxNQUFNLEdBQUU7QUFBQyxrQkFBRSxLQUFLLEVBQUU7QUFBRSxrQkFBRSxLQUFLLEVBQUU7QUFBQSxjQUFDO0FBQUMsZ0JBQUUsT0FBTyxDQUFDO0FBQUUsZ0JBQUUsT0FBTyxDQUFDO0FBQUEsWUFBQztBQUFBLFVBQUM7QUFBQyxtQkFBUSxJQUFFLEdBQUUsS0FBRyxHQUFHLEdBQUUsTUFBTSxLQUFHLFFBQU0sS0FBRyxJQUFFLElBQUcsRUFBRSxHQUFFLE9BQUs7QUFBRTtBQUFDLGNBQUcsSUFBRSxHQUFFO0FBQUMsY0FBRSxPQUFPLENBQUM7QUFBRSxtQkFBTSxNQUFLLEdBQUU7QUFBQyxrQkFBRyxFQUFFLE1BQU0sS0FBRyxFQUFFLE1BQU0sR0FBRTtBQUFDLGtCQUFFLEtBQUssRUFBRTtBQUFFLGtCQUFFLEtBQUssRUFBRTtBQUFBLGNBQUM7QUFBQyxnQkFBRSxPQUFPLENBQUM7QUFBRSxnQkFBRSxPQUFPLENBQUM7QUFBQSxZQUFDO0FBQUEsVUFBQztBQUFDLGNBQUcsRUFBRSxJQUFJLENBQUMsS0FBRyxHQUFFO0FBQUMsY0FBRSxLQUFLLENBQUM7QUFBRSxjQUFFLEtBQUssQ0FBQztBQUFFLGNBQUUsS0FBSyxDQUFDO0FBQUEsVUFBQyxPQUFLO0FBQUMsY0FBRSxLQUFLLENBQUM7QUFBRSxjQUFFLEtBQUssQ0FBQztBQUFFLGNBQUUsS0FBSyxDQUFDO0FBQUEsVUFBQztBQUFBLFFBQUM7QUFBQyxlQUFNLEVBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxLQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUM7QUFBQSxNQUFDO0FBQUUsVUFBRyxVQUFVLFNBQU8sZ0JBQWdCLEdBQUU7QUFBQyxnQkFBTyxFQUFFLGFBQVcsQ0FBQztBQUFFLGdCQUFPLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxZQUFJLElBQUU7QUFBSyxZQUFJLElBQUUsRUFBRSxNQUFNO0FBQUUsWUFBRyxFQUFFLGFBQVcsR0FBRTtBQUFDLGNBQUUsRUFBRSxLQUFLLENBQUM7QUFBQSxRQUFDLE9BQUs7QUFBQyxjQUFFLEVBQUUsTUFBTTtBQUFBLFFBQUM7QUFBQyxZQUFJLEtBQUcsSUFBSSxJQUFHLENBQUM7QUFBRSxZQUFJLEtBQUcsSUFBSSxJQUFHLENBQUM7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QUM7QUFBRSxVQUFJLFVBQVUsT0FBSyxjQUFjLEdBQUUsR0FBRTtBQUFDLGFBQUssU0FBUyxHQUFFLENBQUM7QUFBRSxZQUFJLE1BQUksRUFBRSxLQUFLLENBQUM7QUFBRSxZQUFHLElBQUksSUFBSSxLQUFLLENBQUMsS0FBRyxHQUFFO0FBQUMsY0FBSSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPO0FBQUEsTUFBRztBQUFFLFVBQUksVUFBVSxNQUFJLGFBQWEsR0FBRSxHQUFFO0FBQUMsYUFBSyxTQUFTLEdBQUUsQ0FBQztBQUFFLFlBQUksTUFBSSxFQUFFLElBQUksQ0FBQztBQUFFLFlBQUcsSUFBSSxLQUFLLENBQUMsSUFBRSxHQUFFO0FBQUMsY0FBSSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPLElBQUksVUFBVSxJQUFJO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxPQUFLLGNBQWMsR0FBRSxHQUFFO0FBQUMsYUFBSyxTQUFTLEdBQUUsQ0FBQztBQUFFLFlBQUksTUFBSSxFQUFFLEtBQUssQ0FBQztBQUFFLFlBQUcsSUFBSSxLQUFLLENBQUMsSUFBRSxHQUFFO0FBQUMsY0FBSSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPO0FBQUEsTUFBRztBQUFFLFVBQUksVUFBVSxNQUFJLGFBQWEsR0FBRSxLQUFJO0FBQUMsYUFBSyxTQUFTLENBQUM7QUFBRSxlQUFPLEtBQUssS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxPQUFLLGNBQWMsR0FBRSxHQUFFO0FBQUMsYUFBSyxTQUFTLEdBQUUsQ0FBQztBQUFFLGVBQU8sS0FBSyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFBQSxNQUFDO0FBQUUsVUFBSSxVQUFVLE1BQUksY0FBYSxHQUFFLEdBQUU7QUFBQyxhQUFLLFNBQVMsR0FBRSxDQUFDO0FBQUUsZUFBTyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBRSxVQUFJLFVBQVUsT0FBSyxjQUFjLEdBQUU7QUFBQyxlQUFPLEtBQUssS0FBSyxHQUFFLEVBQUUsTUFBTSxDQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxNQUFJLGFBQWEsR0FBRTtBQUFDLGVBQU8sS0FBSyxJQUFJLEdBQUUsQ0FBQztBQUFBLE1BQUM7QUFBRSxVQUFJLFVBQVUsT0FBSyxjQUFjLEdBQUU7QUFBQyxZQUFHLEVBQUUsT0FBTztBQUFFLGlCQUFPLEVBQUUsTUFBTTtBQUFFLFlBQUksT0FBSyxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQUUsZ0JBQU8sT0FBSyxNQUFJLENBQUM7QUFBRSxZQUFHLFNBQU8sR0FBRTtBQUFDLGNBQUksTUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLElBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDO0FBQUUsaUJBQU8sS0FBSyxJQUFJLEdBQUUsR0FBRztBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztBQUFFLFlBQUksS0FBRTtBQUFFLGVBQU0sQ0FBQyxFQUFFLE9BQU8sS0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFJLEdBQUU7QUFBQztBQUFJLFlBQUUsT0FBTyxDQUFDO0FBQUEsUUFBQztBQUFDLGdCQUFPLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxZQUFJLE1BQUksSUFBSSxJQUFHLENBQUMsRUFBRSxNQUFNLElBQUk7QUFBRSxZQUFJLE9BQUssSUFBSSxPQUFPO0FBQUUsWUFBSSxPQUFLLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxZQUFJLElBQUUsS0FBSyxFQUFFLFVBQVU7QUFBRSxZQUFFLElBQUksSUFBRyxJQUFFLElBQUUsQ0FBQyxFQUFFLE1BQU0sSUFBSTtBQUFFLGVBQU0sS0FBSyxJQUFJLEdBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxNQUFJLEdBQUU7QUFBQyxZQUFFLFFBQVEsSUFBSTtBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsS0FBSyxJQUFJLEdBQUUsQ0FBQztBQUFFLFlBQUksS0FBRSxLQUFLLElBQUksR0FBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQUUsWUFBSSxJQUFFLEtBQUssSUFBSSxHQUFFLENBQUM7QUFBRSxZQUFJLElBQUU7QUFBRSxlQUFNLEVBQUUsSUFBSSxHQUFHLE1BQUksR0FBRTtBQUFDLGNBQUksTUFBSTtBQUFFLG1CQUFRLElBQUUsR0FBRSxJQUFJLElBQUksR0FBRyxNQUFJLEdBQUUsS0FBSTtBQUFDLGtCQUFJLElBQUksT0FBTztBQUFBLFVBQUM7QUFBQyxrQkFBTyxJQUFFLENBQUM7QUFBRSxjQUFJLElBQUUsS0FBSyxJQUFJLEdBQUUsSUFBSSxJQUFHLENBQUMsRUFBRSxPQUFPLElBQUUsSUFBRSxDQUFDLENBQUM7QUFBRSxlQUFFLEdBQUUsT0FBTyxDQUFDO0FBQUUsY0FBRSxFQUFFLE9BQU87QUFBRSxjQUFFLEVBQUUsT0FBTyxDQUFDO0FBQUUsY0FBRTtBQUFBLFFBQUM7QUFBQyxlQUFPO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxPQUFLLGNBQWMsR0FBRTtBQUFDLFlBQUksTUFBSSxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUUsWUFBRyxJQUFJLGFBQVcsR0FBRTtBQUFDLGNBQUksV0FBUztBQUFFLGlCQUFPLEtBQUssS0FBSyxHQUFHLEVBQUUsT0FBTztBQUFBLFFBQUMsT0FBSztBQUFDLGlCQUFPLEtBQUssS0FBSyxHQUFHO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBRSxVQUFJLFVBQVUsTUFBSSxhQUFhLEdBQUUsS0FBSTtBQUFDLFlBQUcsSUFBSSxPQUFPO0FBQUUsaUJBQU8sSUFBSSxJQUFHLENBQUMsRUFBRSxNQUFNLElBQUk7QUFBRSxZQUFHLElBQUksS0FBSyxDQUFDLE1BQUk7QUFBRSxpQkFBTyxFQUFFLE1BQU07QUFBRSxZQUFJLGFBQVc7QUFBRSxZQUFJLE1BQUksSUFBSSxNQUFNLEtBQUcsVUFBVTtBQUFFLFlBQUksS0FBRyxJQUFJLElBQUcsQ0FBQyxFQUFFLE1BQU0sSUFBSTtBQUFFLFlBQUksS0FBRztBQUFFLGlCQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsY0FBSSxLQUFHLEtBQUssSUFBSSxJQUFJLElBQUUsSUFBRyxDQUFDO0FBQUEsUUFBQztBQUFDLFlBQUksTUFBSSxJQUFJO0FBQUcsWUFBSSxVQUFRO0FBQUUsWUFBSSxhQUFXO0FBQUUsWUFBSSxRQUFNLElBQUksVUFBVSxJQUFFO0FBQUcsWUFBRyxVQUFRLEdBQUU7QUFBQyxrQkFBTTtBQUFBLFFBQUU7QUFBQyxhQUFJLElBQUUsSUFBSSxTQUFPLEdBQUUsS0FBRyxHQUFFLEtBQUk7QUFBQyxjQUFJLE9BQUssSUFBSSxNQUFNO0FBQUcsbUJBQVEsSUFBRSxRQUFNLEdBQUUsS0FBRyxHQUFFLEtBQUk7QUFBQyxnQkFBSSxNQUFJLFFBQU0sSUFBRTtBQUFFLGdCQUFHLFFBQU0sSUFBSSxJQUFHO0FBQUMsb0JBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxZQUFDO0FBQUMsZ0JBQUcsUUFBTSxLQUFHLFlBQVUsR0FBRTtBQUFDLDJCQUFXO0FBQUU7QUFBQSxZQUFRO0FBQUMsd0JBQVU7QUFBRSx1QkFBUztBQUFJO0FBQWEsZ0JBQUcsZUFBYSxjQUFhLE9BQUksS0FBRyxNQUFJO0FBQUc7QUFBUyxrQkFBSSxLQUFLLElBQUksS0FBSSxJQUFJLFFBQVE7QUFBRSx5QkFBVztBQUFFLHNCQUFRO0FBQUEsVUFBQztBQUFDLGtCQUFNO0FBQUEsUUFBRTtBQUFDLGVBQU87QUFBQSxNQUFHO0FBQUUsVUFBSSxVQUFVLFlBQVUsbUJBQW1CLEtBQUk7QUFBQyxZQUFJLEtBQUUsSUFBSSxLQUFLLEtBQUssQ0FBQztBQUFFLGVBQU8sT0FBSSxNQUFJLEdBQUUsTUFBTSxJQUFFO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxjQUFZLHFCQUFxQixLQUFJO0FBQUMsWUFBSSxNQUFJLElBQUksTUFBTTtBQUFFLFlBQUksTUFBSTtBQUFLLGVBQU87QUFBQSxNQUFHO0FBQUUsVUFBRyxPQUFLLGNBQWMsS0FBSTtBQUFDLGVBQU8sSUFBSSxLQUFLLEdBQUc7QUFBQSxNQUFDO0FBQUUsb0JBQWMsR0FBRTtBQUFDLFlBQUksS0FBSyxNQUFLLENBQUM7QUFBRSxhQUFLLFFBQU0sS0FBSyxFQUFFLFVBQVU7QUFBRSxZQUFHLEtBQUssUUFBTSxPQUFLLEdBQUU7QUFBQyxlQUFLLFNBQU8sS0FBRyxLQUFLLFFBQU07QUFBQSxRQUFFO0FBQUMsYUFBSyxJQUFFLElBQUksSUFBRyxDQUFDLEVBQUUsT0FBTyxLQUFLLEtBQUs7QUFBRSxhQUFLLEtBQUcsS0FBSyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUM7QUFBRSxhQUFLLE9BQUssS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUUsYUFBSyxPQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDO0FBQUUsYUFBSyxPQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssQ0FBQztBQUFFLGFBQUssT0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLElBQUk7QUFBQSxNQUFDO0FBQUMsZ0JBQVMsTUFBSyxHQUFHO0FBQUUsV0FBSyxVQUFVLFlBQVUsbUJBQW1CLEtBQUk7QUFBQyxlQUFPLEtBQUssS0FBSyxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUM7QUFBQSxNQUFDO0FBQUUsV0FBSyxVQUFVLGNBQVkscUJBQXFCLEtBQUk7QUFBQyxZQUFJLEtBQUUsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQztBQUFFLFdBQUUsTUFBSTtBQUFLLGVBQU87QUFBQSxNQUFDO0FBQUUsV0FBSyxVQUFVLE9BQUssY0FBYyxHQUFFLEdBQUU7QUFBQyxZQUFHLEVBQUUsT0FBTyxLQUFHLEVBQUUsT0FBTyxHQUFFO0FBQUMsWUFBRSxNQUFNLEtBQUc7QUFBRSxZQUFFLFNBQU87QUFBRSxpQkFBTztBQUFBLFFBQUM7QUFBQyxZQUFJLElBQUUsRUFBRSxLQUFLLENBQUM7QUFBRSxZQUFJLElBQUUsRUFBRSxNQUFNLEtBQUssS0FBSyxFQUFFLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssQ0FBQztBQUFFLFlBQUksSUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sS0FBSyxLQUFLO0FBQUUsWUFBSSxNQUFJO0FBQUUsWUFBRyxFQUFFLElBQUksS0FBSyxDQUFDLEtBQUcsR0FBRTtBQUFDLGdCQUFJLEVBQUUsS0FBSyxLQUFLLENBQUM7QUFBQSxRQUFDLFdBQVMsRUFBRSxLQUFLLENBQUMsSUFBRSxHQUFFO0FBQUMsZ0JBQUksRUFBRSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPLElBQUksVUFBVSxJQUFJO0FBQUEsTUFBQztBQUFFLFdBQUssVUFBVSxNQUFJLGNBQWEsR0FBRSxHQUFFO0FBQUMsWUFBRyxFQUFFLE9BQU8sS0FBRyxFQUFFLE9BQU87QUFBRSxpQkFBTyxJQUFJLElBQUcsQ0FBQyxFQUFFLFVBQVUsSUFBSTtBQUFFLFlBQUksSUFBRSxFQUFFLElBQUksQ0FBQztBQUFFLFlBQUksSUFBRSxFQUFFLE1BQU0sS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLEtBQUssS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDO0FBQUUsWUFBSSxJQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxLQUFLLEtBQUs7QUFBRSxZQUFJLE1BQUk7QUFBRSxZQUFHLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBRyxHQUFFO0FBQUMsZ0JBQUksRUFBRSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUMsV0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFFLEdBQUU7QUFBQyxnQkFBSSxFQUFFLEtBQUssS0FBSyxDQUFDO0FBQUEsUUFBQztBQUFDLGVBQU8sSUFBSSxVQUFVLElBQUk7QUFBQSxNQUFDO0FBQUUsV0FBSyxVQUFVLE9BQUssY0FBYyxHQUFFO0FBQUMsWUFBSSxNQUFJLEtBQUssS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUFFLGVBQU8sSUFBSSxVQUFVLElBQUk7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QUFBQSxNQUFLO0FBQUUsVUFBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLFlBQUksR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJO0FBQUksYUFBSSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUcsR0FBRTtBQUFDLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxlQUFHLEdBQUUsS0FBRyxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQUksZUFBRyxHQUFFLEtBQUcsR0FBRSxNQUFJLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRTtBQUFJLGVBQUcsR0FBRSxLQUFHLEdBQUUsTUFBSSxHQUFFLE1BQUksR0FBRSxNQUFJLEdBQUU7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxjQUFFLEtBQUksT0FBSSxJQUFFLE9BQUs7QUFBSSxhQUFFLE1BQUk7QUFBRSxhQUFFLE1BQUk7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxhQUFFLE9BQUs7QUFBRSxlQUFHLEdBQUU7QUFBRyxlQUFHLEdBQUU7QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE1BQUksSUFBRSxHQUFFLE9BQUs7QUFBRyxnQkFBSSxHQUFFLE1BQUksSUFBRSxHQUFFLE9BQUs7QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxNQUFJLEtBQUcsR0FBRSxPQUFLO0FBQUUsZ0JBQUksR0FBRSxNQUFJLEtBQUcsR0FBRSxPQUFLO0FBQUUsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZ0JBQUksR0FBRSxPQUFLLElBQUUsR0FBRSxRQUFNO0FBQUcsZUFBRyxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsTUFBSSxLQUFHLEdBQUUsT0FBSztBQUFFLGdCQUFJLEdBQUUsTUFBSSxLQUFHLEdBQUUsT0FBSztBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGdCQUFJLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFFLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsZUFBRyxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRSxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRSxnQkFBSSxHQUFFLE1BQUksS0FBRyxHQUFFLE9BQUs7QUFBRSxnQkFBSSxHQUFFLE1BQUksS0FBRyxHQUFFLE9BQUs7QUFBRSxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssS0FBRyxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxnQkFBSSxHQUFFLE9BQUssSUFBRSxHQUFFLFFBQU07QUFBRyxlQUFHLEdBQUUsT0FBSyxLQUFHLEdBQUUsUUFBTTtBQUFHLGVBQUcsR0FBRSxPQUFLLEtBQUcsR0FBRSxRQUFNO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLE1BQUksQ0FBQyxNQUFJO0FBQUksYUFBRSxNQUFJLEdBQUc7QUFBRyxhQUFFLE1BQUksR0FBRyxJQUFFO0FBQUEsUUFBRTtBQUFBLE1BQUM7QUFBRSxVQUFHLFdBQVU7QUFBQyxlQUFPLFVBQVE7QUFBQSxNQUFPLE9BQUs7QUFBQyxpQkFBUSxJQUFFLEdBQUUsSUFBRSxZQUFZLFFBQU8sRUFBRSxHQUFFO0FBQUMsZUFBSyxZQUFZLE1BQUksUUFBUSxZQUFZO0FBQUEsUUFBRztBQUFBLE1BQUM7QUFBQSxJQUFDLEdBQUc7QUFBQSxFQUFDLENBQUM7QUFBZSxxQkFBbUIsT0FBSztBQUFDLFdBQU0sT0FBSyxLQUFLLFdBQVcsU0FBUyxLQUFJLENBQUM7QUFBQSxFQUFDO0FBQUMsTUFBTSxZQUFVO0FBQXlCLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLDJCQUF5QixPQUFNO0FBQUMsVUFBTSxTQUFPLENBQUM7QUFBRSxXQUFNLE9BQU07QUFBQyxhQUFPLFFBQVEsUUFBTSxHQUFHO0FBQUUsZ0JBQVE7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQU07QUFBQyw2QkFBMkIsT0FBSyxRQUFPLFFBQU87QUFBQyxRQUFJLFNBQU87QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLFFBQU8sS0FBSTtBQUFDLGVBQU8sU0FBTyxNQUFJLE1BQUssU0FBTztBQUFBLElBQUU7QUFBQyxXQUFPO0FBQUEsRUFBTTtBQUFDLG1CQUFpQixRQUFPO0FBQUMsUUFBRyxNQUFNLFFBQVEsTUFBTSxHQUFFO0FBQUMsVUFBSSxVQUFRLENBQUM7QUFBRSxhQUFPLFFBQVEsU0FBUyxPQUFNO0FBQUMsa0JBQVEsUUFBUSxPQUFPLFFBQVEsS0FBSyxDQUFDO0FBQUEsTUFBQyxDQUFDO0FBQUUsVUFBRyxRQUFRLFVBQVEsSUFBRztBQUFDLGdCQUFRLFFBQVEsTUFBSSxRQUFRLE1BQU07QUFBRSxlQUFPO0FBQUEsTUFBTztBQUFDLFlBQU0sVUFBTyxnQkFBZ0IsUUFBUSxNQUFNO0FBQUUsY0FBTyxRQUFRLE1BQUksUUFBTyxNQUFNO0FBQUUsYUFBTyxRQUFPLE9BQU8sT0FBTztBQUFBLElBQUM7QUFBQyxRQUFHLENBQUMsWUFBWSxNQUFNLEdBQUU7QUFBQyxlQUFTLG1CQUFtQixnQ0FBK0IsVUFBUyxNQUFNO0FBQUEsSUFBQztBQUFDLFVBQU0sUUFBSyxNQUFNLFVBQVUsTUFBTSxLQUFLLFNBQVMsTUFBTSxDQUFDO0FBQUUsUUFBRyxNQUFLLFdBQVMsS0FBRyxNQUFLLE1BQUksS0FBSTtBQUFDLGFBQU87QUFBQSxJQUFJLFdBQVMsTUFBSyxVQUFRLElBQUc7QUFBQyxZQUFLLFFBQVEsTUFBSSxNQUFLLE1BQU07QUFBRSxhQUFPO0FBQUEsSUFBSTtBQUFDLFVBQU0sU0FBTyxnQkFBZ0IsTUFBSyxNQUFNO0FBQUUsV0FBTyxRQUFRLE1BQUksT0FBTyxNQUFNO0FBQUUsV0FBTyxPQUFPLE9BQU8sS0FBSTtBQUFBLEVBQUM7QUFBQyxrQkFBZ0IsUUFBTztBQUFDLFdBQU8sUUFBUSxRQUFRLE1BQU0sQ0FBQztBQUFBLEVBQUM7QUFBQywyQkFBeUIsT0FBSyxRQUFPLGFBQVksUUFBTztBQUFDLFVBQU0sU0FBTyxDQUFDO0FBQUUsV0FBTSxjQUFZLFNBQU8sSUFBRSxRQUFPO0FBQUMsWUFBTSxVQUFRLFFBQVEsT0FBSyxXQUFXO0FBQUUsYUFBTyxLQUFLLFFBQVEsTUFBTTtBQUFFLHFCQUFhLFFBQVE7QUFBUyxVQUFHLGNBQVksU0FBTyxJQUFFLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxXQUFNLEVBQUMsVUFBUyxJQUFFLFFBQU8sT0FBYTtBQUFBLEVBQUM7QUFBQyxtQkFBaUIsT0FBSyxRQUFPO0FBQUMsUUFBRyxNQUFLLFdBQVMsR0FBRTtBQUFDLGVBQVMsV0FBVyxrQkFBaUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLElBQUM7QUFBQyxRQUFHLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxlQUFhLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLGVBQWEsTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyxnQ0FBK0IsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxZQUFNLFNBQU8sa0JBQWtCLE9BQUssU0FBTyxHQUFFLFlBQVk7QUFBRSxVQUFHLFNBQU8sSUFBRSxlQUFhLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVywrQkFBOEIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPLGdCQUFnQixPQUFLLFFBQU8sU0FBTyxJQUFFLGNBQWEsZUFBYSxNQUFNO0FBQUEsSUFBQyxXQUFTLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxTQUFPLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyx3QkFBdUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPLGdCQUFnQixPQUFLLFFBQU8sU0FBTyxHQUFFLE1BQU07QUFBQSxJQUFDLFdBQVMsTUFBSyxXQUFTLEtBQUk7QUFBQyxZQUFNLGVBQWEsTUFBSyxVQUFRO0FBQUksVUFBRyxTQUFPLElBQUUsZUFBYSxNQUFLLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxrQkFBa0IsT0FBSyxTQUFPLEdBQUUsWUFBWTtBQUFFLFVBQUcsU0FBTyxJQUFFLGVBQWEsU0FBTyxNQUFLLFFBQU87QUFBQyxpQkFBUyxXQUFXLHdCQUF1QixPQUFPLE9BQU8sZ0JBQWUsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxRQUFRLE1BQUssTUFBTSxTQUFPLElBQUUsY0FBYSxTQUFPLElBQUUsZUFBYSxNQUFNLENBQUM7QUFBRSxhQUFNLEVBQUMsVUFBUyxJQUFFLGVBQWEsUUFBTyxPQUFhO0FBQUEsSUFBQyxXQUFTLE1BQUssV0FBUyxLQUFJO0FBQUMsWUFBTSxTQUFPLE1BQUssVUFBUTtBQUFJLFVBQUcsU0FBTyxJQUFFLFNBQU8sTUFBSyxRQUFPO0FBQUMsaUJBQVMsV0FBVyxrQkFBaUIsT0FBTyxPQUFPLGdCQUFlLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxZQUFNLFNBQU8sUUFBUSxNQUFLLE1BQU0sU0FBTyxHQUFFLFNBQU8sSUFBRSxNQUFNLENBQUM7QUFBRSxhQUFNLEVBQUMsVUFBUyxJQUFFLFFBQU8sT0FBYTtBQUFBLElBQUM7QUFBQyxXQUFNLEVBQUMsVUFBUyxHQUFFLFFBQU8sUUFBUSxNQUFLLE9BQU8sRUFBQztBQUFBLEVBQUM7QUFBQyxrQkFBZ0IsT0FBSztBQUFDLFVBQU0sUUFBTSxTQUFTLEtBQUk7QUFBRSxVQUFNLFVBQVEsUUFBUSxPQUFNLENBQUM7QUFBRSxRQUFHLFFBQVEsYUFBVyxNQUFNLFFBQU87QUFBQyxlQUFTLG1CQUFtQixvQkFBbUIsUUFBTyxLQUFJO0FBQUEsSUFBQztBQUFDLFdBQU8sUUFBUTtBQUFBLEVBQU07QUFBQyxNQUFJLFFBQU0sT0FBTyxPQUFPLEVBQUMsV0FBVSxNQUFLLFFBQWMsT0FBYSxDQUFDO0FBQUUsTUFBTSxZQUFVO0FBQTZCLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLDhCQUE0QixTQUFRO0FBQUMsUUFBRyxDQUFDLFlBQVksU0FBUSxFQUFFLEdBQUU7QUFBQyxlQUFTLG1CQUFtQixtQkFBa0IsV0FBVSxPQUFPO0FBQUEsSUFBQztBQUFDLGNBQVEsUUFBUSxZQUFZO0FBQUUsVUFBTSxRQUFNLFFBQVEsVUFBVSxDQUFDLEVBQUUsTUFBTSxFQUFFO0FBQUUsVUFBTSxXQUFTLElBQUksV0FBVyxFQUFFO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxlQUFTLEtBQUcsTUFBTSxHQUFHLFdBQVcsQ0FBQztBQUFBLElBQUM7QUFBQyxVQUFNLFNBQU8sU0FBUyxVQUFVLFFBQVEsQ0FBQztBQUFFLGFBQVEsSUFBRSxHQUFFLElBQUUsSUFBRyxLQUFHLEdBQUU7QUFBQyxVQUFHLE9BQU8sS0FBRyxNQUFJLEtBQUcsR0FBRTtBQUFDLGNBQU0sS0FBRyxNQUFNLEdBQUcsWUFBWTtBQUFBLE1BQUM7QUFBQyxVQUFJLFFBQU8sS0FBRyxLQUFHLE9BQUssR0FBRTtBQUFDLGNBQU0sSUFBRSxLQUFHLE1BQU0sSUFBRSxHQUFHLFlBQVk7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLFdBQU0sT0FBSyxNQUFNLEtBQUssRUFBRTtBQUFBLEVBQUM7QUFBQyxNQUFNLG1CQUFpQjtBQUFpQixpQkFBZSxHQUFFO0FBQUMsUUFBRyxLQUFLLE9BQU07QUFBQyxhQUFPLEtBQUssTUFBTSxDQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxJQUFJLENBQUMsSUFBRSxLQUFLO0FBQUEsRUFBSTtBQUFDLE1BQU0sYUFBVyxDQUFDO0FBQUUsV0FBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxlQUFXLE9BQU8sQ0FBQyxLQUFHLE9BQU8sQ0FBQztBQUFBLEVBQUM7QUFBQyxXQUFRLElBQUUsR0FBRSxJQUFFLElBQUcsS0FBSTtBQUFDLGVBQVcsT0FBTyxhQUFhLEtBQUcsQ0FBQyxLQUFHLE9BQU8sS0FBRyxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQU0sYUFBVyxLQUFLLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUFFLHdCQUFzQixTQUFRO0FBQUMsY0FBUSxRQUFRLFlBQVk7QUFBRSxjQUFRLFFBQVEsVUFBVSxDQUFDLElBQUUsUUFBUSxVQUFVLEdBQUUsQ0FBQyxJQUFFO0FBQUssUUFBSSxXQUFTLFFBQVEsTUFBTSxFQUFFLEVBQUUsSUFBSSxPQUFHO0FBQUMsYUFBTyxXQUFXO0FBQUEsSUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0FBQUUsV0FBTSxTQUFTLFVBQVEsWUFBVztBQUFDLFVBQUksUUFBTSxTQUFTLFVBQVUsR0FBRSxVQUFVO0FBQUUsaUJBQVMsU0FBUyxPQUFNLEVBQUUsSUFBRSxLQUFHLFNBQVMsVUFBVSxNQUFNLE1BQU07QUFBQSxJQUFDO0FBQUMsUUFBSSxXQUFTLE9BQU8sS0FBRyxTQUFTLFVBQVMsRUFBRSxJQUFFLEVBQUU7QUFBRSxXQUFNLFNBQVMsU0FBTyxHQUFFO0FBQUMsaUJBQVMsTUFBSTtBQUFBLElBQVE7QUFBQyxXQUFPO0FBQUEsRUFBUTtBQUFDLHNCQUFvQixTQUFRO0FBQUMsUUFBSSxTQUFPO0FBQUssUUFBRyxPQUFPLFlBQVUsVUFBUztBQUFDLGVBQVMsbUJBQW1CLG1CQUFrQixXQUFVLE9BQU87QUFBQSxJQUFDO0FBQUMsUUFBRyxRQUFRLE1BQU0sd0JBQXdCLEdBQUU7QUFBQyxVQUFHLFFBQVEsVUFBVSxHQUFFLENBQUMsTUFBSSxNQUFLO0FBQUMsa0JBQVEsT0FBSztBQUFBLE1BQU87QUFBQyxlQUFPLG1CQUFtQixPQUFPO0FBQUUsVUFBRyxRQUFRLE1BQU0sK0JBQStCLEtBQUcsV0FBUyxTQUFRO0FBQUMsaUJBQVMsbUJBQW1CLHdCQUF1QixXQUFVLE9BQU87QUFBQSxNQUFDO0FBQUEsSUFBQyxXQUFTLFFBQVEsTUFBTSxnQ0FBZ0MsR0FBRTtBQUFDLFVBQUcsUUFBUSxVQUFVLEdBQUUsQ0FBQyxNQUFJLGFBQWEsT0FBTyxHQUFFO0FBQUMsaUJBQVMsbUJBQW1CLHFCQUFvQixXQUFVLE9BQU87QUFBQSxNQUFDO0FBQUMsZUFBTyxZQUFZLFFBQVEsVUFBVSxDQUFDLENBQUM7QUFBRSxhQUFNLE9BQU8sU0FBTyxJQUFHO0FBQUMsaUJBQU8sTUFBSTtBQUFBLE1BQU07QUFBQyxlQUFPLG1CQUFtQixPQUFLLE1BQU07QUFBQSxJQUFDLE9BQUs7QUFBQyxlQUFTLG1CQUFtQixtQkFBa0IsV0FBVSxPQUFPO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFNO0FBQUMscUJBQW1CLFNBQVE7QUFBQyxRQUFHO0FBQUMsaUJBQVcsT0FBTztBQUFFLGFBQU87QUFBQSxJQUFJLFNBQU8sT0FBTjtBQUFBLElBQWE7QUFBQyxXQUFPO0FBQUEsRUFBSztBQUFDLDBCQUF3QixTQUFRO0FBQUMsUUFBSSxTQUFPLFlBQVksV0FBVyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsRUFBRSxZQUFZO0FBQUUsV0FBTSxPQUFPLFNBQU8sSUFBRztBQUFDLGVBQU8sTUFBSTtBQUFBLElBQU07QUFBQyxXQUFNLE9BQUssYUFBYSxTQUFPLE1BQU0sSUFBRTtBQUFBLEVBQU07QUFBQyw4QkFBNEIsYUFBWTtBQUFDLFFBQUksT0FBSztBQUFLLFFBQUc7QUFBQyxhQUFLLFdBQVcsWUFBWSxJQUFJO0FBQUEsSUFBQyxTQUFPLE9BQU47QUFBYSxlQUFTLG1CQUFtQix3QkFBdUIsZUFBYyxXQUFXO0FBQUEsSUFBQztBQUFDLFVBQU0sUUFBTSxXQUFXLFNBQVMsVUFBVSxLQUFLLFlBQVksS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQUUsV0FBTyxXQUFXLGFBQWEsVUFBVSxPQUFPLENBQUMsTUFBSyxLQUFLLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyw2QkFBMkIsTUFBSyxNQUFLLGNBQWE7QUFBQyxRQUFHLGNBQWMsSUFBSSxNQUFJLElBQUc7QUFBQyxlQUFTLG1CQUFtQix5QkFBd0IsUUFBTyxJQUFJO0FBQUEsSUFBQztBQUFDLFFBQUcsY0FBYyxZQUFZLE1BQUksSUFBRztBQUFDLGVBQVMsbUJBQW1CLGlDQUFnQyxnQkFBZSxZQUFZO0FBQUEsSUFBQztBQUFDLFdBQU8sV0FBVyxhQUFhLFVBQVUsT0FBTyxDQUFDLFFBQU8sV0FBVyxJQUFJLEdBQUUsTUFBSyxZQUFZLENBQUMsQ0FBQyxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGVBQU4sY0FBMkIsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxXQUFVLFdBQVUsV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU07QUFBQSxJQUE0QztBQUFBLElBQUMsT0FBTyxRQUFPLE9BQU07QUFBQyxVQUFHO0FBQUMsbUJBQVcsS0FBSztBQUFBLE1BQUMsU0FBTyxPQUFOO0FBQWEsYUFBSyxZQUFZLE1BQU0sU0FBUSxLQUFLO0FBQUEsTUFBQztBQUFDLGFBQU8sT0FBTyxXQUFXLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLFdBQVcsV0FBVyxPQUFPLFVBQVUsRUFBRSxZQUFZLEdBQUUsRUFBRSxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGlCQUFOLGNBQTZCLE1BQUs7QUFBQSxJQUFDLFlBQVksT0FBTTtBQUFDLFlBQU0sTUFBTSxNQUFLLE1BQU0sTUFBSyxRQUFVLE1BQU0sT0FBTztBQUFFLFdBQUssUUFBTTtBQUFBLElBQUs7QUFBQSxJQUFDLGVBQWM7QUFBQyxhQUFPLEtBQUssTUFBTSxhQUFhO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxRQUFPLE9BQU07QUFBQyxhQUFPLEtBQUssTUFBTSxPQUFPLFFBQU8sS0FBSztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLGFBQU8sS0FBSyxNQUFNLE9BQU8sTUFBTTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQWMsTUFBTSxXQUFTLElBQUksT0FBTyxTQUFTO0FBQUUsZ0JBQWMsUUFBTyxRQUFPLFFBQU87QUFBQyxRQUFJLGNBQVk7QUFBSyxRQUFHLE1BQU0sUUFBUSxNQUFNLEdBQUU7QUFBQyxvQkFBWTtBQUFBLElBQU0sV0FBUyxVQUFRLE9BQU8sV0FBUyxVQUFTO0FBQUMsVUFBSSxTQUFPLENBQUM7QUFBRSxvQkFBWSxPQUFPLElBQUksV0FBTztBQUFDLGNBQU0sUUFBSyxNQUFNO0FBQVUsWUFBRyxDQUFDLE9BQUs7QUFBQyxtQkFBUyxXQUFXLHlEQUF3RCxPQUFPLE9BQU8sa0JBQWlCLEVBQUMsVUFBUyxVQUFTLE9BQVksT0FBTSxPQUFNLENBQUM7QUFBQSxRQUFDO0FBQUMsWUFBRyxPQUFPLFFBQU07QUFBQyxtQkFBUyxXQUFXLDJEQUEwRCxPQUFPLE9BQU8sa0JBQWlCLEVBQUMsVUFBUyxVQUFTLE9BQVksT0FBTSxPQUFNLENBQUM7QUFBQSxRQUFDO0FBQUMsZUFBTyxTQUFNO0FBQUssZUFBTyxPQUFPO0FBQUEsTUFBSyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsZUFBUyxtQkFBbUIsdUJBQXNCLFNBQVEsTUFBTTtBQUFBLElBQUM7QUFBQyxRQUFHLE9BQU8sV0FBUyxZQUFZLFFBQU87QUFBQyxlQUFTLG1CQUFtQiwrQkFBOEIsU0FBUSxNQUFNO0FBQUEsSUFBQztBQUFDLFFBQUksZUFBYSxJQUFJLE9BQU8sT0FBTyxRQUFRO0FBQUUsUUFBSSxnQkFBYyxJQUFJLE9BQU8sT0FBTyxRQUFRO0FBQUUsUUFBSSxjQUFZLENBQUM7QUFBRSxXQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxVQUFJLFFBQU0sWUFBWTtBQUFPLFVBQUcsTUFBTSxTQUFRO0FBQUMsWUFBSSxnQkFBYyxjQUFjO0FBQU8sY0FBTSxPQUFPLGVBQWMsS0FBSztBQUFFLFlBQUksYUFBVyxhQUFhLG9CQUFvQjtBQUFFLG9CQUFZLEtBQUssZ0JBQVk7QUFBQyxxQkFBVyxhQUFXLGFBQWE7QUFBQSxRQUFDLENBQUM7QUFBQSxNQUFDLE9BQUs7QUFBQyxjQUFNLE9BQU8sY0FBYSxLQUFLO0FBQUEsTUFBQztBQUFBLElBQUMsQ0FBQztBQUFFLGdCQUFZLFFBQVEsVUFBTTtBQUFDLFdBQUssYUFBYSxNQUFNO0FBQUEsSUFBQyxDQUFDO0FBQUUsUUFBSSxTQUFPLE9BQU8sYUFBYSxZQUFZO0FBQUUsY0FBUSxPQUFPLGFBQWEsYUFBYTtBQUFFLFdBQU87QUFBQSxFQUFNO0FBQUMsa0JBQWdCLFFBQU8sUUFBTztBQUFDLFFBQUksU0FBTyxDQUFDO0FBQUUsUUFBSSxhQUFXLE9BQU8sVUFBVSxDQUFDO0FBQUUsV0FBTyxRQUFRLFdBQU87QUFBQyxVQUFJLFFBQU07QUFBSyxVQUFHLE1BQU0sU0FBUTtBQUFDLFlBQUksU0FBTyxPQUFPLFVBQVU7QUFBRSxZQUFJLGVBQWEsV0FBVyxVQUFVLE9BQU8sU0FBUyxDQUFDO0FBQUUsWUFBRztBQUFDLGtCQUFNLE1BQU0sT0FBTyxZQUFZO0FBQUEsUUFBQyxTQUFPLE9BQU47QUFBYSxjQUFHLE1BQU0sU0FBTyxPQUFPLE9BQU8sZ0JBQWU7QUFBQyxrQkFBTTtBQUFBLFVBQUs7QUFBQyxrQkFBTTtBQUFNLGdCQUFNLFdBQVMsTUFBTTtBQUFLLGdCQUFNLE9BQUssTUFBTTtBQUFVLGdCQUFNLE9BQUssTUFBTTtBQUFBLFFBQUk7QUFBQSxNQUFDLE9BQUs7QUFBQyxZQUFHO0FBQUMsa0JBQU0sTUFBTSxPQUFPLE1BQU07QUFBQSxRQUFDLFNBQU8sT0FBTjtBQUFhLGNBQUcsTUFBTSxTQUFPLE9BQU8sT0FBTyxnQkFBZTtBQUFDLGtCQUFNO0FBQUEsVUFBSztBQUFDLGtCQUFNO0FBQU0sZ0JBQU0sV0FBUyxNQUFNO0FBQUssZ0JBQU0sT0FBSyxNQUFNO0FBQVUsZ0JBQU0sT0FBSyxNQUFNO0FBQUEsUUFBSTtBQUFBLE1BQUM7QUFBQyxVQUFHLFNBQU8sUUFBVTtBQUFDLGVBQU8sS0FBSyxLQUFLO0FBQUEsTUFBQztBQUFBLElBQUMsQ0FBQztBQUFFLFVBQU0sY0FBWSxPQUFPLE9BQU8sQ0FBQyxPQUFNLFVBQVE7QUFBQyxZQUFNLFFBQUssTUFBTTtBQUFVLFVBQUcsT0FBSztBQUFDLFlBQUcsQ0FBQyxNQUFNLFFBQU07QUFBQyxnQkFBTSxTQUFNO0FBQUEsUUFBQztBQUFDLGNBQU07QUFBQSxNQUFPO0FBQUMsYUFBTztBQUFBLElBQUssR0FBRSxDQUFDLENBQUM7QUFBRSxXQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxVQUFJLFFBQUssTUFBTTtBQUFVLFVBQUcsQ0FBQyxTQUFNLFlBQVksV0FBUSxHQUFFO0FBQUM7QUFBQSxNQUFNO0FBQUMsVUFBRyxVQUFPLFVBQVM7QUFBQyxnQkFBSztBQUFBLE1BQVM7QUFBQyxVQUFHLE9BQU8sVUFBTyxNQUFLO0FBQUM7QUFBQSxNQUFNO0FBQUMsWUFBTSxRQUFNLE9BQU87QUFBTyxVQUFHLGlCQUFpQixPQUFNO0FBQUMsZUFBTyxlQUFlLFFBQU8sT0FBSyxFQUFDLEtBQUksTUFBSTtBQUFDLGdCQUFNO0FBQUEsUUFBSyxFQUFDLENBQUM7QUFBQSxNQUFDLE9BQUs7QUFBQyxlQUFPLFNBQU07QUFBQSxNQUFLO0FBQUEsSUFBQyxDQUFDO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFPLFFBQU8sS0FBSTtBQUFDLFlBQU0sUUFBTSxPQUFPO0FBQUcsVUFBRyxpQkFBaUIsT0FBTTtBQUFDLGVBQU8sZUFBZSxRQUFPLEdBQUUsRUFBQyxLQUFJLE1BQUk7QUFBQyxnQkFBTTtBQUFBLFFBQUssRUFBQyxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxXQUFPLE9BQU8sT0FBTyxNQUFNO0FBQUEsRUFBQztBQUFDLE1BQU0sYUFBTixjQUF5QixNQUFLO0FBQUEsSUFBQyxZQUFZLE9BQU0sUUFBTyxXQUFVO0FBQUMsWUFBTSxPQUFLLE1BQU0sT0FBSyxNQUFLLFdBQVEsSUFBRSxTQUFPLE1BQUk7QUFBSSxZQUFNLFVBQVEsV0FBUyxNQUFJLE1BQU07QUFBUSxZQUFNLFNBQVEsTUFBSyxXQUFVLE9BQU87QUFBRSxXQUFLLFFBQU07QUFBTSxXQUFLLFNBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxlQUFjO0FBQUMsWUFBTSxlQUFhLEtBQUssTUFBTSxhQUFhO0FBQUUsWUFBTSxTQUFPLENBQUM7QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLEtBQUssUUFBTyxLQUFJO0FBQUMsZUFBTyxLQUFLLFlBQVk7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLE9BQU8sUUFBTyxPQUFNO0FBQUMsVUFBRyxDQUFDLE1BQU0sUUFBUSxLQUFLLEdBQUU7QUFBQyxhQUFLLFlBQVksd0JBQXVCLEtBQUs7QUFBQSxNQUFDO0FBQUMsVUFBSSxRQUFNLEtBQUs7QUFBTyxVQUFHLFVBQVEsSUFBRztBQUFDLGdCQUFNLE1BQU07QUFBTyxlQUFPLFdBQVcsTUFBTSxNQUFNO0FBQUEsTUFBQztBQUFDLGVBQVMsbUJBQW1CLE1BQU0sUUFBTyxPQUFNLGdCQUFlLE1BQUssWUFBVSxNQUFJLEtBQUssWUFBVSxHQUFHO0FBQUUsVUFBSSxTQUFPLENBQUM7QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLE1BQU0sUUFBTyxLQUFJO0FBQUMsZUFBTyxLQUFLLEtBQUssS0FBSztBQUFBLE1BQUM7QUFBQyxhQUFPLEtBQUssUUFBTyxRQUFPLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxVQUFJLFFBQU0sS0FBSztBQUFPLFVBQUcsVUFBUSxJQUFHO0FBQUMsZ0JBQU0sT0FBTyxVQUFVLEVBQUUsU0FBUztBQUFFLFlBQUcsUUFBTSxLQUFHLE9BQU8sTUFBTSxRQUFPO0FBQUMsbUJBQVMsV0FBVyw0QkFBMkIsT0FBTyxPQUFPLGdCQUFlLEVBQUMsUUFBTyxPQUFPLE1BQU0sUUFBTyxNQUFXLENBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFVBQUksU0FBTyxDQUFDO0FBQUUsZUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFNLEtBQUk7QUFBQyxlQUFPLEtBQUssSUFBSSxlQUFlLEtBQUssS0FBSyxDQUFDO0FBQUEsTUFBQztBQUFDLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxPQUFPLFFBQU8sTUFBTSxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLGVBQU4sY0FBMkIsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxRQUFPLFFBQU8sV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLGFBQU8sT0FBTyxXQUFXLFFBQU0sSUFBRSxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxRQUFPO0FBQUMsYUFBTyxPQUFPLE9BQU8sS0FBSyxNQUFLLENBQUMsT0FBTyxVQUFVLEVBQUUsT0FBTyxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLG9CQUFOLGNBQWdDLE1BQUs7QUFBQSxJQUFDLFlBQVksTUFBSyxXQUFVO0FBQUMsWUFBTSxNQUFLLE1BQUssV0FBVSxJQUFJO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU07QUFBQSxJQUFJO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLGNBQU0sU0FBUyxLQUFLO0FBQUUsVUFBSSxTQUFPLE9BQU8sV0FBVyxNQUFNLE1BQU07QUFBRSxnQkFBUSxPQUFPLFdBQVcsS0FBSztBQUFFLGFBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLE9BQU8sVUFBVSxPQUFPLFVBQVUsRUFBRSxTQUFTLEdBQUUsSUFBSTtBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUMsTUFBTSxhQUFOLGNBQXlCLGtCQUFpQjtBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxTQUFRLFNBQVM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLE9BQU8sT0FBTyxLQUFLLE1BQUssUUFBUSxNQUFNLE9BQU8sTUFBTSxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFjLE1BQU0sa0JBQU4sY0FBOEIsTUFBSztBQUFBLElBQUMsWUFBWSxNQUFLLFdBQVU7QUFBQyxVQUFJLFFBQUssVUFBUSxPQUFPLElBQUk7QUFBRSxZQUFNLE9BQUssT0FBSyxXQUFVLEtBQUs7QUFBRSxXQUFLLE9BQUs7QUFBQSxJQUFJO0FBQUEsSUFBQyxlQUFjO0FBQUMsYUFBTSxxRUFBcUUsVUFBVSxHQUFFLElBQUUsS0FBSyxPQUFLLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLFVBQUksUUFBSyxTQUFTLEtBQUs7QUFBRSxVQUFHLE1BQUssV0FBUyxLQUFLLE1BQUs7QUFBQyxhQUFLLFlBQVkseUJBQXdCLEtBQUs7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLFdBQVcsS0FBSTtBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxRQUFRLE9BQU8sVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLFlBQU4sY0FBd0IsTUFBSztBQUFBLElBQUMsWUFBWSxXQUFVO0FBQUMsWUFBTSxRQUFPLElBQUcsV0FBVSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU87QUFBQSxJQUFJO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLFVBQUcsU0FBTyxNQUFLO0FBQUMsYUFBSyxZQUFZLFlBQVcsS0FBSztBQUFBLE1BQUM7QUFBQyxhQUFPLE9BQU8sV0FBVyxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLFVBQVUsQ0FBQztBQUFFLGFBQU8sT0FBTyxPQUFPLEtBQUssTUFBSyxJQUFJO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBQyxNQUFNLGNBQVk7QUFBNkMsTUFBTSxnQkFBYyxVQUFVLEtBQUssRUFBRTtBQUFFLE1BQU0sU0FBTyxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sTUFBSSxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sTUFBSSxVQUFVLEtBQUssQ0FBQztBQUFFLE1BQU0sY0FBWSxVQUFVLEtBQUsscUJBQXFCO0FBQUUsTUFBTSxhQUFXLFVBQVUsS0FBSyxvRUFBb0U7QUFBRSxNQUFNLFdBQVM7QUFBcUUsTUFBTSxjQUFZO0FBQWlCLE1BQUksVUFBUSxPQUFPLE9BQU8sRUFBQyxXQUFVLE1BQUssYUFBd0IsYUFBWSxlQUFjLE1BQUssUUFBTyxLQUFRLEtBQVEsYUFBd0IsWUFBc0IsVUFBa0IsWUFBdUIsQ0FBQztBQUFlLE1BQU0sY0FBTixjQUEwQixNQUFLO0FBQUEsSUFBQyxZQUFZLE1BQUssUUFBTyxXQUFVO0FBQUMsWUFBTSxRQUFNLFVBQU8sUUFBTSxVQUFRLE9BQUs7QUFBRSxZQUFNLE9BQUssT0FBSyxXQUFVLEtBQUs7QUFBRSxXQUFLLE9BQUs7QUFBSyxXQUFLLFNBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxlQUFjO0FBQUMsYUFBTztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTyxPQUFNO0FBQUMsVUFBSSxJQUFFLFVBQVUsS0FBSyxLQUFLO0FBQUUsVUFBSSxlQUFhLFdBQVcsS0FBSyxPQUFPLFdBQVMsQ0FBQztBQUFFLFVBQUcsS0FBSyxRQUFPO0FBQUMsWUFBSSxTQUFPLGFBQWEsS0FBSyxLQUFLLE9BQUssSUFBRSxDQUFDO0FBQUUsWUFBRyxFQUFFLEdBQUcsTUFBTSxLQUFHLEVBQUUsR0FBRyxPQUFPLElBQUksR0FBRyxFQUFFLElBQUksYUFBYSxDQUFDLEdBQUU7QUFBQyxlQUFLLFlBQVksdUJBQXNCLEtBQUs7QUFBQSxRQUFDO0FBQUEsTUFBQyxXQUFTLEVBQUUsR0FBRyxNQUFNLEtBQUcsRUFBRSxHQUFHLGFBQWEsS0FBSyxLQUFLLE9BQUssQ0FBQyxDQUFDLEdBQUU7QUFBQyxhQUFLLFlBQVksdUJBQXNCLEtBQUs7QUFBQSxNQUFDO0FBQUMsVUFBRSxFQUFFLE9BQU8sS0FBSyxPQUFLLENBQUMsRUFBRSxLQUFLLEtBQUssT0FBSyxDQUFDO0FBQUUsVUFBRyxLQUFLLFFBQU87QUFBQyxZQUFFLEVBQUUsU0FBUyxLQUFLLE9BQUssQ0FBQyxFQUFFLE9BQU8sSUFBRSxPQUFPLFFBQVE7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLFdBQVcsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLFVBQUksUUFBTSxPQUFPLFVBQVUsRUFBRSxLQUFLLEtBQUssT0FBSyxDQUFDO0FBQUUsVUFBRyxLQUFLLFFBQU87QUFBQyxnQkFBTSxNQUFNLFNBQVMsS0FBSyxPQUFLLENBQUM7QUFBQSxNQUFDO0FBQUMsYUFBTyxPQUFPLE9BQU8sS0FBSyxNQUFLLEtBQUs7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLE1BQU0sWUFBVTtBQUE2QixNQUFNLFdBQVMsSUFBSSxPQUFPLFNBQVM7QUFBRSxNQUFJO0FBQXlCLEVBQUMsVUFBUywyQkFBeUI7QUFBQyw4QkFBeUIsYUFBVztBQUFHLDhCQUF5QixTQUFPO0FBQU0sOEJBQXlCLFNBQU87QUFBTSw4QkFBeUIsVUFBUTtBQUFPLDhCQUF5QixVQUFRO0FBQUEsRUFBTSxHQUFHLDRCQUEyQiw0QkFBeUIsQ0FBQyxFQUFFO0FBQUUsTUFBSTtBQUFnQixFQUFDLFVBQVMsa0JBQWdCO0FBQUMscUJBQWdCLHlCQUF1QjtBQUErQixxQkFBZ0IsZ0JBQWM7QUFBdUIscUJBQWdCLGFBQVc7QUFBaUIscUJBQWdCLHNCQUFvQjtBQUE0QixxQkFBZ0Isa0JBQWdCO0FBQXFCLHFCQUFnQixxQkFBbUI7QUFBbUIscUJBQWdCLGNBQVk7QUFBQSxFQUF5QixHQUFHLG1CQUFrQixtQkFBZ0IsQ0FBQyxFQUFFO0FBQUUscUJBQW1CLFFBQU8sUUFBTyxPQUFNLFFBQU8sY0FBYTtBQUFDLFdBQU8sU0FBUyxtQkFBbUIsK0JBQStCLFdBQVcsVUFBUyxTQUFRLEtBQUs7QUFBQSxFQUFDO0FBQUMsc0JBQW9CLFFBQU8sUUFBTyxPQUFNLFFBQU8sY0FBYTtBQUFDLFFBQUcsV0FBUyxnQkFBZ0IsY0FBWSxXQUFTLGdCQUFnQixxQkFBb0I7QUFBQyxVQUFJLElBQUU7QUFBRSxlQUFRLElBQUUsU0FBTyxHQUFFLElBQUUsTUFBTSxRQUFPLEtBQUk7QUFBQyxZQUFHLE1BQU0sTUFBSSxNQUFJLEdBQUU7QUFBQztBQUFBLFFBQUs7QUFBQztBQUFBLE1BQUc7QUFBQyxhQUFPO0FBQUEsSUFBQztBQUFDLFFBQUcsV0FBUyxnQkFBZ0IsU0FBUTtBQUFDLGFBQU8sTUFBTSxTQUFPLFNBQU87QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUM7QUFBQyx1QkFBcUIsUUFBTyxRQUFPLE9BQU0sUUFBTyxjQUFhO0FBQUMsUUFBRyxXQUFTLGdCQUFnQixVQUFTO0FBQUMsYUFBTyxLQUFLLFlBQVk7QUFBRSxhQUFPO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxLQUFLO0FBQUUsV0FBTyxXQUFXLFFBQU8sUUFBTyxPQUFNLFFBQU8sWUFBWTtBQUFBLEVBQUM7QUFBQyxNQUFNLGlCQUFlLE9BQU8sT0FBTyxFQUFDLE9BQU0sV0FBVSxRQUFPLFlBQVcsU0FBUSxZQUFXLENBQUM7QUFBRSw2QkFBMkIsT0FBTSxTQUFRO0FBQUMsUUFBRyxXQUFTLE1BQUs7QUFBQyxnQkFBUSxlQUFlO0FBQUEsSUFBSztBQUFDLFlBQU0sU0FBUyxLQUFLO0FBQUUsVUFBTSxTQUFPLENBQUM7QUFBRSxRQUFJLElBQUU7QUFBRSxXQUFNLElBQUUsTUFBTSxRQUFPO0FBQUMsWUFBTSxJQUFFLE1BQU07QUFBSyxVQUFHLEtBQUcsTUFBSSxHQUFFO0FBQUMsZUFBTyxLQUFLLENBQUM7QUFBRTtBQUFBLE1BQVE7QUFBQyxVQUFJLGNBQVk7QUFBSyxVQUFJLGVBQWE7QUFBSyxVQUFJLEtBQUUsU0FBTyxLQUFJO0FBQUMsc0JBQVk7QUFBRSx1QkFBYTtBQUFBLE1BQUcsV0FBVSxLQUFFLFNBQU8sS0FBSTtBQUFDLHNCQUFZO0FBQUUsdUJBQWE7QUFBQSxNQUFJLFdBQVUsS0FBRSxTQUFPLEtBQUk7QUFBQyxzQkFBWTtBQUFFLHVCQUFhO0FBQUEsTUFBSyxPQUFLO0FBQUMsWUFBSSxLQUFFLFNBQU8sS0FBSTtBQUFDLGVBQUcsUUFBUSxnQkFBZ0IscUJBQW9CLElBQUUsR0FBRSxPQUFNLE1BQU07QUFBQSxRQUFDLE9BQUs7QUFBQyxlQUFHLFFBQVEsZ0JBQWdCLFlBQVcsSUFBRSxHQUFFLE9BQU0sTUFBTTtBQUFBLFFBQUM7QUFBQztBQUFBLE1BQVE7QUFBQyxVQUFHLElBQUUsSUFBRSxlQUFhLE1BQU0sUUFBTztBQUFDLGFBQUcsUUFBUSxnQkFBZ0IsU0FBUSxJQUFFLEdBQUUsT0FBTSxNQUFNO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBSSxNQUFJLElBQUcsTUFBRyxJQUFFLGNBQVksS0FBRztBQUFFLGVBQVEsSUFBRSxHQUFFLElBQUUsYUFBWSxLQUFJO0FBQUMsWUFBSSxXQUFTLE1BQU07QUFBRyxZQUFJLFlBQVMsUUFBTSxLQUFJO0FBQUMsZUFBRyxRQUFRLGdCQUFnQixrQkFBaUIsR0FBRSxPQUFNLE1BQU07QUFBRSxnQkFBSTtBQUFLO0FBQUEsUUFBSztBQUFDLGNBQUksT0FBSyxJQUFFLFdBQVM7QUFBRztBQUFBLE1BQUc7QUFBQyxVQUFHLFFBQU0sTUFBSztBQUFDO0FBQUEsTUFBUTtBQUFDLFVBQUcsTUFBSSxTQUFRO0FBQUMsYUFBRyxRQUFRLGdCQUFnQixjQUFhLElBQUUsSUFBRSxhQUFZLE9BQU0sUUFBTyxHQUFHO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBRyxPQUFLLFNBQU8sT0FBSyxPQUFNO0FBQUMsYUFBRyxRQUFRLGdCQUFnQixpQkFBZ0IsSUFBRSxJQUFFLGFBQVksT0FBTSxRQUFPLEdBQUc7QUFBRTtBQUFBLE1BQVE7QUFBQyxVQUFHLE9BQUssY0FBYTtBQUFDLGFBQUcsUUFBUSxnQkFBZ0IsVUFBUyxJQUFFLElBQUUsYUFBWSxPQUFNLFFBQU8sR0FBRztBQUFFO0FBQUEsTUFBUTtBQUFDLGFBQU8sS0FBSyxHQUFHO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFNO0FBQUMsdUJBQXFCLEtBQUksT0FBSyx5QkFBeUIsU0FBUTtBQUFDLFFBQUcsUUFBTSx5QkFBeUIsU0FBUTtBQUFDLGVBQVMsZUFBZTtBQUFFLFlBQUksSUFBSSxVQUFVLElBQUk7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPLENBQUM7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsWUFBTSxJQUFFLElBQUksV0FBVyxDQUFDO0FBQUUsVUFBRyxJQUFFLEtBQUk7QUFBQyxlQUFPLEtBQUssQ0FBQztBQUFBLE1BQUMsV0FBUyxJQUFFLE1BQUs7QUFBQyxlQUFPLEtBQUssS0FBRyxJQUFFLEdBQUc7QUFBRSxlQUFPLEtBQUssSUFBRSxLQUFHLEdBQUc7QUFBQSxNQUFDLFdBQVUsS0FBRSxVQUFRLE9BQU07QUFBQztBQUFJLGNBQU0sS0FBRyxJQUFJLFdBQVcsQ0FBQztBQUFFLFlBQUcsS0FBRyxJQUFJLFVBQVMsTUFBRyxXQUFTLE9BQU07QUFBQyxnQkFBTSxJQUFJLE1BQU0sc0JBQXNCO0FBQUEsUUFBQztBQUFDLGNBQU0sT0FBSyxRQUFRLE1BQUUsU0FBTyxNQUFLLE1BQUc7QUFBTSxlQUFPLEtBQUssUUFBTSxLQUFHLEdBQUc7QUFBRSxlQUFPLEtBQUssUUFBTSxLQUFHLEtBQUcsR0FBRztBQUFFLGVBQU8sS0FBSyxRQUFNLElBQUUsS0FBRyxHQUFHO0FBQUUsZUFBTyxLQUFLLE9BQUssS0FBRyxHQUFHO0FBQUEsTUFBQyxPQUFLO0FBQUMsZUFBTyxLQUFLLEtBQUcsS0FBRyxHQUFHO0FBQUUsZUFBTyxLQUFLLEtBQUcsSUFBRSxLQUFHLEdBQUc7QUFBRSxlQUFPLEtBQUssSUFBRSxLQUFHLEdBQUc7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sU0FBUyxNQUFNO0FBQUEsRUFBQztBQUFDLHNCQUFvQixPQUFNO0FBQUMsVUFBTSxPQUFJLFNBQU8sTUFBTSxTQUFTLEVBQUU7QUFBRSxXQUFNLFFBQU0sS0FBSSxVQUFVLEtBQUksU0FBTyxDQUFDO0FBQUEsRUFBQztBQUFDLGdDQUE4QixPQUFNLFNBQVE7QUFBQyxXQUFNLE1BQUksa0JBQWtCLE9BQU0sT0FBTyxFQUFFLElBQUksZUFBVztBQUFDLFVBQUcsWUFBVSxLQUFJO0FBQUMsZ0JBQU87QUFBQSxlQUFnQjtBQUFFLG1CQUFNO0FBQUEsZUFBVztBQUFFLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUEsZUFBVztBQUFHLG1CQUFNO0FBQUE7QUFBTyxZQUFHLGFBQVcsTUFBSSxZQUFVLEtBQUk7QUFBQyxpQkFBTyxPQUFPLGFBQWEsU0FBUztBQUFBLFFBQUM7QUFBQSxNQUFDO0FBQUMsVUFBRyxhQUFXLE9BQU07QUFBQyxlQUFPLFdBQVcsU0FBUztBQUFBLE1BQUM7QUFBQyxtQkFBVztBQUFNLGFBQU8sV0FBWSxjQUFXLEtBQUcsUUFBTSxLQUFLLElBQUUsV0FBWSxhQUFVLFFBQU0sS0FBSztBQUFBLElBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFFO0FBQUEsRUFBRztBQUFDLHlCQUF1QixZQUFXO0FBQUMsV0FBTyxXQUFXLElBQUksZUFBVztBQUFDLFVBQUcsYUFBVyxPQUFNO0FBQUMsZUFBTyxPQUFPLGFBQWEsU0FBUztBQUFBLE1BQUM7QUFBQyxtQkFBVztBQUFNLGFBQU8sT0FBTyxhQUFjLGNBQVcsS0FBRyxRQUFNLE9BQU8sYUFBVSxRQUFNLEtBQUs7QUFBQSxJQUFDLENBQUMsRUFBRSxLQUFLLEVBQUU7QUFBQSxFQUFDO0FBQUMsd0JBQXNCLE9BQU0sU0FBUTtBQUFDLFdBQU8sY0FBYyxrQkFBa0IsT0FBTSxPQUFPLENBQUM7QUFBQSxFQUFDO0FBQUMsNEJBQTBCLEtBQUksT0FBSyx5QkFBeUIsU0FBUTtBQUFDLFdBQU8sa0JBQWtCLFlBQVksS0FBSSxJQUFJLENBQUM7QUFBQSxFQUFDO0FBQWMsK0JBQTZCLE1BQUs7QUFBQyxVQUFNLFFBQU0sWUFBWSxJQUFJO0FBQUUsUUFBRyxNQUFNLFNBQU8sSUFBRztBQUFDLFlBQU0sSUFBSSxNQUFNLDJDQUEyQztBQUFBLElBQUM7QUFBQyxXQUFPLFFBQVEsT0FBTyxDQUFDLE9BQU0sUUFBUSxDQUFDLEVBQUUsTUFBTSxHQUFFLEVBQUUsQ0FBQztBQUFBLEVBQUM7QUFBQyw4QkFBNEIsT0FBTTtBQUFDLFVBQU0sUUFBSyxTQUFTLEtBQUs7QUFBRSxRQUFHLE1BQUssV0FBUyxJQUFHO0FBQUMsWUFBTSxJQUFJLE1BQU0scUNBQXFDO0FBQUEsSUFBQztBQUFDLFFBQUcsTUFBSyxRQUFNLEdBQUU7QUFBQyxZQUFNLElBQUksTUFBTSw2Q0FBNkM7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPO0FBQUcsV0FBTSxNQUFLLFNBQU8sT0FBSyxHQUFFO0FBQUM7QUFBQSxJQUFRO0FBQUMsV0FBTyxhQUFhLE1BQUssTUFBTSxHQUFFLE1BQU0sQ0FBQztBQUFBLEVBQUM7QUFBYyxrQkFBZ0IsT0FBSztBQUFDLFFBQUcsTUFBSyxTQUFPLE1BQUksR0FBRTtBQUFDLFlBQU0sSUFBSSxNQUFNLFVBQVU7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFPLENBQUM7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLE1BQUssUUFBTyxLQUFHLEdBQUU7QUFBQyxhQUFPLEtBQUssU0FBUyxNQUFLLFVBQVUsR0FBRSxJQUFFLENBQUMsR0FBRSxFQUFFLENBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQU07QUFBQyx1QkFBcUIsT0FBSyxNQUFLO0FBQUMsUUFBRyxDQUFDLE1BQUs7QUFBQyxhQUFLLFNBQVMsT0FBTTtBQUFDLGVBQU0sQ0FBQyxTQUFTLE9BQU0sRUFBRSxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxRQUFJLEtBQUc7QUFBRSxRQUFJLFNBQU8sQ0FBQztBQUFFLFVBQUssTUFBTSxHQUFHLEVBQUUsUUFBUSxVQUFNO0FBQUMsVUFBSSxRQUFNLEtBQUssTUFBTSxHQUFHO0FBQUUsWUFBSSxTQUFTLE1BQU0sSUFBRyxFQUFFO0FBQUUsYUFBTyxNQUFJLEtBQUssTUFBTSxFQUFFO0FBQUEsSUFBQyxDQUFDO0FBQUUsV0FBTztBQUFBLEVBQU07QUFBQyw0QkFBMEIsT0FBSztBQUFDLFFBQUksS0FBRztBQUFFLFdBQU8sTUFBSyxNQUFNLEdBQUcsRUFBRSxJQUFJLE9BQUc7QUFBQyxVQUFJLFFBQU0sRUFBRSxNQUFNLEdBQUc7QUFBRSxVQUFHLE1BQU0sV0FBUyxHQUFFO0FBQUMsY0FBTSxLQUFHO0FBQUEsTUFBRyxXQUFTLE1BQU0sT0FBSyxJQUFHO0FBQUMsY0FBTSxLQUFHO0FBQUEsTUFBRztBQUFDLFVBQUksS0FBRyxLQUFHLFNBQVMsTUFBTSxJQUFHLEVBQUU7QUFBRSxXQUFHLFNBQVMsTUFBTSxJQUFHLEVBQUU7QUFBRSxhQUFNLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRTtBQUFBLElBQUMsQ0FBQztBQUFBLEVBQUM7QUFBQyxvQkFBa0IsT0FBTSxRQUFPO0FBQUMsUUFBSSxLQUFHO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFPLFFBQU8sS0FBSTtBQUFDLFVBQUksU0FBTSxPQUFPO0FBQUcsWUFBSSxPQUFNO0FBQUUsVUFBRyxTQUFPLE1BQUksU0FBTyxLQUFHLE9BQU0sS0FBSSxTQUFNLE1BQUssUUFBTSxLQUFHLE9BQUssR0FBRTtBQUFDLFlBQUcsT0FBTSxLQUFHLE9BQU0sRUFBRSxRQUFRLFFBQU0sRUFBRSxNQUFJLElBQUc7QUFBQztBQUFBLFFBQVE7QUFBQyxlQUFPO0FBQUEsTUFBSztBQUFBLElBQUM7QUFBQyxXQUFPO0FBQUEsRUFBSTtBQUFDLE1BQU0sbUJBQWlCLGlCQUFpQiw4N0NBQTg3QztBQUFFLE1BQU0sa0JBQWdCLHNEQUFzRCxNQUFNLEdBQUcsRUFBRSxJQUFJLE9BQUcsU0FBUyxHQUFFLEVBQUUsQ0FBQztBQUFFLE1BQU0sbUJBQWlCLENBQUMsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsQ0FBQyxHQUFFLEdBQUUsQ0FBQyxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRyxJQUFHLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsQ0FBQyxFQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUMsRUFBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsS0FBSSxHQUFFLEdBQUUsR0FBRSxNQUFLLEdBQUUsRUFBQyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEtBQUksR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxNQUFLLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsS0FBSSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLE1BQUssR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLEdBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLENBQUMsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxHQUFFLEdBQUUsRUFBQyxHQUFFLElBQUcsR0FBRSxTQUFRLEdBQUUsR0FBRSxHQUFFLEVBQUMsR0FBRSxJQUFHLEdBQUUsU0FBUSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLFNBQVEsR0FBRSxDQUFDLEVBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFFLE1BQU0sb0JBQWtCLFlBQVksdWZBQXVmO0FBQUUsTUFBTSxvQkFBa0IsWUFBWSx3ZEFBd2Q7QUFBRSxNQUFNLG9CQUFrQixZQUFZLDAzREFBeTNELE1BQU07QUFBRSxNQUFNLGlCQUFlLGlCQUFpQix5TEFBeUw7QUFBRSxtQkFBaUIsUUFBTztBQUFDLFdBQU8sT0FBTyxPQUFPLENBQUMsT0FBTSxVQUFRO0FBQUMsWUFBTSxRQUFRLFlBQU87QUFBQyxjQUFNLEtBQUssTUFBSztBQUFBLE1BQUMsQ0FBQztBQUFFLGFBQU87QUFBQSxJQUFLLEdBQUUsQ0FBQyxDQUFDO0FBQUEsRUFBQztBQUFDLDRCQUEwQixXQUFVO0FBQUMsV0FBTSxDQUFDLENBQUMsU0FBUyxXQUFVLGdCQUFnQjtBQUFBLEVBQUM7QUFBQyw0QkFBMEIsV0FBVTtBQUFDLFFBQUksU0FBTSxTQUFTLFdBQVUsZ0JBQWdCO0FBQUUsUUFBRyxRQUFNO0FBQUMsYUFBTSxDQUFDLFlBQVUsT0FBTSxDQUFDO0FBQUEsSUFBQztBQUFDLFFBQUksU0FBTSxrQkFBa0I7QUFBVyxRQUFHLFFBQU07QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUksUUFBTSxrQkFBa0I7QUFBVyxRQUFHLE9BQU07QUFBQyxhQUFNLENBQUMsWUFBVSxNQUFNLEVBQUU7QUFBQSxJQUFDO0FBQUMsUUFBSSxVQUFRLGtCQUFrQjtBQUFXLFFBQUcsU0FBUTtBQUFDLGFBQU87QUFBQSxJQUFPO0FBQUMsV0FBTztBQUFBLEVBQUk7QUFBQywyQkFBeUIsV0FBVTtBQUFDLFdBQU0sQ0FBQyxDQUFDLFNBQVMsV0FBVSxjQUFjO0FBQUEsRUFBQztBQUFDLG9CQUFrQixPQUFNO0FBQUMsUUFBRyxNQUFNLE1BQU0sZUFBZSxLQUFHLE1BQU0sVUFBUSxJQUFHO0FBQUMsYUFBTyxNQUFNLFlBQVk7QUFBQSxJQUFDO0FBQUMsUUFBSSxTQUFNLGlCQUFpQixLQUFLO0FBQUUsYUFBTSxRQUFRLE9BQU0sSUFBSSxVQUFNO0FBQUMsVUFBRyxnQkFBZ0IsUUFBUSxJQUFJLEtBQUcsR0FBRTtBQUFDLGVBQU0sQ0FBQztBQUFBLE1BQUM7QUFBQyxVQUFHLFFBQU0sU0FBTyxRQUFNLE9BQU07QUFBQyxlQUFNLENBQUM7QUFBQSxNQUFDO0FBQUMsVUFBSSxlQUFhLGlCQUFpQixJQUFJO0FBQUUsVUFBRyxjQUFhO0FBQUMsZUFBTztBQUFBLE1BQVk7QUFBQyxhQUFNLENBQUMsSUFBSTtBQUFBLElBQUMsQ0FBQyxDQUFDO0FBQUUsYUFBTSxpQkFBaUIsY0FBYyxNQUFLLEdBQUUseUJBQXlCLElBQUk7QUFBRSxXQUFNLFFBQVEsVUFBTTtBQUFDLFVBQUcsZ0JBQWdCLElBQUksR0FBRTtBQUFDLGNBQU0sSUFBSSxNQUFNLGdDQUFnQztBQUFBLE1BQUM7QUFBQSxJQUFDLENBQUM7QUFBRSxXQUFNLFFBQVEsVUFBTTtBQUFDLFVBQUcsaUJBQWlCLElBQUksR0FBRTtBQUFDLGNBQU0sSUFBSSxNQUFNLGdDQUFnQztBQUFBLE1BQUM7QUFBQSxJQUFDLENBQUM7QUFBRSxRQUFJLFFBQUssY0FBYyxNQUFLO0FBQUUsUUFBRyxNQUFLLFVBQVUsR0FBRSxDQUFDLE1BQUksT0FBSyxNQUFLLFVBQVUsR0FBRSxDQUFDLE1BQUksUUFBTSxNQUFLLFVBQVUsTUFBSyxTQUFPLENBQUMsTUFBSSxLQUFJO0FBQUMsWUFBTSxJQUFJLE1BQU0sZ0JBQWdCO0FBQUEsSUFBQztBQUFDLFFBQUcsTUFBSyxTQUFPLElBQUc7QUFBQyxZQUFNLElBQUksTUFBTSxVQUFVO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFJO0FBQTJCLE1BQU0sY0FBTixjQUEwQixrQkFBaUI7QUFBQSxJQUFDLFlBQVksV0FBVTtBQUFDLFlBQU0sVUFBUyxTQUFTO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBYztBQUFDLGFBQU07QUFBQSxJQUFFO0FBQUEsSUFBQyxPQUFPLFFBQU8sT0FBTTtBQUFDLGFBQU8sTUFBTSxPQUFPLFFBQU8sWUFBWSxLQUFLLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLGFBQWEsTUFBTSxPQUFPLE1BQU0sQ0FBQztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQWMsTUFBTSxhQUFOLGNBQXlCLE1BQUs7QUFBQSxJQUFDLFlBQVksUUFBTyxXQUFVO0FBQUMsVUFBSSxVQUFRO0FBQU0sWUFBTSxRQUFNLENBQUM7QUFBRSxhQUFPLFFBQVEsV0FBTztBQUFDLFlBQUcsTUFBTSxTQUFRO0FBQUMsb0JBQVE7QUFBQSxRQUFJO0FBQUMsY0FBTSxLQUFLLE1BQU0sSUFBSTtBQUFBLE1BQUMsQ0FBQztBQUFFLFlBQU0sT0FBSyxXQUFTLE1BQU0sS0FBSyxHQUFHLElBQUU7QUFBSSxZQUFNLFNBQVEsTUFBSyxXQUFVLE9BQU87QUFBRSxXQUFLLFNBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxlQUFjO0FBQUMsWUFBTSxTQUFPLENBQUM7QUFBRSxXQUFLLE9BQU8sUUFBUSxXQUFPO0FBQUMsZUFBTyxLQUFLLE1BQU0sYUFBYSxDQUFDO0FBQUEsTUFBQyxDQUFDO0FBQUUsWUFBTSxjQUFZLEtBQUssT0FBTyxPQUFPLENBQUMsT0FBTSxVQUFRO0FBQUMsY0FBTSxRQUFLLE1BQU07QUFBVSxZQUFHLE9BQUs7QUFBQyxjQUFHLENBQUMsTUFBTSxRQUFNO0FBQUMsa0JBQU0sU0FBTTtBQUFBLFVBQUM7QUFBQyxnQkFBTTtBQUFBLFFBQU87QUFBQyxlQUFPO0FBQUEsTUFBSyxHQUFFLENBQUMsQ0FBQztBQUFFLFdBQUssT0FBTyxRQUFRLENBQUMsT0FBTSxXQUFRO0FBQUMsWUFBSSxRQUFLLE1BQU07QUFBVSxZQUFHLENBQUMsU0FBTSxZQUFZLFdBQVEsR0FBRTtBQUFDO0FBQUEsUUFBTTtBQUFDLFlBQUcsVUFBTyxVQUFTO0FBQUMsa0JBQUs7QUFBQSxRQUFTO0FBQUMsWUFBRyxPQUFPLFVBQU8sTUFBSztBQUFDO0FBQUEsUUFBTTtBQUFDLGVBQU8sU0FBTSxPQUFPO0FBQUEsTUFBTSxDQUFDO0FBQUUsYUFBTyxPQUFPLE9BQU8sTUFBTTtBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTyxPQUFNO0FBQUMsYUFBTyxLQUFLLFFBQU8sS0FBSyxRQUFPLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFFBQU87QUFBQyxhQUFPLE9BQU8sT0FBTyxLQUFLLE1BQUssT0FBTyxRQUFPLEtBQUssTUFBTSxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBYyxNQUFNLFdBQVMsSUFBSSxPQUFPLFNBQVM7QUFBRSxNQUFNLGlCQUFlLElBQUksT0FBTyxpQkFBaUI7QUFBRSxNQUFNLGtCQUFnQixJQUFJLE9BQU8sbUJBQW1CO0FBQUUsTUFBTSxXQUFOLE1BQWM7QUFBQSxJQUFDLFlBQVksWUFBVztBQUFDLGVBQVMsU0FBUyxZQUFXLFFBQVE7QUFBRSxxQkFBZSxNQUFLLGNBQWEsY0FBWSxJQUFJO0FBQUEsSUFBQztBQUFBLElBQUMsVUFBVSxPQUFNO0FBQUMsY0FBTyxNQUFNO0FBQUEsYUFBYztBQUFVLGlCQUFPLElBQUksYUFBYSxNQUFNLElBQUk7QUFBQSxhQUFNO0FBQU8saUJBQU8sSUFBSSxhQUFhLE1BQU0sSUFBSTtBQUFBLGFBQU07QUFBUyxpQkFBTyxJQUFJLFlBQVksTUFBTSxJQUFJO0FBQUEsYUFBTTtBQUFRLGlCQUFPLElBQUksV0FBVyxNQUFNLElBQUk7QUFBQSxhQUFNO0FBQVEsaUJBQU8sSUFBSSxXQUFXLEtBQUssVUFBVSxNQUFNLGFBQWEsR0FBRSxNQUFNLGFBQVksTUFBTSxJQUFJO0FBQUEsYUFBTTtBQUFRLGlCQUFPLElBQUksV0FBWSxPQUFNLGNBQVksQ0FBQyxHQUFHLElBQUksZUFBVztBQUFDLG1CQUFPLEtBQUssVUFBVSxTQUFTO0FBQUEsVUFBQyxDQUFDLEdBQUUsTUFBTSxJQUFJO0FBQUEsYUFBTTtBQUFHLGlCQUFPLElBQUksVUFBVSxNQUFNLElBQUk7QUFBQTtBQUFFLFVBQUksUUFBTSxNQUFNLEtBQUssTUFBTSxlQUFlO0FBQUUsVUFBRyxPQUFNO0FBQUMsWUFBSSxPQUFLLFNBQVMsTUFBTSxNQUFJLEtBQUs7QUFBRSxZQUFHLFNBQU8sS0FBRyxPQUFLLE9BQUssT0FBSyxNQUFJLEdBQUU7QUFBQyxtQkFBUyxtQkFBbUIsYUFBVyxNQUFNLEtBQUcsZUFBYyxTQUFRLEtBQUs7QUFBQSxRQUFDO0FBQUMsZUFBTyxJQUFJLFlBQVksT0FBSyxHQUFFLE1BQU0sT0FBSyxPQUFNLE1BQU0sSUFBSTtBQUFBLE1BQUM7QUFBQyxjQUFNLE1BQU0sS0FBSyxNQUFNLGNBQWM7QUFBRSxVQUFHLE9BQU07QUFBQyxZQUFJLE9BQUssU0FBUyxNQUFNLEVBQUU7QUFBRSxZQUFHLFNBQU8sS0FBRyxPQUFLLElBQUc7QUFBQyxtQkFBUyxtQkFBbUIsd0JBQXVCLFNBQVEsS0FBSztBQUFBLFFBQUM7QUFBQyxlQUFPLElBQUksZ0JBQWdCLE1BQUssTUFBTSxJQUFJO0FBQUEsTUFBQztBQUFDLGFBQU8sU0FBUyxtQkFBbUIsZ0JBQWUsUUFBTyxNQUFNLElBQUk7QUFBQSxJQUFDO0FBQUEsSUFBQyxlQUFjO0FBQUMsYUFBTztBQUFBLElBQUU7QUFBQSxJQUFDLFdBQVcsT0FBSyxZQUFXO0FBQUMsYUFBTyxJQUFJLE9BQU8sT0FBSyxLQUFLLGFBQWEsR0FBRSxLQUFLLFlBQVcsVUFBVTtBQUFBLElBQUM7QUFBQSxJQUFDLGFBQVk7QUFBQyxhQUFPLElBQUksT0FBTyxLQUFLLGFBQWEsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLGdCQUFnQixPQUFNO0FBQUMsWUFBTSxTQUFPLE1BQU0sSUFBSSxVQUFNLEtBQUssVUFBVSxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUM7QUFBRSxZQUFNLFFBQU0sSUFBSSxXQUFXLFFBQU8sR0FBRztBQUFFLGFBQU8sTUFBTSxhQUFhO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxPQUFNLFFBQU87QUFBQyxVQUFHLE1BQU0sV0FBUyxPQUFPLFFBQU87QUFBQyxpQkFBUyxXQUFXLGdDQUErQixPQUFPLE9BQU8sa0JBQWlCLEVBQUMsT0FBTSxFQUFDLE9BQU0sTUFBTSxRQUFPLFFBQU8sT0FBTyxPQUFNLEdBQUUsT0FBTSxFQUFDLE9BQVksT0FBYSxFQUFDLENBQUM7QUFBQSxNQUFDO0FBQUMsWUFBTSxTQUFPLE1BQU0sSUFBSSxVQUFNLEtBQUssVUFBVSxVQUFVLEtBQUssSUFBSSxDQUFDLENBQUM7QUFBRSxZQUFNLFFBQU0sSUFBSSxXQUFXLFFBQU8sR0FBRztBQUFFLFlBQU0sU0FBTyxLQUFLLFdBQVc7QUFBRSxZQUFNLE9BQU8sUUFBTyxNQUFNO0FBQUUsYUFBTyxPQUFPO0FBQUEsSUFBSTtBQUFBLElBQUMsT0FBTyxPQUFNLE9BQUssT0FBTTtBQUFDLFlBQU0sU0FBTyxNQUFNLElBQUksVUFBTSxLQUFLLFVBQVUsVUFBVSxLQUFLLElBQUksQ0FBQyxDQUFDO0FBQUUsWUFBTSxRQUFNLElBQUksV0FBVyxRQUFPLEdBQUc7QUFBRSxhQUFPLE1BQU0sT0FBTyxLQUFLLFdBQVcsU0FBUyxLQUFJLEdBQUUsS0FBSyxDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBQyxNQUFNLGtCQUFnQixJQUFJO0FBQVMsY0FBWSxNQUFLO0FBQUMsV0FBTyxVQUFVLFlBQVksSUFBSSxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQU0sWUFBVTtBQUFhLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLE1BQU0sUUFBTSxJQUFJLFdBQVcsRUFBRTtBQUFFLFFBQU0sS0FBSyxDQUFDO0FBQUUsTUFBTSxZQUFVLElBQUksT0FBTyxxQkFBcUI7QUFBRSx1QkFBcUIsT0FBSztBQUFDLFFBQUc7QUFBQyxZQUFNLFFBQU0sTUFBSyxNQUFNLEdBQUc7QUFBRSxlQUFRLElBQUUsR0FBRSxJQUFFLE1BQU0sUUFBTyxLQUFJO0FBQUMsWUFBRyxTQUFTLE1BQU0sRUFBRSxFQUFFLFdBQVMsR0FBRTtBQUFDLGdCQUFNLElBQUksTUFBTSxPQUFPO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxhQUFPO0FBQUEsSUFBSSxTQUFPLE9BQU47QUFBQSxJQUFhO0FBQUMsV0FBTztBQUFBLEVBQUs7QUFBQyxvQkFBa0IsT0FBSztBQUFDLFFBQUcsT0FBTyxVQUFPLFVBQVM7QUFBQyxlQUFTLG1CQUFtQix1QkFBcUIsT0FBTyxLQUFJLEdBQUUsUUFBTyxLQUFJO0FBQUEsSUFBQztBQUFDLFFBQUksU0FBTztBQUFNLFdBQU0sTUFBSyxRQUFPO0FBQUMsWUFBTSxZQUFVLE1BQUssTUFBTSxTQUFTO0FBQUUsWUFBTSxRQUFNLFlBQVksU0FBUyxVQUFVLEVBQUUsQ0FBQztBQUFFLGVBQU8sVUFBVSxPQUFPLENBQUMsUUFBTyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFBRSxjQUFLLFVBQVUsTUFBSTtBQUFBLElBQUU7QUFBQyxXQUFPLFFBQVEsTUFBTTtBQUFBLEVBQUM7QUFBQyxNQUFNLGdCQUFjO0FBQThCLHVCQUFxQixTQUFRO0FBQUMsUUFBRyxPQUFPLFlBQVUsVUFBUztBQUFDLGdCQUFRLFlBQVksT0FBTztBQUFBLElBQUM7QUFBQyxXQUFPLFVBQVUsT0FBTyxDQUFDLFlBQVksYUFBYSxHQUFFLFlBQVksT0FBTyxRQUFRLE1BQU0sQ0FBQyxHQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQUksY0FBWSxVQUFRLE9BQU8sYUFBVyxTQUFTLFNBQVEsWUFBVyxHQUFFLFdBQVU7QUFBQyxtQkFBZSxPQUFNO0FBQUMsYUFBTyxpQkFBaUIsSUFBRSxRQUFNLElBQUksRUFBRSxTQUFTLFNBQVE7QUFBQyxnQkFBUSxLQUFLO0FBQUEsTUFBQyxDQUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sSUFBSSxNQUFJLEtBQUUsVUFBVSxTQUFTLFNBQVEsUUFBTztBQUFDLHlCQUFtQixPQUFNO0FBQUMsWUFBRztBQUFDLGVBQUssVUFBVSxLQUFLLEtBQUssQ0FBQztBQUFBLFFBQUMsU0FBTyxHQUFOO0FBQVMsaUJBQU8sQ0FBQztBQUFBLFFBQUM7QUFBQSxNQUFDO0FBQUMsd0JBQWtCLE9BQU07QUFBQyxZQUFHO0FBQUMsZUFBSyxVQUFVLFNBQVMsS0FBSyxDQUFDO0FBQUEsUUFBQyxTQUFPLEdBQU47QUFBUyxpQkFBTyxDQUFDO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxvQkFBYyxRQUFPO0FBQUMsZUFBTyxPQUFLLFFBQVEsT0FBTyxLQUFLLElBQUUsTUFBTSxPQUFPLEtBQUssRUFBRSxLQUFLLFdBQVUsUUFBUTtBQUFBLE1BQUM7QUFBQyxXQUFNLGFBQVUsVUFBVSxNQUFNLFNBQVEsY0FBWSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7QUFBQSxJQUFDLENBQUM7QUFBQSxFQUFDO0FBQUUsTUFBTSxXQUFTLElBQUksT0FBTyxTQUFTO0FBQUUsTUFBTSxVQUFRLElBQUksV0FBVyxFQUFFO0FBQUUsVUFBUSxLQUFLLENBQUM7QUFBRSxNQUFNLGdCQUFjLFVBQVUsS0FBSyxFQUFFO0FBQUUsTUFBTSxTQUFPLFVBQVUsS0FBSyxDQUFDO0FBQUUsTUFBTSxRQUFNLFVBQVUsS0FBSyxDQUFDO0FBQUUsTUFBTSxlQUFhLFVBQVUsS0FBSyxvRUFBb0U7QUFBRSx1QkFBcUIsT0FBTTtBQUFDLFVBQU0sUUFBTSxTQUFTLEtBQUs7QUFBRSxVQUFNLFlBQVUsTUFBTSxTQUFPO0FBQUcsUUFBRyxXQUFVO0FBQUMsYUFBTyxVQUFVLENBQUMsT0FBTSxRQUFRLE1BQU0sU0FBUyxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTyxRQUFRLEtBQUs7QUFBQSxFQUFDO0FBQUMsTUFBTSxVQUFRLFdBQVcsTUFBTSxZQUFZLEdBQUUsRUFBRTtBQUFFLE1BQU0sV0FBUyxXQUFXLE9BQU8sWUFBWSxHQUFFLEVBQUU7QUFBRSxNQUFNLG1CQUFpQixFQUFDLE1BQUssVUFBUyxTQUFRLFVBQVMsU0FBUSxXQUFVLG1CQUFrQixXQUFVLE1BQUssVUFBUztBQUFFLE1BQU0sbUJBQWlCLENBQUMsUUFBTyxXQUFVLFdBQVUscUJBQW9CLE1BQU07QUFBRSx1QkFBcUIsTUFBSTtBQUFDLFdBQU8sU0FBUyxPQUFNO0FBQUMsVUFBRyxPQUFPLFVBQVEsVUFBUztBQUFDLGlCQUFTLG1CQUFtQiw0QkFBNEIsS0FBSyxVQUFVLElBQUcsS0FBSSxVQUFVLFFBQU0sS0FBSztBQUFBLE1BQUM7QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFBLEVBQUM7QUFBQyxNQUFNLGVBQWEsRUFBQyxNQUFLLFlBQVksTUFBTSxHQUFFLFNBQVEsWUFBWSxTQUFTLEdBQUUsU0FBUSxTQUFTLE9BQU07QUFBQyxRQUFHO0FBQUMsYUFBTyxVQUFVLEtBQUssS0FBSyxFQUFFLFNBQVM7QUFBQSxJQUFDLFNBQU8sT0FBTjtBQUFBLElBQWE7QUFBQyxXQUFPLFNBQVMsbUJBQW1CLHNDQUFxQyxrQkFBaUIsS0FBSztBQUFBLEVBQUMsR0FBRSxtQkFBa0IsU0FBUyxPQUFNO0FBQUMsUUFBRztBQUFDLGFBQU8sV0FBVyxLQUFLLEVBQUUsWUFBWTtBQUFBLElBQUMsU0FBTyxPQUFOO0FBQUEsSUFBYTtBQUFDLFdBQU8sU0FBUyxtQkFBbUIsNENBQTJDLDRCQUEyQixLQUFLO0FBQUEsRUFBQyxHQUFFLE1BQUssU0FBUyxPQUFNO0FBQUMsUUFBRztBQUFDLFlBQU0sUUFBTSxTQUFTLEtBQUs7QUFBRSxVQUFHLE1BQU0sV0FBUyxJQUFHO0FBQUMsY0FBTSxJQUFJLE1BQU0sWUFBWTtBQUFBLE1BQUM7QUFBQyxhQUFPLFFBQVEsS0FBSztBQUFBLElBQUMsU0FBTyxPQUFOO0FBQUEsSUFBYTtBQUFDLFdBQU8sU0FBUyxtQkFBbUIsK0JBQThCLGVBQWMsS0FBSztBQUFBLEVBQUMsRUFBQztBQUFFLDBCQUF3QixNQUFLO0FBQUM7QUFBQyxZQUFNLFFBQU0sS0FBSyxNQUFNLGdCQUFnQjtBQUFFLFVBQUcsT0FBTTtBQUFDLGNBQU0sU0FBTyxNQUFNLE9BQUs7QUFBRyxjQUFNLFFBQU0sU0FBUyxNQUFNLE1BQUksS0FBSztBQUFFLFlBQUcsUUFBTSxNQUFJLEtBQUcsUUFBTSxPQUFLLE1BQU0sTUFBSSxNQUFNLE9BQUssT0FBTyxLQUFLLEdBQUU7QUFBQyxtQkFBUyxtQkFBbUIseUJBQXdCLFFBQU8sSUFBSTtBQUFBLFFBQUM7QUFBQyxjQUFNLGNBQVksYUFBYSxLQUFLLFNBQU8sUUFBTSxJQUFFLEtBQUs7QUFBRSxjQUFNLGNBQVksU0FBTyxZQUFZLElBQUksS0FBSyxFQUFFLElBQUksYUFBYSxJQUFFO0FBQU8sZUFBTyxTQUFTLE9BQU07QUFBQyxnQkFBTSxJQUFFLFVBQVUsS0FBSyxLQUFLO0FBQUUsY0FBRyxFQUFFLEdBQUcsV0FBVyxLQUFHLEVBQUUsR0FBRyxXQUFXLEdBQUU7QUFBQyxxQkFBUyxtQkFBbUIsMkJBQTJCLFFBQU8sU0FBUSxLQUFLO0FBQUEsVUFBQztBQUFDLGlCQUFPLFdBQVcsRUFBRSxPQUFPLEdBQUcsRUFBRSxZQUFZLEdBQUUsRUFBRTtBQUFBLFFBQUM7QUFBQSxNQUFDO0FBQUEsSUFBQztBQUFDO0FBQUMsWUFBTSxRQUFNLEtBQUssTUFBTSxjQUFjO0FBQUUsVUFBRyxPQUFNO0FBQUMsY0FBTSxRQUFNLFNBQVMsTUFBTSxFQUFFO0FBQUUsWUFBRyxVQUFRLEtBQUcsUUFBTSxNQUFJLE1BQU0sT0FBSyxPQUFPLEtBQUssR0FBRTtBQUFDLG1CQUFTLG1CQUFtQix1QkFBc0IsUUFBTyxJQUFJO0FBQUEsUUFBQztBQUFDLGVBQU8sU0FBUyxPQUFNO0FBQUMsZ0JBQU0sUUFBTSxTQUFTLEtBQUs7QUFBRSxjQUFHLE1BQU0sV0FBUyxPQUFNO0FBQUMscUJBQVMsbUJBQW1CLHNCQUFzQixRQUFPLFNBQVEsS0FBSztBQUFBLFVBQUM7QUFBQyxpQkFBTyxZQUFZLEtBQUs7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxZQUFPO0FBQUEsV0FBVTtBQUFVLGVBQU8sU0FBUyxPQUFNO0FBQUMsaUJBQU8sV0FBVyxXQUFXLEtBQUssR0FBRSxFQUFFO0FBQUEsUUFBQztBQUFBLFdBQU07QUFBTyxlQUFPLFNBQVMsT0FBTTtBQUFDLGlCQUFNLENBQUMsUUFBTSxXQUFTO0FBQUEsUUFBTztBQUFBLFdBQU07QUFBUSxlQUFPLFNBQVMsT0FBTTtBQUFDLGlCQUFPLFVBQVUsS0FBSztBQUFBLFFBQUM7QUFBQSxXQUFNO0FBQVMsZUFBTyxTQUFTLE9BQU07QUFBQyxpQkFBTyxHQUFHLEtBQUs7QUFBQSxRQUFDO0FBQUE7QUFBRSxXQUFPO0FBQUEsRUFBSTtBQUFDLHNCQUFvQixPQUFLLFFBQU87QUFBQyxXQUFNLEdBQUcsU0FBUSxPQUFPLElBQUksQ0FBQyxFQUFDLE1BQUssT0FBSyxXQUFhLE9BQUssTUFBSSxLQUFJLEVBQUUsS0FBSyxHQUFHO0FBQUEsRUFBSTtBQUFDLE1BQU0sbUJBQU4sTUFBc0I7QUFBQSxJQUFDLFlBQVksT0FBTTtBQUFDLHFCQUFlLE1BQUssU0FBUSxPQUFPLE9BQU8sU0FBUyxLQUFLLENBQUMsQ0FBQztBQUFFLHFCQUFlLE1BQUssaUJBQWdCLENBQUMsQ0FBQztBQUFFLHFCQUFlLE1BQUssVUFBUyxDQUFDLENBQUM7QUFBRSxZQUFNLFFBQU0sQ0FBQztBQUFFLFlBQU0sVUFBUSxDQUFDO0FBQUUsWUFBTSxXQUFTLENBQUM7QUFBRSxhQUFPLEtBQUssS0FBSyxFQUFFLFFBQVEsVUFBTTtBQUFDLGNBQU0sUUFBTSxDQUFDO0FBQUUsZ0JBQVEsUUFBTSxDQUFDO0FBQUUsaUJBQVMsUUFBTSxDQUFDO0FBQUEsTUFBQyxDQUFDO0FBQUUsaUJBQVUsU0FBUSxPQUFNO0FBQUMsY0FBTSxjQUFZLENBQUM7QUFBRSxjQUFNLE9BQU0sUUFBUSxXQUFPO0FBQUMsY0FBRyxZQUFZLE1BQU0sT0FBTTtBQUFDLHFCQUFTLG1CQUFtQiwyQkFBMkIsS0FBSyxVQUFVLE1BQU0sSUFBSSxRQUFRLEtBQUssVUFBVSxLQUFJLEtBQUksU0FBUSxLQUFLO0FBQUEsVUFBQztBQUFDLHNCQUFZLE1BQU0sUUFBTTtBQUFLLGdCQUFNLFdBQVMsTUFBTSxLQUFLLE1BQU0scUJBQXFCLEVBQUU7QUFBRyxjQUFHLGFBQVcsT0FBSztBQUFDLHFCQUFTLG1CQUFtQiw4QkFBOEIsS0FBSyxVQUFVLFFBQVEsS0FBSSxTQUFRLEtBQUs7QUFBQSxVQUFDO0FBQUMsZ0JBQU0sVUFBUSxlQUFlLFFBQVE7QUFBRSxjQUFHLFNBQVE7QUFBQztBQUFBLFVBQU07QUFBQyxjQUFHLENBQUMsUUFBUSxXQUFVO0FBQUMscUJBQVMsbUJBQW1CLGdCQUFnQixLQUFLLFVBQVUsUUFBUSxLQUFJLFNBQVEsS0FBSztBQUFBLFVBQUM7QUFBQyxrQkFBUSxVQUFVLEtBQUssS0FBSTtBQUFFLGdCQUFNLE9BQU0sWUFBVTtBQUFBLFFBQUksQ0FBQztBQUFBLE1BQUM7QUFBQyxZQUFNLGVBQWEsT0FBTyxLQUFLLE9BQU8sRUFBRSxPQUFPLE9BQUcsUUFBUSxHQUFHLFdBQVMsQ0FBQztBQUFFLFVBQUcsYUFBYSxXQUFTLEdBQUU7QUFBQyxpQkFBUyxtQkFBbUIsd0JBQXVCLFNBQVEsS0FBSztBQUFBLE1BQUMsV0FBUyxhQUFhLFNBQU8sR0FBRTtBQUFDLGlCQUFTLG1CQUFtQiw0Q0FBNEMsYUFBYSxJQUFJLE9BQUcsS0FBSyxVQUFVLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxLQUFJLFNBQVEsS0FBSztBQUFBLE1BQUM7QUFBQyxxQkFBZSxNQUFLLGVBQWMsYUFBYSxFQUFFO0FBQUUsNkJBQXVCLE1BQUssT0FBTTtBQUFDLFlBQUcsTUFBTSxPQUFNO0FBQUMsbUJBQVMsbUJBQW1CLDhCQUE4QixLQUFLLFVBQVUsSUFBSSxLQUFJLFNBQVEsS0FBSztBQUFBLFFBQUM7QUFBQyxjQUFNLFFBQU07QUFBSyxlQUFPLEtBQUssTUFBTSxLQUFLLEVBQUUsUUFBUSxXQUFPO0FBQUMsY0FBRyxDQUFDLFFBQVEsUUFBTztBQUFDO0FBQUEsVUFBTTtBQUFDLHdCQUFjLE9BQU0sS0FBSztBQUFFLGlCQUFPLEtBQUssS0FBSyxFQUFFLFFBQVEsYUFBUztBQUFDLHFCQUFTLFNBQVMsU0FBTztBQUFBLFVBQUksQ0FBQztBQUFBLFFBQUMsQ0FBQztBQUFFLGVBQU8sTUFBTTtBQUFBLE1BQUs7QUFBQyxvQkFBYyxLQUFLLGFBQVksQ0FBQyxDQUFDO0FBQUUsaUJBQVUsU0FBUSxVQUFTO0FBQUMsY0FBTSxLQUFHLE9BQU8sS0FBSyxTQUFTLE1BQUs7QUFBRSxXQUFHLEtBQUs7QUFBRSxhQUFLLE9BQU8sU0FBTSxXQUFXLE9BQUssTUFBTSxNQUFLLElBQUUsR0FBRyxJQUFJLE9BQUcsV0FBVyxHQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQSxJQUFDLFdBQVcsTUFBSztBQUFDLFVBQUksVUFBUSxLQUFLLGNBQWM7QUFBTSxVQUFHLENBQUMsU0FBUTtBQUFDLGtCQUFRLEtBQUssY0FBYyxRQUFNLEtBQUssWUFBWSxJQUFJO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFPO0FBQUEsSUFBQyxZQUFZLE1BQUs7QUFBQztBQUFDLGNBQU0sVUFBUSxlQUFlLElBQUk7QUFBRSxZQUFHLFNBQVE7QUFBQyxpQkFBTztBQUFBLFFBQU87QUFBQSxNQUFDO0FBQUMsWUFBTSxRQUFNLEtBQUssTUFBTSx1QkFBdUI7QUFBRSxVQUFHLE9BQU07QUFBQyxjQUFNLFVBQVEsTUFBTTtBQUFHLGNBQU0sYUFBVyxLQUFLLFdBQVcsT0FBTztBQUFFLGNBQU0sU0FBTyxTQUFTLE1BQU0sRUFBRTtBQUFFLGVBQU8sV0FBTztBQUFDLGNBQUcsVUFBUSxLQUFHLE1BQU0sV0FBUyxRQUFPO0FBQUMscUJBQVMsbUJBQW1CLDJEQUEwRCxTQUFRLEtBQUs7QUFBQSxVQUFDO0FBQUMsY0FBSSxTQUFPLE1BQU0sSUFBSSxVQUFVO0FBQUUsY0FBRyxLQUFLLE9BQU8sVUFBUztBQUFDLHFCQUFPLE9BQU8sSUFBSSxTQUFTO0FBQUEsVUFBQztBQUFDLGlCQUFPLFVBQVUsVUFBVSxNQUFNLENBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxLQUFLLE1BQU07QUFBTSxVQUFHLFFBQU87QUFBQyxjQUFNLGNBQVksR0FBRyxLQUFLLE9BQU8sS0FBSztBQUFFLGVBQU8sV0FBTztBQUFDLGdCQUFNLFNBQU8sT0FBTyxJQUFJLENBQUMsRUFBQyxNQUFLLE9BQUssTUFBSyxZQUFRO0FBQUMsa0JBQU0sU0FBTyxLQUFLLFdBQVcsS0FBSSxFQUFFLE1BQU0sTUFBSztBQUFFLGdCQUFHLEtBQUssT0FBTyxRQUFNO0FBQUMscUJBQU8sVUFBVSxNQUFNO0FBQUEsWUFBQztBQUFDLG1CQUFPO0FBQUEsVUFBTSxDQUFDO0FBQUUsaUJBQU8sUUFBUSxXQUFXO0FBQUUsaUJBQU8sVUFBVSxNQUFNO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxhQUFPLFNBQVMsbUJBQW1CLGlCQUFpQixRQUFPLFFBQU8sSUFBSTtBQUFBLElBQUM7QUFBQSxJQUFDLFdBQVcsT0FBSztBQUFDLFlBQU0sU0FBTyxLQUFLLE9BQU87QUFBTSxVQUFHLENBQUMsUUFBTztBQUFDLGlCQUFTLG1CQUFtQixpQkFBaUIsS0FBSyxVQUFVLEtBQUksS0FBSSxRQUFPLEtBQUk7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLFdBQVcsTUFBSyxPQUFNO0FBQUMsYUFBTyxLQUFLLFdBQVcsSUFBSSxFQUFFLEtBQUs7QUFBQSxJQUFDO0FBQUEsSUFBQyxXQUFXLE9BQUssT0FBTTtBQUFDLGFBQU8sVUFBVSxLQUFLLFdBQVcsT0FBSyxLQUFLLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLE9BQU07QUFBQyxhQUFPLEtBQUssV0FBVyxLQUFLLGFBQVksS0FBSztBQUFBLElBQUM7QUFBQSxJQUFDLEtBQUssT0FBTTtBQUFDLGFBQU8sS0FBSyxXQUFXLEtBQUssYUFBWSxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxNQUFLLE9BQU0sVUFBUztBQUFDO0FBQUMsY0FBTSxVQUFRLGVBQWUsSUFBSTtBQUFFLFlBQUcsU0FBUTtBQUFDLGlCQUFPLFNBQVMsTUFBSyxLQUFLO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxZQUFNLFFBQU0sS0FBSyxNQUFNLHVCQUF1QjtBQUFFLFVBQUcsT0FBTTtBQUFDLGNBQU0sVUFBUSxNQUFNO0FBQUcsY0FBTSxTQUFPLFNBQVMsTUFBTSxFQUFFO0FBQUUsWUFBRyxVQUFRLEtBQUcsTUFBTSxXQUFTLFFBQU87QUFBQyxtQkFBUyxtQkFBbUIsMkRBQTBELFNBQVEsS0FBSztBQUFBLFFBQUM7QUFBQyxlQUFPLE1BQU0sSUFBSSxPQUFHLEtBQUssT0FBTyxTQUFRLEdBQUUsUUFBUSxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sU0FBTyxLQUFLLE1BQU07QUFBTSxVQUFHLFFBQU87QUFBQyxlQUFPLE9BQU8sT0FBTyxDQUFDLE9BQU0sRUFBQyxNQUFLLE9BQUssTUFBSyxZQUFRO0FBQUMsZ0JBQU0sU0FBTSxLQUFLLE9BQU8sT0FBSyxNQUFNLFFBQU0sUUFBUTtBQUFFLGlCQUFPO0FBQUEsUUFBSyxHQUFFLENBQUMsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPLFNBQVMsbUJBQW1CLGlCQUFpQixRQUFPLFFBQU8sSUFBSTtBQUFBLElBQUM7QUFBQSxJQUFDLE1BQU0sT0FBTSxVQUFTO0FBQUMsYUFBTyxLQUFLLE9BQU8sS0FBSyxhQUFZLE9BQU0sUUFBUTtBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sS0FBSyxPQUFNO0FBQUMsYUFBTyxJQUFJLGlCQUFpQixLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxlQUFlLE9BQU07QUFBQyxhQUFPLGlCQUFpQixLQUFLLEtBQUssRUFBRTtBQUFBLElBQVc7QUFBQSxJQUFDLE9BQU8sV0FBVyxPQUFLLE9BQU0sT0FBTTtBQUFDLGFBQU8saUJBQWlCLEtBQUssS0FBSyxFQUFFLFdBQVcsT0FBSyxLQUFLO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxXQUFXLFFBQU87QUFBQyxZQUFNLGVBQWEsQ0FBQztBQUFFLGlCQUFVLFNBQVEsUUFBTztBQUFDLGNBQU0sT0FBSyxpQkFBaUI7QUFBTSxZQUFHLENBQUMsTUFBSztBQUFDLG1CQUFTLG1CQUFtQixrQ0FBa0MsS0FBSyxVQUFVLEtBQUksS0FBSSxVQUFTLE1BQU07QUFBQSxRQUFDO0FBQUMscUJBQWEsS0FBSyxFQUFDLE1BQUssT0FBSyxLQUFTLENBQUM7QUFBQSxNQUFDO0FBQUMsbUJBQWEsS0FBSyxDQUFDLEdBQUUsTUFBSTtBQUFDLGVBQU8saUJBQWlCLFFBQVEsRUFBRSxJQUFJLElBQUUsaUJBQWlCLFFBQVEsRUFBRSxJQUFJO0FBQUEsTUFBQyxDQUFDO0FBQUUsYUFBTyxpQkFBaUIsV0FBVyxnQkFBZSxFQUFDLGNBQWEsYUFBWSxHQUFFLE1BQU07QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLE9BQU8sUUFBTyxPQUFNLE9BQU07QUFBQyxhQUFPLFVBQVUsQ0FBQyxVQUFTLGlCQUFpQixXQUFXLE1BQU0sR0FBRSxpQkFBaUIsS0FBSyxLQUFLLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sS0FBSyxRQUFPLE9BQU0sT0FBTTtBQUFDLGFBQU8sVUFBVSxpQkFBaUIsT0FBTyxRQUFPLE9BQU0sS0FBSyxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxhQUFhLFFBQU8sT0FBTSxPQUFNLGNBQVk7QUFBQyxhQUFPLFlBQVksTUFBSyxRQUFPLFFBQU8sYUFBVztBQUFDLGlCQUFPLFlBQVksTUFBTTtBQUFFLGNBQU0sV0FBUyxDQUFDO0FBQUUsWUFBRyxPQUFPLHFCQUFtQixDQUFDLFlBQVksT0FBTyxtQkFBa0IsRUFBRSxHQUFFO0FBQUMsbUJBQVMsT0FBTyxxQkFBbUI7QUFBQSxRQUFJO0FBQUMsY0FBTSxVQUFRLGlCQUFpQixLQUFLLEtBQUs7QUFBRSxnQkFBUSxNQUFNLE9BQU0sQ0FBQyxNQUFLLFdBQVE7QUFBQyxjQUFHLFNBQU8sYUFBVyxDQUFDLFlBQVksUUFBTSxFQUFFLEdBQUU7QUFBQyxxQkFBUyxVQUFPO0FBQUEsVUFBSTtBQUFDLGlCQUFPO0FBQUEsUUFBSyxDQUFDO0FBQUUsbUJBQVUsU0FBUSxVQUFTO0FBQUMsbUJBQVMsU0FBTSxNQUFNLGFBQVksS0FBSTtBQUFBLFFBQUM7QUFBQyxZQUFHLE9BQU8scUJBQW1CLFNBQVMsT0FBTyxvQkFBbUI7QUFBQyxpQkFBTyxvQkFBa0IsU0FBUyxPQUFPO0FBQUEsUUFBa0I7QUFBQyxnQkFBTSxRQUFRLE1BQU0sT0FBTSxDQUFDLE1BQUssV0FBUTtBQUFDLGNBQUcsU0FBTyxhQUFXLFNBQVMsU0FBTztBQUFDLG1CQUFPLFNBQVM7QUFBQSxVQUFNO0FBQUMsaUJBQU87QUFBQSxRQUFLLENBQUM7QUFBRSxlQUFNLEVBQUMsUUFBYyxNQUFXO0FBQUEsTUFBQyxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxXQUFXLFFBQU8sT0FBTSxPQUFNO0FBQUMsdUJBQWlCLFdBQVcsTUFBTTtBQUFFLFlBQU0sZUFBYSxDQUFDO0FBQUUsWUFBTSxjQUFZLENBQUM7QUFBRSx1QkFBaUIsUUFBUSxXQUFNO0FBQUMsY0FBTSxTQUFNLE9BQU87QUFBTSxZQUFHLFVBQU8sTUFBSztBQUFDO0FBQUEsUUFBTTtBQUFDLHFCQUFhLFNBQU0sYUFBYSxPQUFNLE1BQUs7QUFBRSxvQkFBWSxLQUFLLEVBQUMsTUFBSyxPQUFLLE1BQUssaUJBQWlCLE9BQUssQ0FBQztBQUFBLE1BQUMsQ0FBQztBQUFFLFlBQU0sVUFBUSxpQkFBaUIsS0FBSyxLQUFLO0FBQUUsWUFBTSxrQkFBZ0IsWUFBWSxLQUFLO0FBQUUsVUFBRyxnQkFBZ0IsY0FBYTtBQUFDLGlCQUFTLG1CQUFtQiw0Q0FBMkMsc0JBQXFCLEtBQUs7QUFBQSxNQUFDLE9BQUs7QUFBQyx3QkFBZ0IsZUFBYTtBQUFBLE1BQVc7QUFBQyxjQUFRLE9BQU8sS0FBSztBQUFFLGFBQU0sRUFBQyxPQUFNLGlCQUFnQixRQUFPLGNBQWEsYUFBWSxRQUFRLGFBQVksU0FBUSxRQUFRLE1BQU0sT0FBTSxDQUFDLE1BQUssV0FBUTtBQUFDLFlBQUcsS0FBSyxNQUFNLGFBQWEsR0FBRTtBQUFDLGlCQUFPLFFBQVEsU0FBUyxNQUFLLENBQUM7QUFBQSxRQUFDO0FBQUMsWUFBRyxLQUFLLE1BQU0sUUFBUSxHQUFFO0FBQUMsaUJBQU8sVUFBVSxLQUFLLE1BQUssRUFBRSxTQUFTO0FBQUEsUUFBQztBQUFDLGdCQUFPO0FBQUEsZUFBVTtBQUFVLG1CQUFPLE9BQU0sWUFBWTtBQUFBLGVBQU07QUFBTyxtQkFBTSxDQUFDLENBQUM7QUFBQSxlQUFVO0FBQVMsZ0JBQUcsT0FBTyxXQUFRLFVBQVM7QUFBQyx1QkFBUyxtQkFBbUIsa0JBQWlCLFNBQVEsTUFBSztBQUFBLFlBQUM7QUFBQyxtQkFBTztBQUFBO0FBQU0sZUFBTyxTQUFTLG1CQUFtQixvQkFBbUIsUUFBTyxJQUFJO0FBQUEsTUFBQyxDQUFDLEVBQUM7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUEyQixNQUFNLFdBQVMsSUFBSSxPQUFPLFNBQVM7QUFBRSxNQUFNLGlCQUFOLGNBQTZCLFlBQVc7QUFBQSxFQUFDO0FBQUMsTUFBTSx5QkFBTixjQUFxQyxZQUFXO0FBQUEsRUFBQztBQUFDLE1BQU0sVUFBTixjQUFzQixZQUFXO0FBQUEsSUFBQyxPQUFPLFVBQVUsT0FBTTtBQUFDLGFBQU0sQ0FBQyxDQUFFLFVBQU8sTUFBTTtBQUFBLElBQVc7QUFBQSxFQUFDO0FBQUMsMkJBQXlCLFVBQVMsT0FBTTtBQUFDLFVBQU0sT0FBSyxJQUFJLE1BQU0sMERBQTBELFVBQVU7QUFBRSxTQUFLLFFBQU07QUFBTSxXQUFPO0FBQUEsRUFBSTtBQUFDLE1BQU0sWUFBTixNQUFlO0FBQUEsSUFBQyxZQUFZLFdBQVU7QUFBQyxlQUFTLFNBQVMsWUFBVyxTQUFTO0FBQUUsVUFBSSxNQUFJLENBQUM7QUFBRSxVQUFHLE9BQU8sY0FBWSxVQUFTO0FBQUMsY0FBSSxLQUFLLE1BQU0sU0FBUztBQUFBLE1BQUMsT0FBSztBQUFDLGNBQUk7QUFBQSxNQUFTO0FBQUMscUJBQWUsTUFBSyxhQUFZLElBQUksSUFBSSxjQUFVO0FBQUMsZUFBTyxTQUFTLEtBQUssUUFBUTtBQUFBLE1BQUMsQ0FBQyxFQUFFLE9BQU8sY0FBVSxZQUFVLElBQUksQ0FBQztBQUFFLHFCQUFlLE1BQUssYUFBWSxVQUFVLFlBQVcsYUFBYSxFQUFFLENBQUM7QUFBRSxxQkFBZSxNQUFLLGFBQVksQ0FBQyxDQUFDO0FBQUUscUJBQWUsTUFBSyxVQUFTLENBQUMsQ0FBQztBQUFFLHFCQUFlLE1BQUssVUFBUyxDQUFDLENBQUM7QUFBRSxxQkFBZSxNQUFLLFdBQVUsQ0FBQyxDQUFDO0FBQUUsV0FBSyxVQUFVLFFBQVEsY0FBVTtBQUFDLFlBQUksU0FBTztBQUFLLGdCQUFPLFNBQVM7QUFBQSxlQUFVO0FBQWMsZ0JBQUcsS0FBSyxRQUFPO0FBQUMsdUJBQVMsS0FBSyxvQ0FBb0M7QUFBRTtBQUFBLFlBQU07QUFBQywyQkFBZSxNQUFLLFVBQVMsUUFBUTtBQUFFO0FBQUEsZUFBVztBQUFXLHFCQUFPLEtBQUs7QUFBVTtBQUFBLGVBQVU7QUFBUSxxQkFBTyxLQUFLO0FBQU87QUFBQTtBQUFjO0FBQUE7QUFBTyxZQUFJLGFBQVUsU0FBUyxPQUFPO0FBQUUsWUFBRyxPQUFPLGFBQVc7QUFBQyxtQkFBUyxLQUFLLDRCQUEwQixVQUFTO0FBQUU7QUFBQSxRQUFNO0FBQUMsZUFBTyxjQUFXO0FBQUEsTUFBUSxDQUFDO0FBQUUsVUFBRyxDQUFDLEtBQUssUUFBTztBQUFDLHVCQUFlLE1BQUssVUFBUyxvQkFBb0IsS0FBSyxFQUFDLFNBQVEsT0FBTSxNQUFLLGNBQWEsQ0FBQyxDQUFDO0FBQUEsTUFBQztBQUFDLHFCQUFlLE1BQUssZ0JBQWUsSUFBSTtBQUFBLElBQUM7QUFBQSxJQUFDLE9BQU8sUUFBTztBQUFDLFVBQUcsQ0FBQyxRQUFPO0FBQUMsaUJBQU8sWUFBWTtBQUFBLE1BQUk7QUFBQyxVQUFHLFdBQVMsWUFBWSxTQUFRO0FBQUMsaUJBQVMsbUJBQW1CLGlEQUFnRCxVQUFTLE1BQU07QUFBQSxNQUFDO0FBQUMsWUFBTSxNQUFJLEtBQUssVUFBVSxJQUFJLGNBQVUsU0FBUyxPQUFPLE1BQU0sQ0FBQztBQUFFLFVBQUcsV0FBUyxZQUFZLE1BQUs7QUFBQyxlQUFPLEtBQUssVUFBVSxJQUFJLElBQUksT0FBRyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQUc7QUFBQSxJQUFDLE9BQU8sY0FBYTtBQUFDLGFBQU87QUFBQSxJQUFlO0FBQUEsSUFBQyxPQUFPLFdBQVcsU0FBUTtBQUFDLGFBQU8sV0FBVyxPQUFPO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxXQUFXLGtCQUFpQjtBQUFDLGFBQU8sYUFBYSxHQUFHLGlCQUFpQixPQUFPLENBQUMsR0FBRSxHQUFFLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLGNBQWMsZUFBYztBQUFDLGFBQU8sR0FBRyxjQUFjLE9BQU8sQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLFlBQVksMEJBQXlCO0FBQUMsVUFBRyxZQUFZLHdCQUF3QixHQUFFO0FBQUMsbUJBQVUsU0FBUSxLQUFLLFdBQVU7QUFBQyxjQUFHLDZCQUEyQixLQUFLLFdBQVcsS0FBSSxHQUFFO0FBQUMsbUJBQU8sS0FBSyxVQUFVO0FBQUEsVUFBSztBQUFBLFFBQUM7QUFBQyxpQkFBUyxtQkFBbUIsd0JBQXVCLFdBQVUsd0JBQXdCO0FBQUEsTUFBQztBQUFDLFVBQUcseUJBQXlCLFFBQVEsR0FBRyxNQUFJLElBQUc7QUFBQyxjQUFNLFFBQUsseUJBQXlCLEtBQUs7QUFBRSxjQUFNLFdBQVMsT0FBTyxLQUFLLEtBQUssU0FBUyxFQUFFLE9BQU8sUUFBRyxHQUFFLE1BQU0sR0FBRyxFQUFFLE9BQUssS0FBSTtBQUFFLFlBQUcsU0FBUyxXQUFTLEdBQUU7QUFBQyxtQkFBUyxtQkFBbUIsd0JBQXVCLFFBQU8sS0FBSTtBQUFBLFFBQUMsV0FBUyxTQUFTLFNBQU8sR0FBRTtBQUFDLG1CQUFTLG1CQUFtQiwrQkFBOEIsUUFBTyxLQUFJO0FBQUEsUUFBQztBQUFDLGVBQU8sS0FBSyxVQUFVLFNBQVM7QUFBQSxNQUFHO0FBQUMsWUFBTSxTQUFPLEtBQUssVUFBVSxpQkFBaUIsV0FBVyx3QkFBd0IsRUFBRSxPQUFPO0FBQUcsVUFBRyxDQUFDLFFBQU87QUFBQyxpQkFBUyxtQkFBbUIsd0JBQXVCLGFBQVksd0JBQXdCO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFNO0FBQUEsSUFBQyxTQUFTLHdCQUF1QjtBQUFDLFVBQUcsWUFBWSxzQkFBc0IsR0FBRTtBQUFDLGNBQU0sWUFBVSx1QkFBdUIsWUFBWTtBQUFFLG1CQUFVLFNBQVEsS0FBSyxRQUFPO0FBQUMsY0FBRyxjQUFZLEtBQUssY0FBYyxLQUFJLEdBQUU7QUFBQyxtQkFBTyxLQUFLLE9BQU87QUFBQSxVQUFLO0FBQUEsUUFBQztBQUFDLGlCQUFTLG1CQUFtQixxQkFBb0IsYUFBWSxTQUFTO0FBQUEsTUFBQztBQUFDLFVBQUcsdUJBQXVCLFFBQVEsR0FBRyxNQUFJLElBQUc7QUFBQyxjQUFNLFFBQUssdUJBQXVCLEtBQUs7QUFBRSxjQUFNLFdBQVMsT0FBTyxLQUFLLEtBQUssTUFBTSxFQUFFLE9BQU8sUUFBRyxHQUFFLE1BQU0sR0FBRyxFQUFFLE9BQUssS0FBSTtBQUFFLFlBQUcsU0FBUyxXQUFTLEdBQUU7QUFBQyxtQkFBUyxtQkFBbUIscUJBQW9CLFFBQU8sS0FBSTtBQUFBLFFBQUMsV0FBUyxTQUFTLFNBQU8sR0FBRTtBQUFDLG1CQUFTLG1CQUFtQiw0QkFBMkIsUUFBTyxLQUFJO0FBQUEsUUFBQztBQUFDLGVBQU8sS0FBSyxPQUFPLFNBQVM7QUFBQSxNQUFHO0FBQUMsWUFBTSxTQUFPLEtBQUssT0FBTyxjQUFjLFdBQVcsc0JBQXNCLEVBQUUsT0FBTztBQUFHLFVBQUcsQ0FBQyxRQUFPO0FBQUMsaUJBQVMsbUJBQW1CLHFCQUFvQixhQUFZLHNCQUFzQjtBQUFBLE1BQUM7QUFBQyxhQUFPO0FBQUEsSUFBTTtBQUFBLElBQUMsV0FBVyxrQkFBaUI7QUFBQyxVQUFHLE9BQU8scUJBQW1CLFVBQVM7QUFBQywyQkFBaUIsS0FBSyxZQUFZLGdCQUFnQjtBQUFBLE1BQUM7QUFBQyxhQUFPLFVBQVUsS0FBSyxhQUFZLFlBQVksRUFBRSxnQkFBZ0I7QUFBQSxJQUFDO0FBQUEsSUFBQyxjQUFjLGVBQWM7QUFBQyxVQUFHLE9BQU8sa0JBQWdCLFVBQVM7QUFBQyx3QkFBYyxLQUFLLFNBQVMsYUFBYTtBQUFBLE1BQUM7QUFBQyxhQUFPLFVBQVUsS0FBSyxhQUFZLGVBQWUsRUFBRSxhQUFhO0FBQUEsSUFBQztBQUFBLElBQUMsY0FBYyxRQUFPLE9BQUs7QUFBQyxhQUFPLEtBQUssVUFBVSxPQUFPLFFBQU8sS0FBSTtBQUFBLElBQUM7QUFBQSxJQUFDLGNBQWMsUUFBTyxRQUFPO0FBQUMsYUFBTyxLQUFLLFVBQVUsT0FBTyxRQUFPLE1BQU07QUFBQSxJQUFDO0FBQUEsSUFBQyxhQUFhLFFBQU87QUFBQyxhQUFPLEtBQUssY0FBYyxLQUFLLE9BQU8sUUFBTyxVQUFRLENBQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLG1CQUFtQixrQkFBaUIsT0FBSztBQUFDLFVBQUcsT0FBTyxxQkFBbUIsVUFBUztBQUFDLDJCQUFpQixLQUFLLFlBQVksZ0JBQWdCO0FBQUEsTUFBQztBQUFDLFlBQU0sUUFBTSxTQUFTLEtBQUk7QUFBRSxVQUFHLFFBQVEsTUFBTSxNQUFNLEdBQUUsQ0FBQyxDQUFDLE1BQUksS0FBSyxXQUFXLGdCQUFnQixHQUFFO0FBQUMsaUJBQVMsbUJBQW1CLDBDQUEwQyxpQkFBaUIsU0FBUSxRQUFPLFFBQVEsS0FBSyxDQUFDO0FBQUEsTUFBQztBQUFDLGFBQU8sS0FBSyxjQUFjLGlCQUFpQixRQUFPLE1BQU0sTUFBTSxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxtQkFBbUIsa0JBQWlCLFFBQU87QUFBQyxVQUFHLE9BQU8scUJBQW1CLFVBQVM7QUFBQywyQkFBaUIsS0FBSyxZQUFZLGdCQUFnQjtBQUFBLE1BQUM7QUFBQyxhQUFPLFFBQVEsT0FBTyxDQUFDLEtBQUssV0FBVyxnQkFBZ0IsR0FBRSxLQUFLLGNBQWMsaUJBQWlCLFFBQU8sVUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxxQkFBcUIsa0JBQWlCLE9BQUs7QUFBQyxVQUFHLE9BQU8scUJBQW1CLFVBQVM7QUFBQywyQkFBaUIsS0FBSyxZQUFZLGdCQUFnQjtBQUFBLE1BQUM7QUFBQyxVQUFJLFFBQU0sU0FBUyxLQUFJO0FBQUUsVUFBSSxTQUFPO0FBQUssVUFBSSxpQkFBZTtBQUFLLGNBQU8sTUFBTSxTQUFPLEtBQUssVUFBVSxhQUFhO0FBQUEsYUFBUTtBQUFFLGNBQUc7QUFBQyxtQkFBTyxLQUFLLFVBQVUsT0FBTyxpQkFBaUIsU0FBUSxLQUFLO0FBQUEsVUFBQyxTQUFPLE9BQU47QUFBQSxVQUFhO0FBQUM7QUFBQSxhQUFXO0FBQUUsY0FBRyxRQUFRLE1BQU0sTUFBTSxHQUFFLENBQUMsQ0FBQyxNQUFJLGNBQWE7QUFBQyw2QkFBZTtBQUFnQixxQkFBTyxLQUFLLFVBQVUsT0FBTyxDQUFDLFFBQVEsR0FBRSxNQUFNLE1BQU0sQ0FBQyxDQUFDLEVBQUU7QUFBQSxVQUFFO0FBQUM7QUFBQTtBQUFNLGFBQU8sU0FBUyxXQUFXLHlCQUF3QixPQUFPLE9BQU8sZ0JBQWUsRUFBQyxRQUFPLGlCQUFpQixPQUFPLEdBQUUsZ0JBQThCLFdBQVUsQ0FBQyxNQUFNLEdBQUUsT0FBYSxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMscUJBQXFCLGtCQUFpQixRQUFPO0FBQUMsVUFBRyxPQUFPLHFCQUFtQixVQUFTO0FBQUMsMkJBQWlCLEtBQUssWUFBWSxnQkFBZ0I7QUFBQSxNQUFDO0FBQUMsYUFBTyxRQUFRLEtBQUssVUFBVSxPQUFPLGlCQUFpQixTQUFRLFVBQVEsQ0FBQyxDQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxtQkFBbUIsZUFBYyxRQUFPO0FBQUMsVUFBRyxPQUFPLGtCQUFnQixVQUFTO0FBQUMsd0JBQWMsS0FBSyxTQUFTLGFBQWE7QUFBQSxNQUFDO0FBQUMsVUFBRyxPQUFPLFNBQU8sY0FBYyxPQUFPLFFBQU87QUFBQyxpQkFBUyxXQUFXLDRCQUEwQixjQUFjLE9BQU8sR0FBRSxPQUFPLE9BQU8scUJBQW9CLEVBQUMsVUFBUyxVQUFTLE9BQU0sT0FBTSxDQUFDO0FBQUEsTUFBQztBQUFDLFVBQUksU0FBTyxDQUFDO0FBQUUsVUFBRyxDQUFDLGNBQWMsV0FBVTtBQUFDLGVBQU8sS0FBSyxLQUFLLGNBQWMsYUFBYSxDQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sY0FBWSxDQUFDLE9BQU0sVUFBUTtBQUFDLFlBQUcsTUFBTSxTQUFPLFVBQVM7QUFBQyxpQkFBTyxHQUFHLEtBQUs7QUFBQSxRQUFDLFdBQVMsTUFBTSxTQUFPLFNBQVE7QUFBQyxpQkFBTyxVQUFVLFFBQVEsS0FBSyxDQUFDO0FBQUEsUUFBQztBQUFDLFlBQUcsTUFBTSxTQUFPLFdBQVU7QUFBQyxlQUFLLFVBQVUsT0FBTyxDQUFDLFNBQVMsR0FBRSxDQUFDLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPLFdBQVcsUUFBUSxLQUFLLEdBQUUsRUFBRTtBQUFBLE1BQUM7QUFBRSxhQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxZQUFJLFFBQU0sY0FBYyxPQUFPO0FBQU8sWUFBRyxDQUFDLE1BQU0sU0FBUTtBQUFDLGNBQUcsU0FBTyxNQUFLO0FBQUMscUJBQVMsbUJBQW1CLHNEQUFxRCxjQUFZLE1BQU0sTUFBSyxLQUFLO0FBQUEsVUFBQztBQUFDO0FBQUEsUUFBTTtBQUFDLFlBQUcsU0FBTyxNQUFLO0FBQUMsaUJBQU8sS0FBSyxJQUFJO0FBQUEsUUFBQyxXQUFTLE1BQU0sYUFBVyxXQUFTLE1BQU0sYUFBVyxTQUFRO0FBQUMsbUJBQVMsbUJBQW1CLGlEQUFnRCxjQUFZLE1BQU0sTUFBSyxLQUFLO0FBQUEsUUFBQyxXQUFTLE1BQU0sUUFBUSxLQUFLLEdBQUU7QUFBQyxpQkFBTyxLQUFLLE1BQU0sSUFBSSxZQUFPLFlBQVksT0FBTSxNQUFLLENBQUMsQ0FBQztBQUFBLFFBQUMsT0FBSztBQUFDLGlCQUFPLEtBQUssWUFBWSxPQUFNLEtBQUssQ0FBQztBQUFBLFFBQUM7QUFBQSxNQUFDLENBQUM7QUFBRSxhQUFNLE9BQU8sVUFBUSxPQUFPLE9BQU8sU0FBTyxPQUFLLE1BQUs7QUFBQyxlQUFPLElBQUk7QUFBQSxNQUFDO0FBQUMsYUFBTztBQUFBLElBQU07QUFBQSxJQUFDLGVBQWUsZUFBYyxRQUFPO0FBQUMsVUFBRyxPQUFPLGtCQUFnQixVQUFTO0FBQUMsd0JBQWMsS0FBSyxTQUFTLGFBQWE7QUFBQSxNQUFDO0FBQUMsWUFBTSxTQUFPLENBQUM7QUFBRSxZQUFNLFlBQVUsQ0FBQztBQUFFLFlBQU0sYUFBVyxDQUFDO0FBQUUsVUFBRyxDQUFDLGNBQWMsV0FBVTtBQUFDLGVBQU8sS0FBSyxLQUFLLGNBQWMsYUFBYSxDQUFDO0FBQUEsTUFBQztBQUFDLFVBQUcsT0FBTyxXQUFTLGNBQWMsT0FBTyxRQUFPO0FBQUMsaUJBQVMsbUJBQW1CLG1DQUFrQyxVQUFTLE1BQU07QUFBQSxNQUFDO0FBQUMsb0JBQWMsT0FBTyxRQUFRLENBQUMsT0FBTSxXQUFRO0FBQUMsY0FBTSxRQUFNLE9BQU87QUFBTyxZQUFHLE1BQU0sU0FBUTtBQUFDLGNBQUcsTUFBTSxTQUFPLFVBQVM7QUFBQyxtQkFBTyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQUEsVUFBQyxXQUFTLE1BQU0sU0FBTyxTQUFRO0FBQUMsbUJBQU8sS0FBSyxVQUFVLEtBQUssQ0FBQztBQUFBLFVBQUMsV0FBUyxNQUFNLGFBQVcsV0FBUyxNQUFNLGFBQVcsU0FBUTtBQUFDLGtCQUFNLElBQUksTUFBTSxpQkFBaUI7QUFBQSxVQUFDLE9BQUs7QUFBQyxtQkFBTyxLQUFLLEtBQUssVUFBVSxPQUFPLENBQUMsTUFBTSxJQUFJLEdBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUFBLFVBQUM7QUFBQSxRQUFDLE9BQUs7QUFBQyxvQkFBVSxLQUFLLEtBQUs7QUFBRSxxQkFBVyxLQUFLLEtBQUs7QUFBQSxRQUFDO0FBQUEsTUFBQyxDQUFDO0FBQUUsYUFBTSxFQUFDLE1BQUssS0FBSyxVQUFVLE9BQU8sV0FBVSxVQUFVLEdBQUUsT0FBYTtBQUFBLElBQUM7QUFBQSxJQUFDLGVBQWUsZUFBYyxPQUFLLFFBQU87QUFBQyxVQUFHLE9BQU8sa0JBQWdCLFVBQVM7QUFBQyx3QkFBYyxLQUFLLFNBQVMsYUFBYTtBQUFBLE1BQUM7QUFBQyxVQUFHLFVBQVEsUUFBTSxDQUFDLGNBQWMsV0FBVTtBQUFDLFlBQUksWUFBVSxLQUFLLGNBQWMsYUFBYTtBQUFFLFlBQUcsQ0FBQyxZQUFZLE9BQU8sSUFBRyxFQUFFLEtBQUcsT0FBTyxHQUFHLFlBQVksTUFBSSxXQUFVO0FBQUMsbUJBQVMsV0FBVywyQkFBMEIsT0FBTyxPQUFPLGtCQUFpQixFQUFDLFVBQVMsYUFBWSxVQUFTLFdBQVUsT0FBTSxPQUFPLEdBQUUsQ0FBQztBQUFBLFFBQUM7QUFBQyxpQkFBTyxPQUFPLE1BQU0sQ0FBQztBQUFBLE1BQUM7QUFBQyxVQUFJLFVBQVEsQ0FBQztBQUFFLFVBQUksYUFBVyxDQUFDO0FBQUUsVUFBSSxVQUFRLENBQUM7QUFBRSxvQkFBYyxPQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxZQUFHLE1BQU0sU0FBUTtBQUFDLGNBQUcsTUFBTSxTQUFPLFlBQVUsTUFBTSxTQUFPLFdBQVMsTUFBTSxhQUFXLFdBQVMsTUFBTSxhQUFXLFNBQVE7QUFBQyxvQkFBUSxLQUFLLFVBQVUsV0FBVyxFQUFDLE1BQUssV0FBVSxNQUFLLE1BQU0sS0FBSSxDQUFDLENBQUM7QUFBRSxvQkFBUSxLQUFLLElBQUk7QUFBQSxVQUFDLE9BQUs7QUFBQyxvQkFBUSxLQUFLLEtBQUs7QUFBRSxvQkFBUSxLQUFLLEtBQUs7QUFBQSxVQUFDO0FBQUEsUUFBQyxPQUFLO0FBQUMscUJBQVcsS0FBSyxLQUFLO0FBQUUsa0JBQVEsS0FBSyxLQUFLO0FBQUEsUUFBQztBQUFBLE1BQUMsQ0FBQztBQUFFLFVBQUksZ0JBQWMsVUFBUSxPQUFLLEtBQUssVUFBVSxPQUFPLFNBQVEsT0FBTyxNQUFNLENBQUMsSUFBRTtBQUFLLFVBQUksbUJBQWlCLEtBQUssVUFBVSxPQUFPLFlBQVcsT0FBSyxJQUFJO0FBQUUsVUFBSSxTQUFPLENBQUM7QUFBRSxVQUFJLGtCQUFnQixHQUFFLGVBQWE7QUFBRSxvQkFBYyxPQUFPLFFBQVEsQ0FBQyxPQUFNLFdBQVE7QUFBQyxZQUFHLE1BQU0sU0FBUTtBQUFDLGNBQUcsaUJBQWUsTUFBSztBQUFDLG1CQUFPLFVBQU8sSUFBSSxRQUFRLEVBQUMsWUFBVyxNQUFLLE1BQUssS0FBSSxDQUFDO0FBQUEsVUFBQyxXQUFTLFFBQVEsU0FBTztBQUFDLG1CQUFPLFVBQU8sSUFBSSxRQUFRLEVBQUMsWUFBVyxNQUFLLE1BQUssY0FBYyxnQkFBZSxDQUFDO0FBQUEsVUFBQyxPQUFLO0FBQUMsZ0JBQUc7QUFBQyxxQkFBTyxVQUFPLGNBQWM7QUFBQSxZQUFlLFNBQU8sT0FBTjtBQUFhLHFCQUFPLFVBQU87QUFBQSxZQUFLO0FBQUEsVUFBQztBQUFBLFFBQUMsT0FBSztBQUFDLGNBQUc7QUFBQyxtQkFBTyxVQUFPLGlCQUFpQjtBQUFBLFVBQWtCLFNBQU8sT0FBTjtBQUFhLG1CQUFPLFVBQU87QUFBQSxVQUFLO0FBQUEsUUFBQztBQUFDLFlBQUcsTUFBTSxRQUFNLE9BQU8sTUFBTSxTQUFPLE1BQUs7QUFBQyxnQkFBTSxRQUFNLE9BQU87QUFBTyxjQUFHLGlCQUFpQixPQUFNO0FBQUMsbUJBQU8sZUFBZSxRQUFPLE1BQU0sTUFBSyxFQUFDLEtBQUksTUFBSTtBQUFDLG9CQUFNLGdCQUFnQixZQUFZLEtBQUssVUFBVSxNQUFNLElBQUksS0FBSSxLQUFLO0FBQUEsWUFBQyxFQUFDLENBQUM7QUFBQSxVQUFDLE9BQUs7QUFBQyxtQkFBTyxNQUFNLFFBQU07QUFBQSxVQUFLO0FBQUEsUUFBQztBQUFBLE1BQUMsQ0FBQztBQUFFLGVBQVEsSUFBRSxHQUFFLElBQUUsT0FBTyxRQUFPLEtBQUk7QUFBQyxjQUFNLFFBQU0sT0FBTztBQUFHLFlBQUcsaUJBQWlCLE9BQU07QUFBQyxpQkFBTyxlQUFlLFFBQU8sR0FBRSxFQUFDLEtBQUksTUFBSTtBQUFDLGtCQUFNLGdCQUFnQixTQUFTLEtBQUksS0FBSztBQUFBLFVBQUMsRUFBQyxDQUFDO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxhQUFPLE9BQU8sT0FBTyxNQUFNO0FBQUEsSUFBQztBQUFBLElBQUMsaUJBQWlCLElBQUc7QUFBQyxVQUFJLFdBQVMsS0FBSyxZQUFZLEdBQUcsS0FBSyxVQUFVLEdBQUUsRUFBRSxFQUFFLFlBQVksQ0FBQztBQUFFLFVBQUcsQ0FBQyxVQUFTO0FBQUMsZUFBTztBQUFBLE1BQUk7QUFBQyxhQUFPLElBQUksdUJBQXVCLEVBQUMsTUFBSyxLQUFLLFVBQVUsT0FBTyxTQUFTLFFBQU8sT0FBSyxHQUFHLEtBQUssVUFBVSxFQUFFLENBQUMsR0FBRSxrQkFBaUIsVUFBUyxNQUFLLFNBQVMsTUFBSyxXQUFVLFNBQVMsT0FBTyxHQUFFLFNBQVEsS0FBSyxXQUFXLFFBQVEsR0FBRSxPQUFNLFVBQVUsS0FBSyxHQUFHLFNBQU8sR0FBRyxFQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxTQUFTLEtBQUk7QUFBQyxVQUFJLFdBQVMsS0FBSyxTQUFTLElBQUksT0FBTyxFQUFFO0FBQUUsVUFBRyxDQUFDLFlBQVUsU0FBUyxXQUFVO0FBQUMsZUFBTztBQUFBLE1BQUk7QUFBQyxhQUFPLElBQUksZUFBZSxFQUFDLGVBQWMsVUFBUyxNQUFLLFNBQVMsTUFBSyxXQUFVLFNBQVMsT0FBTyxHQUFFLE9BQU0sS0FBSyxjQUFjLFFBQVEsR0FBRSxNQUFLLEtBQUssZUFBZSxVQUFTLElBQUksTUFBSyxJQUFJLE1BQU0sRUFBQyxDQUFDO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxZQUFZLE9BQU07QUFBQyxhQUFNLENBQUMsQ0FBRSxVQUFPLE1BQU07QUFBQSxJQUFhO0FBQUEsRUFBQztBQUFjLE1BQU0sWUFBVTtBQUF1QyxNQUFNLFdBQVMsSUFBSSxPQUFPLFNBQVM7QUFBRSxNQUFNLFlBQU4sY0FBd0IsWUFBVztBQUFBLElBQUMsT0FBTyxZQUFZLE9BQU07QUFBQyxhQUFNLENBQUMsQ0FBRSxVQUFPLE1BQU07QUFBQSxJQUFhO0FBQUEsRUFBQztBQUE2NkIsTUFBTSxXQUFOLE1BQWM7QUFBQSxJQUFDLGNBQWE7QUFBQyxlQUFTLGNBQWMsWUFBVyxRQUFRO0FBQUUscUJBQWUsTUFBSyxlQUFjLElBQUk7QUFBQSxJQUFDO0FBQUEsSUFBQyxZQUFZLFdBQVUsVUFBUztBQUFDLGFBQU8sS0FBSyxHQUFHLFdBQVUsUUFBUTtBQUFBLElBQUM7QUFBQSxJQUFDLGVBQWUsV0FBVSxVQUFTO0FBQUMsYUFBTyxLQUFLLElBQUksV0FBVSxRQUFRO0FBQUEsSUFBQztBQUFBLElBQUMsT0FBTyxXQUFXLE9BQU07QUFBQyxhQUFNLENBQUMsQ0FBRSxVQUFPLE1BQU07QUFBQSxJQUFZO0FBQUEsRUFBQztBQUFDLE1BQU0sWUFBVTtBQUFxQyxNQUFJLGNBQVksVUFBUSxPQUFPLGFBQVcsU0FBUyxTQUFRLFlBQVcsR0FBRSxXQUFVO0FBQUMsbUJBQWUsT0FBTTtBQUFDLGFBQU8saUJBQWlCLElBQUUsUUFBTSxJQUFJLEVBQUUsU0FBUyxTQUFRO0FBQUMsZ0JBQVEsS0FBSztBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQyxXQUFPLElBQUksTUFBSSxLQUFFLFVBQVUsU0FBUyxTQUFRLFFBQU87QUFBQyx5QkFBbUIsT0FBTTtBQUFDLFlBQUc7QUFBQyxlQUFLLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFBQSxRQUFDLFNBQU8sR0FBTjtBQUFTLGlCQUFPLENBQUM7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLHdCQUFrQixPQUFNO0FBQUMsWUFBRztBQUFDLGVBQUssVUFBVSxTQUFTLEtBQUssQ0FBQztBQUFBLFFBQUMsU0FBTyxHQUFOO0FBQVMsaUJBQU8sQ0FBQztBQUFBLFFBQUM7QUFBQSxNQUFDO0FBQUMsb0JBQWMsUUFBTztBQUFDLGVBQU8sT0FBSyxRQUFRLE9BQU8sS0FBSyxJQUFFLE1BQU0sT0FBTyxLQUFLLEVBQUUsS0FBSyxXQUFVLFFBQVE7QUFBQSxNQUFDO0FBQUMsV0FBTSxhQUFVLFVBQVUsTUFBTSxTQUFRLGNBQVksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQUEsSUFBQyxDQUFDO0FBQUEsRUFBQztBQUFFLE1BQU0sV0FBUyxJQUFJLE9BQU8sU0FBUztBQUFFLE1BQU0seUJBQXVCLENBQUMsY0FBYSxXQUFVLFFBQU8sUUFBTyxZQUFXLFlBQVcsU0FBUSxNQUFLLFFBQU8sT0FBTztBQUFFLE1BQU0sZ0JBQWMsQ0FBQyxPQUFPLE9BQU8sb0JBQW1CLE9BQU8sT0FBTyxlQUFjLE9BQU8sT0FBTyx1QkFBdUI7QUFBRSxNQUFNLFNBQU4sTUFBWTtBQUFBLElBQUMsY0FBYTtBQUFDLGVBQVMsY0FBYyxZQUFXLE1BQU07QUFBRSxxQkFBZSxNQUFLLGFBQVksSUFBSTtBQUFBLElBQUM7QUFBQSxJQUFDLFdBQVcsVUFBUztBQUFDLGFBQU8sWUFBWSxNQUFLLFFBQU8sUUFBTyxhQUFXO0FBQUMsYUFBSyxlQUFlLFlBQVk7QUFBRSxlQUFPLE1BQU0sS0FBSyxTQUFTLFdBQVcsS0FBSyxXQUFXLEdBQUUsUUFBUTtBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLG9CQUFvQixVQUFTO0FBQUMsYUFBTyxZQUFZLE1BQUssUUFBTyxRQUFPLGFBQVc7QUFBQyxhQUFLLGVBQWUscUJBQXFCO0FBQUUsZUFBTyxNQUFNLEtBQUssU0FBUyxvQkFBb0IsS0FBSyxXQUFXLEdBQUUsUUFBUTtBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLFlBQVksYUFBWTtBQUFDLGFBQU8sWUFBWSxNQUFLLFFBQU8sUUFBTyxhQUFXO0FBQUMsYUFBSyxlQUFlLGFBQWE7QUFBRSxjQUFNLEtBQUcsTUFBTSxrQkFBa0IsS0FBSyxpQkFBaUIsV0FBVyxDQUFDO0FBQUUsZUFBTyxNQUFNLEtBQUssU0FBUyxZQUFZLEVBQUU7QUFBQSxNQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxLQUFLLGFBQVksVUFBUztBQUFDLGFBQU8sWUFBWSxNQUFLLFFBQU8sUUFBTyxhQUFXO0FBQUMsYUFBSyxlQUFlLE1BQU07QUFBRSxjQUFNLEtBQUcsTUFBTSxrQkFBa0IsS0FBSyxpQkFBaUIsV0FBVyxDQUFDO0FBQUUsZUFBTyxNQUFNLEtBQUssU0FBUyxLQUFLLElBQUcsUUFBUTtBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLGdCQUFnQixhQUFZO0FBQUMsV0FBSyxlQUFlLGlCQUFpQjtBQUFFLGFBQU8sS0FBSyxvQkFBb0IsV0FBVyxFQUFFLEtBQUssUUFBSTtBQUFDLGVBQU8sS0FBSyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssY0FBVTtBQUFDLGlCQUFPLEtBQUssU0FBUyxnQkFBZ0IsUUFBUTtBQUFBLFFBQUMsQ0FBQztBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLGFBQVk7QUFBQyxhQUFPLFlBQVksTUFBSyxRQUFPLFFBQU8sYUFBVztBQUFDLGFBQUssZUFBZSxZQUFZO0FBQUUsY0FBTSxVQUFRLE1BQU0sS0FBSyxTQUFTLFdBQVc7QUFBRSxlQUFPLFFBQVE7QUFBQSxNQUFPLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxjQUFhO0FBQUMsYUFBTyxZQUFZLE1BQUssUUFBTyxRQUFPLGFBQVc7QUFBQyxhQUFLLGVBQWUsYUFBYTtBQUFFLGVBQU8sTUFBTSxLQUFLLFNBQVMsWUFBWTtBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLFlBQVksT0FBSztBQUFDLGFBQU8sWUFBWSxNQUFLLFFBQU8sUUFBTyxhQUFXO0FBQUMsYUFBSyxlQUFlLGFBQWE7QUFBRSxlQUFPLE1BQU0sS0FBSyxTQUFTLFlBQVksS0FBSTtBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLGlCQUFpQixhQUFZO0FBQUMsaUJBQVUsUUFBTyxhQUFZO0FBQUMsWUFBRyx1QkFBdUIsUUFBUSxJQUFHLE1BQUksSUFBRztBQUFDLG1CQUFTLG1CQUFtQiw4QkFBNEIsTUFBSSxlQUFjLFdBQVc7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFDLFlBQU0sS0FBRyxZQUFZLFdBQVc7QUFBRSxVQUFHLEdBQUcsUUFBTSxNQUFLO0FBQUMsV0FBRyxPQUFLLEtBQUssV0FBVztBQUFBLE1BQUMsT0FBSztBQUFDLFdBQUcsT0FBSyxRQUFRLElBQUksQ0FBQyxRQUFRLFFBQVEsR0FBRyxJQUFJLEdBQUUsS0FBSyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUssWUFBUTtBQUFDLGNBQUcsT0FBTyxHQUFHLFlBQVksTUFBSSxPQUFPLEdBQUcsWUFBWSxHQUFFO0FBQUMscUJBQVMsbUJBQW1CLHlCQUF3QixlQUFjLFdBQVc7QUFBQSxVQUFDO0FBQUMsaUJBQU8sT0FBTztBQUFBLFFBQUUsQ0FBQztBQUFBLE1BQUM7QUFBQyxhQUFPO0FBQUEsSUFBRTtBQUFBLElBQUMsb0JBQW9CLGFBQVk7QUFBQyxhQUFPLFlBQVksTUFBSyxRQUFPLFFBQU8sYUFBVztBQUFDLGNBQU0sS0FBRyxNQUFNLGtCQUFrQixLQUFLLGlCQUFpQixXQUFXLENBQUM7QUFBRSxZQUFHLEdBQUcsTUFBSSxNQUFLO0FBQUMsYUFBRyxLQUFHLFFBQVEsUUFBUSxHQUFHLEVBQUUsRUFBRSxLQUFLLFFBQUksWUFBWSxNQUFLLFFBQU8sUUFBTyxhQUFXO0FBQUMsZ0JBQUcsTUFBSSxNQUFLO0FBQUMscUJBQU87QUFBQSxZQUFJO0FBQUMsa0JBQU0sVUFBUSxNQUFNLEtBQUssWUFBWSxFQUFFO0FBQUUsZ0JBQUcsV0FBUyxNQUFLO0FBQUMsdUJBQVMsbUJBQW1CLHNDQUFxQyxTQUFRLEVBQUU7QUFBQSxZQUFDO0FBQUMsbUJBQU87QUFBQSxVQUFPLENBQUMsQ0FBQztBQUFBLFFBQUM7QUFBQyxZQUFHLEdBQUcsWUFBVSxNQUFLO0FBQUMsYUFBRyxXQUFTLEtBQUssWUFBWTtBQUFBLFFBQUM7QUFBQyxZQUFHLEdBQUcsU0FBTyxNQUFLO0FBQUMsYUFBRyxRQUFNLEtBQUssb0JBQW9CLFNBQVM7QUFBQSxRQUFDO0FBQUMsWUFBRyxHQUFHLFlBQVUsTUFBSztBQUFDLGFBQUcsV0FBUyxLQUFLLFlBQVksRUFBRSxFQUFFLE1BQU0sV0FBTztBQUFDLGdCQUFHLGNBQWMsUUFBUSxNQUFNLElBQUksS0FBRyxHQUFFO0FBQUMsb0JBQU07QUFBQSxZQUFLO0FBQUMsbUJBQU8sU0FBUyxXQUFXLDZFQUE0RSxPQUFPLE9BQU8seUJBQXdCLEVBQUMsT0FBWSxHQUFLLENBQUM7QUFBQSxVQUFDLENBQUM7QUFBQSxRQUFDO0FBQUMsWUFBRyxHQUFHLFdBQVMsTUFBSztBQUFDLGFBQUcsVUFBUSxLQUFLLFdBQVc7QUFBQSxRQUFDLE9BQUs7QUFBQyxhQUFHLFVBQVEsUUFBUSxJQUFJLENBQUMsUUFBUSxRQUFRLEdBQUcsT0FBTyxHQUFFLEtBQUssV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFLLGFBQVM7QUFBQyxnQkFBRyxRQUFRLE9BQUssS0FBRyxRQUFRLE9BQUssUUFBUSxJQUFHO0FBQUMsdUJBQVMsbUJBQW1CLDRCQUEyQixlQUFjLFdBQVc7QUFBQSxZQUFDO0FBQUMsbUJBQU8sUUFBUTtBQUFBLFVBQUUsQ0FBQztBQUFBLFFBQUM7QUFBQyxlQUFPLE1BQU0sa0JBQWtCLEVBQUU7QUFBQSxNQUFDLENBQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxlQUFlLFdBQVU7QUFBQyxVQUFHLENBQUMsS0FBSyxVQUFTO0FBQUMsaUJBQVMsV0FBVyxvQkFBbUIsT0FBTyxPQUFPLHVCQUFzQixFQUFDLFdBQVUsYUFBVyxpQkFBZ0IsQ0FBQztBQUFBLE1BQUM7QUFBQSxJQUFDO0FBQUEsSUFBQyxPQUFPLFNBQVMsT0FBTTtBQUFDLGFBQU0sQ0FBQyxDQUFFLFVBQU8sTUFBTTtBQUFBLElBQVU7QUFBQSxFQUFDO0FBQUMsTUFBTSxhQUFOLGNBQXlCLE9BQU07QUFBQSxJQUFDLFlBQVksU0FBUSxVQUFTO0FBQUMsZUFBUyxTQUFTLFlBQVcsVUFBVTtBQUFFLFlBQU07QUFBRSxxQkFBZSxNQUFLLFdBQVUsT0FBTztBQUFFLHFCQUFlLE1BQUssWUFBVyxZQUFVLElBQUk7QUFBQSxJQUFDO0FBQUEsSUFBQyxhQUFZO0FBQUMsYUFBTyxRQUFRLFFBQVEsS0FBSyxPQUFPO0FBQUEsSUFBQztBQUFBLElBQUMsTUFBTSxTQUFRLFdBQVU7QUFBQyxhQUFPLFFBQVEsUUFBUSxFQUFFLEtBQUssTUFBSTtBQUFDLGlCQUFTLFdBQVcsU0FBUSxPQUFPLE9BQU8sdUJBQXNCLEVBQUMsVUFBbUIsQ0FBQztBQUFBLE1BQUMsQ0FBQztBQUFBLElBQUM7QUFBQSxJQUFDLFlBQVksU0FBUTtBQUFDLGFBQU8sS0FBSyxNQUFNLG1DQUFrQyxhQUFhO0FBQUEsSUFBQztBQUFBLElBQUMsZ0JBQWdCLGFBQVk7QUFBQyxhQUFPLEtBQUssTUFBTSx1Q0FBc0MsaUJBQWlCO0FBQUEsSUFBQztBQUFBLElBQUMsZUFBZSxRQUFPLE9BQU0sT0FBTTtBQUFDLGFBQU8sS0FBSyxNQUFNLHFDQUFvQyxlQUFlO0FBQUEsSUFBQztBQUFBLElBQUMsUUFBUSxVQUFTO0FBQUMsYUFBTyxJQUFJLFdBQVcsS0FBSyxTQUFRLFFBQVE7QUFBQSxJQUFDO0FBQUEsRUFBQztBQUFDLE1BQUkscUJBQW1CO0FBQU8sa0JBQWdCLEtBQUksS0FBSTtBQUFDLFFBQUcsQ0FBQztBQUFJLFlBQU0sSUFBSSxNQUFNLE9BQUssa0JBQWtCO0FBQUEsRUFBQztBQUFDLFNBQU8sUUFBTSxxQkFBcUIsR0FBRSxJQUFFLEtBQUk7QUFBQyxRQUFHLEtBQUc7QUFBRSxZQUFNLElBQUksTUFBTSxPQUFLLHVCQUFxQixJQUFFLFNBQU8sRUFBQztBQUFBLEVBQUM7QUFBRSxNQUFJLG1CQUFpQixxQkFBcUIsU0FBUyxRQUFPO0FBQUMsUUFBRyxPQUFPLE9BQU8sV0FBUyxZQUFXO0FBQUMsYUFBTyxVQUFRLG1CQUFrQixNQUFLLFdBQVU7QUFBQyxZQUFHLFdBQVU7QUFBQyxlQUFLLFNBQU87QUFBVSxlQUFLLFlBQVUsT0FBTyxPQUFPLFVBQVUsV0FBVSxFQUFDLGFBQVksRUFBQyxPQUFNLE1BQUssWUFBVyxPQUFNLFVBQVMsTUFBSyxjQUFhLEtBQUksRUFBQyxDQUFDO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQSxJQUFDLE9BQUs7QUFBQyxhQUFPLFVBQVEsbUJBQWtCLE1BQUssV0FBVTtBQUFDLFlBQUcsV0FBVTtBQUFDLGVBQUssU0FBTztBQUFVLGNBQUksV0FBUyxXQUFVO0FBQUEsVUFBQztBQUFFLG1CQUFTLFlBQVUsVUFBVTtBQUFVLGVBQUssWUFBVSxJQUFJO0FBQVMsZUFBSyxVQUFVLGNBQVk7QUFBQSxRQUFJO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQSxFQUFDLENBQUM7QUFBRSxNQUFJLFdBQVMscUJBQXFCLFNBQVMsUUFBTztBQUFDLFFBQUc7QUFBQyxVQUFJLE9BQUs7QUFBSyxVQUFHLE9BQU8sS0FBSyxhQUFXO0FBQVcsY0FBSztBQUFHLGFBQU8sVUFBUSxLQUFLO0FBQUEsSUFBUSxTQUFPLEdBQU47QUFBUyxhQUFPLFVBQVE7QUFBQSxJQUFnQjtBQUFBLEVBQUMsQ0FBQztBQUFlLE1BQUksYUFBVztBQUFTLG1CQUFpQixLQUFJLEtBQUk7QUFBQyxRQUFHLE1BQU0sUUFBUSxHQUFHO0FBQUUsYUFBTyxJQUFJLE1BQU07QUFBRSxRQUFHLENBQUM7QUFBSSxhQUFNLENBQUM7QUFBRSxRQUFJLE1BQUksQ0FBQztBQUFFLFFBQUcsT0FBTyxRQUFNLFVBQVM7QUFBQyxVQUFHLENBQUMsS0FBSTtBQUFDLGlCQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsY0FBSSxJQUFFLElBQUksV0FBVyxDQUFDO0FBQUUsY0FBSSxLQUFHLEtBQUc7QUFBRSxjQUFJLEtBQUcsSUFBRTtBQUFJLGNBQUc7QUFBRyxnQkFBSSxLQUFLLElBQUcsRUFBRTtBQUFBO0FBQU8sZ0JBQUksS0FBSyxFQUFFO0FBQUEsUUFBQztBQUFBLE1BQUMsV0FBUyxRQUFNLE9BQU07QUFBQyxjQUFJLElBQUksUUFBUSxnQkFBZSxFQUFFO0FBQUUsWUFBRyxJQUFJLFNBQU8sTUFBSTtBQUFFLGdCQUFJLE1BQUk7QUFBSSxhQUFJLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFHO0FBQUUsY0FBSSxLQUFLLFNBQVMsSUFBSSxLQUFHLElBQUksSUFBRSxJQUFHLEVBQUUsQ0FBQztBQUFBLE1BQUM7QUFBQSxJQUFDLE9BQUs7QUFBQyxXQUFJLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTztBQUFJLFlBQUksS0FBRyxJQUFJLEtBQUc7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUc7QUFBQyxNQUFJLFlBQVU7QUFBUSxtQkFBaUIsS0FBSTtBQUFDLFFBQUksTUFBSTtBQUFHLGFBQVEsSUFBRSxHQUFFLElBQUUsSUFBSSxRQUFPO0FBQUksYUFBSyxNQUFNLElBQUksR0FBRyxTQUFTLEVBQUUsQ0FBQztBQUFFLFdBQU87QUFBQSxFQUFHO0FBQUMsTUFBSSxVQUFRO0FBQVEsaUJBQWUsR0FBRTtBQUFDLFFBQUksTUFBSSxNQUFJLEtBQUcsTUFBSSxJQUFFLFFBQU0sS0FBRyxJQUFFLFdBQVUsS0FBRSxRQUFNO0FBQUcsV0FBTyxRQUFNO0FBQUEsRUFBQztBQUFDLE1BQUksVUFBUTtBQUFNLG1CQUFpQixLQUFJLFFBQU87QUFBQyxRQUFJLE1BQUk7QUFBRyxhQUFRLElBQUUsR0FBRSxJQUFFLElBQUksUUFBTyxLQUFJO0FBQUMsVUFBSSxJQUFFLElBQUk7QUFBRyxVQUFHLFdBQVM7QUFBUyxZQUFFLE1BQU0sQ0FBQztBQUFFLGFBQUssTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQUEsSUFBQztBQUFDLFdBQU87QUFBQSxFQUFHO0FBQUMsTUFBSSxZQUFVO0FBQVEsaUJBQWUsTUFBSztBQUFDLFFBQUcsS0FBSyxXQUFTO0FBQUUsYUFBTSxNQUFJO0FBQUE7QUFBVSxhQUFPO0FBQUEsRUFBSTtBQUFDLE1BQUksVUFBUTtBQUFNLGlCQUFlLE1BQUs7QUFBQyxRQUFHLEtBQUssV0FBUztBQUFFLGFBQU0sTUFBSTtBQUFBLGFBQWEsS0FBSyxXQUFTO0FBQUUsYUFBTSxPQUFLO0FBQUEsYUFBYSxLQUFLLFdBQVM7QUFBRSxhQUFNLFFBQU07QUFBQSxhQUFhLEtBQUssV0FBUztBQUFFLGFBQU0sU0FBTztBQUFBLGFBQWEsS0FBSyxXQUFTO0FBQUUsYUFBTSxVQUFRO0FBQUEsYUFBYSxLQUFLLFdBQVM7QUFBRSxhQUFNLFdBQVM7QUFBQSxhQUFhLEtBQUssV0FBUztBQUFFLGFBQU0sWUFBVTtBQUFBO0FBQVUsYUFBTztBQUFBLEVBQUk7QUFBQyxNQUFJLFVBQVE7QUFBTSxrQkFBZ0IsS0FBSSxPQUFNLEtBQUksUUFBTztBQUFDLFFBQUksTUFBSSxNQUFJO0FBQU0sdUJBQW1CLE1BQUksTUFBSSxDQUFDO0FBQUUsUUFBSSxNQUFJLElBQUksTUFBTSxNQUFJLENBQUM7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLE9BQU0sSUFBRSxJQUFJLFFBQU8sS0FBSSxLQUFHLEdBQUU7QUFBQyxVQUFJO0FBQUUsVUFBRyxXQUFTO0FBQU0sWUFBRSxJQUFJLE1BQUksS0FBRyxJQUFJLElBQUUsTUFBSSxLQUFHLElBQUksSUFBRSxNQUFJLElBQUUsSUFBSSxJQUFFO0FBQUE7QUFBUSxZQUFFLElBQUksSUFBRSxNQUFJLEtBQUcsSUFBSSxJQUFFLE1BQUksS0FBRyxJQUFJLElBQUUsTUFBSSxJQUFFLElBQUk7QUFBRyxVQUFJLEtBQUcsTUFBSTtBQUFBLElBQUM7QUFBQyxXQUFPO0FBQUEsRUFBRztBQUFDLE1BQUksV0FBUztBQUFPLG1CQUFpQixLQUFJLFFBQU87QUFBQyxRQUFJLE1BQUksSUFBSSxNQUFNLElBQUksU0FBTyxDQUFDO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsSUFBSSxRQUFPLEtBQUksS0FBRyxHQUFFO0FBQUMsVUFBSSxJQUFFLElBQUk7QUFBRyxVQUFHLFdBQVMsT0FBTTtBQUFDLFlBQUksS0FBRyxNQUFJO0FBQUcsWUFBSSxJQUFFLEtBQUcsTUFBSSxLQUFHO0FBQUksWUFBSSxJQUFFLEtBQUcsTUFBSSxJQUFFO0FBQUksWUFBSSxJQUFFLEtBQUcsSUFBRTtBQUFBLE1BQUcsT0FBSztBQUFDLFlBQUksSUFBRSxLQUFHLE1BQUk7QUFBRyxZQUFJLElBQUUsS0FBRyxNQUFJLEtBQUc7QUFBSSxZQUFJLElBQUUsS0FBRyxNQUFJLElBQUU7QUFBSSxZQUFJLEtBQUcsSUFBRTtBQUFBLE1BQUc7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUc7QUFBQyxNQUFJLFlBQVU7QUFBUSxrQkFBZ0IsR0FBRSxHQUFFO0FBQUMsV0FBTyxNQUFJLElBQUUsS0FBRyxLQUFHO0FBQUEsRUFBQztBQUFDLE1BQUksV0FBUztBQUFPLGtCQUFnQixHQUFFLEdBQUU7QUFBQyxXQUFPLEtBQUcsSUFBRSxNQUFJLEtBQUc7QUFBQSxFQUFDO0FBQUMsTUFBSSxXQUFTO0FBQU8saUJBQWUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFFLE1BQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxVQUFRO0FBQU0sbUJBQWlCLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFFLElBQUUsTUFBSTtBQUFBLEVBQUM7QUFBQyxNQUFJLFlBQVU7QUFBUSxtQkFBaUIsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBRSxJQUFFLElBQUUsTUFBSTtBQUFBLEVBQUM7QUFBQyxNQUFJLFlBQVU7QUFBUSxtQkFBaUIsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFFLElBQUUsSUFBRSxJQUFFLE1BQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxZQUFVO0FBQVEsaUJBQWUsS0FBSSxLQUFJLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRyxJQUFJO0FBQUssUUFBSSxLQUFHLElBQUksTUFBSTtBQUFHLFFBQUksS0FBRyxLQUFHLE9BQUs7QUFBRSxRQUFJLEtBQUksTUFBRyxLQUFHLElBQUUsS0FBRyxLQUFHO0FBQUcsUUFBSSxPQUFLLE9BQUs7QUFBRSxRQUFJLE1BQUksS0FBRztBQUFBLEVBQUU7QUFBQyxNQUFJLFVBQVE7QUFBTSxvQkFBa0IsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRyxLQUFHLE9BQUs7QUFBRSxRQUFJLEtBQUksTUFBRyxLQUFHLElBQUUsS0FBRyxLQUFHO0FBQUcsV0FBTyxPQUFLO0FBQUEsRUFBQztBQUFDLE1BQUksYUFBVztBQUFTLG9CQUFrQixJQUFHLElBQUcsSUFBRyxJQUFHO0FBQUMsUUFBSSxLQUFHLEtBQUc7QUFBRyxXQUFPLE9BQUs7QUFBQSxFQUFDO0FBQUMsTUFBSSxhQUFXO0FBQVMsc0JBQW9CLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTTtBQUFFLFFBQUksS0FBRztBQUFHLFNBQUcsS0FBRyxPQUFLO0FBQUUsYUFBTyxLQUFHLEtBQUcsSUFBRTtBQUFFLFNBQUcsS0FBRyxPQUFLO0FBQUUsYUFBTyxLQUFHLEtBQUcsSUFBRTtBQUFFLFNBQUcsS0FBRyxPQUFLO0FBQUUsYUFBTyxLQUFHLEtBQUcsSUFBRTtBQUFFLFFBQUksS0FBRyxLQUFHLEtBQUcsS0FBRyxLQUFHO0FBQU0sV0FBTyxPQUFLO0FBQUEsRUFBQztBQUFDLE1BQUksZUFBYTtBQUFXLHNCQUFvQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLEtBQUcsS0FBRyxLQUFHLEtBQUc7QUFBRyxXQUFPLE9BQUs7QUFBQSxFQUFDO0FBQUMsTUFBSSxlQUFhO0FBQVcsc0JBQW9CLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLFFBQU07QUFBRSxRQUFJLEtBQUc7QUFBRyxTQUFHLEtBQUcsT0FBSztBQUFFLGFBQU8sS0FBRyxLQUFHLElBQUU7QUFBRSxTQUFHLEtBQUcsT0FBSztBQUFFLGFBQU8sS0FBRyxLQUFHLElBQUU7QUFBRSxTQUFHLEtBQUcsT0FBSztBQUFFLGFBQU8sS0FBRyxLQUFHLElBQUU7QUFBRSxTQUFHLEtBQUcsT0FBSztBQUFFLGFBQU8sS0FBRyxLQUFHLElBQUU7QUFBRSxRQUFJLEtBQUcsS0FBRyxLQUFHLEtBQUcsS0FBRyxLQUFHO0FBQU0sV0FBTyxPQUFLO0FBQUEsRUFBQztBQUFDLE1BQUksZUFBYTtBQUFXLHNCQUFvQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHO0FBQUMsUUFBSSxLQUFHLEtBQUcsS0FBRyxLQUFHLEtBQUc7QUFBRyxXQUFPLE9BQUs7QUFBQSxFQUFDO0FBQUMsTUFBSSxlQUFhO0FBQVcscUJBQW1CLElBQUcsSUFBRyxLQUFJO0FBQUMsUUFBSSxLQUFFLE1BQUksS0FBRyxNQUFJLE9BQUs7QUFBSSxXQUFPLE9BQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxjQUFZO0FBQVUscUJBQW1CLElBQUcsSUFBRyxLQUFJO0FBQUMsUUFBSSxLQUFFLE1BQUksS0FBRyxNQUFJLE9BQUs7QUFBSSxXQUFPLE9BQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxjQUFZO0FBQVUsb0JBQWtCLElBQUcsSUFBRyxLQUFJO0FBQUMsV0FBTyxPQUFLO0FBQUEsRUFBRztBQUFDLE1BQUksYUFBVztBQUFTLG9CQUFrQixJQUFHLElBQUcsS0FBSTtBQUFDLFFBQUksS0FBRSxNQUFJLEtBQUcsTUFBSSxPQUFLO0FBQUksV0FBTyxPQUFJO0FBQUEsRUFBQztBQUFDLE1BQUksYUFBVztBQUFTLE1BQUksUUFBTSxFQUFDLFVBQVMsWUFBVyxTQUFRLFdBQVUsT0FBTSxTQUFRLE9BQU0sU0FBUSxTQUFRLFdBQVUsT0FBTSxTQUFRLE9BQU0sU0FBUSxRQUFPLFVBQVMsU0FBUSxXQUFVLFFBQU8sVUFBUyxRQUFPLFVBQVMsT0FBTSxTQUFRLFNBQVEsV0FBVSxTQUFRLFdBQVUsU0FBUSxXQUFVLE9BQU0sU0FBUSxVQUFTLFlBQVcsVUFBUyxZQUFXLFlBQVcsY0FBYSxZQUFXLGNBQWEsWUFBVyxjQUFhLFlBQVcsY0FBYSxXQUFVLGFBQVksV0FBVSxhQUFZLFVBQVMsWUFBVyxVQUFTLFdBQVU7QUFBZSx1QkFBb0I7QUFBQyxTQUFLLFVBQVE7QUFBSyxTQUFLLGVBQWE7QUFBRSxTQUFLLFlBQVUsS0FBSyxZQUFZO0FBQVUsU0FBSyxVQUFRLEtBQUssWUFBWTtBQUFRLFNBQUssZUFBYSxLQUFLLFlBQVk7QUFBYSxTQUFLLFlBQVUsS0FBSyxZQUFZLFlBQVU7QUFBRSxTQUFLLFNBQU87QUFBTSxTQUFLLFVBQVEsS0FBSyxZQUFVO0FBQUUsU0FBSyxXQUFTLEtBQUssWUFBVTtBQUFBLEVBQUU7QUFBQyxNQUFJLGNBQVk7QUFBVSxZQUFVLFVBQVUsU0FBTyxnQkFBZ0IsS0FBSSxLQUFJO0FBQUMsVUFBSSxNQUFNLFFBQVEsS0FBSSxHQUFHO0FBQUUsUUFBRyxDQUFDLEtBQUs7QUFBUSxXQUFLLFVBQVE7QUFBQTtBQUFTLFdBQUssVUFBUSxLQUFLLFFBQVEsT0FBTyxHQUFHO0FBQUUsU0FBSyxnQkFBYyxJQUFJO0FBQU8sUUFBRyxLQUFLLFFBQVEsVUFBUSxLQUFLLFNBQVE7QUFBQyxZQUFJLEtBQUs7QUFBUSxVQUFJLEtBQUUsSUFBSSxTQUFPLEtBQUs7QUFBUSxXQUFLLFVBQVEsSUFBSSxNQUFNLElBQUksU0FBTyxJQUFFLElBQUksTUFBTTtBQUFFLFVBQUcsS0FBSyxRQUFRLFdBQVM7QUFBRSxhQUFLLFVBQVE7QUFBSyxZQUFJLE1BQU0sT0FBTyxLQUFJLEdBQUUsSUFBSSxTQUFPLElBQUUsS0FBSyxNQUFNO0FBQUUsZUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFJLFFBQU8sS0FBRyxLQUFLO0FBQVMsYUFBSyxRQUFRLEtBQUksR0FBRSxJQUFFLEtBQUssUUFBUTtBQUFBLElBQUM7QUFBQyxXQUFPO0FBQUEsRUFBSTtBQUFFLFlBQVUsVUFBVSxTQUFPLGdCQUFnQixLQUFJO0FBQUMsU0FBSyxPQUFPLEtBQUssS0FBSyxDQUFDO0FBQUUsdUJBQW1CLEtBQUssWUFBVSxJQUFJO0FBQUUsV0FBTyxLQUFLLFFBQVEsR0FBRztBQUFBLEVBQUM7QUFBRSxZQUFVLFVBQVUsT0FBSyxlQUFjO0FBQUMsUUFBSSxNQUFJLEtBQUs7QUFBYSxRQUFJLFFBQU0sS0FBSztBQUFRLFFBQUksSUFBRSxRQUFPLE9BQUksS0FBSyxhQUFXO0FBQU0sUUFBSSxNQUFJLElBQUksTUFBTSxJQUFFLEtBQUssU0FBUztBQUFFLFFBQUksS0FBRztBQUFJLGFBQVEsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLFVBQUksS0FBRztBQUFFLFlBQU07QUFBRSxRQUFHLEtBQUssV0FBUyxPQUFNO0FBQUMsZUFBUSxJQUFFLEdBQUUsSUFBRSxLQUFLLFdBQVU7QUFBSSxZQUFJLE9BQUs7QUFBRSxVQUFJLE9BQUs7QUFBRSxVQUFJLE9BQUs7QUFBRSxVQUFJLE9BQUs7QUFBRSxVQUFJLE9BQUs7QUFBRSxVQUFJLE9BQUssUUFBTSxLQUFHO0FBQUksVUFBSSxPQUFLLFFBQU0sS0FBRztBQUFJLFVBQUksT0FBSyxRQUFNLElBQUU7QUFBSSxVQUFJLE9BQUssTUFBSTtBQUFBLElBQUcsT0FBSztBQUFDLFVBQUksT0FBSyxNQUFJO0FBQUksVUFBSSxPQUFLLFFBQU0sSUFBRTtBQUFJLFVBQUksT0FBSyxRQUFNLEtBQUc7QUFBSSxVQUFJLE9BQUssUUFBTSxLQUFHO0FBQUksVUFBSSxPQUFLO0FBQUUsVUFBSSxPQUFLO0FBQUUsVUFBSSxPQUFLO0FBQUUsVUFBSSxPQUFLO0FBQUUsV0FBSSxJQUFFLEdBQUUsSUFBRSxLQUFLLFdBQVU7QUFBSSxZQUFJLE9BQUs7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUc7QUFBRSxNQUFJLFNBQU8sRUFBQyxXQUFVLFlBQVc7QUFBZSxNQUFJLFdBQVMsTUFBTTtBQUFPLGdCQUFjLElBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLE9BQUk7QUFBRSxhQUFPLEtBQUssR0FBRSxHQUFFLENBQUM7QUFBRSxRQUFHLE9BQUksS0FBRyxPQUFJO0FBQUUsYUFBTyxJQUFJLEdBQUUsR0FBRSxDQUFDO0FBQUUsUUFBRyxPQUFJO0FBQUUsYUFBTyxNQUFNLEdBQUUsR0FBRSxDQUFDO0FBQUEsRUFBQztBQUFDLE1BQUksU0FBTztBQUFLLGdCQUFjLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFFLElBQUUsQ0FBQyxJQUFFO0FBQUEsRUFBQztBQUFDLE1BQUksU0FBTztBQUFLLGlCQUFlLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQSxFQUFDO0FBQUMsTUFBSSxVQUFRO0FBQU0sZUFBYSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBRSxJQUFFO0FBQUEsRUFBQztBQUFDLE1BQUksUUFBTTtBQUFJLGtCQUFnQixHQUFFO0FBQUMsV0FBTyxTQUFTLEdBQUUsQ0FBQyxJQUFFLFNBQVMsR0FBRSxFQUFFLElBQUUsU0FBUyxHQUFFLEVBQUU7QUFBQSxFQUFDO0FBQUMsTUFBSSxXQUFTO0FBQU8sa0JBQWdCLEdBQUU7QUFBQyxXQUFPLFNBQVMsR0FBRSxDQUFDLElBQUUsU0FBUyxHQUFFLEVBQUUsSUFBRSxTQUFTLEdBQUUsRUFBRTtBQUFBLEVBQUM7QUFBQyxNQUFJLFdBQVM7QUFBTyxrQkFBZ0IsR0FBRTtBQUFDLFdBQU8sU0FBUyxHQUFFLENBQUMsSUFBRSxTQUFTLEdBQUUsRUFBRSxJQUFFLE1BQUk7QUFBQSxFQUFDO0FBQUMsTUFBSSxXQUFTO0FBQU8sa0JBQWdCLEdBQUU7QUFBQyxXQUFPLFNBQVMsR0FBRSxFQUFFLElBQUUsU0FBUyxHQUFFLEVBQUUsSUFBRSxNQUFJO0FBQUEsRUFBRTtBQUFDLE1BQUksV0FBUztBQUFPLE1BQUksV0FBUyxFQUFDLE1BQUssUUFBTyxNQUFLLFFBQU8sT0FBTSxTQUFRLEtBQUksT0FBTSxRQUFPLFVBQVMsUUFBTyxVQUFTLFFBQU8sVUFBUyxRQUFPLFNBQVE7QUFBZSxNQUFJLFdBQVMsTUFBTTtBQUFPLE1BQUksVUFBUSxNQUFNO0FBQU0sTUFBSSxZQUFVLE1BQU07QUFBUSxNQUFJLFNBQU8sU0FBUztBQUFLLE1BQUksY0FBWSxPQUFPO0FBQVUsTUFBSSxTQUFPLENBQUMsWUFBVyxZQUFXLFlBQVcsVUFBVTtBQUFFLGtCQUFlO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFNLGFBQU8sSUFBSTtBQUFLLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBVTtBQUFFLFNBQUssSUFBRSxJQUFJLE1BQU0sRUFBRTtBQUFBLEVBQUM7QUFBQyxRQUFNLFNBQVMsTUFBSyxXQUFXO0FBQUUsTUFBSSxLQUFHO0FBQUssT0FBSyxZQUFVO0FBQUksT0FBSyxVQUFRO0FBQUksT0FBSyxlQUFhO0FBQUcsT0FBSyxZQUFVO0FBQUcsT0FBSyxVQUFVLFVBQVEsaUJBQWlCLEtBQUksT0FBTTtBQUFDLFFBQUksSUFBRSxLQUFLO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHO0FBQUksUUFBRSxLQUFHLElBQUksUUFBTTtBQUFHLFdBQUssSUFBRSxFQUFFLFFBQU87QUFBSSxRQUFFLEtBQUcsU0FBUyxFQUFFLElBQUUsS0FBRyxFQUFFLElBQUUsS0FBRyxFQUFFLElBQUUsTUFBSSxFQUFFLElBQUUsS0FBSSxDQUFDO0FBQUUsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxTQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsVUFBSSxLQUFFLENBQUMsQ0FBRSxLQUFFO0FBQUksVUFBSSxJQUFFLFVBQVUsU0FBUyxHQUFFLENBQUMsR0FBRSxPQUFPLElBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxHQUFFLEVBQUUsSUFBRyxPQUFPLEdBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFFLFVBQUUsU0FBUyxHQUFFLEVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFBLElBQUM7QUFBQyxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBRSxTQUFLLEVBQUUsS0FBRyxRQUFRLEtBQUssRUFBRSxJQUFHLENBQUM7QUFBQSxFQUFDO0FBQUUsT0FBSyxVQUFVLFVBQVEsaUJBQWdCLEtBQUk7QUFBQyxRQUFHLFFBQU07QUFBTSxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsS0FBSztBQUFBO0FBQU8sYUFBTyxNQUFNLFFBQVEsS0FBSyxHQUFFLEtBQUs7QUFBQSxFQUFDO0FBQWUsTUFBSSxVQUFRLE1BQU07QUFBTSxNQUFJLFlBQVUsTUFBTTtBQUFRLE1BQUksWUFBVSxNQUFNO0FBQVEsTUFBSSxTQUFPLFNBQVM7QUFBSyxNQUFJLFVBQVEsU0FBUztBQUFNLE1BQUksV0FBUyxTQUFTO0FBQU8sTUFBSSxXQUFTLFNBQVM7QUFBTyxNQUFJLFdBQVMsU0FBUztBQUFPLE1BQUksV0FBUyxTQUFTO0FBQU8sTUFBSSxjQUFZLE9BQU87QUFBVSxNQUFJLFdBQVMsQ0FBQyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsb0JBQWlCO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFRLGFBQU8sSUFBSTtBQUFPLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBVTtBQUFFLFNBQUssSUFBRTtBQUFTLFNBQUssSUFBRSxJQUFJLE1BQU0sRUFBRTtBQUFBLEVBQUM7QUFBQyxRQUFNLFNBQVMsUUFBTyxXQUFXO0FBQUUsTUFBSSxPQUFLO0FBQU8sU0FBTyxZQUFVO0FBQUksU0FBTyxVQUFRO0FBQUksU0FBTyxlQUFhO0FBQUksU0FBTyxZQUFVO0FBQUcsU0FBTyxVQUFVLFVBQVEsa0JBQWlCLEtBQUksT0FBTTtBQUFDLFFBQUksSUFBRSxLQUFLO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHO0FBQUksUUFBRSxLQUFHLElBQUksUUFBTTtBQUFHLFdBQUssSUFBRSxFQUFFLFFBQU87QUFBSSxRQUFFLEtBQUcsVUFBVSxTQUFTLEVBQUUsSUFBRSxFQUFFLEdBQUUsRUFBRSxJQUFFLElBQUcsU0FBUyxFQUFFLElBQUUsR0FBRyxHQUFFLEVBQUUsSUFBRSxHQUFHO0FBQUUsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLElBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUUsS0FBSyxFQUFFO0FBQUcsUUFBSSxJQUFFLEtBQUssRUFBRTtBQUFHLFFBQUksSUFBRSxLQUFLLEVBQUU7QUFBRyx1QkFBbUIsS0FBSyxFQUFFLFdBQVMsRUFBRSxNQUFNO0FBQUUsU0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFVBQUksS0FBRyxVQUFVLEdBQUUsU0FBUyxDQUFDLEdBQUUsT0FBTyxHQUFFLElBQUUsQ0FBQyxHQUFFLEtBQUssRUFBRSxJQUFHLEVBQUUsRUFBRTtBQUFFLFVBQUksS0FBRyxRQUFRLFNBQVMsQ0FBQyxHQUFFLFFBQVEsR0FBRSxHQUFFLENBQUMsQ0FBQztBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsV0FBRTtBQUFFLFVBQUUsUUFBUSxHQUFFLEVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRTtBQUFFLFVBQUU7QUFBRSxVQUFFLFFBQVEsSUFBRyxFQUFFO0FBQUEsSUFBQztBQUFDLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsRUFBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFFLFNBQUssRUFBRSxLQUFHLFFBQVEsS0FBSyxFQUFFLElBQUcsQ0FBQztBQUFBLEVBQUM7QUFBRSxTQUFPLFVBQVUsVUFBUSxpQkFBZ0IsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFNLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxLQUFLO0FBQUE7QUFBTyxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsS0FBSztBQUFBLEVBQUM7QUFBZSxvQkFBaUI7QUFBQyxRQUFHLENBQUUsaUJBQWdCO0FBQVEsYUFBTyxJQUFJO0FBQU8sU0FBSyxLQUFLLElBQUk7QUFBRSxTQUFLLElBQUUsQ0FBQyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBQSxFQUFDO0FBQUMsUUFBTSxTQUFTLFFBQU8sSUFBSTtBQUFFLE1BQUksT0FBSztBQUFPLFNBQU8sWUFBVTtBQUFJLFNBQU8sVUFBUTtBQUFJLFNBQU8sZUFBYTtBQUFJLFNBQU8sWUFBVTtBQUFHLFNBQU8sVUFBVSxVQUFRLGlCQUFnQixLQUFJO0FBQUMsUUFBRyxRQUFNO0FBQU0sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxDQUFDLEdBQUUsS0FBSztBQUFBO0FBQU8sYUFBTyxNQUFNLFFBQVEsS0FBSyxFQUFFLE1BQU0sR0FBRSxDQUFDLEdBQUUsS0FBSztBQUFBLEVBQUM7QUFBZSxNQUFJLGNBQVksTUFBTTtBQUFVLE1BQUksY0FBWSxNQUFNO0FBQVUsTUFBSSxhQUFXLE1BQU07QUFBUyxNQUFJLGFBQVcsTUFBTTtBQUFTLE1BQUksVUFBUSxNQUFNO0FBQU0sTUFBSSxhQUFXLE1BQU07QUFBUyxNQUFJLGFBQVcsTUFBTTtBQUFTLE1BQUksZUFBYSxNQUFNO0FBQVcsTUFBSSxlQUFhLE1BQU07QUFBVyxNQUFJLGVBQWEsTUFBTTtBQUFXLE1BQUksZUFBYSxNQUFNO0FBQVcsTUFBSSxjQUFZLE9BQU87QUFBVSxNQUFJLFdBQVMsQ0FBQyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxVQUFVO0FBQUUsb0JBQWlCO0FBQUMsUUFBRyxDQUFFLGlCQUFnQjtBQUFRLGFBQU8sSUFBSTtBQUFPLGdCQUFZLEtBQUssSUFBSTtBQUFFLFNBQUssSUFBRSxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFNBQVM7QUFBRSxTQUFLLElBQUU7QUFBUyxTQUFLLElBQUUsSUFBSSxNQUFNLEdBQUc7QUFBQSxFQUFDO0FBQUMsUUFBTSxTQUFTLFFBQU8sV0FBVztBQUFFLE1BQUksT0FBSztBQUFPLFNBQU8sWUFBVTtBQUFLLFNBQU8sVUFBUTtBQUFJLFNBQU8sZUFBYTtBQUFJLFNBQU8sWUFBVTtBQUFJLFNBQU8sVUFBVSxnQkFBYyx1QkFBdUIsS0FBSSxPQUFNO0FBQUMsUUFBSSxJQUFFLEtBQUs7QUFBRSxhQUFRLElBQUUsR0FBRSxJQUFFLElBQUc7QUFBSSxRQUFFLEtBQUcsSUFBSSxRQUFNO0FBQUcsV0FBSyxJQUFFLEVBQUUsUUFBTyxLQUFHLEdBQUU7QUFBQyxVQUFJLFFBQU0sVUFBVSxFQUFFLElBQUUsSUFBRyxFQUFFLElBQUUsRUFBRTtBQUFFLFVBQUksUUFBTSxVQUFVLEVBQUUsSUFBRSxJQUFHLEVBQUUsSUFBRSxFQUFFO0FBQUUsVUFBSSxRQUFNLEVBQUUsSUFBRTtBQUFJLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBSSxVQUFJLFFBQU0sVUFBVSxFQUFFLElBQUUsS0FBSSxFQUFFLElBQUUsR0FBRztBQUFFLFVBQUksUUFBTSxVQUFVLEVBQUUsSUFBRSxLQUFJLEVBQUUsSUFBRSxHQUFHO0FBQUUsVUFBSSxRQUFNLEVBQUUsSUFBRTtBQUFJLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBSSxRQUFFLEtBQUcsYUFBYSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxRQUFFLElBQUUsS0FBRyxhQUFhLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFBLElBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFVBQVEsa0JBQWlCLEtBQUksT0FBTTtBQUFDLFNBQUssY0FBYyxLQUFJLEtBQUs7QUFBRSxRQUFJLElBQUUsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUcsUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFHLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBRyxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUksUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFJLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBSSxRQUFJLEtBQUcsS0FBSyxFQUFFO0FBQUksUUFBSSxLQUFHLEtBQUssRUFBRTtBQUFJLFFBQUksS0FBRyxLQUFLLEVBQUU7QUFBSSx1QkFBbUIsS0FBSyxFQUFFLFdBQVMsRUFBRSxNQUFNO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBRyxHQUFFO0FBQUMsVUFBSSxRQUFNO0FBQUcsVUFBSSxRQUFNO0FBQUcsVUFBSSxRQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFFBQVEsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFBRSxVQUFJLFFBQU0sUUFBUSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUFFLFVBQUksUUFBTSxLQUFLLEVBQUU7QUFBRyxVQUFJLFFBQU0sS0FBSyxFQUFFLElBQUU7QUFBRyxVQUFJLFFBQU0sRUFBRTtBQUFHLFVBQUksUUFBTSxFQUFFLElBQUU7QUFBRyxVQUFJLFFBQU0sYUFBYSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxLQUFLO0FBQUUsVUFBSSxRQUFNLGFBQWEsT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFFLGNBQU0sVUFBVSxJQUFHLEVBQUU7QUFBRSxjQUFNLFVBQVUsSUFBRyxFQUFFO0FBQUUsY0FBTSxTQUFTLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsY0FBTSxTQUFTLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsVUFBSSxRQUFNLFdBQVcsT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFFLFVBQUksUUFBTSxXQUFXLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHLFdBQVcsSUFBRyxJQUFHLE9BQU0sS0FBSztBQUFFLFdBQUcsV0FBVyxJQUFHLElBQUcsT0FBTSxLQUFLO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUc7QUFBRyxXQUFHO0FBQUcsV0FBRyxXQUFXLE9BQU0sT0FBTSxPQUFNLEtBQUs7QUFBRSxXQUFHLFdBQVcsT0FBTSxPQUFNLE9BQU0sS0FBSztBQUFBLElBQUM7QUFBQyxZQUFRLEtBQUssR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUUsWUFBUSxLQUFLLEdBQUUsR0FBRSxJQUFHLEVBQUU7QUFBRSxZQUFRLEtBQUssR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUUsWUFBUSxLQUFLLEdBQUUsSUFBRyxJQUFHLEVBQUU7QUFBRSxZQUFRLEtBQUssR0FBRSxJQUFHLElBQUcsRUFBRTtBQUFFLFlBQVEsS0FBSyxHQUFFLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxVQUFRLGlCQUFnQixLQUFJO0FBQUMsUUFBRyxRQUFNO0FBQU0sYUFBTyxNQUFNLFFBQVEsS0FBSyxHQUFFLEtBQUs7QUFBQTtBQUFPLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxLQUFLO0FBQUEsRUFBQztBQUFFLG1CQUFpQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLEtBQUUsS0FBRyxLQUFHLENBQUMsS0FBRztBQUFHLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLG1CQUFpQixJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRSxLQUFHLEtBQUcsQ0FBQyxLQUFHO0FBQUcsUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMsb0JBQWtCLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRztBQUFDLFFBQUksS0FBRSxLQUFHLEtBQUcsS0FBRyxLQUFHLEtBQUc7QUFBRyxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxvQkFBa0IsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUc7QUFBQyxRQUFJLEtBQUUsS0FBRyxLQUFHLEtBQUcsS0FBRyxLQUFHO0FBQUcsUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMscUJBQW1CLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksS0FBRSxRQUFNLFFBQU07QUFBTSxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxxQkFBbUIsSUFBRyxJQUFHO0FBQUMsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxLQUFFLFFBQU0sUUFBTTtBQUFNLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLHFCQUFtQixJQUFHLElBQUc7QUFBQyxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsRUFBRTtBQUFFLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLEtBQUUsUUFBTSxRQUFNO0FBQU0sUUFBRyxLQUFFO0FBQUUsWUFBRztBQUFXLFdBQU87QUFBQSxFQUFDO0FBQUMscUJBQW1CLElBQUcsSUFBRztBQUFDLFFBQUksUUFBTSxZQUFZLElBQUcsSUFBRyxFQUFFO0FBQUUsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLEVBQUU7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksS0FBRSxRQUFNLFFBQU07QUFBTSxRQUFHLEtBQUU7QUFBRSxZQUFHO0FBQVcsV0FBTztBQUFBLEVBQUM7QUFBQyxxQkFBbUIsSUFBRyxJQUFHO0FBQUMsUUFBSSxRQUFNLFlBQVksSUFBRyxJQUFHLENBQUM7QUFBRSxRQUFJLFFBQU0sWUFBWSxJQUFHLElBQUcsQ0FBQztBQUFFLFFBQUksUUFBTSxXQUFXLElBQUcsSUFBRyxDQUFDO0FBQUUsUUFBSSxLQUFFLFFBQU0sUUFBTTtBQUFNLFFBQUcsS0FBRTtBQUFFLFlBQUc7QUFBVyxXQUFPO0FBQUEsRUFBQztBQUFDLHFC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RSxFQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsR0FBRSxJQUFJLEVBQUUsS0FBRyxRQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUUsRUFBRSxFQUFFLEdBQUUsQ0FBQztBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRSxTQUFTLEdBQUUsRUFBRTtBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRSxRQUFRLFNBQVMsVUFBVSxJQUFHLEVBQUUsS0FBRyxHQUFFLElBQUcsSUFBRyxFQUFFLEdBQUUsSUFBSSxHQUFHLEtBQUcsUUFBTyxHQUFHLENBQUMsQ0FBQyxHQUFFLEdBQUcsRUFBRSxHQUFFLEVBQUU7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFHLFdBQUcsU0FBUyxJQUFHLEVBQUU7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUM7QUFBQyxRQUFFLFVBQVUsS0FBSyxFQUFFLElBQUcsR0FBRSxFQUFFO0FBQUUsU0FBSyxFQUFFLEtBQUcsVUFBVSxLQUFLLEVBQUUsSUFBRyxHQUFFLEVBQUU7QUFBRSxTQUFLLEVBQUUsS0FBRyxVQUFVLEtBQUssRUFBRSxJQUFHLEdBQUUsRUFBRTtBQUFFLFNBQUssRUFBRSxLQUFHLFVBQVUsS0FBSyxFQUFFLElBQUcsR0FBRSxFQUFFO0FBQUUsU0FBSyxFQUFFLEtBQUcsVUFBVSxLQUFLLEVBQUUsSUFBRyxHQUFFLEVBQUU7QUFBRSxTQUFLLEVBQUUsS0FBRztBQUFBLEVBQUM7QUFBRSxZQUFVLFVBQVUsVUFBUSxpQkFBZ0IsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFNLGFBQU8sTUFBTSxRQUFRLEtBQUssR0FBRSxRQUFRO0FBQUE7QUFBTyxhQUFPLE1BQU0sUUFBUSxLQUFLLEdBQUUsUUFBUTtBQUFBLEVBQUM7QUFBRSxhQUFXLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEtBQUc7QUFBRyxhQUFPLElBQUUsSUFBRTtBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU8sSUFBRSxJQUFFLENBQUMsSUFBRTtBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU8sS0FBRSxDQUFDLEtBQUc7QUFBQSxhQUFVLEtBQUc7QUFBRyxhQUFPLElBQUUsSUFBRSxJQUFFLENBQUM7QUFBQTtBQUFPLGFBQU8sSUFBRyxLQUFFLENBQUM7QUFBQSxFQUFFO0FBQUMsYUFBVyxHQUFFO0FBQUMsUUFBRyxLQUFHO0FBQUcsYUFBTztBQUFBLGFBQVUsS0FBRztBQUFHLGFBQU87QUFBQSxhQUFtQixLQUFHO0FBQUcsYUFBTztBQUFBLGFBQW1CLEtBQUc7QUFBRyxhQUFPO0FBQUE7QUFBZ0IsYUFBTztBQUFBLEVBQVU7QUFBQyxjQUFZLEdBQUU7QUFBQyxRQUFHLEtBQUc7QUFBRyxhQUFPO0FBQUEsYUFBbUIsS0FBRztBQUFHLGFBQU87QUFBQSxhQUFtQixLQUFHO0FBQUcsYUFBTztBQUFBLGFBQW1CLEtBQUc7QUFBRyxhQUFPO0FBQUE7QUFBZ0IsYUFBTztBQUFBLEVBQUM7QUFBQyxNQUFJLElBQUUsQ0FBQyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEVBQUU7QUFBRSxNQUFJLEtBQUcsQ0FBQyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUU7QUFBRSxNQUFJLElBQUUsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxJQUFHLElBQUcsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsR0FBRSxHQUFFLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxNQUFJLEtBQUcsQ0FBQyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxJQUFHLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFFLEdBQUUsSUFBRyxHQUFF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QUM7QUFBRSxXQUFHLEdBQUcsTUFBTTtBQUFFLFdBQUcsR0FBRyxNQUFNO0FBQUUsVUFBSSxLQUFHO0FBQUUsVUFBSSxLQUFHO0FBQUUsVUFBSTtBQUFHLGFBQU0sR0FBRyxLQUFLLENBQUMsRUFBRSxJQUFFLEtBQUcsR0FBRyxLQUFLLENBQUMsRUFBRSxJQUFFLEdBQUU7QUFBQyxZQUFJLE1BQUksR0FBRyxNQUFNLENBQUMsSUFBRSxLQUFHO0FBQUUsWUFBSSxNQUFJLEdBQUcsTUFBTSxDQUFDLElBQUUsS0FBRztBQUFFLFlBQUcsUUFBTTtBQUFFLGdCQUFJO0FBQUcsWUFBRyxRQUFNO0FBQUUsZ0JBQUk7QUFBRyxZQUFJO0FBQUcsWUFBSSxPQUFJLE9BQUssR0FBRTtBQUFDLGVBQUc7QUFBQSxRQUFDLE9BQUs7QUFBQyxlQUFHLEdBQUcsTUFBTSxDQUFDLElBQUUsS0FBRztBQUFFLGNBQUksUUFBSyxLQUFHLE9BQUssTUFBSSxRQUFNO0FBQUUsaUJBQUcsQ0FBQztBQUFBO0FBQVMsaUJBQUc7QUFBQSxRQUFHO0FBQUMsWUFBSSxHQUFHLEtBQUssRUFBRTtBQUFFLFlBQUk7QUFBRyxZQUFJLE9BQUksT0FBSyxHQUFFO0FBQUMsZUFBRztBQUFBLFFBQUMsT0FBSztBQUFDLGVBQUcsR0FBRyxNQUFNLENBQUMsSUFBRSxLQUFHO0FBQUUsY0FBSSxRQUFLLEtBQUcsT0FBSyxNQUFJLFFBQU07QUFBRSxpQkFBRyxDQUFDO0FBQUE7QUFBUyxpQkFBRztBQUFBLFFBQUc7QUFBQyxZQUFJLEdBQUcsS0FBSyxFQUFFO0FBQUUsWUFBRyxJQUFFLE9BQUssS0FBRztBQUFFLGVBQUcsSUFBRTtBQUFHLFlBQUcsSUFBRSxPQUFLLEtBQUc7QUFBRSxlQUFHLElBQUU7QUFBRyxXQUFHLE9BQU8sQ0FBQztBQUFFLFdBQUcsT0FBTyxDQUFDO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFHO0FBQUMsV0FBTSxTQUFPO0FBQU8sNEJBQXdCLEtBQUksT0FBSyxVQUFTO0FBQUMsVUFBSSxPQUFJLE1BQUk7QUFBSyxVQUFJ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QUFDO0FBQUEsSUFBQztBQUFDLFdBQU8sRUFBRSxTQUFPLFdBQVMsSUFBSSxJQUFJLElBQUU7QUFBQSxFQUFHO0FBQUUsWUFBVSxVQUFVLGNBQVkscUJBQXFCLE1BQUssUUFBTyxRQUFPLEtBQUksZ0JBQWU7QUFBQyxRQUFJLFdBQVMsS0FBSztBQUFRLFFBQUksTUFBSSxLQUFLO0FBQVEsUUFBSSxNQUFJLEtBQUs7QUFBUSxRQUFJLE1BQUk7QUFBRSxRQUFJO0FBQUUsUUFBSTtBQUFFLFFBQUk7QUFBRSxTQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLFVBQUUsT0FBTztBQUFHLFVBQUksWUFBVSxFQUFFLGNBQWMsSUFBSTtBQUFFLGVBQVMsS0FBRyxVQUFVO0FBQUksVUFBSSxLQUFHLFVBQVU7QUFBQSxJQUFNO0FBQUMsU0FBSSxJQUFFLE1BQUksR0FBRSxLQUFHLEdBQUUsS0FBRyxHQUFFO0FBQUMsVUFBSSxJQUFFLElBQUU7QUFBRSxVQUFJLElBQUU7QUFBRSxVQUFHLFNBQVMsT0FBSyxLQUFHLFNBQVMsT0FBSyxHQUFFO0FBQUMsWUFBSSxLQUFHLE9BQU8sT0FBTyxJQUFHLFNBQVMsSUFBRyxLQUFLLFVBQVU7QUFBRSxZQUFJLEtBQUcsT0FBTyxPQUFPLElBQUcsU0FBUyxJQUFHLEtBQUssVUFBVTtBQUFFLGNBQUksS0FBSyxJQUFJLElBQUksR0FBRyxRQUFPLEdBQUc7QUFBRSxjQUFJLEtBQUssSUFBSSxJQUFJLEdBQUcsUUFBTyxHQUFHO0FBQUU7QUFBQSxNQUFRO0FBQUMsVUFBSSxPQUFLLENBQUMsT0FBTyxJQUFHLE1BQUssTUFBSyxPQUFPLEVBQUU7QUFBRSxVQUFHLE9BQU8sR0FBRyxFQUFFLElBQUksT0FBTyxHQUFHLENBQUMsTUFBSSxHQUFFO0FBQUMsYUFBSyxLQUFHLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRTtBQUFFLGFBQUssS0FBRyxPQUFPLEdBQUcsSUFBSSxFQUFFLFNBQVMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUFBLE1BQUMsV0FBUyxPQUFPLEdBQUcsRUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFJLEdBQUU7QUFBQyxhQUFLLEtBQUcsT0FBTyxHQUFHLElBQUksRUFBRSxTQUFTLE9BQU8sRUFBRTtBQUFFLGFBQUssS0FBRyxPQUFPLEdBQUcsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQUEsTUFBQyxPQUFLO0FBQUMsYUFBSyxLQUFHLE9BQU8sR0FBRyxJQUFJLEVBQUUsU0FBUyxPQUFPLEVBQUU7QUFBRSxhQUFLLEtBQUcsT0FBTyxHQUFHLElBQUksRUFBRSxTQUFTLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFBQSxNQUFDO0FBQUMsVUFBSSxTQUFNLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxVQUFJLE1BQUksT0FBTyxPQUFPLElBQUcsT0FBTyxFQUFFO0FBQUUsWUFBSSxLQUFLLElBQUksSUFBSSxHQUFHLFFBQU8sR0FBRztBQUFFLFVBQUksS0FBRyxJQUFJLE1BQU0sR0FBRztBQUFFLFVBQUksS0FBRyxJQUFJLE1BQU0sR0FBRztBQUFFLFdBQUksSUFBRSxHQUFFLElBQUUsS0FBSSxLQUFJO0FBQUMsWUFBSSxLQUFHLElBQUksR0FBRyxLQUFHO0FBQUUsWUFBSSxLQUFHLElBQUksR0FBRyxLQUFHO0FBQUUsWUFBSSxHQUFHLEtBQUcsT0FBTyxNQUFHLEtBQUcsSUFBRyxNQUFHO0FBQUksWUFBSSxHQUFHLEtBQUc7QUFBRSxZQUFJLEtBQUc7QUFBQSxNQUFJO0FBQUEsSUFBQztBQUFDLFFBQUksTUFBSSxLQUFLLE9BQU8sTUFBSyxNQUFLLElBQUk7QUFBRSxRQUFJLE1BQUksS0FBSztBQUFRLFNBQUksSUFBRSxLQUFJLEtBQUcsR0FBRSxLQUFJO0FBQUMsVUFBSSxJQUFFO0FBQUUsYUFBTSxLQUFHLEdBQUU7QUFBQyxZQUFJLE9BQUs7QUFBSyxhQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLGNBQUksS0FBRyxJQUFJLEdBQUcsS0FBRztBQUFFLGNBQUcsSUFB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QUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsTUFBSSxDQUFDO0FBQUEsTUFBQztBQUFBLElBQUM7QUFBQyxRQUFJO0FBQU0sUUFBRyxLQUFLLE9BQU07QUFBQyxjQUFNLEtBQUssTUFBTSxJQUFJLFNBQVMsS0FBSTtBQUFDLGVBQU0sRUFBQyxHQUFFLElBQUksR0FBRyxJQUFJLEdBQUUsRUFBRSxHQUFFLEdBQUUsSUFBSSxHQUFHLElBQUksR0FBRSxFQUFFLEVBQUM7QUFBQSxNQUFDLENBQUM7QUFBQSxJQUFDLE9BQUs7QUFBQyxjQUFNLEtBQUssY0FBYyxNQUFNO0FBQUEsSUFBQztBQUFDLFdBQU0sRUFBQyxNQUFVLFFBQWMsTUFBVztBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsZ0JBQWMsdUJBQXVCLEtBQUk7QUFBQyxRQUFJLE1BQUksUUFBTSxLQUFLLElBQUUsS0FBSyxNQUFJLEdBQUcsS0FBSyxHQUFHO0FBQUUsUUFBSSxPQUFLLElBQUksR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsUUFBUTtBQUFFLFFBQUksUUFBTSxLQUFLLE9BQU87QUFBRSxRQUFJLEtBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sSUFBSTtBQUFFLFFBQUksS0FBRyxNQUFNLE9BQU8sRUFBQyxFQUFFLFFBQVE7QUFBRSxRQUFJLEtBQUcsTUFBTSxPQUFPLEVBQUMsRUFBRSxRQUFRO0FBQUUsV0FBTSxDQUFDLElBQUcsRUFBRTtBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsZ0JBQWMsdUJBQXVCLFFBQU87QUFBQyxRQUFJLFdBQVMsS0FBSyxFQUFFLE1BQU0sS0FBSyxNQUFNLEtBQUssRUFBRSxVQUFVLElBQUUsQ0FBQyxDQUFDO0FBQUUsUUFBSSxJQUFFO0FBQU8sUUFBSSxJQUFFLEtBQUssRUFBRSxNQUFNO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBSTtBQUFNLFFBQUksSUFBRTtBQUFFLFFBQUk7QUFBRSxRQUFJO0FBQUUsV0FBTSxFQUFFLEtBQUssQ0FBQyxNQUFJLEdBQUU7QUFBQyxVQUFJLElBQUUsRUFBRSxJQUFJLENBQUM7QUFBRSxXQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQUUsVUFBRSxHQUFHLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUFFLFVBQUksSUFBRSxHQUFHLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUFFLFVBQUcsQ0FBQyxNQUFJLEdBQUUsSUFBSSxRQUFRLElBQUUsR0FBRTtBQUFDLGFBQUcsTUFBTSxJQUFJO0FBQUUsYUFBRztBQUFHLGFBQUcsR0FBRSxJQUFJO0FBQUUsYUFBRztBQUFBLE1BQUMsV0FBUyxNQUFJLEVBQUUsTUFBSSxHQUFFO0FBQUM7QUFBQSxNQUFLO0FBQUMsY0FBTTtBQUFFLFVBQUU7QUFBRSxVQUFFO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRSxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUM7QUFBQyxTQUFHLEdBQUUsSUFBSTtBQUFFLFNBQUc7QUFBRSxRQUFJLE9BQUssR0FBRyxJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQztBQUFFLFFBQUksT0FBSyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQUUsUUFBRyxLQUFLLElBQUksSUFBSSxLQUFHLEdBQUU7QUFBQyxXQUFHO0FBQUcsV0FBRztBQUFBLElBQUU7QUFBQyxRQUFHLEdBQUcsVUFBUztBQUFDLFdBQUcsR0FBRyxJQUFJO0FBQUUsV0FBRyxHQUFHLElBQUk7QUFBQSxJQUFDO0FBQUMsUUFBRyxHQUFHLFVBQVM7QUFBQyxXQUFHLEdBQUcsSUFBSTtBQUFFLFdBQUcsR0FBRyxJQUFJO0FBQUEsSUFBQztBQUFDLFdBQU0sQ0FBQyxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxFQUFDLEdBQUUsSUFBRyxHQUFFLEdBQUUsQ0FBQztBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsYUFBVyxvQkFBb0IsR0FBRTtBQUFDLFFBQUksUUFBTSxLQUFLLEtBQUs7QUFBTSxRQUFJLEtBQUcsTUFBTTtBQUFHLFFBQUksS0FBRyxNQUFNO0FBQUcsUUFBSSxLQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxTQUFTLEtBQUssQ0FBQztBQUFFLFFBQUksS0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLFNBQVMsS0FBSyxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFBRSxRQUFJLEtBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztBQUFFLFFBQUksS0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFBRSxRQUFJLEtBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUU7QUFBRSxRQUFJLEtBQUcsR0FBRyxJQUFJLEVBQUUsRUFBRSxJQUFJO0FBQUUsV0FBTSxFQUFDLElBQU0sR0FBSztBQUFBLEVBQUM7QUFBRSxhQUFXLFVBQVUsYUFBVyxvQkFBb0IsR0FBRSxLQUFJO0FBQUMsUUFBRSxJQUFJLEdBQUcsR0FBRSxFQUFFO0FBQUUsUUFBRyxDQUFDLEVBQUU7QUFBSSxVQUFFLEVBQUUsTUFBTSxLQUFLLEdBQUc7QUFBRSxRQUFJLEtBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLEtBQUssQ0FBQztBQUFFLFFBQUksSUFBRSxHQUFHLFFBQVE7QUFBRSxRQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLElBQUksS0FBSyxJQUFJLE1BQUk7QUFBRSxZQUFNLElBQUksTUFBTSxlQUFlO0FBQUUsUUFBSSxR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QUssTUFBTSxNQUFNLE1BQUssSUFBSTtBQUFFLFFBQUksSUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFBRSxRQUFHLEVBQUUsS0FBSyxDQUFDLE1BQUk7QUFBRSxVQUFFLEVBQUUsT0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUM7QUFBRSxRQUFJLEtBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUFFLFFBQUksS0FBRyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsUUFBUSxLQUFLLENBQUM7QUFBRSxXQUFPLEtBQUssTUFBTSxNQUFNLElBQUcsRUFBRTtBQUFBLEVBQUM7QUFBRSxRQUFNLFVBQVUsTUFBSSxlQUFjO0FBQUMsUUFBRyxLQUFLO0FBQUksYUFBTztBQUFLLFFBQUksTUFBSSxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBRSxRQUFHLElBQUksS0FBSyxDQUFDLE1BQUk7QUFBRSxhQUFPLEtBQUssTUFBTSxNQUFNLE1BQUssSUFBSTtBQUFFLFFBQUksSUFBRSxLQUFLLE1BQU07QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLFFBQU0sSUFBSSxRQUFRO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsT0FBTyxLQUFLO0FBQUUsUUFBSSxLQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLENBQUM7QUFBRSxRQUFJLEtBQUcsRUFBRSxPQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFFBQVEsS0FBSyxDQUFDO0FBQUUsV0FBTyxLQUFLLE1BQU0sTUFBTSxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsUUFBTSxVQUFVLE9BQUssZ0JBQWU7QUFBQyxXQUFPLEtBQUssRUFBRSxRQUFRO0FBQUEsRUFBQztBQUFFLFFBQU0sVUFBVSxPQUFLLGdCQUFlO0FBQUMsV0FBTyxLQUFLLEVBQUUsUUFBUTtBQUFBLEVBQUM7QUFBRSxRQUFNLFVBQVUsTUFBSSxhQUFhLEdBQUU7QUFBQyxRQUFFLElBQUksR0FBRyxHQUFFLEVBQUU7QUFBRSxRQUFHLEtBQUssV0FBVztBQUFFLGFBQU87QUFBQSxhQUFhLEtBQUssWUFBWSxDQUFDO0FBQUUsYUFBTyxLQUFLLE1BQU0sYUFBYSxNQUFLLENBQUM7QUFBQSxhQUFVLEtBQUssTUFBTTtBQUFLLGFBQU8sS0FBSyxNQUFNLGdCQUFnQixDQUFDLElBQUksR0FBRSxDQUFDLENBQUMsQ0FBQztBQUFBO0FBQU8sYUFBTyxLQUFLLE1BQU0sU0FBUyxNQUFLLENBQUM7QUFBQSxFQUFDO0FBQUUsUUFBTSxVQUFVLFNBQU8sZ0JBQWdCLElBQUcsSUFBRyxJQUFHO0FBQUMsUUFBSSxTQUFPLENBQUMsTUFBSyxFQUFFO0FBQUUsUUFBSSxTQUFPLENBQUMsSUFBRyxFQUFFO0FBQUUsUUFBRyxLQUFLLE1BQU07QUFBSyxhQUFPLEtBQUssTUFBTSxnQkFBZ0IsUUFBTyxNQUFNO0FBQUE7QUFBTyxhQUFPLEtBQUssTUFBTSxZQUFZLEdBQUUsUUFBTyxRQUFPLENBQUM7QUFBQSxFQUFDO0FBQUUsUUFBTSxVQUFVLFVBQVEsaUJBQWlCLElBQUcsSUFBRyxJQUFHO0FBQUMsUUFBSSxTQUFPLENBQUMsTUFBSyxFQUFFO0FBQUUsUUFBSSxTQUFPLENBQUMsSUFBRyxFQUFFO0FBQUUsUUFBRyxLQUFLLE1BQU07QUFBSyxhQUFPLEtBQUssTUFBTSxnQkFBZ0IsUUFBTyxRQUFPLElBQUk7QUFBQTtBQUFPLGFBQU8sS0FBSyxNQUFNLFlBQVksR0FBRSxRQUFPLFFBQU8sR0FBRSxJQUFJO0FBQUEsRUFBQztBQUFFLFFBQU0sVUFBVSxLQUFHLGFBQVksR0FBRTtBQUFDLFdBQU8sU0FBTyxLQUFHLEtBQUssUUFBTSxFQUFFLE9BQU0sTUFBSyxPQUFLLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFJLEtBQUcsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLE1BQUk7QUFBQSxFQUFFO0FBQUUsUUFBTSxVQUFVLE1BQUksYUFBYSxhQUFZO0FBQUMsUUFBRyxLQUFLO0FBQUksYUFBTztBQUFLLFFBQUksTUFBSSxLQUFLLE1BQU0sTUFBTSxLQUFLLEdBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQztBQUFFLFFBQUcsZUFBYSxLQUFLLGFBQVk7QUFBQyxVQUFJLE1BQUksS0FBSztBQUFZLFVBQUksU0FBTyxTQUFTLEdBQUU7QUFBQyxlQUFPLEVBQUUsSUFBSTtBQUFBLE1BQUM7QUFBRSxVQUFJLGNBQVksRUFBQyxLQUFJLElBQUksT0FBSyxFQUFDLEtBQUksSUFBSSxJQUFJLEtBQUksUUFBTyxJQUFJLElBQUksT0FBTyxJQUFJLE1BQU0sRUFBQyxHQUFFLFNBQVEsSUFBSSxXQUFTLEVBQUMsTUFBSyxJQUFJLFFBQVEsTUFBSyxRQUFPLElBQUksUUFBUSxPQUFPLElBQUksTUFBTSxFQUFDLEVBQUM7QUFBQSxJQUFDO0FBQUMsV0FBTztBQUFBLEVBQUc7QUFBRSxRQUFNLFVBQVUsTUFBSSxlQUFjO0FBQUMsUUFBRyxLQUFLO0FBQUksYUFBTyxLQUFLLE1BQU0sT0FBTyxNQUFLLE1BQUssSUFBSTtBQUFFLFFBQUksTUFBSSxLQUFLLE1BQU0sT0FBTyxLQUFLLEdBQUUsS0FBSyxHQUFFLEtBQUssTUFBTSxHQUFHO0FBQUUsV0FBTztBQUFBLEVBQUc7QUFBRSxrQkFBZ0IsT0FBTSxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQUssVUFBVSxLQUFLLE1BQUssT0FBTSxVQUFVO0FBQUUsUUFBRyxNQUFJLFFBQU0sTUFBSSxRQUFNLE1BQUksTUFBSztBQUFDLFdBQUssSUFBRSxLQUFLLE1BQU07QUFBSSxXQUFLLElBQUUsS0FBSyxNQUFNO0FBQUksV0FBSyxJQUFFLElBQUksR0FBRyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsV0FBSyxJQUFFLElBQUksR0FBRyxHQUFFLEVBQUU7QUFBRSxXQUFLLElBQUUsSUFBSSxHQUFHLEdBQUUsRUFBRTtBQUFFLFdBQUssSUFBRSxJQUFJLEdBQUcsR0FBRSxFQUFFO0FBQUEsSUFBQztBQUFDLFFBQUcsQ0FBQyxLQUFLLEVBQUU7QUFBSSxXQUFLLElBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxNQUFNLEdBQUc7QUFBRSxRQUFHLENBQUMsS0FBSyxFQUFFO0FBQUksV0FBSyxJQUFFLEtBQUssRUFBRSxNQUFNLEtBQUssTUFBTSxHQUFHO0FBQUUsUUFBRyxDQUFDLEtBQUssRUFBRTtBQUFJLFdBQUssSUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLE1BQU0sR0FBRztBQUFFLFNBQUssT0FBSyxLQUFLLE1BQUksS0FBSyxNQUFNO0FBQUEsRUFBRztBQUFDLHFCQUFtQixRQUFPLEtBQUssU0FBUztBQUFFLGFBQVcsVUFBVSxTQUFPLGdCQUFnQixHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxPQUFPLE1BQUssR0FBRSxHQUFFLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksZUFBYztBQUFDLFFBQUcsS0FBSyxXQUFXO0FBQUUsYUFBTyxLQUFLLE1BQU0sTUFBTSxNQUFLLElBQUk7QUFBRSxRQUFJLE9BQUssS0FBSyxFQUFFLFFBQVE7QUFBRSxRQUFJLFFBQU0sS0FBSyxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sSUFBSTtBQUFFLFdBQU8sS0FBSyxNQUFNLE1BQU0sSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxNQUFJLGdCQUFjO0FBQUMsV0FBTyxLQUFLLE1BQU0sT0FBTyxLQUFLLEdBQUUsS0FBSyxFQUFFLE9BQU8sR0FBRSxLQUFLLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksY0FBYSxHQUFFO0FBQUMsUUFBRyxLQUFLLFdBQVc7QUFBRSxhQUFPO0FBQUUsUUFBRyxFQUFFLFdBQVc7QUFBRSxhQUFPO0FBQUssUUFBSSxNQUFJLEVBQUUsRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEdBQUc7QUFBRSxRQUFJLEtBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFBRSxRQUFJLEtBQUcsRUFBRSxFQUFFLE9BQU8sR0FBRyxPQUFPLEtBQUssQ0FBQyxDQUFDO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBSSxLQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBRyxFQUFFLEtBQUssQ0FBQyxNQUFJLEdBQUU7QUFBQyxVQUFHLEdBQUUsS0FBSyxDQUFDLE1BQUk7QUFBRSxlQUFPLEtBQUssTUFBTSxPQUFPLE1BQUssTUFBSyxJQUFJO0FBQUE7QUFBTyxlQUFPLEtBQUssSUFBSTtBQUFBLElBQUM7QUFBQyxRQUFJLEtBQUcsRUFBRSxPQUFPO0FBQUUsUUFBSSxLQUFHLEdBQUcsT0FBTyxDQUFDO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFO0FBQUUsUUFBSSxLQUFHLEdBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQztBQUFFLFFBQUksS0FBRyxHQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUFFLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxXQUFTLGtCQUFrQixHQUFFO0FBQUMsUUFBRyxLQUFLLFdBQVc7QUFBRSxhQUFPLEVBQUUsSUFBSTtBQUFFLFFBQUcsRUFBRSxXQUFXO0FBQUUsYUFBTztBQUFLLFFBQUksS0FBRyxLQUFLLEVBQUUsT0FBTztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxLQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBRSxRQUFJLElBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFHLEVBQUUsS0FBSyxDQUFDLE1BQUksR0FBRTtBQUFDLFVBQUcsR0FBRSxLQUFLLENBQUMsTUFBSTtBQUFFLGVBQU8sS0FBSyxNQUFNLE9BQU8sTUFBSyxNQUFLLElBQUk7QUFBQTtBQUFPLGVBQU8sS0FBSyxJQUFJO0FBQUEsSUFBQztBQUFDLFFBQUksS0FBRyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsR0FBRyxPQUFPLENBQUM7QUFBRSxRQUFJLElBQUUsR0FBRyxPQUFPLEVBQUU7QUFBRSxRQUFJLEtBQUcsR0FBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLENBQUM7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxPQUFLLGVBQWMsS0FBSTtBQUFDLFFBQUcsUUFBTTtBQUFFLGFBQU87QUFBSyxRQUFHLEtBQUssV0FBVztBQUFFLGFBQU87QUFBSyxRQUFHLENBQUM7QUFBSSxhQUFPLEtBQUssSUFBSTtBQUFFLFFBQUk7QUFBRSxRQUFHLEtBQUssTUFBTSxTQUFPLEtBQUssTUFBTSxRQUFPO0FBQUMsVUFBSSxLQUFFO0FBQUssV0FBSSxJQUFFLEdBQUUsSUFBRSxLQUFJO0FBQUksYUFBRSxHQUFFLElBQUk7QUFBRSxhQUFPO0FBQUEsSUFBQztBQUFDLFFBQUksSUFBRSxLQUFLLE1BQU07QUFBRSxRQUFJLE9BQUssS0FBSyxNQUFNO0FBQUssUUFBSSxLQUFHLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksR0FBRyxPQUFPLEVBQUU7QUFBRSxTQUFJLElBQUUsR0FBRSxJQUFFLEtBQUksS0FBSTtBQUFDLFVBQUksTUFBSSxHQUFHLE9BQU87QUFBRSxVQUFJLE9BQUssSUFBSSxPQUFPO0FBQUUsVUFBSSxPQUFLLEtBQUssT0FBTztBQUFFLFVBQUksSUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLFFBQVEsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQztBQUFFLFVBQUksS0FBRyxHQUFHLE9BQU8sSUFBSTtBQUFFLFVBQUksS0FBRyxFQUFFLE9BQU8sRUFBRSxRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFBRSxVQUFJLEtBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxVQUFJLE1BQUksRUFBRSxPQUFPLEVBQUU7QUFBRSxZQUFJLElBQUksUUFBUSxHQUFHLEVBQUUsUUFBUSxJQUFJO0FBQUUsVUFBSSxLQUFHLElBQUksT0FBTyxFQUFFO0FBQUUsVUFBRyxJQUFFLElBQUU7QUFBSSxjQUFJLElBQUksT0FBTyxJQUFJO0FBQUUsV0FBRztBQUFHLFdBQUc7QUFBRyxZQUFJO0FBQUEsSUFBRztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFJLE9BQU8sSUFBSSxHQUFFLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE1BQUksZ0JBQWM7QUFBQyxRQUFHLEtBQUssV0FBVztBQUFFLGFBQU87QUFBSyxRQUFHLEtBQUssTUFBTTtBQUFNLGFBQU8sS0FBSyxTQUFTO0FBQUEsYUFBVSxLQUFLLE1BQU07QUFBTyxhQUFPLEtBQUssVUFBVTtBQUFBO0FBQU8sYUFBTyxLQUFLLEtBQUs7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFdBQVMsb0JBQW1CO0FBQUMsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBRyxLQUFLLE1BQUs7QUFBQyxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsVUFBSSxLQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxJQUFJO0FBQUUsV0FBRSxHQUFFLFFBQVEsRUFBQztBQUFFLFVBQUksSUFBRSxHQUFHLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRTtBQUFFLFVBQUksSUFBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUMsRUFBRSxRQUFRLEVBQUM7QUFBRSxVQUFJLFFBQU0sS0FBSyxRQUFRLElBQUk7QUFBRSxjQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUUsY0FBTSxNQUFNLFFBQVEsS0FBSztBQUFFLFdBQUc7QUFBRSxXQUFHLEVBQUUsT0FBTyxHQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQUUsV0FBRyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBQSxJQUFDLE9BQUs7QUFBQyxVQUFJLElBQUUsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLElBQUUsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLElBQUUsRUFBRSxPQUFPO0FBQUUsVUFBSSxJQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsVUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFFLFVBQUksSUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsQ0FBQztBQUFFLFVBQUksS0FBRSxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsRUFBRSxRQUFRLENBQUM7QUFBRSxXQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsV0FBRyxHQUFHLFFBQVEsRUFBRTtBQUFFLFdBQUcsR0FBRSxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUM7QUFBRSxXQUFHLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFO0FBQUUsV0FBRyxLQUFLLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFBRSxXQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLFlBQVUscUJBQW9CO0FBQUMsUUFBSTtBQUFHLFFBQUk7QUFBRyxRQUFJO0FBQUcsUUFBRyxLQUFLLE1BQUs7QUFBQyxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxVQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsVUFBSSxLQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxJQUFJO0FBQUUsV0FBRSxHQUFFLFFBQVEsRUFBQztBQUFFLFVBQUksSUFBRSxHQUFHLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsS0FBSyxNQUFNLENBQUM7QUFBRSxVQUFJLElBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDLEVBQUUsUUFBUSxFQUFDO0FBQUUsV0FBRztBQUFFLFVBQUksUUFBTSxLQUFLLFFBQVEsSUFBSTtBQUFFLGNBQU0sTUFBTSxRQUFRLEtBQUs7QUFBRSxjQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUUsV0FBRyxFQUFFLE9BQU8sR0FBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsS0FBSztBQUFFLFdBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUEsSUFBQyxPQUFLO0FBQUMsVUFBSSxRQUFNLEtBQUssRUFBRSxPQUFPO0FBQUUsVUFBSSxRQUFNLEtBQUssRUFBRSxPQUFPO0FBQUUsVUFBSSxPQUFLLEtBQUssRUFBRSxPQUFPLEtBQUs7QUFBRSxVQUFJLFFBQU0sS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQUUsY0FBTSxNQUFNLE9BQU8sS0FBSyxFQUFFLFFBQVEsS0FBSztBQUFFLFVBQUksUUFBTSxLQUFLLFFBQVEsSUFBSTtBQUFFLGNBQU0sTUFBTSxRQUFRLEtBQUs7QUFBRSxVQUFJLFFBQU0sTUFBTSxPQUFPLEtBQUs7QUFBRSxXQUFHLE1BQU0sT0FBTyxFQUFFLFFBQVEsS0FBSztBQUFFLFdBQUcsS0FBSyxFQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsS0FBSyxFQUFFLFFBQVEsS0FBSztBQUFFLFVBQUksVUFBUSxNQUFNLE9BQU87QUFBRSxnQkFBUSxRQUFRLFFBQVEsT0FBTztBQUFFLGdCQUFRLFFBQVEsUUFBUSxPQUFPO0FBQUUsZ0JBQVEsUUFBUSxRQUFRLE9BQU87QUFBRSxXQUFHLE1BQU0sT0FBTyxNQUFNLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxPQUFPO0FBQUEsSUFBQztBQUFDLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE9BQUssZ0JBQWU7QUFBQyxRQUFJLElBQUUsS0FBSyxNQUFNO0FBQUUsUUFBSSxLQUFHLEtBQUs7QUFBRSxRQUFJLEtBQUcsS0FBSztBQUFFLFFBQUksS0FBRyxLQUFLO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksR0FBRyxPQUFPO0FBQUUsUUFBSSxNQUFJLEdBQUcsT0FBTztBQUFFLFFBQUksSUFBRSxJQUFJLE9BQU8sR0FBRyxFQUFFLFFBQVEsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQztBQUFFLFFBQUksT0FBSyxHQUFHLE9BQU8sRUFBRTtBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxPQUFPLEdBQUc7QUFBRSxRQUFJLEtBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxHQUFHLE9BQU8sRUFBRSxDQUFDO0FBQUUsUUFBSSxLQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsUUFBSSxPQUFLLElBQUksT0FBTztBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxXQUFLLEtBQUssUUFBUSxJQUFJO0FBQUUsV0FBSyxLQUFLLFFBQVEsSUFBSTtBQUFFLFFBQUksS0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFFBQUksS0FBRyxHQUFHLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUFFLFdBQU8sS0FBSyxNQUFNLE9BQU8sSUFBRyxJQUFHLEVBQUU7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLE9BQUssZ0JBQWU7QUFBQyxRQUFHLENBQUMsS0FBSyxNQUFNO0FBQU0sYUFBTyxLQUFLLElBQUksRUFBRSxJQUFJLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLE9BQUssR0FBRyxPQUFPO0FBQUUsUUFBSSxJQUFFLEdBQUcsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFO0FBQUUsUUFBSSxLQUFHLEVBQUUsT0FBTztBQUFFLFFBQUksSUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFFBQUUsRUFBRSxRQUFRLENBQUM7QUFBRSxRQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBRSxFQUFFLFFBQVEsRUFBRTtBQUFFLFFBQUksS0FBRyxFQUFFLE9BQU87QUFBRSxRQUFJLElBQUUsS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFFLFFBQUUsRUFBRSxRQUFRLENBQUM7QUFBRSxRQUFJLElBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUUsUUFBSSxPQUFLLEdBQUcsT0FBTyxDQUFDO0FBQUUsV0FBSyxLQUFLLFFBQVEsSUFBSTtBQUFFLFdBQUssS0FBSyxRQUFRLElBQUk7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsSUFBSTtBQUFFLFNBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxTQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsUUFBSSxLQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFBRSxTQUFHLEdBQUcsUUFBUSxFQUFFO0FBQUUsU0FBRyxHQUFHLFFBQVEsRUFBRTtBQUFFLFNBQUcsR0FBRyxRQUFRLEVBQUU7QUFBRSxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUU7QUFBRSxXQUFPLEtBQUssTUFBTSxPQUFPLElBQUcsSUFBRyxFQUFFO0FBQUEsRUFBQztBQUFFLFNBQU8sVUFBVSxNQUFJLGNBQWEsR0FBRSxPQUFNO0FBQUMsUUFBRSxJQUFJLEdBQUcsR0FBRSxLQUFLO0FBQUUsV0FBTyxLQUFLLE1BQU0sU0FBUyxNQUFLLENBQUM7QUFBQSxFQUFDO0FBQUUsU0FBTyxVQUFVLEtBQUcsYUFBWSxHQUFFO0FBQUMsUUFBRyxFQUFFLFNBQU87QUFBUyxhQUFPLEtBQUssR0FBRyxFQUFFLElBQUksQ0FBQztBQUFFLFFBQUcsU0FBTztBQUFFLGFBQU87QUFBSyxRQUFJLEtBQUcsS0FBSyxFQUFFLE9BQU87QUFBRSxRQUFJLE1BQUksRUFBRSxFQUFFLE9BQU87QUFBRSxRQUFHLEtBQUssRUFBRSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFJO0FBQUUsYUFBTztBQUFNLFFBQUksS0FBRyxHQUFHLE9BQU8sS0FBSyxDQUFDO0FBQUUsUUFBSSxN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QUFJLElBQUUsSUFBSTtBQUFTLFFBQUcsTUFBSyxFQUFFLGFBQVcsSUFBRztBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUMsUUFBSSxNQUFJLFVBQVUsT0FBSyxDQUFDO0FBQUUsUUFBRyxRQUFNLE9BQU07QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUcsTUFBSSxFQUFFLFVBQVEsTUFBSyxRQUFPO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxRQUFHLE1BQUssRUFBRSxhQUFXLEdBQUU7QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUksT0FBSyxVQUFVLE9BQUssQ0FBQztBQUFFLFFBQUcsU0FBTyxPQUFNO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxRQUFJLEtBQUUsTUFBSyxNQUFNLEVBQUUsT0FBTSxPQUFLLEVBQUUsS0FBSztBQUFFLE1BQUUsU0FBTztBQUFLLFFBQUcsTUFBSyxFQUFFLGFBQVcsR0FBRTtBQUFDLGFBQU87QUFBQSxJQUFLO0FBQUMsUUFBSSxPQUFLLFVBQVUsT0FBSyxDQUFDO0FBQUUsUUFBRyxTQUFPLE9BQU07QUFBQyxhQUFPO0FBQUEsSUFBSztBQUFDLFFBQUcsTUFBSyxXQUFTLE9BQUssRUFBRSxPQUFNO0FBQUMsYUFBTztBQUFBLElBQUs7QUFBQyxRQUFJLEtBQUUsTUFBSyxNQUFNLEVBQUUsT0FBTSxPQUFLLEVBQUUsS0FBSztBQUFFLFFBQUcsR0FBRSxPQUFLLEdBQUU7QUFBQyxVQUFHLEdBQUUsS0FBRyxLQUFJO0FBQUMsYUFBRSxHQUFFLE1BQU0sQ0FBQztBQUFBLE1BQUMsT0FBSztBQUFDLGVBQU87QUFBQSxNQUFLO0FBQUEsSUFBQztBQUFDLFFBQUcsR0FBRSxPQUFLLEdBQUU7QUFBQyxVQUFHLEdBQUUsS0FBRyxLQUFJO0FBQUMsYUFBRSxHQUFFLE1BQU0sQ0FBQztBQUFBLE1BQUMsT0FBSztBQUFDLGVBQU87QUFBQSxNQUFLO0FBQUEsSUFBQztBQUFDLFNBQUssSUFBRSxJQUFJLEdBQUcsRUFBQztBQUFFLFNBQUssSUFBRSxJQUFJLEdBQUcsRUFBQztB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USxXQUFTLEtBQUssS0FBSyxLQUFLLFlBQVksR0FBRSxZQUFXLFFBQVEsV0FBUyxRQUFRLGNBQVksUUFBTyxPQUFNLEtBQUssRUFBRSxRQUFRLEVBQUMsQ0FBQztBQUFFLFFBQUksUUFBTSxLQUFLLEVBQUUsV0FBVztBQUFFLFFBQUksTUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQUUsZUFBTztBQUFDLFVBQUksT0FBSyxJQUFJLEdBQUcsS0FBSyxTQUFTLEtBQUssQ0FBQztBQUFFLFVBQUcsS0FBSyxJQUFJLEdBQUcsSUFBRTtBQUFFO0FBQVMsV0FBSyxNQUFNLENBQUM7QUFBRSxhQUFPLEtBQUssZUFBZSxJQUFJO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBRSxLQUFHLFVBQVUsZUFBYSxzQkFBc0IsS0FBSSxXQUFVO0FBQUMsUUFBSSxRQUFNLElBQUksV0FBVyxJQUFFLElBQUUsS0FBSyxFQUFFLFVBQVU7QUFBRSxRQUFHLFFBQU07QUFBRSxZQUFJLElBQUksTUFBTSxLQUFLO0FBQUUsUUFBRyxDQUFDLGFBQVcsSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFHO0FBQUUsYUFBTyxJQUFJLElBQUksS0FBSyxDQUFDO0FBQUE7QUFBTyxhQUFPO0FBQUEsRUFBRztBQUFFLEtBQUcsVUFBVSxPQUFLLGVBQWMsS0FBSSxNQUFJLEtBQUksU0FBUTtBQUFDLFFBQUcsT0FBTyxRQUFNLFVBQVM7QUFBQyxnQkFBUTtBQUFJLFlBQUk7QUFBQSxJQUFJO0FBQUMsUUFBRyxDQUFDO0FBQVEsZ0JBQVEsQ0FBQztBQUFFLFdBQUksS0FBSyxlQUFlLE1BQUksR0FBRztBQUFFLFVBQUksS0FBSyxhQUFhLElBQUksR0FBRyxLQUFJLEVBQUUsQ0FBQztBQUFFLFFBQUksUUFBTSxLQUFLLEVBQUUsV0FBVztBQUFFLFFBQUksT0FBSyxLQUFJLFdBQVcsRUFBRSxRQUFRLE1BQUssS0FBSztBQUFFLFFBQUksUUFBTSxJQUFJLFFBQVEsTUFBSyxLQUFLO0FBQUUsUUFBSSxPQUFLLElBQUksU0FBUyxFQUFDLE1BQUssS0FBSyxNQUFLLFNBQVEsTUFBSyxPQUFZLE1BQUssUUFBUSxNQUFLLFNBQVEsUUFBUSxXQUFTLE9BQU0sQ0FBQztBQUFFLFFBQUksTUFBSSxLQUFLLEVBQUUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQUUsYUFBUSxPQUFLLEtBQUcsUUFBTztBQUFDLFVBQUksSUFBRSxRQUFRLElBQUUsUUFBUSxFQUFFLElBQUksSUFBRSxJQUFJLEdBQUcsS0FBSyxTQUFTLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztBQUFFLFVBQUUsS0FBSyxhQUFhLEdBQUUsSUFBSTtBQUFFLFVBQUcsRUFBRSxLQUFLLENBQUMsS0FBRyxLQUFHLEVBQUUsSUFBSSxHQUFHLEtBQUc7QUFBRTtBQUFTLFVBQUksS0FBRyxLQUFLLEVBQUUsSUFBSSxDQUFDO0FBQUUsVUFBRyxHQUFHLFdBQVc7QUFBRTtBQUFTLFVBQUksTUFBSSxHQUFHLEtBQUs7QUFBRSxVQUFJLEtBQUUsSUFBSSxLQUFLLEtBQUssQ0FBQztBQUFFLFVBQUcsR0FBRSxLQUFLLENBQUMsTUFBSTtBQUFFO0FBQVMsVUFBSSxLQUFFLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxJQUFJLEdBQUUsSUFBSSxLQUFJLFdBQVcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDO0FBQUUsV0FBRSxHQUFFLEtBQUssS0FBSyxDQUFDO0FBQUUsVUFBRyxHQUFFLEtBQUssQ0FBQyxNQUFJO0FBQUU7QUFBUyxVQUFJLGdCQUFlLElBQUcsS0FBSyxFQUFFLE1BQU0sSUFBRSxJQUFFLEtBQUksS0FBSSxJQUFJLEVBQUMsTUFBSSxJQUFFLElBQUU7QUFBRyxVQUFHLFFBQVEsYUFBVyxHQUFFLElBQUksS0FBSyxFQUFFLElBQUUsR0FBRTtBQUFDLGFBQUUsS0FBSyxFQUFFLElBQUksRUFBQztBQUFFLHlCQUFlO0FBQUEsTUFBQztBQUFDLGFBQU8sSUFBSSxVQUFVLEVBQUMsR0FBRSxJQUFFLEdBQUUsSUFBRSxjQUEyQixDQUFDO0FBQUEsSUFBQztBQUFBLEVBQUM7QUFBRSxL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QUFDLGlCQUFXLENBQUM7QUFBRSxVQUFNLFlBQVUsQ0FBQztBQUFFLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRztBQUFNLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRztBQUFNLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRyxhQUFhLENBQUMsS0FBSSxLQUFJLEdBQUcsQ0FBQztBQUFFLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRyxhQUFhLENBQUMsS0FBSSxLQUFJLEdBQUcsQ0FBQztBQUFFLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRyxhQUFhLENBQUMsS0FBSSxLQUFJLEdBQUcsQ0FBQztBQUFFLGNBQVUsYUFBYSxDQUFDLEtBQUksS0FBSSxHQUFHLENBQUMsS0FBRyxhQUFhLENBQUMsS0FBSSxLQUFJLEdBQUcsQ0FBQztBQUFFLHVCQUFtQixNQUFLO0FBQUMsVUFBSSxTQUFPO0FBQUcsZUFBUSxJQUFFLEdBQUUsSUFBRSxLQUFLLFFBQU8sS0FBSTtBQUFDLFlBQUksT0FBSyxLQUFLO0FBQUcsY0FBTSxTQUFPLFVBQVU7QUFBTSxZQUFHLFdBQVMsT0FBTTtBQUFDO0FBQUEsUUFBUTtBQUFDLFlBQUcsUUFBTztBQUFDLGlCQUFLO0FBQUEsUUFBTTtBQUFDLGtCQUFRO0FBQUEsTUFBSTtBQUFDLGFBQU87QUFBQSxJQUFNO0FBQUMsMEJBQXNCLEdBQUUsR0FBRTtBQUFDLFVBQUUsVUFBVSxDQUFDO0FBQUUsVUFBRSxVQUFVLENBQUM7QUFBRSxVQUFHLElBQUUsR0FBRTtBQUFDLGVBQU07QUFBQSxNQUFFO0FBQUMsVUFBRyxJQUFFLEdBQUU7QUFBQyxlQUFPO0FBQUEsTUFBQztBQUFDLGFBQU87QUFBQSxJQUFDO0FBQUMsYUFBUSxTQUFPLEdBQUUsVUFBUSxHQUFFLFVBQVM7QUFBQyxZQUFNLElBQUUsS0FBSyxTQUFPO0FBQUcsZUFBUSxTQUFPLEdBQUUsU0FBTyxFQUFF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O0FBQUUsbUJBQVEsSUFBRSxHQUFFLElBQUUsTUFBTSxRQUFPLEtBQUk7QUFBQyxnQkFBSSxJQUFFLE1BQU07QUFBRyxtQkFBTyxLQUFLLElBQUssS0FBRSxRQUFNLEtBQUcsSUFBSSxJQUFFLEdBQUc7QUFBQSxVQUFDO0FBQUMsaUJBQU8sT0FBTyxLQUFLLEVBQUU7QUFBQSxRQUFDO0FBQUMsZUFBTSxFQUFDLFNBQWdCLFVBQW1CO0FBQUEsTUFBQyxFQUFFO0FBQUUsVUFBSSxpQkFBZSxFQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFO0FBQUUsVUFBSSxPQUFLLENBQUMsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEdBQUc7QUFBRSxVQUFJLElBQUUsQ0FBQyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxHQUFFLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxHQUFFLEtBQUksSUFBRyxLQUFJLElBQUcsS0FBSSxHQUFFLEtBQUksR0FBRSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEdBQUUsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxJQUFHLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxHQUFFLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxHQUFFLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxFQUFFO0FBQUUsVUFBSSxLQUFHLENBQUMsSUFBRyxHQUFFLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsR0FBRSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEdBQUUsS0FBSSxLQUFJLElBQUcsR0FBRSxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLEdBQUUsS0FBSSxLQUFJLEtBQUksR0FBRSxHQUFFLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLEtBQUksSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLEtBQUksSUFBRyxLQUFJLEdBQUUsS0FBSSxJQUFHLEtBQUksSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksSUFBRyxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksSUFBRyxLQUFJLElBQUcsSUFBRyxJQUFHLEdBQUUsS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsR0FBRztBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsR0FBRSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFNBQVM7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLEdBQUUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFVBQVMsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxTQUFTO0FBQUUsVUFBSSxLQUFHLENBQUMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxHQUFFLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsU0FBUztBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFVBQVMsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFVBQVMsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsR0FBRSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFNBQVM7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxHQUFFLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsR0FBRSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBVTtBQUFFLFVBQUksS0FBRyxDQUFDLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLEdBQUUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBRSxVQUFJLEtBQUcsQ0FBQyxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsVUFBUyxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxVQUFTLFlBQVcsVUFBUyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxVQUFTLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxHQUFFLFlBQVcsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFlBQVcsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxZQUFXLFdBQVUsWUFBVyxZQUFXLFdBQVUsWUFBVyxXQUFVLFlBQVcsWUFBVyxZQUFXLFdBQVUsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsR0FBRSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBVTtBQUFFLFVBQUksS0FBRyxDQUFDLEdBQUUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsVUFBUyxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVU7QUFBRSxVQUFJLEtBQUcsQ0FBQyxHQUFFLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsVUFBUyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFVBQVMsV0FBVSxXQUFVLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxVQUFVO0FBQUUsVUFBSSxLQUFHLENBQUMsR0FBRSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsV0FBVSxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsVUFBUyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVMsV0FBVSxXQUFVLFdBQVUsV0FBVSxVQUFTLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlB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QUcsSUFBRTtBQUFBLFlBQUU7QUFBQSxVQUFDLE9BQUs7QUFBQyxxQkFBUSxJQUFFLEdBQUUsSUFBRSxLQUFHLEdBQUUsS0FBSTtBQUFDLGlCQUFHLE1BQUksR0FBRyxJQUFFO0FBQUEsWUFBRTtBQUFDLGlCQUFHLEdBQUcsS0FBRyxJQUFFO0FBQUcsZUFBRyxLQUFHLE1BQUksRUFBRSxLQUFHLE9BQUssRUFBRSxNQUFJLElBQUUsUUFBTSxJQUFFLEVBQUUsTUFBSSxLQUFHLFFBQU0sS0FBRyxFQUFFLE1BQUksS0FBRyxRQUFNO0FBQUcscUJBQVEsSUFBRSxLQUFHLElBQUUsR0FBRSxJQUFFLElBQUcsS0FBSTtBQUFDLGlCQUFHLE1BQUksR0FBRyxJQUFFO0FBQUEsWUFBRTtBQUFBLFVBQUM7QUFBQyxjQUFJLElBQUUsR0FBRSxJQUFFO0FBQUUsaUJBQU0sSUFBRSxNQUFJLElBQUUsZUFBYztBQUFDLGlCQUFFLEtBQUc7QUFBRSxnQkFBRSxJQUFFO0FBQUUsaUJBQUssSUFBSSxJQUFHLEtBQUcsR0FBRztBQUFHLGlCQUFLLElBQUksU0FBTyxJQUFHLEtBQUcsR0FBRztBQUFLO0FBQUEsVUFBRztBQUFBLFFBQUM7QUFBQyxpQkFBUSxLQUFFLEdBQUUsS0FBRSxRQUFPLE1BQUk7QUFBQyxtQkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxpQkFBRyxLQUFLLElBQUksSUFBRztBQUFHLGlCQUFLLElBQUksSUFBRyxLQUFHLEdBQUcsTUFBSSxLQUFHLE9BQUssR0FBRyxNQUFJLEtBQUcsT0FBSyxHQUFHLE1BQUksSUFBRSxPQUFLLEdBQUcsS0FBRztBQUFBLFVBQUk7QUFBQSxRQUFDO0FBQUEsTUFBQztBQUFFLFVBQUksVUFBVSxVQUFRLFNBQVMsV0FBVTtBQUFDLFlBQUcsVUFBVSxVQUFRLElBQUc7QUFBQyxnQkFBTSxJQUFJLE1BQU0sMkNBQTJDO0FBQUEsUUFBQztBQUFDLFlBQUksU0FBTyxLQUFLLElBQUksU0FBTztBQUFFLFlBQUksSUFBRSxDQUFDLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxZQUFJLElBQUUsZUFBZSxTQUFTO0FBQUUsaUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsWUFBRSxNQUFJLEtBQUssSUFBSSxHQUFHO0FBQUEsUUFBRTtBQUFDLGlCQUFRLEtBQUUsR0FBRSxLQUFFLFFBQU8sTUFBSTtBQUFDLG1CQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLGNBQUUsS0FBRyxHQUFHLEVBQUUsTUFBSSxLQUFHLE9BQUssR0FBRyxFQUFHLEtBQUUsS0FBRyxNQUFJLEtBQUcsT0FBSyxHQUFHLEVBQUcsS0FBRSxLQUFHLE1BQUksSUFBRSxPQUFLLEdBQUcsRUFBRyxLQUFFLEtBQUcsS0FBRyxPQUFLLEtBQUssSUFBSSxJQUFHO0FBQUEsVUFBRTtBQUFDLGNBQUUsRUFBRSxNQUFNO0FBQUEsUUFBQztBQUFDLFlBQUksU0FBTyxZQUFZLEVBQUUsR0FBRTtBQUFHLGlCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLGVBQUcsS0FBSyxJQUFJLFFBQVE7QUFBRyxpQkFBTyxJQUFFLEtBQUksR0FBRSxFQUFFLE1BQUksS0FBRyxPQUFLLE1BQUksTUFBSTtBQUFJLGlCQUFPLElBQUUsSUFBRSxLQUFJLEdBQUUsRUFBRyxLQUFFLEtBQUcsTUFBSSxLQUFHLE9BQUssTUFBSSxNQUFJO0FBQUksaUJBQU8sSUFBRSxJQUFFLEtBQUksR0FBRSxFQUFHLEtBQUUsS0FBRyxNQUFJLElBQUUsT0FBSyxNQUFJLEtBQUc7QUFBSSxpQkFBTyxJQUFFLElBQUUsS0FBSSxHQUFFLEVBQUcsS0FBRSxLQUFHLEtBQUcsT0FBSyxNQUFJO0FBQUEsUUFBRztBQUFDLGVBQU87QUFBQSxNQUFNO0FBQUUsVUFBSSxVQUFVLFVBQVEsU0FBUyxZQUFXO0FBQUMsWUFBRyxXQUFXLFVBQVEsSUFBRztBQUFDLGdCQUFNLElBQUksTUFBTSw0Q0FBNEM7QUFBQSxRQUFDO0FBQUMsWUFBSSxTQUFPLEtBQUssSUFBSSxTQUFPO0FBQUUsWUFBSSxJQUFFLENBQUMsR0FBRSxHQUFF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LFdBQVUsV0FBVSxXQUFVLFdBQVUsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxXQUFVLFdBQVUsV0FBVSxXQUFVLFdBQVUsV0FBVSxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFlBQVcsWUFBVyxZQUFXLFVBQVUsQ0FBQztBQUFFLFlBQUksS0FBRyxZQUFXLEtBQUcsWUFBVyxLQUFHLFlBQVcsS0FBRztBQUFXLFlBQUksS0FBRyxZQUFXLEtBQUcsWUFBVyxLQUFHLFdBQVUsS0FBRztBQUFXLGNBQU0sSUFBRSxJQUFJLFlBQVksRUFBRTtBQUFFLHdCQUFnQixJQUFFO0FBQUMsY0FBSSxNQUFJLEdBQUUsTUFBSSxHQUFFO0FBQU8saUJBQU0sT0FBSyxJQUFHO0FBQUMsZ0JBQUksSUFBRSxJQUFHLElBQUUsSUFBRyxJQUFFLElBQUcsSUFBRSxJQUFHLElBQUUsSUFBRyxLQUFFLElBQUcsSUFBRSxJQUFHLElBQUUsSUFBRyxHQUFFLElBQUUsR0FBRSxJQUFHO0FBQUcsaUJBQUksS0FBRSxHQUFFLEtBQUUsSUFBRyxNQUFJO0FBQUMsa0JBQUUsTUFBSSxLQUFFO0FBQUUsZ0JBQUUsTUFBSSxJQUFFLEtBQUcsUUFBTSxLQUFJLElBQUUsSUFBRSxLQUFHLFFBQU0sS0FBSSxJQUFFLElBQUUsS0FBRyxRQUFNLElBQUUsR0FBRSxJQUFFLEtBQUc7QUFBQSxZQUFHO0FBQUMsaUJBQUksS0FBRSxJQUFHLEtBQUUsSUFBRyxNQUFJO0FBQUMsa0JBQUUsRUFBRSxLQUFFO0FBQUcsbUJBQUksT0FBSSxLQUFHLEtBQUcsS0FBRyxNQUFLLE9BQUksS0FBRyxLQUFHLEtBQUcsTUFBSSxNQUFJO0FBQUcsa0JBQUUsRUFBRSxLQUFFO0FBQUksbUJBQUksT0FBSSxJQUFFLEtBQUcsS0FBRyxLQUFJLE9BQUksS0FBRyxLQUFHLEtBQUcsTUFBSSxNQUFJO0FBQUUsZ0JBQUUsTUFBSSxNQUFHLEVBQUUsS0FBRSxLQUFHLEtBQUksTUFBRyxFQUFFLEtBQUUsTUFBSSxLQUFHO0FBQUEsWUFBQztBQUFDLGlCQUFJLEtBQUUsR0FBRSxLQUFFLElBQUcsTUFBSTtBQUFDLG1CQUFNLFNBQUksSUFBRSxLQUFHLEtBQUcsS0FBSSxPQUFJLEtBQUcsS0FBRyxLQUFHLE1BQUssT0FBSSxLQUFHLEtBQUcsS0FBRyxPQUFNLEtBQUUsS0FBRSxDQUFDLElBQUUsS0FBRyxLQUFJLEtBQUcsSUFBRSxNQUFHLEVBQUUsTUFBRyxLQUFHLEtBQUc7QUFBRSxtQkFBSyxRQUFJLElBQUUsS0FBRyxLQUFHLEtBQUksT0FBSSxLQUFHLEtBQUcsS0FBRyxNQUFLLE9BQUksS0FBRyxLQUFHLEtBQUcsT0FBTSxLQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsS0FBRztBQUFFLGtCQUFFO0FBQUUsa0JBQUU7QUFBRSxtQkFBRTtBQUFFLGtCQUFFLElBQUUsS0FBRztBQUFFLGtCQUFFO0FBQUUsa0JBQUU7QUFBRSxrQkFBRTtBQUFFLGtCQUFFLEtBQUcsS0FBRztBQUFBLFlBQUM7QUFBQyxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLEtBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxpQkFBRyxLQUFHLElBQUU7QUFBRSxtQkFBSztBQUFHLG1CQUFLO0FBQUEsVUFBRTtBQUFBLFFBQUM7QUFBQyxlQUFPLENBQUM7QUFBRSxZQUFJLEdBQUUsWUFBVSxFQUFFLFNBQU8sSUFBRyxXQUFTLEVBQUUsU0FBTyxZQUFVLEdBQUUsV0FBUyxFQUFFLFVBQVEsR0FBRSxXQUFTLFlBQVUsS0FBRyxLQUFHLEtBQUksSUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFPLFdBQVUsRUFBRSxNQUFNO0FBQUUsVUFBRSxLQUFLLEdBQUc7QUFBRSxhQUFJLElBQUUsWUFBVSxHQUFFLElBQUUsVUFBUyxLQUFJO0FBQUMsWUFBRSxLQUFLLENBQUM7QUFBQSxRQUFDO0FBQUMsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsS0FBRyxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsVUFBRSxLQUFLLGFBQVcsSUFBRSxHQUFHO0FBQUUsZUFBTyxDQUFDO0FBQUUsZUFBTSxDQUFDLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssS0FBRyxLQUFJLE9BQUssSUFBRSxLQUFJLE9BQUssSUFBRSxHQUFHO0FBQUEsTUFBQztBQUFDLDBDQUFvQyxVQUFTLE1BQUssT0FBTTtBQUFDLG1CQUFTLFNBQVMsVUFBUSxLQUFHLFdBQVMsUUFBTyxRQUFRO0FBQUUsY0FBTSxXQUFTLEtBQUcsS0FBSyxTQUFPO0FBQUUsY0FBTSxRQUFNLElBQUksTUFBTSxRQUFRO0FBQUUsY0FBTSxXQUFTLElBQUksTUFBTSxFQUFFO0FBQUUsWUFBSTtBQUFFLFlBQUksS0FBRyxDQUFDO0FBQUUsYUFBSSxJQUFFLEdBQUUsSUFBRSxJQUFHLEtBQUk7QUFBQyxnQkFBTSxLQUFHO0FBQUEsUUFBRTtBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsU0FBUyxRQUFPLEtBQUk7QUFBQyxnQkFBTSxNQUFJLFNBQVM7QUFBQSxRQUFFO0FBQUMsYUFBSSxJQUFFLEdBQUUsSUFBRSxLQUFLLFFBQU8sS0FBSTtBQUFDLGdCQUFNLEtBQUcsS0FBRyxLQUFLO0FBQUEsUUFBRTtBQUFDLGFBQUksSUFBRSxXQUFTLEdBQUUsSUFBRSxVQUFTLEtBQUk7QUFBQyxnQkFBTSxLQUFHO0FBQUEsUUFBQztBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsSUFBRztBQUFJLG1CQUFTLEtBQUc7QUFBRyxhQUFJLElBQUUsR0FBRSxJQUFFLFNBQVMsUUFBTztBQUFJLG1CQUFTLE1BQUksU0FBUztBQUFHLG9DQUEyQjtBQUFDLG1CQUFRLEtBQUUsV0FBUyxHQUFFLE1BQUcsV0FBUyxHQUFFLE1BQUk7QUFBQyxrQkFBTTtBQUFLLGdCQUFHLE1BQU0sT0FBSTtBQUFJO0FBQU8sa0JBQU0sTUFBRztBQUFBLFVBQUM7QUFBQSxRQUFDO0FBQUMsZUFBTSxTQUFPLElBQUc7QUFBQywyQkFBaUI7QUFBRSxlQUFHLEdBQUcsT0FBTyxRQUFPLFNBQVMsT0FBTyxRQUFPLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFBRSxtQkFBTztBQUFBLFFBQUU7QUFBQyxZQUFHLFFBQU0sR0FBRTtBQUFDLDJCQUFpQjtBQUFFLGVBQUcsR0FBRyxPQUFPLFFBQU8sU0FBUyxPQUFPLFFBQU8sS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUUsS0FBSyxDQUFDO0FBQUEsUUFBQztBQUFDLGVBQU87QUFBQSxNQUFFO0FBQUMsK0JBQXlCLElBQUcsSUFBRyxJQUFFLEdBQUUsSUFBRztBQUFDLFlBQUk7QUFBRSxrQkFBVSxJQUFJLEtBQUUsS0FBRSxLQUFHLElBQUcsSUFBRyxHQUFFLEVBQUU7QUFBRSxhQUFJLElBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxLQUFJO0FBQUMsbUJBQVMsSUFBRyxJQUFFLElBQUcsSUFBRyxFQUFFO0FBQUUsb0JBQVUsSUFBRyxDQUFDO0FBQUUsb0JBQVUsSUFBRyxHQUFFLElBQUcsS0FBRyxJQUFFLElBQUcsRUFBRTtBQUFBLFFBQUM7QUFBQyxhQUFJLElBQUUsR0FBRSxJQUFFLElBQUUsS0FBSTtBQUFDLG9CQUFVLElBQUcsS0FBRyxJQUFFLElBQUUsSUFBRyxJQUFHLElBQUUsSUFBRyxFQUFFO0FBQUEsUUFBQztBQUFDLGFBQUksSUFBRSxHQUFFLElBQUUsSUFBRSxLQUFJO0FBQUMsb0JBQVUsSUFBRyxLQUFJLEtBQUUsSUFBRSxLQUFHLElBQUcsSUFBSSxLQUFFLE1BQUcsSUFBRyxFQUFFO0FBQUEsUUFBQztBQUFBLE1BQUM7QUFBQyxpQkFBVyxHQUFFLEdBQUU7QUFBQyxlQUFPLEtBQUcsSUFBRSxNQUFJLEtBQUc7QUFBQSxNQUFDO0FBQUMseUJBQW1CLEdBQUUsR0FBRTtBQUFDLGtCQUFVLEdBQUUsR0FBRSxHQUFFLEdBQUUsRUFBRTtBQUFFLGlCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBRyxHQUFFO0FBQUMsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxNQUFJLEVBQUUsSUFBRyxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxNQUFJLEVBQUUsS0FBSSxDQUFDO0FBQUUsWUFBRSxNQUFJLEVBQUUsRUFBRSxLQUFHLEVBQUUsS0FBSSxFQUFFO0FBQUUsWUFBRSxPQUFLLEVBQUUsRUFBRSxLQUFHLEVB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
